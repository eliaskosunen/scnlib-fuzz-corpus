_ZNK7simdutf14implementation25required_instruction_setsEv:
 1589|      2|  virtual uint32_t required_instruction_sets() const { return _required_instruction_sets; }
_ZN7simdutf14implementationC2ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_j:
 2693|      7|  {
 2694|      7|  }
_ZN7simdutf8internal29available_implementation_listC2Ev:
 2723|      1|  simdutf_really_inline available_implementation_list() {}
_ZN7simdutf14implementationD2Ev:
 2695|      5|  virtual ~implementation()=default;
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEaSEPS3_:
 2789|      1|  atomic_ptr& operator=(T *_ptr) { ptr = _ptr; return *this; }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEcvPS3_Ev:
 2786|      1|  operator T*() { return ptr.load(); }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEC2EPS3_:
 2769|      1|  atomic_ptr(T *_ptr) : ptr{_ptr} {}
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEptEv:
 2788|  99.1k|  T* operator->() { return ptr.load(); }

simdutf.cpp:_ZN7simdutf8internalL30detect_supported_architecturesEv:
  208|      1|static inline uint32_t detect_supported_architectures() {
  209|      1|  uint32_t eax;
  210|      1|  uint32_t ebx = 0;
  211|      1|  uint32_t ecx = 0;
  212|      1|  uint32_t edx = 0;
  213|      1|  uint32_t host_isa = 0x0;
  214|       |
  215|       |  // EBX for EAX=0x1
  216|      1|  eax = 0x1;
  217|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  218|       |
  219|      1|  if (ecx & cpuid_bit::sse42) {
  ------------------
  |  Branch (219:7): [True: 1, False: 0]
  ------------------
  220|      1|    host_isa |= instruction_set::SSE42;
  221|      1|  }
  222|       |
  223|      1|  if (ecx & cpuid_bit::pclmulqdq) {
  ------------------
  |  Branch (223:7): [True: 1, False: 0]
  ------------------
  224|      1|    host_isa |= instruction_set::PCLMULQDQ;
  225|      1|  }
  226|       |
  227|      1|  if ((ecx & cpuid_bit::osxsave) != cpuid_bit::osxsave) {
  ------------------
  |  Branch (227:7): [True: 0, False: 1]
  ------------------
  228|      0|    return host_isa;
  229|      0|  }
  230|       |
  231|       |  // xgetbv for checking if the OS saves registers
  232|      1|  uint64_t xcr0 = xgetbv();
  233|       |
  234|      1|  if ((xcr0 & cpuid_bit::xcr0_bit::avx256_saved) == 0) {
  ------------------
  |  Branch (234:7): [True: 0, False: 1]
  ------------------
  235|      0|    return host_isa;
  236|      0|  }
  237|       |  // ECX for EAX=0x7
  238|      1|  eax = 0x7;
  239|      1|  ecx = 0x0; // Sub-leaf = 0
  240|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  241|      1|  if (ebx & cpuid_bit::ebx::avx2) {
  ------------------
  |  Branch (241:7): [True: 1, False: 0]
  ------------------
  242|      1|    host_isa |= instruction_set::AVX2;
  243|      1|  }
  244|      1|  if (ebx & cpuid_bit::ebx::bmi1) {
  ------------------
  |  Branch (244:7): [True: 1, False: 0]
  ------------------
  245|      1|    host_isa |= instruction_set::BMI1;
  246|      1|  }
  247|      1|  if (ebx & cpuid_bit::ebx::bmi2) {
  ------------------
  |  Branch (247:7): [True: 1, False: 0]
  ------------------
  248|      1|    host_isa |= instruction_set::BMI2;
  249|      1|  }
  250|      1|  if (!((xcr0 & cpuid_bit::xcr0_bit::avx512_saved) == cpuid_bit::xcr0_bit::avx512_saved)) {
  ------------------
  |  Branch (250:7): [True: 1, False: 0]
  ------------------
  251|      1|    return host_isa;
  252|      1|  }
  253|      0|  if (ebx & cpuid_bit::ebx::avx512f) {
  ------------------
  |  Branch (253:7): [True: 0, False: 0]
  ------------------
  254|      0|    host_isa |= instruction_set::AVX512F;
  255|      0|  }
  256|      0|  if (ebx & cpuid_bit::ebx::avx512bw) {
  ------------------
  |  Branch (256:7): [True: 0, False: 0]
  ------------------
  257|      0|    host_isa |= instruction_set::AVX512BW;
  258|      0|  }
  259|      0|  if (ebx & cpuid_bit::ebx::avx512cd) {
  ------------------
  |  Branch (259:7): [True: 0, False: 0]
  ------------------
  260|      0|    host_isa |= instruction_set::AVX512CD;
  261|      0|  }
  262|      0|  if (ebx & cpuid_bit::ebx::avx512dq) {
  ------------------
  |  Branch (262:7): [True: 0, False: 0]
  ------------------
  263|      0|    host_isa |= instruction_set::AVX512DQ;
  264|      0|  }
  265|      0|  if (ebx & cpuid_bit::ebx::avx512vl) {
  ------------------
  |  Branch (265:7): [True: 0, False: 0]
  ------------------
  266|      0|    host_isa |= instruction_set::AVX512VL;
  267|      0|  }
  268|      0|  if (ecx & cpuid_bit::ecx::avx512vbmi2) {
  ------------------
  |  Branch (268:7): [True: 0, False: 0]
  ------------------
  269|      0|    host_isa |= instruction_set::AVX512VBMI2;
  270|      0|  }
  271|      0|  if (ecx & cpuid_bit::ecx::avx512vpopcnt) {
  ------------------
  |  Branch (271:7): [True: 0, False: 0]
  ------------------
  272|      0|    host_isa |= instruction_set::AVX512VPOPCNTDQ;
  273|      0|  }
  274|      0|  return host_isa;
  275|      1|}
simdutf.cpp:_ZN7simdutf8internalL5cpuidEPjS1_S1_S1_:
  177|      2|                         uint32_t *edx) {
  178|       |#if defined(_MSC_VER)
  179|       |  int cpu_info[4];
  180|       |  __cpuidex(cpu_info, *eax, *ecx);
  181|       |  *eax = cpu_info[0];
  182|       |  *ebx = cpu_info[1];
  183|       |  *ecx = cpu_info[2];
  184|       |  *edx = cpu_info[3];
  185|       |#elif defined(HAVE_GCC_GET_CPUID) && defined(USE_GCC_GET_CPUID)
  186|       |  uint32_t level = *eax;
  187|       |  __get_cpuid(level, eax, ebx, ecx, edx);
  188|       |#else
  189|      2|  uint32_t a = *eax, b, c = *ecx, d;
  190|      2|  asm volatile("cpuid\n\t" : "+a"(a), "=b"(b), "+c"(c), "=d"(d));
  191|      2|  *eax = a;
  192|      2|  *ebx = b;
  193|      2|  *ecx = c;
  194|      2|  *edx = d;
  195|      2|#endif
  196|      2|}
simdutf.cpp:_ZN7simdutf8internalL6xgetbvEv:
  198|      1|static inline uint64_t xgetbv() {
  199|       | #if defined(_MSC_VER)
  200|       |   return _xgetbv(0);
  201|       | #else
  202|      1|   uint32_t xcr0_lo, xcr0_hi;
  203|      1|   asm volatile("xgetbv\n\t" : "=a" (xcr0_lo), "=d" (xcr0_hi) : "c" (0));
  204|      1|   return xcr0_lo | ((uint64_t)xcr0_hi << 32);
  205|      1| #endif
  206|      1| }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EEC2EPKhm:
   62|  2.19k|simdutf_really_inline buf_block_reader<STEP_SIZE>::buf_block_reader(const uint8_t *_buf, size_t _len) : buf{_buf}, len{_len}, lenminusstep{len < STEP_SIZE ? 0 : len - STEP_SIZE}, idx{0} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE14has_full_blockEv:
   68|  7.42k|simdutf_really_inline bool buf_block_reader<STEP_SIZE>::has_full_block() const {
   69|  7.42k|  return idx < lenminusstep;
   70|  7.42k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE10full_blockEv:
   73|  5.22k|simdutf_really_inline const uint8_t *buf_block_reader<STEP_SIZE>::full_block() const {
   74|  5.22k|  return &buf[idx];
   75|  5.22k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE7advanceEv:
   86|  7.42k|simdutf_really_inline void buf_block_reader<STEP_SIZE>::advance() {
   87|  7.42k|  idx += STEP_SIZE;
   88|  7.42k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE13get_remainderEPh:
   78|  2.19k|simdutf_really_inline size_t buf_block_reader<STEP_SIZE>::get_remainder(uint8_t *dst) const {
   79|  2.19k|  if(len == idx) { return 0; } // memcpy(dst, null, 0) will trigger an error with some sanitizers
  ------------------
  |  Branch (79:6): [True: 0, False: 2.19k]
  ------------------
   80|  2.19k|  std::memset(dst, 0x20, STEP_SIZE); // std::memset STEP_SIZE because it's more efficient to write out 8 or 16 bytes at once.
   81|  2.19k|  std::memcpy(dst, buf + idx, len - idx);
   82|  2.19k|  return len - idx;
   83|  2.19k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14utf817count_code_pointsEPKcm:
   10|  1.67k|simdutf_really_inline size_t count_code_points(const char* in, size_t size) {
   11|  1.67k|    size_t pos = 0;
   12|  1.67k|    size_t count = 0;
   13|  5.93k|    for(;pos + 64 <= size; pos += 64) {
  ------------------
  |  Branch (13:10): [True: 4.26k, False: 1.67k]
  ------------------
   14|  4.26k|      simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
   15|  4.26k|      uint64_t utf8_continuation_mask = input.gt(-65);
   16|  4.26k|      count += count_ones(utf8_continuation_mask);
   17|  4.26k|    }
   18|  1.67k|    return count + scalar::utf8::count_code_points(in + pos, size - pos);
   19|  1.67k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoderC2Ev:
  115|  93.6k|    validating_transcoder() : error(uint8_t(0)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder7convertEPKcmPDi:
  129|  93.6k|    simdutf_really_inline size_t convert(const char* in, size_t size, char32_t* utf32_output) {
  130|  93.6k|      size_t pos = 0;
  131|  93.6k|      char32_t* start{utf32_output};
  132|       |      // In the worst case, we have the haswell kernel which can cause an overflow of
  133|       |      // 8 bytes when calling convert_masked_utf8_to_utf32. If you skip the last 16 bytes,
  134|       |      // and if the data is valid, then it is entirely safe because 16 UTF-8 bytes generate
  135|       |      // much more than 8 bytes. However, you cannot generally assume that you have valid
  136|       |      // UTF-8 input, so we are going to go back from the end counting 8 leading bytes,
  137|       |      // to give us a good margin.
  138|  93.6k|      size_t leading_byte = 0;
  139|  93.6k|      size_t margin = size;
  140|   208k|      for(; margin > 0 && leading_byte < 8; margin--) {
  ------------------
  |  Branch (140:13): [True: 115k, False: 93.6k]
  |  Branch (140:27): [True: 115k, False: 0]
  ------------------
  141|   115k|        leading_byte += (int8_t(in[margin-1]) > -65);
  142|   115k|      }
  143|       |      // If the input is long enough, then we have that margin-1 is the fourth last leading byte.
  144|  93.6k|      const size_t safety_margin = size - margin + 1; // to avoid overruns!
  145|  93.6k|      while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (145:13): [True: 0, False: 93.6k]
  ------------------
  146|      0|        simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
  147|      0|        if(input.is_ascii()) {
  ------------------
  |  Branch (147:12): [True: 0, False: 0]
  ------------------
  148|      0|          input.store_ascii_as_utf32(utf32_output);
  149|      0|          utf32_output += 64;
  150|      0|          pos += 64;
  151|      0|        } else {
  152|       |          // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  153|      0|          static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  154|      0|              "We support either two or four chunks per 64-byte block.");
  155|      0|          auto zero = simd8<uint8_t>{uint8_t(0)};
  156|      0|          if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (156:14): [Folded - Ignored]
  ------------------
  157|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  158|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  159|      0|          } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (159:21): [Folded - Ignored]
  ------------------
  160|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  161|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|      0|            this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  163|      0|            this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  164|      0|          }
  165|      0|          uint64_t utf8_continuation_mask = input.lt(-65 + 1);
  166|      0|          uint64_t utf8_leading_mask = ~utf8_continuation_mask;
  167|      0|          uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
  168|       |          // We process in blocks of up to 12 bytes except possibly
  169|       |          // for fast paths which may process up to 16 bytes. For the
  170|       |          // slow path to work, we should have at least 12 input bytes left.
  171|      0|          size_t max_starting_point = (pos + 64) - 12;
  172|       |          // Next loop is going to run at least five times.
  173|      0|          while(pos < max_starting_point) {
  ------------------
  |  Branch (173:17): [True: 0, False: 0]
  ------------------
  174|       |            // Performance note: our ability to compute 'consumed' and
  175|       |            // then shift and recompute is critical. If there is a
  176|       |            // latency of, say, 4 cycles on getting 'consumed', then
  177|       |            // the inner loop might have a total latency of about 6 cycles.
  178|       |            // Yet we process between 6 to 12 inputs bytes, thus we get
  179|       |            // a speed limit between 1 cycle/byte and 0.5 cycle/byte
  180|       |            // for this section of the code. Hence, there is a limit
  181|       |            // to how much we can further increase this latency before
  182|       |            // it seriously harms performance.
  183|      0|            size_t consumed = convert_masked_utf8_to_utf32(in + pos,
  184|      0|                            utf8_end_of_code_point_mask, utf32_output);
  185|      0|            pos += consumed;
  186|      0|            utf8_end_of_code_point_mask >>= consumed;
  187|      0|          }
  188|       |          // At this point there may remain between 0 and 12 bytes in the
  189|       |          // 64-byte block. These bytes will be processed again. So we have an
  190|       |          // 80% efficiency (in the worst case). In practice we expect an
  191|       |          // 85% to 90% efficiency.
  192|      0|        }
  193|      0|      }
  194|  93.6k|      if(errors()) { return 0; }
  ------------------
  |  Branch (194:10): [True: 0, False: 93.6k]
  ------------------
  195|  93.6k|      if(pos < size) {
  ------------------
  |  Branch (195:10): [True: 93.6k, False: 0]
  ------------------
  196|  93.6k|        size_t howmany  = scalar::utf8_to_utf32::convert(in + pos, size - pos, utf32_output);
  197|  93.6k|        if(howmany == 0) { return 0; }
  ------------------
  |  Branch (197:12): [True: 4.58k, False: 89.0k]
  ------------------
  198|  89.0k|        utf32_output += howmany;
  199|  89.0k|      }
  200|  89.0k|      return utf32_output - start;
  201|  93.6k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder6errorsEv:
  290|  93.6k|    simdutf_really_inline bool errors() const {
  291|  93.6k|      return this->error.any_bits_set_anywhere();
  292|  93.6k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
   12|  1.67k|    char32_t* utf32_output) noexcept {
   13|  1.67k|  size_t pos = 0;
   14|  1.67k|  char32_t* start{utf32_output};
   15|  1.67k|  const size_t safety_margin = 16; // to avoid overruns!
   16|  5.87k|  while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (16:9): [True: 4.19k, False: 1.67k]
  ------------------
   17|  4.19k|    simd8x64<int8_t> in(reinterpret_cast<const int8_t *>(input + pos));
   18|  4.19k|    if(in.is_ascii()) {
  ------------------
  |  Branch (18:8): [True: 3.21k, False: 979]
  ------------------
   19|  3.21k|      in.store_ascii_as_utf32(utf32_output);
   20|  3.21k|      utf32_output += 64;
   21|  3.21k|      pos += 64;
   22|  3.21k|    } else {
   23|       |    // -65 is 0b10111111 in two-complement's, so largest possible continuation byte
   24|    979|    uint64_t utf8_continuation_mask = in.lt(-65 + 1);
   25|    979|    uint64_t utf8_leading_mask = ~utf8_continuation_mask;
   26|    979|    uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
   27|    979|    size_t max_starting_point = (pos + 64) - 12;
   28|  7.19k|    while(pos < max_starting_point) {
  ------------------
  |  Branch (28:11): [True: 6.21k, False: 979]
  ------------------
   29|  6.21k|      size_t consumed = convert_masked_utf8_to_utf32(input + pos,
   30|  6.21k|                          utf8_end_of_code_point_mask, utf32_output);
   31|  6.21k|      pos += consumed;
   32|  6.21k|      utf8_end_of_code_point_mask >>= consumed;
   33|  6.21k|      }
   34|    979|    }
   35|  4.19k|  }
   36|  1.67k|  utf32_output += scalar::utf8_to_utf32::convert_valid(input + pos, size - pos, utf32_output);
   37|  1.67k|  return utf32_output - start;
   38|  1.67k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_next_inputERKNS1_4simd8simd8x64IhEE:
  152|  7.42k|    simdutf_really_inline void check_next_input(const simd8x64<uint8_t>& input) {
  153|  7.42k|      if(simdutf_likely(is_ascii(input))) {
  ------------------
  |  |   70|  7.42k|  #define simdutf_likely(x) __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (70:29): [True: 5.68k, False: 1.74k]
  |  |  ------------------
  ------------------
  154|  5.68k|        this->error |= this->prev_incomplete;
  155|  5.68k|      } else {
  156|       |        // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  157|  1.74k|        static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  158|  1.74k|            "We support either two or four chunks per 64-byte block.");
  159|  1.74k|        if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (159:12): [Folded - Ignored]
  ------------------
  160|  1.74k|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  161|  1.74k|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|  1.74k|        } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (162:19): [Folded - Ignored]
  ------------------
  163|      0|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  164|      0|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  165|      0|          this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  166|      0|          this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  167|      0|        }
  168|  1.74k|        this->prev_incomplete = is_incomplete(input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1]);
  169|  1.74k|        this->prev_input_block = input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1];
  170|       |
  171|  1.74k|      }
  172|  7.42k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_utf8_bytesENS1_4simd5simd8IhEES6_:
  135|  3.48k|    simdutf_really_inline void check_utf8_bytes(const simd8<uint8_t> input, const simd8<uint8_t> prev_input) {
  136|       |      // Flip prev1...prev3 so we can easily determine if they are 2+, 3+ or 4+ lead bytes
  137|       |      // (2, 3, 4-byte leads become large positive numbers instead of small negative numbers)
  138|  3.48k|      simd8<uint8_t> prev1 = input.prev<1>(prev_input);
  139|  3.48k|      simd8<uint8_t> sc = check_special_cases(input, prev1);
  140|  3.48k|      this->error |= check_multibyte_lengths(input, prev_input, sc);
  141|  3.48k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation19check_special_casesENS1_4simd5simd8IhEES5_:
    8|  3.48k|  simdutf_really_inline simd8<uint8_t> check_special_cases(const simd8<uint8_t> input, const simd8<uint8_t> prev1) {
    9|       |// Bit 0 = Too Short (lead byte/ASCII followed by lead byte/ASCII)
   10|       |// Bit 1 = Too Long (ASCII followed by continuation)
   11|       |// Bit 2 = Overlong 3-byte
   12|       |// Bit 4 = Surrogate
   13|       |// Bit 5 = Overlong 2-byte
   14|       |// Bit 7 = Two Continuations
   15|  3.48k|    constexpr const uint8_t TOO_SHORT   = 1<<0; // 11______ 0_______
   16|       |                                                // 11______ 11______
   17|  3.48k|    constexpr const uint8_t TOO_LONG    = 1<<1; // 0_______ 10______
   18|  3.48k|    constexpr const uint8_t OVERLONG_3  = 1<<2; // 11100000 100_____
   19|  3.48k|    constexpr const uint8_t SURROGATE   = 1<<4; // 11101101 101_____
   20|  3.48k|    constexpr const uint8_t OVERLONG_2  = 1<<5; // 1100000_ 10______
   21|  3.48k|    constexpr const uint8_t TWO_CONTS   = 1<<7; // 10______ 10______
   22|  3.48k|    constexpr const uint8_t TOO_LARGE   = 1<<3; // 11110100 1001____
   23|       |                                                // 11110100 101_____
   24|       |                                                // 11110101 1001____
   25|       |                                                // 11110101 101_____
   26|       |                                                // 1111011_ 1001____
   27|       |                                                // 1111011_ 101_____
   28|       |                                                // 11111___ 1001____
   29|       |                                                // 11111___ 101_____
   30|  3.48k|    constexpr const uint8_t TOO_LARGE_1000 = 1<<6;
   31|       |                                                // 11110101 1000____
   32|       |                                                // 1111011_ 1000____
   33|       |                                                // 11111___ 1000____
   34|  3.48k|    constexpr const uint8_t OVERLONG_4  = 1<<6; // 11110000 1000____
   35|       |
   36|  3.48k|    const simd8<uint8_t> byte_1_high = prev1.shr<4>().lookup_16<uint8_t>(
   37|       |      // 0_______ ________ <ASCII in byte 1>
   38|  3.48k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   39|  3.48k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   40|       |      // 10______ ________ <continuation in byte 1>
   41|  3.48k|      TWO_CONTS, TWO_CONTS, TWO_CONTS, TWO_CONTS,
   42|       |      // 1100____ ________ <two byte lead in byte 1>
   43|  3.48k|      TOO_SHORT | OVERLONG_2,
   44|       |      // 1101____ ________ <two byte lead in byte 1>
   45|  3.48k|      TOO_SHORT,
   46|       |      // 1110____ ________ <three byte lead in byte 1>
   47|  3.48k|      TOO_SHORT | OVERLONG_3 | SURROGATE,
   48|       |      // 1111____ ________ <four+ byte lead in byte 1>
   49|  3.48k|      TOO_SHORT | TOO_LARGE | TOO_LARGE_1000 | OVERLONG_4
   50|  3.48k|    );
   51|  3.48k|    constexpr const uint8_t CARRY = TOO_SHORT | TOO_LONG | TWO_CONTS; // These all have ____ in byte 1 .
   52|  3.48k|    const simd8<uint8_t> byte_1_low = (prev1 & 0x0F).lookup_16<uint8_t>(
   53|       |      // ____0000 ________
   54|  3.48k|      CARRY | OVERLONG_3 | OVERLONG_2 | OVERLONG_4,
   55|       |      // ____0001 ________
   56|  3.48k|      CARRY | OVERLONG_2,
   57|       |      // ____001_ ________
   58|  3.48k|      CARRY,
   59|  3.48k|      CARRY,
   60|       |
   61|       |      // ____0100 ________
   62|  3.48k|      CARRY | TOO_LARGE,
   63|       |      // ____0101 ________
   64|  3.48k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   65|       |      // ____011_ ________
   66|  3.48k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   67|  3.48k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   68|       |
   69|       |      // ____1___ ________
   70|  3.48k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   71|  3.48k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   72|  3.48k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   73|  3.48k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   74|  3.48k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   75|       |      // ____1101 ________
   76|  3.48k|      CARRY | TOO_LARGE | TOO_LARGE_1000 | SURROGATE,
   77|  3.48k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   78|  3.48k|      CARRY | TOO_LARGE | TOO_LARGE_1000
   79|  3.48k|    );
   80|  3.48k|    const simd8<uint8_t> byte_2_high = input.shr<4>().lookup_16<uint8_t>(
   81|       |      // ________ 0_______ <ASCII in byte 2>
   82|  3.48k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   83|  3.48k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   84|       |
   85|       |      // ________ 1000____
   86|  3.48k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE_1000 | OVERLONG_4,
   87|       |      // ________ 1001____
   88|  3.48k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE,
   89|       |      // ________ 101_____
   90|  3.48k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   91|  3.48k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   92|       |
   93|       |      // ________ 11______
   94|  3.48k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT
   95|  3.48k|    );
   96|  3.48k|    return (byte_1_high & byte_1_low & byte_2_high);
   97|  3.48k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation23check_multibyte_lengthsENS1_4simd5simd8IhEES5_S5_:
   99|  3.48k|      const simd8<uint8_t> prev_input, const simd8<uint8_t> sc) {
  100|  3.48k|    simd8<uint8_t> prev2 = input.prev<2>(prev_input);
  101|  3.48k|    simd8<uint8_t> prev3 = input.prev<3>(prev_input);
  102|  3.48k|    simd8<uint8_t> must23 = simd8<uint8_t>(must_be_2_3_continuation(prev2, prev3));
  103|  3.48k|    simd8<uint8_t> must23_80 = must23 & uint8_t(0x80);
  104|  3.48k|    return must23_80 ^ sc;
  105|  3.48k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation13is_incompleteENS1_4simd5simd8IhEE:
  111|  1.74k|  simdutf_really_inline simd8<uint8_t> is_incomplete(const simd8<uint8_t> input) {
  112|       |    // If the previous input's last 3 bytes match this, they're too short (they ended at EOF):
  113|       |    // ... 1111____ 111_____ 11______
  114|  1.74k|    static const uint8_t max_array[32] = {
  115|  1.74k|      255, 255, 255, 255, 255, 255, 255, 255,
  116|  1.74k|      255, 255, 255, 255, 255, 255, 255, 255,
  117|  1.74k|      255, 255, 255, 255, 255, 255, 255, 255,
  118|  1.74k|      255, 255, 255, 255, 255, 0b11110000u-1, 0b11100000u-1, 0b11000000u-1
  119|  1.74k|    };
  120|  1.74k|    const simd8<uint8_t> max_value(&max_array[sizeof(max_array)-sizeof(simd8<uint8_t>)]);
  121|  1.74k|    return input.gt_bits(max_value);
  122|  1.74k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker9check_eofEv:
  146|  2.19k|    simdutf_really_inline void check_eof() {
  147|       |      // If the previous block had incomplete UTF-8 characters at the end, an ASCII block can't
  148|       |      // possibly finish them.
  149|  2.19k|      this->error |= this->prev_incomplete;
  150|  2.19k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker6errorsEv:
  175|  2.19k|    simdutf_really_inline bool errors() const {
  176|  2.19k|      return this->error.any_bits_set_anywhere();
  177|  2.19k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8EPKcm:
   27|  2.19k|bool generic_validate_utf8(const char * input, size_t length) {
   28|  2.19k|  return generic_validate_utf8<utf8_checker>(reinterpret_cast<const uint8_t *>(input),length);
   29|  2.19k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8INS2_12utf8_checkerEEEbPKhm:
   10|  2.19k|bool generic_validate_utf8(const uint8_t * input, size_t length) {
   11|  2.19k|    checker c{};
   12|  2.19k|    buf_block_reader<64> reader(input, length);
   13|  7.42k|    while (reader.has_full_block()) {
  ------------------
  |  Branch (13:12): [True: 5.22k, False: 2.19k]
  ------------------
   14|  5.22k|      simd::simd8x64<uint8_t> in(reader.full_block());
   15|  5.22k|      c.check_next_input(in);
   16|  5.22k|      reader.advance();
   17|  5.22k|    }
   18|  2.19k|    uint8_t block[64]{};
   19|  2.19k|    reader.get_remainder(block);
   20|  2.19k|    simd::simd8x64<uint8_t> in(block);
   21|  2.19k|    c.check_next_input(in);
   22|  2.19k|    reader.advance();
   23|  2.19k|    c.check_eof();
   24|  2.19k|    return !c.errors();
   25|  2.19k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_128convert_masked_utf8_to_utf32EPKcmRPDi:
   10|  6.21k|                           char32_t *&utf32_output) {
   11|       |  // we use an approach where we try to process up to 12 input bytes.
   12|       |  // Why 12 input bytes and not 16? Because we are concerned with the size of
   13|       |  // the lookup tables. Also 12 is nicely divisible by two and three.
   14|       |  //
   15|       |  //
   16|       |  // Optimization note: our main path below is load-latency dependent. Thus it is maybe
   17|       |  // beneficial to have fast paths that depend on branch prediction but have less latency.
   18|       |  // This results in more instructions but, potentially, also higher speeds.
   19|       |  //
   20|       |  // We first try a few fast paths.
   21|  6.21k|  const __m128i in = _mm_loadu_si128((__m128i *)input);
   22|  6.21k|  const uint16_t input_utf8_end_of_code_point_mask =
   23|  6.21k|      utf8_end_of_code_point_mask & 0xfff;
   24|  6.21k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xffff)) {
  ------------------
  |  Branch (24:6): [True: 1.54k, False: 4.67k]
  ------------------
   25|       |    // We process the data in chunks of 16 bytes.
   26|  1.54k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output), _mm256_cvtepu8_epi32(in));
   27|  1.54k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output+8), _mm256_cvtepu8_epi32(_mm_srli_si128(in,8)));
   28|  1.54k|    utf32_output += 16; // We wrote 16 32-bit characters.
   29|  1.54k|    return 16; // We consumed 16 bytes.
   30|  1.54k|  }
   31|  4.67k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xaaaa)) {
  ------------------
  |  Branch (31:6): [True: 66, False: 4.60k]
  ------------------
   32|       |    // We want to take 8 2-byte UTF-8 code units and turn them into 8 4-byte UTF-32 code units.
   33|       |    // There is probably a more efficient sequence, but the following might do.
   34|     66|    const __m128i sh = _mm_setr_epi8(1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14);
   35|     66|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   36|     66|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   37|     66|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   38|     66|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   39|     66|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   40|     66|    utf32_output += 8; // We wrote 16 bytes, 8 code points.
   41|     66|    return 16;
   42|     66|  }
   43|  4.60k|  if(input_utf8_end_of_code_point_mask == 0x924) {
  ------------------
  |  Branch (43:6): [True: 98, False: 4.51k]
  ------------------
   44|       |    // We want to take 4 3-byte UTF-8 code units and turn them into 4 4-byte UTF-32 code units.
   45|       |    // There is probably a more efficient sequence, but the following might do.
   46|     98|    const __m128i sh = _mm_setr_epi8(2, 1, 0, -1, 5, 4, 3, -1, 8, 7, 6, -1, 11, 10, 9, -1);
   47|     98|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   48|     98|    const __m128i ascii =
   49|     98|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   50|     98|    const __m128i middlebyte =
   51|     98|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   52|     98|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   53|     98|    const __m128i highbyte =
   54|     98|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   55|     98|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   56|     98|    const __m128i composed =
   57|     98|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   58|     98|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   59|     98|    utf32_output += 4;
   60|     98|    return 12;
   61|     98|  }
   62|       |  /// We do not have a fast path available, so we fallback.
   63|       |
   64|  4.51k|  const uint8_t idx =
   65|  4.51k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][0];
   66|  4.51k|  const uint8_t consumed =
   67|  4.51k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][1];
   68|  4.51k|  if (idx < 64) {
  ------------------
  |  Branch (68:7): [True: 2.80k, False: 1.70k]
  ------------------
   69|       |    // SIX (6) input code-code units
   70|       |    // this is a relatively easy scenario
   71|       |    // we process SIX (6) input code-code units. The max length in bytes of six code
   72|       |    // code units spanning between 1 and 2 bytes each is 12 bytes. On processors
   73|       |    // where pdep/pext is fast, we might be able to use a small lookup table.
   74|  2.80k|    const __m128i sh =
   75|  2.80k|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   76|  2.80k|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   77|  2.80k|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   78|  2.80k|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   79|  2.80k|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   80|  2.80k|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   81|  2.80k|    utf32_output += 6; // We wrote 24 bytes, 6 code points. There is a potential
   82|       |    // overflow of 32 - 24 = 8 bytes.
   83|  2.80k|  } else if (idx < 145) {
  ------------------
  |  Branch (83:14): [True: 1.58k, False: 125]
  ------------------
   84|       |    // FOUR (4) input code-code units
   85|  1.58k|    const __m128i sh =
   86|  1.58k|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   87|  1.58k|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   88|  1.58k|    const __m128i ascii =
   89|  1.58k|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   90|  1.58k|    const __m128i middlebyte =
   91|  1.58k|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   92|  1.58k|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   93|  1.58k|    const __m128i highbyte =
   94|  1.58k|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   95|  1.58k|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   96|  1.58k|    const __m128i composed =
   97|  1.58k|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   98|  1.58k|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   99|  1.58k|    utf32_output += 4;
  100|  1.58k|  } else if (idx < 209) {
  ------------------
  |  Branch (100:14): [True: 125, False: 0]
  ------------------
  101|       |    // TWO (2) input code-code units
  102|    125|    const __m128i sh =
  103|    125|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
  104|    125|    const __m128i perm = _mm_shuffle_epi8(in, sh);
  105|    125|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi32(0x7f));
  106|    125|    const __m128i middlebyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f00));
  107|    125|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
  108|    125|    __m128i middlehighbyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f0000));
  109|       |    // correct for spurious high bit
  110|    125|    const __m128i correct =
  111|    125|        _mm_srli_epi32(_mm_and_si128(perm, _mm_set1_epi32(0x400000)), 1);
  112|    125|    middlehighbyte = _mm_xor_si128(correct, middlehighbyte);
  113|    125|    const __m128i middlehighbyte_shifted = _mm_srli_epi32(middlehighbyte, 4);
  114|    125|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi32(0x07000000));
  115|    125|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 6);
  116|    125|    const __m128i composed =
  117|    125|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted),
  118|    125|                     _mm_or_si128(highbyte_shifted, middlehighbyte_shifted));
  119|    125|    _mm_storeu_si128((__m128i *)utf32_output, composed);
  120|    125|    utf32_output += 3; // We wrote 3 * 4 bytes, there is a potential overflow of 4 bytes.
  121|    125|  } else {
  122|       |    // here we know that there is an error but we do not handle errors
  123|      0|  }
  124|  4.51k|  return consumed;
  125|  4.60k|}

_ZNK7simdutf7haswell14implementation13validate_utf8EPKcm:
  105|  2.19k|simdutf_warn_unused bool implementation::validate_utf8(const char *buf, size_t len) const noexcept {
  106|  2.19k|  return haswell::utf8_validation::generic_validate_utf8(buf,len);
  107|  2.19k|}
_ZNK7simdutf7haswell14implementation21convert_utf8_to_utf32EPKcmPDi:
  275|  93.6k|simdutf_warn_unused size_t implementation::convert_utf8_to_utf32(const char* buf, size_t len, char32_t* utf32_output) const noexcept {
  276|  93.6k|  utf8_to_utf32::validating_transcoder converter;
  277|  93.6k|  return converter.convert(buf, len, utf32_output);
  278|  93.6k|}
_ZNK7simdutf7haswell14implementation27convert_valid_utf8_to_utf32EPKcmPDi:
  286|  1.67k|    char32_t* utf32_output) const noexcept {
  287|  1.67k|  return utf8_to_utf32::convert_valid(input, size,  utf32_output);
  288|  1.67k|}
_ZNK7simdutf7haswell14implementation22utf32_length_from_utf8EPKcm:
  777|  1.67k|simdutf_warn_unused size_t implementation::utf32_length_from_utf8(const char * input, size_t length) const noexcept {
  778|  1.67k|  return utf8::count_code_points(input, length);
  779|  1.67k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_18is_asciiERKNS1_4simd8simd8x64IhEE:
   23|  7.42k|simdutf_really_inline bool is_ascii(const simd8x64<uint8_t>& input) {
   24|  7.42k|  return input.reduce_or().is_ascii();
   25|  7.42k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_124must_be_2_3_continuationENS1_4simd5simd8IhEES4_:
   35|  3.48k|simdutf_really_inline simd8<bool> must_be_2_3_continuation(const simd8<uint8_t> prev2, const simd8<uint8_t> prev3) {
   36|  3.48k|  simd8<uint8_t> is_third_byte  = prev2.saturating_sub(0xe0u-0x80); // Only 111_____ will be > 0x80
   37|  3.48k|  simd8<uint8_t> is_fourth_byte = prev3.saturating_sub(0xf0u-0x80); // Only 1111____ will be > 0x80
   38|  3.48k|  return simd8<bool>(is_third_byte | is_fourth_byte);
   39|  3.48k|}

_ZNK7simdutf8internal29available_implementation_list21detect_best_supportedEv:
  861|      1|const implementation *available_implementation_list::detect_best_supported() const noexcept {
  862|       |  // They are prelisted in priority order, so we just go down the list
  863|      1|  uint32_t supported_instruction_sets = internal::detect_supported_architectures();
  864|      2|  for (const implementation *impl : internal::get_available_implementation_pointers()) {
  ------------------
  |  Branch (864:35): [True: 2, False: 0]
  ------------------
  865|      2|    uint32_t required_instruction_sets = impl->required_instruction_sets();
  866|      2|    if ((supported_instruction_sets & required_instruction_sets) == required_instruction_sets) { return impl; }
  ------------------
  |  Branch (866:9): [True: 1, False: 1]
  ------------------
  867|      2|  }
  868|      0|  return &unsupported_singleton; // this should never happen?
  869|      1|}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use8set_bestEv:
  871|      1|const implementation *detect_best_supported_implementation_on_first_use::set_best() const noexcept {
  872|      1|  SIMDUTF_PUSH_DISABLE_WARNINGS
  873|       |  SIMDUTF_DISABLE_DEPRECATED_WARNING // Disable CRT_SECURE warning on MSVC: manually verified this is safe
  874|      1|  char *force_implementation_name = getenv("SIMDUTF_FORCE_IMPLEMENTATION");
  875|      1|  SIMDUTF_POP_DISABLE_WARNINGS
  876|       |
  877|      1|  if (force_implementation_name) {
  ------------------
  |  Branch (877:7): [True: 0, False: 1]
  ------------------
  878|      0|    auto force_implementation = get_available_implementations()[force_implementation_name];
  879|      0|    if (force_implementation) {
  ------------------
  |  Branch (879:9): [True: 0, False: 0]
  ------------------
  880|      0|      return get_active_implementation() = force_implementation;
  881|      0|    } else {
  882|       |      // Note: abort() and stderr usage within the library is forbidden.
  883|      0|      return get_active_implementation() = &unsupported_singleton;
  884|      0|    }
  885|      0|  }
  886|      1|  return get_active_implementation() = get_available_implementations().detect_best_supported();
  887|      1|}
_ZN7simdutf29get_available_implementationsEv:
  896|      1|SIMDUTF_DLLIMPORTEXPORT const internal::available_implementation_list& get_available_implementations() {
  897|      1|  static const internal::available_implementation_list available_implementations{};
  898|      1|  return available_implementations;
  899|      1|}
_ZN7simdutf25get_active_implementationEv:
  904|  99.1k|SIMDUTF_DLLIMPORTEXPORT internal::atomic_ptr<const implementation>& get_active_implementation() {
  905|       |#if SIMDUTF_SINGLE_IMPLEMENTATION
  906|       |    // skip runtime detection
  907|       |    static internal::atomic_ptr<const implementation> active_implementation{internal::get_single_implementation()};
  908|       |    return active_implementation;
  909|       |#else
  910|  99.1k|    static const internal::detect_best_supported_implementation_on_first_use detect_best_supported_implementation_on_first_use_singleton;
  911|  99.1k|    static internal::atomic_ptr<const implementation> active_implementation{&detect_best_supported_implementation_on_first_use_singleton};
  912|  99.1k|    return active_implementation;
  913|  99.1k|#endif
  914|  99.1k|}
_ZN7simdutf26get_default_implementationEv:
  922|  99.1k|internal::atomic_ptr<const implementation>& get_default_implementation() {
  923|  99.1k|  return get_active_implementation();
  924|  99.1k|}
_ZN7simdutf13validate_utf8EPKcm:
  928|  2.19k|simdutf_warn_unused bool validate_utf8(const char *buf, size_t len) noexcept {
  929|  2.19k|  return get_default_implementation()->validate_utf8(buf, len);
  930|  2.19k|}
_ZN7simdutf21convert_utf8_to_utf32EPKcmPDi:
  987|  93.6k|simdutf_warn_unused size_t convert_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_output) noexcept {
  988|  93.6k|  return get_default_implementation()->convert_utf8_to_utf32(input, length, utf32_output);
  989|  93.6k|}
_ZN7simdutf27convert_valid_utf8_to_utf32EPKcmPDi:
 1038|  1.67k|simdutf_warn_unused size_t convert_valid_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_buffer) noexcept {
 1039|  1.67k|  return get_default_implementation()->convert_valid_utf8_to_utf32(input, length, utf32_buffer);
 1040|  1.67k|}
_ZN7simdutf22utf32_length_from_utf8EPKcm:
 1285|  1.67k|simdutf_warn_unused size_t utf32_length_from_utf8(const char * input, size_t length) noexcept {
 1286|  1.67k|  return get_default_implementation()->utf32_length_from_utf8(input, length);
 1287|  1.67k|}
_ZN7simdutf8internal26unsupported_implementationC2Ev:
  847|      2|  unsupported_implementation() : implementation("unsupported", "Unsupported CPU (no detected SIMD instructions)", 0) {}
simdutf.cpp:_ZN7simdutf8internalL37get_available_implementation_pointersEv:
  488|      1|static const std::initializer_list<const implementation *>& get_available_implementation_pointers() {
  489|      1|  static const std::initializer_list<const implementation *> available_implementation_pointers {
  490|      1|#if SIMDUTF_IMPLEMENTATION_ICELAKE
  491|      1|    get_icelake_singleton(),
  492|      1|#endif
  493|      1|#if SIMDUTF_IMPLEMENTATION_HASWELL
  494|      1|    get_haswell_singleton(),
  495|      1|#endif
  496|      1|#if SIMDUTF_IMPLEMENTATION_WESTMERE
  497|      1|    get_westmere_singleton(),
  498|      1|#endif
  499|       |#if SIMDUTF_IMPLEMENTATION_ARM64
  500|       |    get_arm64_singleton(),
  501|       |#endif
  502|       |#if SIMDUTF_IMPLEMENTATION_PPC64
  503|       |    get_ppc64_singleton(),
  504|       |#endif
  505|       |#if SIMDUTF_IMPLEMENTATION_RVV
  506|       |    get_rvv_singleton(),
  507|       |#endif
  508|      1|#if SIMDUTF_IMPLEMENTATION_FALLBACK
  509|      1|    get_fallback_singleton(),
  510|      1|#endif
  511|      1|  }; // available_implementation_pointers
  512|      1|  return available_implementation_pointers;
  513|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_icelake_singletonEv:
   83|      1|static const icelake::implementation* get_icelake_singleton() {
   84|      1|  static const icelake::implementation icelake_singleton{};
   85|      1|  return &icelake_singleton;
   86|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_haswell_singletonEv:
   89|      1|static const haswell::implementation* get_haswell_singleton() {
   90|      1|  static const haswell::implementation haswell_singleton{};
   91|      1|  return &haswell_singleton;
   92|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_westmere_singletonEv:
   95|      1|static const westmere::implementation* get_westmere_singleton() {
   96|      1|  static const westmere::implementation westmere_singleton{};
   97|      1|  return &westmere_singleton;
   98|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_fallback_singletonEv:
  119|      1|static const fallback::implementation* get_fallback_singleton() {
  120|      1|  static const fallback::implementation fallback_singleton{};
  121|      1|  return &fallback_singleton;
  122|      1|}
_ZN7simdutf8internal49detect_best_supported_implementation_on_first_useC2Ev:
  482|      1|  simdutf_really_inline detect_best_supported_implementation_on_first_use() noexcept : implementation("best_supported_detector", "Detects the best supported implementation and sets it", 0) {}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use13validate_utf8EPKcm:
  162|      1|  simdutf_warn_unused bool validate_utf8(const char * buf, size_t len) const noexcept final override {
  163|      1|    return set_best()->validate_utf8(buf, len);
  164|      1|  }

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_14utf817count_code_pointsEPKcm:
  168|  1.67k|inline size_t count_code_points(const char* buf, size_t len) {
  169|  1.67k|    const int8_t * p = reinterpret_cast<const int8_t *>(buf);
  170|  1.67k|    size_t counter{0};
  171|  41.1k|    for(size_t i = 0; i < len; i++) {
  ------------------
  |  Branch (171:23): [True: 39.4k, False: 1.67k]
  ------------------
  172|       |        // -65 is 0b10111111, anything larger in two-complement's should start a new code point.
  173|  39.4k|        if(p[i] > -65) { counter++; }
  ------------------
  |  Branch (173:12): [True: 38.9k, False: 513]
  ------------------
  174|  39.4k|    }
  175|  1.67k|    return counter;
  176|  1.67k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf327convertEPKcmPDi:
    9|  93.6k|inline size_t convert(const char* buf, size_t len, char32_t* utf32_output) {
   10|  93.6k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|  93.6k|  size_t pos = 0;
   12|  93.6k|  char32_t* start{utf32_output};
   13|   182k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 93.6k, False: 89.0k]
  ------------------
   14|       |    // try to convert the next block of 16 ASCII bytes
   15|  93.6k|    if (pos + 16 <= len) { // if it is safe to read 16 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 0, False: 93.6k]
  ------------------
   16|      0|      uint64_t v1;
   17|      0|      ::memcpy(&v1, data + pos, sizeof(uint64_t));
   18|      0|      uint64_t v2;
   19|      0|      ::memcpy(&v2, data + pos + sizeof(uint64_t), sizeof(uint64_t));
   20|      0|      uint64_t v{v1 | v2};
   21|      0|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (21:11): [True: 0, False: 0]
  ------------------
   22|      0|        size_t final_pos = pos + 16;
   23|      0|        while(pos < final_pos) {
  ------------------
  |  Branch (23:15): [True: 0, False: 0]
  ------------------
   24|      0|          *utf32_output++ = char32_t(buf[pos]);
   25|      0|          pos++;
   26|      0|        }
   27|      0|        continue;
   28|      0|      }
   29|      0|    }
   30|  93.6k|    uint8_t leading_byte = data[pos]; // leading byte
   31|  93.6k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (31:9): [True: 80.6k, False: 12.9k]
  ------------------
   32|       |      // converting one ASCII byte !!!
   33|  80.6k|      *utf32_output++ = char32_t(leading_byte);
   34|  80.6k|      pos++;
   35|  80.6k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (35:16): [True: 6.90k, False: 6.06k]
  ------------------
   36|       |      // We have a two-byte UTF-8
   37|  6.90k|      if(pos + 1 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (37:10): [True: 0, False: 6.90k]
  ------------------
   38|  6.90k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (38:11): [True: 2.61k, False: 4.29k]
  ------------------
   39|       |      // range check
   40|  4.29k|      uint32_t code_point = (leading_byte & 0b00011111) << 6 | (data[pos + 1] & 0b00111111);
   41|  4.29k|      if (code_point < 0x80 || 0x7ff < code_point) { return 0; }
  ------------------
  |  Branch (41:11): [True: 141, False: 4.15k]
  |  Branch (41:32): [True: 0, False: 4.15k]
  ------------------
   42|  4.15k|      *utf32_output++ = char32_t(code_point);
   43|  4.15k|      pos += 2;
   44|  6.06k|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (44:16): [True: 3.73k, False: 2.32k]
  ------------------
   45|       |      // We have a three-byte UTF-8
   46|  3.73k|      if(pos + 2 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (46:10): [True: 0, False: 3.73k]
  ------------------
   47|       |
   48|  3.73k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (48:11): [True: 206, False: 3.52k]
  ------------------
   49|  3.52k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (49:11): [True: 141, False: 3.38k]
  ------------------
   50|       |      // range check
   51|  3.38k|      uint32_t code_point = (leading_byte & 0b00001111) << 12 |
   52|  3.38k|                   (data[pos + 1] & 0b00111111) << 6 |
   53|  3.38k|                   (data[pos + 2] & 0b00111111);
   54|  3.38k|      if (code_point < 0x800 || 0xffff < code_point ||
  ------------------
  |  Branch (54:11): [True: 141, False: 3.24k]
  |  Branch (54:33): [True: 0, False: 3.24k]
  ------------------
   55|  3.38k|          (0xd7ff < code_point && code_point < 0xe000)) {
  ------------------
  |  Branch (55:12): [True: 282, False: 2.96k]
  |  Branch (55:35): [True: 141, False: 141]
  ------------------
   56|    282|        return 0;
   57|    282|      }
   58|  3.10k|      *utf32_output++ = char32_t(code_point);
   59|  3.10k|      pos += 3;
   60|  3.10k|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (60:16): [True: 2.32k, False: 0]
  ------------------
   61|       |      // we have a 4-byte UTF-8 word.
   62|  2.32k|      if(pos + 3 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (62:10): [True: 0, False: 2.32k]
  ------------------
   63|  2.32k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (63:11): [True: 314, False: 2.01k]
  ------------------
   64|  2.01k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (64:11): [True: 172, False: 1.84k]
  ------------------
   65|  1.84k|      if ((data[pos + 3] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (65:11): [True: 303, False: 1.53k]
  ------------------
   66|       |
   67|       |      // range check
   68|  1.53k|      uint32_t code_point =
   69|  1.53k|          (leading_byte & 0b00000111) << 18 | (data[pos + 1] & 0b00111111) << 12 |
   70|  1.53k|          (data[pos + 2] & 0b00111111) << 6 | (data[pos + 3] & 0b00111111);
   71|  1.53k|      if (code_point <= 0xffff || 0x10ffff < code_point) { return 0; }
  ------------------
  |  Branch (71:11): [True: 267, False: 1.27k]
  |  Branch (71:35): [True: 141, False: 1.13k]
  ------------------
   72|  1.13k|      *utf32_output++ = char32_t(code_point);
   73|  1.13k|      pos += 4;
   74|  1.13k|    } else {
   75|      0|      return 0;
   76|      0|    }
   77|  93.6k|  }
   78|  89.0k|  return utf32_output - start;
   79|  93.6k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
    9|  1.67k|inline size_t convert_valid(const char* buf, size_t len, char32_t* utf32_output) {
   10|  1.67k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|  1.67k|  size_t pos = 0;
   12|  1.67k|  char32_t* start{utf32_output};
   13|  13.6k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 11.9k, False: 1.67k]
  ------------------
   14|       |    // try to convert the next block of 8 ASCII bytes
   15|  11.9k|    if (pos + 8 <= len) { // if it is safe to read 8 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 6.17k, False: 5.80k]
  ------------------
   16|  6.17k|      uint64_t v;
   17|  6.17k|      ::memcpy(&v, data + pos, sizeof(uint64_t));
   18|  6.17k|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (18:11): [True: 5.68k, False: 489]
  ------------------
   19|  5.68k|        size_t final_pos = pos + 8;
   20|  51.2k|        while(pos < final_pos) {
  ------------------
  |  Branch (20:15): [True: 45.5k, False: 5.68k]
  ------------------
   21|  45.5k|          *utf32_output++ = char32_t(buf[pos]);
   22|  45.5k|          pos++;
   23|  45.5k|        }
   24|  5.68k|        continue;
   25|  5.68k|      }
   26|  6.17k|    }
   27|  6.29k|    uint8_t leading_byte = data[pos]; // leading byte
   28|  6.29k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (28:9): [True: 5.95k, False: 337]
  ------------------
   29|       |      // converting one ASCII byte !!!
   30|  5.95k|      *utf32_output++ = char32_t(leading_byte);
   31|  5.95k|      pos++;
   32|  5.95k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (32:16): [True: 177, False: 160]
  ------------------
   33|       |      // We have a two-byte UTF-8
   34|    177|      if(pos + 1 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (34:10): [True: 0, False: 177]
  ------------------
   35|    177|      *utf32_output++ = char32_t(((leading_byte &0b00011111) << 6) | (data[pos + 1] &0b00111111));
   36|    177|      pos += 2;
   37|    177|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (37:16): [True: 107, False: 53]
  ------------------
   38|       |      // We have a three-byte UTF-8
   39|    107|      if(pos + 2 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (39:10): [True: 0, False: 107]
  ------------------
   40|    107|      *utf32_output++ = char32_t(((leading_byte &0b00001111) << 12) | ((data[pos + 1] &0b00111111) << 6) | (data[pos + 2] &0b00111111));
   41|    107|      pos += 3;
   42|    107|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (42:16): [True: 53, False: 0]
  ------------------
   43|       |      // we have a 4-byte UTF-8 word.
   44|     53|      if(pos + 3 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (44:10): [True: 0, False: 53]
  ------------------
   45|     53|      uint32_t code_word = ((leading_byte & 0b00000111) << 18 )| ((data[pos + 1] &0b00111111) << 12)
   46|     53|                           | ((data[pos + 2] &0b00111111) << 6) | (data[pos + 3] &0b00111111);
   47|     53|      *utf32_output++ = char32_t(code_word);
   48|     53|      pos += 4;
   49|     53|    } else {
   50|       |      // we may have a continuation but we do not do error checking
   51|      0|      return 0;
   52|      0|    }
   53|  6.29k|  }
   54|  1.67k|  return utf32_output - start;
   55|  1.67k|}

_ZN7simdutf8fallback14implementationC2Ev:
   19|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_110count_onesEm:
   14|  4.26k|simdutf_really_inline long long int count_ones(uint64_t input_num) {
   15|  4.26k|  return _popcnt64(input_num);
   16|  4.26k|}

_ZN7simdutf7haswell14implementationC2Ev:
   18|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ev:
  195|  6.59k|    simdutf_really_inline simd8() : base8_numeric<uint8_t>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2Ev:
  112|  6.59k|    simdutf_really_inline base8_numeric() : base8<T>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2Ev:
   61|  6.59k|    simdutf_really_inline base8() : base<simd8<T>>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2Ev:
   16|  6.59k|    simdutf_really_inline base() : value{__m256i()} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhEC2EPKh:
  276|  7.42k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE4loadEPKh:
   96|  16.5k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  16.5k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  16.5k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EDv4_x:
  196|   228k|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<uint8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2EDv4_x:
  113|   228k|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2EDv4_x:
   62|   228k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2EDv4_x:
   19|   228k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhE9reduce_orEv:
  295|  7.42k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|  7.42k|      return this->chunks[0] | this->chunks[1];
  297|  7.42k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEorES5_:
   43|  22.2k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRKDv4_xEv:
   21|   358k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE8is_asciiEv:
  248|  7.42k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEoRES5_:
   47|  11.3k|    simdutf_really_inline Child& operator|=(const Child other) { auto this_cast = static_cast<Child*>(this); *this_cast = *this_cast | other; return *this_cast; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi1EEENS4_IhEES8_:
   70|  3.48k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  3.48k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  3.48k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE3shrILi4EEES4_v:
  254|  6.97k|    simdutf_really_inline simd8<uint8_t> shr() const { return simd8<uint8_t>(_mm256_srli_epi16(*this, N)) & uint8_t(0xFFu >> N); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_:
  138|  10.4k|        L replace12, L replace13, L replace14, L replace15) const {
  139|  10.4k|      return lookup_16(simd8<L>::repeat_16(
  140|  10.4k|        replace0,  replace1,  replace2,  replace3,
  141|  10.4k|        replace4,  replace5,  replace6,  replace7,
  142|  10.4k|        replace8,  replace9,  replace10, replace11,
  143|  10.4k|        replace12, replace13, replace14, replace15
  144|  10.4k|      ));
  145|  10.4k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES8_:
  129|  10.4k|    simdutf_really_inline simd8<L> lookup_16(simd8<L> lookup_table) const {
  130|  10.4k|      return _mm256_shuffle_epi8(lookup_table, *this);
  131|  10.4k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRDv4_xEv:
   22|  13.9k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE9repeat_16Ehhhhhhhhhhhhhhhh:
  217|  10.4k|    ) {
  218|  10.4k|      return simd8<uint8_t>(
  219|  10.4k|        v0, v1, v2, v3, v4, v5, v6, v7,
  220|  10.4k|        v8, v9, v10,v11,v12,v13,v14,v15,
  221|  10.4k|        v0, v1, v2, v3, v4, v5, v6, v7,
  222|  10.4k|        v8, v9, v10,v11,v12,v13,v14,v15
  223|  10.4k|      );
  224|  10.4k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ehhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh:
  212|  10.4k|    )) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEanES5_:
   44|  20.9k|    simdutf_really_inline Child operator&(const Child other) const { return _mm256_and_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Eh:
  198|   114k|    simdutf_really_inline simd8(uint8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE5splatEh:
   94|   114k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi2EEENS4_IhEES8_:
   70|  3.48k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  3.48k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  3.48k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi3EEENS4_IhEES8_:
   70|  3.48k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  3.48k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  3.48k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE14saturating_subES4_:
  229|  8.71k|    simdutf_really_inline simd8<uint8_t> saturating_sub(const simd8<uint8_t> other) const { return _mm256_subs_epu8(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IbEC2EDv4_x:
   81|  13.9k|    simdutf_really_inline simd8<bool>(const __m256i _value) : base8<bool>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IbNS2_5simd8IbEEEC2EDv4_x:
   62|  13.9k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEC2EDv4_x:
   19|  13.9k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRDv4_xEv:
   22|  3.48k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEeoES5_:
   45|  3.48k|    simdutf_really_inline Child operator^(const Child other) const { return _mm256_xor_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EPKh:
  200|  1.74k|    simdutf_really_inline simd8(const uint8_t values[32]) : simd8(load(values)) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE7gt_bitsES4_:
  235|  1.74k|    simdutf_really_inline simd8<uint8_t> gt_bits(const simd8<uint8_t> other) const { return this->saturating_sub(other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21any_bits_set_anywhereEv:
  250|  95.8k|    simdutf_really_inline bool any_bits_set_anywhere() const { return !bits_not_set_anywhere(); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21bits_not_set_anywhereEv:
  249|  95.8k|    simdutf_really_inline bool bits_not_set_anywhere() const { return _mm256_testz_si256(*this, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaEC2EPKa:
  276|  8.46k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE4loadEPKa:
   96|  16.9k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  16.9k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  16.9k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2EDv4_x:
  153|  26.3k|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<int8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaEC2EDv4_x:
  113|  26.3k|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IaNS2_5simd8IbEEEC2EDv4_x:
   62|  26.3k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEC2EDv4_x:
   19|  26.3k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE8is_asciiEv:
  299|  4.19k|    simdutf_really_inline bool is_ascii() const {
  300|  4.19k|      return this->reduce_or().is_ascii();
  301|  4.19k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE9reduce_orEv:
  295|  4.19k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|  4.19k|      return this->chunks[0] | this->chunks[1];
  297|  4.19k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEorES5_:
   43|  4.19k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEcvRKDv4_xEv:
   21|  59.3k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaE8is_asciiEv:
  184|  4.19k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2ltEa:
  362|    979|    simdutf_really_inline uint64_t lt(const T m) const {
  363|    979|      const simd8<T> mask = simd8<T>::splat(m);
  364|    979|      return  simd8x64<bool>(
  365|    979|        this->chunks[0] < mask,
  366|    979|        this->chunks[1] < mask
  367|    979|      ).to_bitmask();
  368|    979|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE5splatEa:
   94|  5.24k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEltES4_:
  189|  1.95k|    simdutf_really_inline simd8<bool> operator<(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(other, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbEC2ENS2_5simd8IbEES6_:
  275|  5.24k|    simdutf_really_inline simd8x64(const simd8<T> chunk0, const simd8<T> chunk1) : chunks{chunk0, chunk1} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbE10to_bitmaskEv:
  283|  5.24k|    simdutf_really_inline uint64_t to_bitmask() const {
  284|  5.24k|      uint64_t r_lo = uint32_t(this->chunks[0].to_bitmask());
  285|  5.24k|      uint64_t r_hi =                       this->chunks[1].to_bitmask();
  286|  5.24k|      return r_lo | (r_hi << 32);
  287|  5.24k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IbE10to_bitmaskEv:
   85|  10.4k|    simdutf_really_inline uint32_t to_bitmask() const { return uint32_t(_mm256_movemask_epi8(*this)); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRKDv4_xEv:
   21|  10.4k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE20store_ascii_as_utf32EPDi:
  309|  3.21k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
  310|  3.21k|      this->chunks[0].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*0);
  311|  3.21k|      this->chunks[1].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*1);
  312|  3.21k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEE20store_ascii_as_utf32EPDi:
   36|  6.43k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
   37|  6.43k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(*this)));
   38|  6.43k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr+8), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(_mm256_srli_si256(*this,8))));
   39|  6.43k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 16), _mm256_cvtepu8_epi32(_mm256_extractf128_si256(*this,1)));
   40|  6.43k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 24), _mm256_cvtepu8_epi32(_mm_srli_si128(_mm256_extractf128_si256(*this,1),8)));
   41|  6.43k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2gtEa:
  370|  4.26k|    simdutf_really_inline uint64_t gt(const T m) const {
  371|  4.26k|      const simd8<T> mask = simd8<T>::splat(m);
  372|  4.26k|      return  simd8x64<bool>(
  373|  4.26k|        this->chunks[0] > mask,
  374|  4.26k|        this->chunks[1] > mask
  375|  4.26k|      ).to_bitmask();
  376|  4.26k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEgtES4_:
  188|  8.52k|    simdutf_really_inline simd8<bool> operator>(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(*this, other); }

_ZN7simdutf7icelake14implementationC2Ev:
   18|      1|      internal::instruction_set::AVX2 | internal::instruction_set::BMI1 | internal::instruction_set::BMI2 | internal::instruction_set::AVX512BW | internal::instruction_set::AVX512CD | internal::instruction_set::AVX512VL | internal::instruction_set::AVX512VBMI2 | internal::instruction_set::AVX512VPOPCNTDQ ) {}

_ZN7simdutf8westmere14implementationC2Ev:
   16|      1|  simdutf_really_inline implementation() : simdutf::implementation("westmere", "Intel/AMD SSE4.2", internal::instruction_set::SSE42) {}

_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJaEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   537k|{
  619|   537k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   537k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   537k|    static_cast<    \
  |  |  247|   537k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   537k|}
_ZN3scn2v26detail20check_scan_arg_typesIJaEEEvv:
  386|  1.16M|{
  387|  1.16M|    static_assert(
  388|  1.16M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.16M|        "Scan argument types must be default constructible");
  390|  1.16M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.16M|                  "Scan argument types must be Destructible");
  392|  1.16M|    static_assert(
  393|  1.16M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.16M|        "Scan argument types must not be references");
  395|  1.16M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEEC2EONSt3__15tupleIJaEEE:
  563|   537k|    {
  564|   537k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEE15make_data_arrayIJaEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   537k|    {
  574|   537k|        return {
  575|   537k|            detail::make_arg<base::is_packed, Context,
  576|   537k|                             detail::mapped_type_constant<
  577|   537k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   537k|                args)...};
  579|   537k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE1EavEENS1_9arg_valueERT2_:
  414|   537k|{
  415|   537k|    return make_value<Context>(value);
  416|   537k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEaEEDaRT0_:
  371|   591k|{
  372|   591k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   591k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   591k|                                  needs_context_tag>) {
  376|   591k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   591k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   591k|    }
  378|   591k|    else {
  379|   591k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   591k|            value, context_tag<Context>{}));
  381|   591k|    }
  382|   591k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERa:
  216|   591k|    {                                                                        \
  217|   591k|        return val;                                                          \
  218|   591k|    }
_ZN3scn2v26detail15make_value_implIRaEEDaOT_:
  340|  1.16M|{
  341|  1.16M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.16M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.16M|    constexpr bool scannable_char =
  345|  1.16M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.16M|    static_assert(scannable_char,
  347|  1.16M|                  "Cannot scan an argument of an unsupported character "
  348|  1.16M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.16M|    constexpr bool scannable_const =
  351|  1.16M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.16M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.16M|    constexpr bool scannable_disabled =
  355|  1.16M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.16M|    static_assert(scannable_disabled,
  357|  1.16M|                  "Cannot scan an argument that has been disabled by "
  358|  1.16M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.16M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.16M|    static_assert(
  362|  1.16M|        scannable,
  363|  1.16M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.16M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.16M|    return arg_value{arg};
  367|  1.16M|}
_ZN3scn2v26detail9arg_valueC2IaEERT_:
  159|  1.16M|    {
  160|  1.16M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJaEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   537k|    {
  647|   537k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPNS0_6detail9arg_valueE:
  693|  3.40M|    {
  694|  3.40M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEE4argsEv:
  553|   449k|    {
  554|   449k|        return m_args;
  555|   449k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEaEENS0_14basic_scan_argIT_EERT0_:
  399|  53.8k|{
  400|  53.8k|    check_scan_arg_types<T>();
  401|       |
  402|  53.8k|    basic_scan_arg<Context> arg;
  403|  53.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  53.8k|    arg.m_value = make_value<Context>(value);
  405|  53.8k|    return arg;
  406|  53.8k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
  476|  3.73M|    constexpr basic_scan_arg() = default;
_ZN3scn2v26detail9arg_valueC2Ev:
  155|  7.43M|        arg_value() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJhEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   476k|{
  619|   476k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   476k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   476k|    static_cast<    \
  |  |  247|   476k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   476k|}
_ZN3scn2v26detail20check_scan_arg_typesIJhEEEvv:
  386|  1.06M|{
  387|  1.06M|    static_assert(
  388|  1.06M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.06M|        "Scan argument types must be default constructible");
  390|  1.06M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.06M|                  "Scan argument types must be Destructible");
  392|  1.06M|    static_assert(
  393|  1.06M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.06M|        "Scan argument types must not be references");
  395|  1.06M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEEC2EONSt3__15tupleIJhEEE:
  563|   476k|    {
  564|   476k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEE15make_data_arrayIJhEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   476k|    {
  574|   476k|        return {
  575|   476k|            detail::make_arg<base::is_packed, Context,
  576|   476k|                             detail::mapped_type_constant<
  577|   476k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   476k|                args)...};
  579|   476k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE6EhvEENS1_9arg_valueERT2_:
  414|   476k|{
  415|   476k|    return make_value<Context>(value);
  416|   476k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEhEEDaRT0_:
  371|   523k|{
  372|   523k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   523k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   523k|                                  needs_context_tag>) {
  376|   523k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   523k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   523k|    }
  378|   523k|    else {
  379|   523k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   523k|            value, context_tag<Context>{}));
  381|   523k|    }
  382|   523k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERh:
  216|   523k|    {                                                                        \
  217|   523k|        return val;                                                          \
  218|   523k|    }
_ZN3scn2v26detail15make_value_implIRhEEDaOT_:
  340|  1.06M|{
  341|  1.06M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.06M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.06M|    constexpr bool scannable_char =
  345|  1.06M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.06M|    static_assert(scannable_char,
  347|  1.06M|                  "Cannot scan an argument of an unsupported character "
  348|  1.06M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.06M|    constexpr bool scannable_const =
  351|  1.06M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.06M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.06M|    constexpr bool scannable_disabled =
  355|  1.06M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.06M|    static_assert(scannable_disabled,
  357|  1.06M|                  "Cannot scan an argument that has been disabled by "
  358|  1.06M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.06M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.06M|    static_assert(
  362|  1.06M|        scannable,
  363|  1.06M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.06M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.06M|    return arg_value{arg};
  367|  1.06M|}
_ZN3scn2v26detail9arg_valueC2IhEERT_:
  159|  1.06M|    {
  160|  1.06M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJhEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   476k|    {
  647|   476k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEE4argsEv:
  553|   389k|    {
  554|   389k|        return m_args;
  555|   389k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEhEENS0_14basic_scan_argIT_EERT0_:
  399|  46.5k|{
  400|  46.5k|    check_scan_arg_types<T>();
  401|       |
  402|  46.5k|    basic_scan_arg<Context> arg;
  403|  46.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  46.5k|    arg.m_value = make_value<Context>(value);
  405|  46.5k|    return arg;
  406|  46.5k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   654k|{
  619|   654k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   654k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   654k|    static_cast<    \
  |  |  247|   654k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   654k|}
_ZN3scn2v26detail20check_scan_arg_typesIJiEEEvv:
  386|  1.40M|{
  387|  1.40M|    static_assert(
  388|  1.40M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.40M|        "Scan argument types must be default constructible");
  390|  1.40M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.40M|                  "Scan argument types must be Destructible");
  392|  1.40M|    static_assert(
  393|  1.40M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.40M|        "Scan argument types must not be references");
  395|  1.40M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2EONSt3__15tupleIJiEEE:
  563|   654k|    {
  564|   654k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEE15make_data_arrayIJiEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   654k|    {
  574|   654k|        return {
  575|   654k|            detail::make_arg<base::is_packed, Context,
  576|   654k|                             detail::mapped_type_constant<
  577|   654k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   654k|                args)...};
  579|   654k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEENS1_9arg_valueERT2_:
  414|   654k|{
  415|   654k|    return make_value<Context>(value);
  416|   654k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
  371|   715k|{
  372|   715k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   715k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   715k|                                  needs_context_tag>) {
  376|   715k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   715k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   715k|    }
  378|   715k|    else {
  379|   715k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   715k|            value, context_tag<Context>{}));
  381|   715k|    }
  382|   715k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERi:
  216|   715k|    {                                                                        \
  217|   715k|        return val;                                                          \
  218|   715k|    }
_ZN3scn2v26detail15make_value_implIRiEEDaOT_:
  340|  1.40M|{
  341|  1.40M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.40M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.40M|    constexpr bool scannable_char =
  345|  1.40M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.40M|    static_assert(scannable_char,
  347|  1.40M|                  "Cannot scan an argument of an unsupported character "
  348|  1.40M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.40M|    constexpr bool scannable_const =
  351|  1.40M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.40M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.40M|    constexpr bool scannable_disabled =
  355|  1.40M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.40M|    static_assert(scannable_disabled,
  357|  1.40M|                  "Cannot scan an argument that has been disabled by "
  358|  1.40M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.40M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.40M|    static_assert(
  362|  1.40M|        scannable,
  363|  1.40M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.40M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.40M|    return arg_value{arg};
  367|  1.40M|}
_ZN3scn2v26detail9arg_valueC2IiEERT_:
  159|  1.40M|    {
  160|  1.40M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   654k|    {
  647|   654k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
  553|   566k|    {
  554|   566k|        return m_args;
  555|   566k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEiEENS0_14basic_scan_argIT_EERT0_:
  399|  61.8k|{
  400|  61.8k|    check_scan_arg_types<T>();
  401|       |
  402|  61.8k|    basic_scan_arg<Context> arg;
  403|  61.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  61.8k|    arg.m_value = make_value<Context>(value);
  405|  61.8k|    return arg;
  406|  61.8k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   533k|{
  619|   533k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   533k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   533k|    static_cast<    \
  |  |  247|   533k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   533k|}
_ZN3scn2v26detail20check_scan_arg_typesIJjEEEvv:
  386|  1.18M|{
  387|  1.18M|    static_assert(
  388|  1.18M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.18M|        "Scan argument types must be default constructible");
  390|  1.18M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.18M|                  "Scan argument types must be Destructible");
  392|  1.18M|    static_assert(
  393|  1.18M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.18M|        "Scan argument types must not be references");
  395|  1.18M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2EONSt3__15tupleIJjEEE:
  563|   533k|    {
  564|   533k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEE15make_data_arrayIJjEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   533k|    {
  574|   533k|        return {
  575|   533k|            detail::make_arg<base::is_packed, Context,
  576|   533k|                             detail::mapped_type_constant<
  577|   533k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   533k|                args)...};
  579|   533k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEENS1_9arg_valueERT2_:
  414|   533k|{
  415|   533k|    return make_value<Context>(value);
  416|   533k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
  371|   584k|{
  372|   584k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   584k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   584k|                                  needs_context_tag>) {
  376|   584k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   584k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   584k|    }
  378|   584k|    else {
  379|   584k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   584k|            value, context_tag<Context>{}));
  381|   584k|    }
  382|   584k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERj:
  216|   584k|    {                                                                        \
  217|   584k|        return val;                                                          \
  218|   584k|    }
_ZN3scn2v26detail15make_value_implIRjEEDaOT_:
  340|  1.18M|{
  341|  1.18M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.18M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.18M|    constexpr bool scannable_char =
  345|  1.18M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.18M|    static_assert(scannable_char,
  347|  1.18M|                  "Cannot scan an argument of an unsupported character "
  348|  1.18M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.18M|    constexpr bool scannable_const =
  351|  1.18M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.18M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.18M|    constexpr bool scannable_disabled =
  355|  1.18M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.18M|    static_assert(scannable_disabled,
  357|  1.18M|                  "Cannot scan an argument that has been disabled by "
  358|  1.18M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.18M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.18M|    static_assert(
  362|  1.18M|        scannable,
  363|  1.18M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.18M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.18M|    return arg_value{arg};
  367|  1.18M|}
_ZN3scn2v26detail9arg_valueC2IjEERT_:
  159|  1.18M|    {
  160|  1.18M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   533k|    {
  647|   533k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
  553|   445k|    {
  554|   445k|        return m_args;
  555|   445k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEjEENS0_14basic_scan_argIT_EERT0_:
  399|  51.0k|{
  400|  51.0k|    check_scan_arg_types<T>();
  401|       |
  402|  51.0k|    basic_scan_arg<Context> arg;
  403|  51.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  51.0k|    arg.m_value = make_value<Context>(value);
  405|  51.0k|    return arg;
  406|  51.0k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJxEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   665k|{
  619|   665k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   665k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   665k|    static_cast<    \
  |  |  247|   665k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   665k|}
_ZN3scn2v26detail20check_scan_arg_typesIJxEEEvv:
  386|  1.42M|{
  387|  1.42M|    static_assert(
  388|  1.42M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.42M|        "Scan argument types must be default constructible");
  390|  1.42M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.42M|                  "Scan argument types must be Destructible");
  392|  1.42M|    static_assert(
  393|  1.42M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.42M|        "Scan argument types must not be references");
  395|  1.42M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEEC2EONSt3__15tupleIJxEEE:
  563|   665k|    {
  564|   665k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEE15make_data_arrayIJxEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   665k|    {
  574|   665k|        return {
  575|   665k|            detail::make_arg<base::is_packed, Context,
  576|   665k|                             detail::mapped_type_constant<
  577|   665k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   665k|                args)...};
  579|   665k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE5ExvEENS1_9arg_valueERT2_:
  414|   665k|{
  415|   665k|    return make_value<Context>(value);
  416|   665k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEExEEDaRT0_:
  371|   727k|{
  372|   727k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   727k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   727k|                                  needs_context_tag>) {
  376|   727k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   727k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   727k|    }
  378|   727k|    else {
  379|   727k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   727k|            value, context_tag<Context>{}));
  381|   727k|    }
  382|   727k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERx:
  216|   727k|    {                                                                        \
  217|   727k|        return val;                                                          \
  218|   727k|    }
_ZN3scn2v26detail15make_value_implIRxEEDaOT_:
  340|  1.42M|{
  341|  1.42M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.42M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.42M|    constexpr bool scannable_char =
  345|  1.42M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.42M|    static_assert(scannable_char,
  347|  1.42M|                  "Cannot scan an argument of an unsupported character "
  348|  1.42M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.42M|    constexpr bool scannable_const =
  351|  1.42M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.42M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.42M|    constexpr bool scannable_disabled =
  355|  1.42M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.42M|    static_assert(scannable_disabled,
  357|  1.42M|                  "Cannot scan an argument that has been disabled by "
  358|  1.42M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.42M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.42M|    static_assert(
  362|  1.42M|        scannable,
  363|  1.42M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.42M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.42M|    return arg_value{arg};
  367|  1.42M|}
_ZN3scn2v26detail9arg_valueC2IxEERT_:
  159|  1.42M|    {
  160|  1.42M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJxEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   665k|    {
  647|   665k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEE4argsEv:
  553|   577k|    {
  554|   577k|        return m_args;
  555|   577k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEExEENS0_14basic_scan_argIT_EERT0_:
  399|  62.8k|{
  400|  62.8k|    check_scan_arg_types<T>();
  401|       |
  402|  62.8k|    basic_scan_arg<Context> arg;
  403|  62.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  62.8k|    arg.m_value = make_value<Context>(value);
  405|  62.8k|    return arg;
  406|  62.8k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJyEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   539k|{
  619|   539k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   539k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   539k|    static_cast<    \
  |  |  247|   539k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   539k|}
_ZN3scn2v26detail20check_scan_arg_typesIJyEEEvv:
  386|  1.19M|{
  387|  1.19M|    static_assert(
  388|  1.19M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.19M|        "Scan argument types must be default constructible");
  390|  1.19M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.19M|                  "Scan argument types must be Destructible");
  392|  1.19M|    static_assert(
  393|  1.19M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.19M|        "Scan argument types must not be references");
  395|  1.19M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEEC2EONSt3__15tupleIJyEEE:
  563|   539k|    {
  564|   539k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEE15make_data_arrayIJyEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   539k|    {
  574|   539k|        return {
  575|   539k|            detail::make_arg<base::is_packed, Context,
  576|   539k|                             detail::mapped_type_constant<
  577|   539k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   539k|                args)...};
  579|   539k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE10EyvEENS1_9arg_valueERT2_:
  414|   539k|{
  415|   539k|    return make_value<Context>(value);
  416|   539k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEyEEDaRT0_:
  371|   590k|{
  372|   590k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   590k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   590k|                                  needs_context_tag>) {
  376|   590k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   590k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   590k|    }
  378|   590k|    else {
  379|   590k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   590k|            value, context_tag<Context>{}));
  381|   590k|    }
  382|   590k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERy:
  216|   590k|    {                                                                        \
  217|   590k|        return val;                                                          \
  218|   590k|    }
_ZN3scn2v26detail15make_value_implIRyEEDaOT_:
  340|  1.19M|{
  341|  1.19M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.19M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.19M|    constexpr bool scannable_char =
  345|  1.19M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.19M|    static_assert(scannable_char,
  347|  1.19M|                  "Cannot scan an argument of an unsupported character "
  348|  1.19M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.19M|    constexpr bool scannable_const =
  351|  1.19M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.19M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.19M|    constexpr bool scannable_disabled =
  355|  1.19M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.19M|    static_assert(scannable_disabled,
  357|  1.19M|                  "Cannot scan an argument that has been disabled by "
  358|  1.19M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.19M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.19M|    static_assert(
  362|  1.19M|        scannable,
  363|  1.19M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.19M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.19M|    return arg_value{arg};
  367|  1.19M|}
_ZN3scn2v26detail9arg_valueC2IyEERT_:
  159|  1.19M|    {
  160|  1.19M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJyEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   539k|    {
  647|   539k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEE4argsEv:
  553|   451k|    {
  554|   451k|        return m_args;
  555|   451k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEyEENS0_14basic_scan_argIT_EERT0_:
  399|  51.4k|{
  400|  51.4k|    check_scan_arg_types<T>();
  401|       |
  402|  51.4k|    basic_scan_arg<Context> arg;
  403|  51.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  51.4k|    arg.m_value = make_value<Context>(value);
  405|  51.4k|    return arg;
  406|  51.4k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJaEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   526k|{
  619|   526k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   526k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   526k|    static_cast<    \
  |  |  247|   526k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   526k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEEC2EONSt3__15tupleIJaEEE:
  563|   526k|    {
  564|   526k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEE15make_data_arrayIJaEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   526k|    {
  574|   526k|        return {
  575|   526k|            detail::make_arg<base::is_packed, Context,
  576|   526k|                             detail::mapped_type_constant<
  577|   526k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   526k|                args)...};
  579|   526k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE1EavEENS1_9arg_valueERT2_:
  414|   526k|{
  415|   526k|    return make_value<Context>(value);
  416|   526k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEaEEDaRT0_:
  371|   576k|{
  372|   576k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   576k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   576k|                                  needs_context_tag>) {
  376|   576k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   576k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   576k|    }
  378|   576k|    else {
  379|   576k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   576k|            value, context_tag<Context>{}));
  381|   576k|    }
  382|   576k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERa:
  216|   576k|    {                                                                        \
  217|   576k|        return val;                                                          \
  218|   576k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJaEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   526k|    {
  647|   526k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPNS0_6detail9arg_valueE:
  693|  3.39M|    {
  694|  3.39M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEE4argsEv:
  553|   371k|    {
  554|   371k|        return m_args;
  555|   371k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEaEENS0_14basic_scan_argIT_EERT0_:
  399|  50.0k|{
  400|  50.0k|    check_scan_arg_types<T>();
  401|       |
  402|  50.0k|    basic_scan_arg<Context> arg;
  403|  50.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  50.0k|    arg.m_value = make_value<Context>(value);
  405|  50.0k|    return arg;
  406|  50.0k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
  476|  3.70M|    constexpr basic_scan_arg() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJhEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   499k|{
  619|   499k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   499k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   499k|    static_cast<    \
  |  |  247|   499k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   499k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEEC2EONSt3__15tupleIJhEEE:
  563|   499k|    {
  564|   499k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEE15make_data_arrayIJhEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   499k|    {
  574|   499k|        return {
  575|   499k|            detail::make_arg<base::is_packed, Context,
  576|   499k|                             detail::mapped_type_constant<
  577|   499k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   499k|                args)...};
  579|   499k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE6EhvEENS1_9arg_valueERT2_:
  414|   499k|{
  415|   499k|    return make_value<Context>(value);
  416|   499k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEhEEDaRT0_:
  371|   544k|{
  372|   544k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   544k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   544k|                                  needs_context_tag>) {
  376|   544k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   544k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   544k|    }
  378|   544k|    else {
  379|   544k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   544k|            value, context_tag<Context>{}));
  381|   544k|    }
  382|   544k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERh:
  216|   544k|    {                                                                        \
  217|   544k|        return val;                                                          \
  218|   544k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJhEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   499k|    {
  647|   499k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEE4argsEv:
  553|   344k|    {
  554|   344k|        return m_args;
  555|   344k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEhEENS0_14basic_scan_argIT_EERT0_:
  399|  44.9k|{
  400|  44.9k|    check_scan_arg_types<T>();
  401|       |
  402|  44.9k|    basic_scan_arg<Context> arg;
  403|  44.9k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  44.9k|    arg.m_value = make_value<Context>(value);
  405|  44.9k|    return arg;
  406|  44.9k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   630k|{
  619|   630k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   630k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   630k|    static_cast<    \
  |  |  247|   630k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   630k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2EONSt3__15tupleIJiEEE:
  563|   630k|    {
  564|   630k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEE15make_data_arrayIJiEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   630k|    {
  574|   630k|        return {
  575|   630k|            detail::make_arg<base::is_packed, Context,
  576|   630k|                             detail::mapped_type_constant<
  577|   630k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   630k|                args)...};
  579|   630k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEENS1_9arg_valueERT2_:
  414|   630k|{
  415|   630k|    return make_value<Context>(value);
  416|   630k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
  371|   686k|{
  372|   686k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   686k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   686k|                                  needs_context_tag>) {
  376|   686k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   686k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   686k|    }
  378|   686k|    else {
  379|   686k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   686k|            value, context_tag<Context>{}));
  381|   686k|    }
  382|   686k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERi:
  216|   686k|    {                                                                        \
  217|   686k|        return val;                                                          \
  218|   686k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   630k|    {
  647|   630k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
  553|   475k|    {
  554|   475k|        return m_args;
  555|   475k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEiEENS0_14basic_scan_argIT_EERT0_:
  399|  56.4k|{
  400|  56.4k|    check_scan_arg_types<T>();
  401|       |
  402|  56.4k|    basic_scan_arg<Context> arg;
  403|  56.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  56.4k|    arg.m_value = make_value<Context>(value);
  405|  56.4k|    return arg;
  406|  56.4k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   548k|{
  619|   548k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   548k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   548k|    static_cast<    \
  |  |  247|   548k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   548k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2EONSt3__15tupleIJjEEE:
  563|   548k|    {
  564|   548k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEE15make_data_arrayIJjEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   548k|    {
  574|   548k|        return {
  575|   548k|            detail::make_arg<base::is_packed, Context,
  576|   548k|                             detail::mapped_type_constant<
  577|   548k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   548k|                args)...};
  579|   548k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEENS1_9arg_valueERT2_:
  414|   548k|{
  415|   548k|    return make_value<Context>(value);
  416|   548k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
  371|   597k|{
  372|   597k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   597k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   597k|                                  needs_context_tag>) {
  376|   597k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   597k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   597k|    }
  378|   597k|    else {
  379|   597k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   597k|            value, context_tag<Context>{}));
  381|   597k|    }
  382|   597k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERj:
  216|   597k|    {                                                                        \
  217|   597k|        return val;                                                          \
  218|   597k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   548k|    {
  647|   548k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
  553|   393k|    {
  554|   393k|        return m_args;
  555|   393k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEjEENS0_14basic_scan_argIT_EERT0_:
  399|  48.7k|{
  400|  48.7k|    check_scan_arg_types<T>();
  401|       |
  402|  48.7k|    basic_scan_arg<Context> arg;
  403|  48.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  48.7k|    arg.m_value = make_value<Context>(value);
  405|  48.7k|    return arg;
  406|  48.7k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJxEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   636k|{
  619|   636k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   636k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   636k|    static_cast<    \
  |  |  247|   636k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   636k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEEC2EONSt3__15tupleIJxEEE:
  563|   636k|    {
  564|   636k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEE15make_data_arrayIJxEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   636k|    {
  574|   636k|        return {
  575|   636k|            detail::make_arg<base::is_packed, Context,
  576|   636k|                             detail::mapped_type_constant<
  577|   636k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   636k|                args)...};
  579|   636k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE5ExvEENS1_9arg_valueERT2_:
  414|   636k|{
  415|   636k|    return make_value<Context>(value);
  416|   636k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEExEEDaRT0_:
  371|   693k|{
  372|   693k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   693k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   693k|                                  needs_context_tag>) {
  376|   693k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   693k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   693k|    }
  378|   693k|    else {
  379|   693k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   693k|            value, context_tag<Context>{}));
  381|   693k|    }
  382|   693k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERx:
  216|   693k|    {                                                                        \
  217|   693k|        return val;                                                          \
  218|   693k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJxEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   636k|    {
  647|   636k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEE4argsEv:
  553|   481k|    {
  554|   481k|        return m_args;
  555|   481k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEExEENS0_14basic_scan_argIT_EERT0_:
  399|  57.0k|{
  400|  57.0k|    check_scan_arg_types<T>();
  401|       |
  402|  57.0k|    basic_scan_arg<Context> arg;
  403|  57.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  57.0k|    arg.m_value = make_value<Context>(value);
  405|  57.0k|    return arg;
  406|  57.0k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJyEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   552k|{
  619|   552k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   552k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   552k|    static_cast<    \
  |  |  247|   552k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   552k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEEC2EONSt3__15tupleIJyEEE:
  563|   552k|    {
  564|   552k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEE15make_data_arrayIJyEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   552k|    {
  574|   552k|        return {
  575|   552k|            detail::make_arg<base::is_packed, Context,
  576|   552k|                             detail::mapped_type_constant<
  577|   552k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   552k|                args)...};
  579|   552k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE10EyvEENS1_9arg_valueERT2_:
  414|   552k|{
  415|   552k|    return make_value<Context>(value);
  416|   552k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEyEEDaRT0_:
  371|   601k|{
  372|   601k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   601k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   601k|                                  needs_context_tag>) {
  376|   601k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   601k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   601k|    }
  378|   601k|    else {
  379|   601k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   601k|            value, context_tag<Context>{}));
  381|   601k|    }
  382|   601k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERy:
  216|   601k|    {                                                                        \
  217|   601k|        return val;                                                          \
  218|   601k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJyEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   552k|    {
  647|   552k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEE4argsEv:
  553|   397k|    {
  554|   397k|        return m_args;
  555|   397k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEyEENS0_14basic_scan_argIT_EERT0_:
  399|  49.0k|{
  400|  49.0k|    check_scan_arg_types<T>();
  401|       |
  402|  49.0k|    basic_scan_arg<Context> arg;
  403|  49.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  49.0k|    arg.m_value = make_value<Context>(value);
  405|  49.0k|    return arg;
  406|  49.0k|}
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
  681|  3.40M|    {
  682|  3.40M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  3.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.40M]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|  3.40M|        return static_cast<std::size_t>(m_desc &
  687|  3.40M|                                        ((1 << detail::packed_arg_bits) - 1));
  688|  3.40M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
  701|  6.81M|    {
  702|  6.81M|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|  6.81M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
  654|  3.40M|    {
  655|  3.40M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  3.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.40M]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  3.40M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  3.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.40M]
  |  |  ------------------
  ------------------
  663|      0|            return {};
  664|      0|        }
  665|       |
  666|  3.40M|        const auto t = type(id);
  667|  3.40M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  3.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.40M]
  |  |  ------------------
  ------------------
  668|      0|            return {};
  669|      0|        }
  670|       |
  671|  3.40M|        basic_scan_arg<Context> arg;
  672|  3.40M|        arg.m_type = t;
  673|  3.40M|        arg.m_value = m_values[id];
  674|  3.40M|        return arg;
  675|  3.40M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
  706|  3.40M|    {
  707|       |        // First (0th) index is size, types start after that
  708|  3.40M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  3.40M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  3.40M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  3.40M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
  482|  6.32M|    {
  483|  6.32M|        return m_type != detail::arg_type::none_type;
  484|  6.32M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
  487|  5.50M|    {
  488|  5.50M|        return m_type;
  489|  5.50M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
  681|  3.39M|    {
  682|  3.39M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  3.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.39M]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|  3.39M|        return static_cast<std::size_t>(m_desc &
  687|  3.39M|                                        ((1 << detail::packed_arg_bits) - 1));
  688|  3.39M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
  701|  6.78M|    {
  702|  6.78M|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|  6.78M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
  654|  3.39M|    {
  655|  3.39M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  3.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.39M]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  3.39M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  3.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.39M]
  |  |  ------------------
  ------------------
  663|      0|            return {};
  664|      0|        }
  665|       |
  666|  3.39M|        const auto t = type(id);
  667|  3.39M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  3.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.39M]
  |  |  ------------------
  ------------------
  668|      0|            return {};
  669|      0|        }
  670|       |
  671|  3.39M|        basic_scan_arg<Context> arg;
  672|  3.39M|        arg.m_type = t;
  673|  3.39M|        arg.m_value = m_values[id];
  674|  3.39M|        return arg;
  675|  3.39M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
  706|  3.39M|    {
  707|       |        // First (0th) index is size, types start after that
  708|  3.39M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  3.39M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  3.39M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  3.39M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
  482|  6.20M|    {
  483|  6.20M|        return m_type != detail::arg_type::none_type;
  484|  6.20M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
  487|  5.56M|    {
  488|  5.56M|        return m_type;
  489|  5.56M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
  634|   327k|    constexpr basic_scan_args() = default;
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
  634|   306k|    constexpr basic_scan_args() = default;

_ZN3scn2v218basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|   277k|    {
  109|   277k|    }
_ZN3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
   59|  2.75M|    {
   60|  2.75M|    }
_ZNK3scn2v218basic_scan_contextIcE5beginEv:
  123|   514k|    {
  124|   514k|        return m_current;
  125|   514k|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
   42|  2.75M|    {
   43|  2.75M|        return m_args.get(id);
   44|  2.75M|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
   52|  2.59M|    {
   53|  2.59M|        return m_locale;
   54|  2.59M|    }
_ZNK3scn2v218basic_scan_contextIcE3endEv:
  131|   197k|    {
  132|   197k|        return ranges_std::default_sentinel;
  133|   197k|    }
_ZN3scn2v218basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
  145|  39.5k|    {
  146|  39.5k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  39.5k|    static_cast<    \
  |  |  247|  39.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  147|  39.5k|    }
_ZNK3scn2v218basic_scan_contextIcE5rangeEv:
  139|   197k|    {
  140|   197k|        return ranges::subrange{begin(), end()};
  141|   197k|    }
_ZN3scn2v218basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|   456k|    {
  109|   456k|    }
_ZN3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
   59|  2.78M|    {
   60|  2.78M|    }
_ZNK3scn2v218basic_scan_contextIwE5beginEv:
  123|   812k|    {
  124|   812k|        return m_current;
  125|   812k|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
   42|  2.78M|    {
   43|  2.78M|        return m_args.get(id);
   44|  2.78M|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
   52|  2.50M|    {
   53|  2.50M|        return m_locale;
   54|  2.50M|    }
_ZNK3scn2v218basic_scan_contextIwE3endEv:
  131|   317k|    {
  132|   317k|        return ranges_std::default_sentinel;
  133|   317k|    }
_ZN3scn2v218basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
  145|  38.7k|    {
  146|  38.7k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  38.7k|    static_cast<    \
  |  |  247|  38.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  147|  38.7k|    }
_ZNK3scn2v218basic_scan_contextIwE5rangeEv:
  139|   317k|    {
  140|   317k|        return ranges::subrange{begin(), end()};
  141|   317k|    }

_ZN3scn2v210scan_errorC2ENS1_4codeEPKc:
   68|  2.11M|    {
   69|  2.11M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|  2.11M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   70|  2.11M|    }
_ZNK3scn2v210scan_errorcvbEv:
   74|  26.5M|    {
   75|  26.5M|        return m_code == good;
   76|  26.5M|    }
_ZNK3scn2v210scan_error4codeEv:
   85|   874k|    {
   86|   874k|        return m_code;
   87|   874k|    }
_ZN3scn2v2eqENS0_10scan_errorENS1_4codeE:
  110|   874k|{
  111|   874k|    return a.code() == b;
  112|   874k|}
_ZN3scn2v2neENS0_10scan_errorENS1_4codeE:
  115|   874k|{
  116|   874k|    return !(a == b);
  117|   874k|}
_ZN3scn2v210scan_errorC2Ev:
   62|  16.1M|    constexpr scan_error() SCN_NOEXCEPT = default;

_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   484k|    {
  675|   484k|        return m_str;
  676|   484k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  384|  3.40M|{
  385|  3.40M|    return s;
  386|  3.40M|}
_ZN3scn2v26detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
  361|  3.40M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   484k|    {
  671|   484k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   428k|    {
  675|   428k|        return m_str;
  676|   428k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   428k|    {
  671|   428k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   601k|    {
  675|   601k|        return m_str;
  676|   601k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   601k|    {
  671|   601k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   485k|    {
  675|   485k|        return m_str;
  676|   485k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   485k|    {
  671|   485k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   612k|    {
  675|   612k|        return m_str;
  676|   612k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   612k|    {
  671|   612k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   491k|    {
  675|   491k|        return m_str;
  676|   491k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   491k|    {
  671|   491k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  52.7k|    {
  675|  52.7k|        return m_str;
  676|  52.7k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  52.7k|    {
  671|  52.7k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  48.3k|    {
  675|  48.3k|        return m_str;
  676|  48.3k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  48.3k|    {
  671|  48.3k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  52.7k|    {
  675|  52.7k|        return m_str;
  676|  52.7k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  52.7k|    {
  671|  52.7k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  48.3k|    {
  675|  48.3k|        return m_str;
  676|  48.3k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  48.3k|    {
  671|  48.3k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  52.7k|    {
  675|  52.7k|        return m_str;
  676|  52.7k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  52.7k|    {
  671|  52.7k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  48.3k|    {
  675|  48.3k|        return m_str;
  676|  48.3k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  48.3k|    {
  671|  48.3k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   449k|    {
  675|   449k|        return m_str;
  676|   449k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
  389|  3.39M|{
  390|  3.39M|    return s;
  391|  3.39M|}
_ZN3scn2v26detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
  361|  3.39M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   449k|    {
  671|   449k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   414k|    {
  675|   414k|        return m_str;
  676|   414k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   414k|    {
  671|   414k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   545k|    {
  675|   545k|        return m_str;
  676|   545k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   545k|    {
  671|   545k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   463k|    {
  675|   463k|        return m_str;
  676|   463k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   463k|    {
  671|   463k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   551k|    {
  675|   551k|        return m_str;
  676|   551k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   551k|    {
  671|   551k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   467k|    {
  675|   467k|        return m_str;
  676|   467k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   467k|    {
  671|   467k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  77.4k|    {
  675|  77.4k|        return m_str;
  676|  77.4k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  77.4k|    {
  671|  77.4k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  85.1k|    {
  675|  85.1k|        return m_str;
  676|  85.1k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  85.1k|    {
  671|  85.1k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  85.1k|    {
  675|  85.1k|        return m_str;
  676|  85.1k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  85.1k|    {
  671|  85.1k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  85.1k|    {
  675|  85.1k|        return m_str;
  676|  85.1k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  85.1k|    {
  671|  85.1k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  85.1k|    {
  675|  85.1k|        return m_str;
  676|  85.1k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  85.1k|    {
  671|  85.1k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  85.1k|    {
  675|  85.1k|        return m_str;
  676|  85.1k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  85.1k|    {
  671|  85.1k|    }

_ZNK3scn2v26detail12format_specs8get_baseEi:
  195|  5.05M|    {
  196|  5.05M|        SCN_GCC_COMPAT_PUSH
  197|  5.05M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
  198|  5.05M|        switch (type) {
  199|  1.26M|            case presentation_type::none:
  ------------------
  |  Branch (199:13): [True: 1.26M, False: 3.79M]
  ------------------
  200|  2.51M|            case presentation_type::int_generic:
  ------------------
  |  Branch (200:13): [True: 1.25M, False: 3.79M]
  ------------------
  201|  2.51M|                return default_base;
  202|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (202:13): [True: 0, False: 5.05M]
  ------------------
  203|      0|                return arbitrary_base;
  204|       |
  205|   223k|            case presentation_type::int_binary:
  ------------------
  |  Branch (205:13): [True: 223k, False: 4.83M]
  ------------------
  206|   223k|                return 2;
  207|   423k|            case presentation_type::int_octal:
  ------------------
  |  Branch (207:13): [True: 423k, False: 4.63M]
  ------------------
  208|   423k|                return 8;
  209|   890k|            case presentation_type::int_decimal:
  ------------------
  |  Branch (209:13): [True: 890k, False: 4.16M]
  ------------------
  210|   890k|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (210:13): [True: 0, False: 5.05M]
  ------------------
  211|   890k|                return 10;
  212|   998k|            case presentation_type::int_hex:
  ------------------
  |  Branch (212:13): [True: 998k, False: 4.05M]
  ------------------
  213|   998k|                return 16;
  214|       |
  215|      0|            default:
  ------------------
  |  Branch (215:13): [True: 0, False: 5.05M]
  ------------------
  216|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  217|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  218|  5.05M|        }
  219|  5.05M|        SCN_GCC_COMPAT_POP
  220|  5.05M|    }
_ZN3scn2v26detail12specs_setterC2ERNS1_12format_specsE:
  232|  5.53M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v26detail12specs_setter12on_localizedEv:
  244|  1.27M|    {
  245|  1.27M|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  126|  1.27M|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (245:23): [Folded - Ignored]
  ------------------
  246|  1.27M|            m_specs.localized = true;
  247|  1.27M|        }
  248|      0|        else {
  249|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
  250|      0|        }
  251|  1.27M|    }
_ZN3scn2v26detail12specs_setter7on_typeENS1_17presentation_typeE:
  259|  3.97M|    {
  260|  3.97M|        m_specs.type = type;
  261|  3.97M|    }
_ZN3scn2v26detail12specs_setter8on_errorEPKc:
  321|   291k|    {
  322|   291k|        SCN_UNLIKELY_ATTR
  323|   291k|        m_error = scan_error{scan_error::invalid_format_string, msg};
  324|   291k|    }
_ZNK3scn2v26detail12specs_settercvbEv:
  332|  5.24M|    {
  333|  5.24M|        return static_cast<bool>(m_error);
  334|  5.24M|    }
_ZN3scn2v26detail25get_category_for_arg_typeENS1_8arg_typeE:
  986|  1.27M|{
  987|  1.27M|    switch (type) {
  988|      0|        case arg_type::none_type:
  ------------------
  |  Branch (988:9): [True: 0, False: 1.27M]
  ------------------
  989|      0|            return arg_type_category::none;
  990|       |
  991|   208k|        case arg_type::schar_type:
  ------------------
  |  Branch (991:9): [True: 208k, False: 1.06M]
  ------------------
  992|   208k|        case arg_type::short_type:
  ------------------
  |  Branch (992:9): [True: 0, False: 1.27M]
  ------------------
  993|   445k|        case arg_type::int_type:
  ------------------
  |  Branch (993:9): [True: 237k, False: 1.03M]
  ------------------
  994|   445k|        case arg_type::long_type:
  ------------------
  |  Branch (994:9): [True: 0, False: 1.27M]
  ------------------
  995|   685k|        case arg_type::llong_type:
  ------------------
  |  Branch (995:9): [True: 239k, False: 1.03M]
  ------------------
  996|   685k|            return arg_type_category::integer;
  997|       |
  998|   183k|        case arg_type::uchar_type:
  ------------------
  |  Branch (998:9): [True: 183k, False: 1.08M]
  ------------------
  999|   183k|        case arg_type::ushort_type:
  ------------------
  |  Branch (999:9): [True: 0, False: 1.27M]
  ------------------
 1000|   383k|        case arg_type::uint_type:
  ------------------
  |  Branch (1000:9): [True: 200k, False: 1.07M]
  ------------------
 1001|   383k|        case arg_type::ulong_type:
  ------------------
  |  Branch (1001:9): [True: 0, False: 1.27M]
  ------------------
 1002|   585k|        case arg_type::ullong_type:
  ------------------
  |  Branch (1002:9): [True: 201k, False: 1.06M]
  ------------------
 1003|   585k|            return arg_type_category::unsigned_integer;
 1004|       |
 1005|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (1005:9): [True: 0, False: 1.27M]
  ------------------
 1006|      0|            return arg_type_category::pointer;
 1007|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (1007:9): [True: 0, False: 1.27M]
  ------------------
 1008|      0|            return arg_type_category::boolean;
 1009|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (1009:9): [True: 0, False: 1.27M]
  ------------------
 1010|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (1010:9): [True: 0, False: 1.27M]
  ------------------
 1011|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (1011:9): [True: 0, False: 1.27M]
  ------------------
 1012|      0|            return arg_type_category::character;
 1013|       |
 1014|      0|        case arg_type::float_type:
  ------------------
  |  Branch (1014:9): [True: 0, False: 1.27M]
  ------------------
 1015|      0|        case arg_type::double_type:
  ------------------
  |  Branch (1015:9): [True: 0, False: 1.27M]
  ------------------
 1016|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (1016:9): [True: 0, False: 1.27M]
  ------------------
 1017|      0|            return arg_type_category::floating;
 1018|       |
 1019|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (1019:9): [True: 0, False: 1.27M]
  ------------------
 1020|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (1020:9): [True: 0, False: 1.27M]
  ------------------
 1021|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (1021:9): [True: 0, False: 1.27M]
  ------------------
 1022|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (1022:9): [True: 0, False: 1.27M]
  ------------------
 1023|      0|            return arg_type_category::string;
 1024|       |
 1025|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (1025:9): [True: 0, False: 1.27M]
  ------------------
 1026|      0|            return arg_type_category::custom;
 1027|       |
 1028|      0|            SCN_CLANG_PUSH
 1029|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 1030|      0|        default:
  ------------------
  |  Branch (1030:9): [True: 0, False: 1.27M]
  ------------------
 1031|      0|            SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1032|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1033|  1.27M|            SCN_CLANG_POP
 1034|  1.27M|    }
 1035|       |
 1036|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1037|  1.27M|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|  2.47M|{
  968|  2.47M|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|  2.47M|    handler.check_args_exhausted();
  970|  2.47M|    return handler.get_error();
  971|  2.47M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|  2.47M|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|  2.47M|    auto begin = format.data();
  937|  2.47M|    auto it = begin;
  938|  2.47M|    const auto end = format.data() + format.size();
  939|       |
  940|  4.71M|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 2.47M, False: 2.23M]
  ------------------
  941|  2.47M|        const auto ch = *it++;
  942|  2.47M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 2.47M, False: 0]
  ------------------
  943|  2.47M|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|  2.47M|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|  2.47M|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 237k, False: 2.23M]
  ------------------
  947|   237k|                return;
  948|   237k|            }
  949|  2.47M|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|  2.47M|    }
  960|       |
  961|  2.23M|    handler.on_literal_text(begin, end);
  962|  2.23M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
  865|  2.47M|{
  866|  2.47M|    struct id_adapter {
  867|  2.47M|        constexpr void operator()()
  868|  2.47M|        {
  869|  2.47M|            arg_id = handler.on_arg_id();
  870|  2.47M|        }
  871|  2.47M|        constexpr void operator()(std::size_t id)
  872|  2.47M|        {
  873|  2.47M|            arg_id = handler.on_arg_id(id);
  874|  2.47M|        }
  875|       |
  876|  2.47M|        constexpr void on_error(const char* msg)
  877|  2.47M|        {
  878|  2.47M|            SCN_UNLIKELY_ATTR
  879|  2.47M|            handler.on_error(msg);
  880|  2.47M|        }
  881|       |
  882|  2.47M|        Handler& handler;
  883|  2.47M|        std::size_t arg_id;
  884|  2.47M|    };
  885|       |
  886|  2.47M|    ++begin;
  887|  2.47M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  2.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.47M]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|  2.47M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 2.47M]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|  2.47M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 2.47M]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|  2.47M|    else {
  899|  2.47M|        auto adapter = id_adapter{handler, 0};
  900|  2.47M|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|  2.47M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  2.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.47M]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|  2.47M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 2.47M]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|  2.47M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 2.47M, False: 0]
  ------------------
  911|  2.47M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  2.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.47M]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|  2.47M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|  2.47M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  4.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 79.1k, False: 2.39M]
  |  |  |  Branch (153:45): [True: 0, False: 2.47M]
  |  |  |  Branch (153:45): [True: 79.1k, False: 2.39M]
  |  |  ------------------
  ------------------
  917|  79.1k|                handler.on_error("Unknown format specifier");
  918|  79.1k|                return begin;
  919|  79.1k|            }
  920|  2.47M|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|  2.47M|    }
  927|  2.39M|    return begin + 1;
  928|  2.47M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  2.47M|{
  400|  2.47M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  2.47M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.47M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  2.47M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 2.47M, False: 0]
  |  Branch (401:26): [True: 0, False: 2.47M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  2.47M|    handler();
  406|  2.47M|    return begin;
  407|  2.47M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|  2.47M|        {
  869|  2.47M|            arg_id = handler.on_arg_id();
  870|  2.47M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1045|  2.47M|    {
 1046|  2.47M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  2.47M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.47M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|  2.47M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  794|  2.47M|{
  795|  2.47M|    auto do_presentation = [&]() -> const CharT* {
  796|  2.47M|        if (*begin == CharT{'['}) {
  797|  2.47M|            auto set = parse_presentation_set(begin, end, handler);
  798|  2.47M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|  2.47M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|  2.47M|                return begin;
  803|  2.47M|            }
  804|  2.47M|            handler.on_character_set_string(set);
  805|  2.47M|            return begin;
  806|  2.47M|        }
  807|  2.47M|        if (*begin == CharT{'/'}) {
  808|  2.47M|            return parse_presentation_regex(begin, end, handler);
  809|  2.47M|        }
  810|  2.47M|        presentation_type type = parse_presentation_type(*begin++);
  811|  2.47M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|  2.47M|            handler.on_error("Invalid type specifier in format string");
  813|  2.47M|            return begin;
  814|  2.47M|        }
  815|  2.47M|        handler.on_type(type);
  816|  2.47M|        return begin;
  817|  2.47M|    };
  818|       |
  819|  2.47M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 2.47M, False: 0]
  |  Branch (819:28): [True: 2.42M, False: 52.7k]
  ------------------
  820|  2.47M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 2.39M, False: 26.3k]
  |  Branch (820:36): [True: 1.76M, False: 630k]
  ------------------
  821|  1.76M|        return do_presentation();
  822|  1.76M|    }
  823|       |
  824|   709k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   709k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 709k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   709k|    begin = parse_align(begin, end, handler);
  830|   709k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   709k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 709k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   709k|    begin = parse_width(begin, end, handler);
  836|   709k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   709k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 709k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   709k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 630k, False: 79.1k]
  ------------------
  842|   630k|        handler.on_localized();
  843|   630k|        ++begin;
  844|   630k|    }
  845|   709k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   709k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 709k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   709k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 709k, False: 0]
  |  Branch (850:25): [True: 79.1k, False: 630k]
  ------------------
  851|  79.1k|        do_presentation();
  852|  79.1k|    }
  853|   709k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   709k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 709k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   709k|    return begin;
  859|   709k|}
_ZN3scn2v26detail15is_ascii_letterIcEEbT_:
  463|  2.64M|{
  464|  2.64M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 1.93M, False: 709k]
  |  Branch (464:33): [True: 1.93M, False: 0]
  ------------------
  465|  2.64M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 656k, False: 52.7k]
  |  Branch (465:33): [True: 656k, False: 0]
  ------------------
  466|  2.64M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  795|  1.84M|    auto do_presentation = [&]() -> const CharT* {
  796|  1.84M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 1.84M]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|  1.84M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 1.84M]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|  1.84M|        presentation_type type = parse_presentation_type(*begin++);
  811|  1.84M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  1.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 52.7k, False: 1.79M]
  |  |  ------------------
  ------------------
  812|  52.7k|            handler.on_error("Invalid type specifier in format string");
  813|  52.7k|            return begin;
  814|  52.7k|        }
  815|  1.79M|        handler.on_type(type);
  816|  1.79M|        return begin;
  817|  1.84M|    };
_ZN3scn2v26detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
  411|  2.09M|{
  412|  2.09M|    switch (type) {
  413|  95.3k|        case 'b':
  ------------------
  |  Branch (413:9): [True: 95.3k, False: 1.99M]
  ------------------
  414|   148k|        case 'B':
  ------------------
  |  Branch (414:9): [True: 52.7k, False: 2.04M]
  ------------------
  415|   148k|            return presentation_type::int_binary;
  416|   461k|        case 'd':
  ------------------
  |  Branch (416:9): [True: 461k, False: 1.63M]
  ------------------
  417|   461k|            return presentation_type::int_decimal;
  418|   655k|        case 'i':
  ------------------
  |  Branch (418:9): [True: 655k, False: 1.43M]
  ------------------
  419|   655k|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 2.09M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|   207k|        case 'o':
  ------------------
  |  Branch (422:9): [True: 207k, False: 1.88M]
  ------------------
  423|   207k|            return presentation_type::int_octal;
  424|   516k|        case 'x':
  ------------------
  |  Branch (424:9): [True: 516k, False: 1.57M]
  ------------------
  425|   516k|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 2.09M]
  ------------------
  426|   516k|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 2.09M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 2.09M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|      0|        case 'a':
  ------------------
  |  Branch (430:9): [True: 0, False: 2.09M]
  ------------------
  431|      0|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 2.09M]
  ------------------
  432|      0|            return presentation_type::float_hex;
  433|      0|        case 'e':
  ------------------
  |  Branch (433:9): [True: 0, False: 2.09M]
  ------------------
  434|      0|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 2.09M]
  ------------------
  435|      0|            return presentation_type::float_scientific;
  436|      0|        case 'f':
  ------------------
  |  Branch (436:9): [True: 0, False: 2.09M]
  ------------------
  437|      0|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 2.09M]
  ------------------
  438|      0|            return presentation_type::float_fixed;
  439|      0|        case 'g':
  ------------------
  |  Branch (439:9): [True: 0, False: 2.09M]
  ------------------
  440|      0|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 2.09M]
  ------------------
  441|      0|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 2.09M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 2.09M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 2.09M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 2.09M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 2.09M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 2.09M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|   105k|        default:
  ------------------
  |  Branch (456:9): [True: 105k, False: 1.98M]
  ------------------
  457|   105k|            return presentation_type::none;
  458|  2.09M|    }
  459|  2.09M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  488|   709k|{
  489|   709k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   709k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   709k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   709k|        switch (ch) {
  493|   709k|            case L'<':
  494|   709k|                return align_type::left;
  495|   709k|            case L'>':
  496|   709k|                return align_type::right;
  497|   709k|            case L'^':
  498|   709k|                return align_type::center;
  499|   709k|            default:
  500|   709k|                return align_type::none;
  501|   709k|        }
  502|   709k|    };
  503|       |
  504|   709k|    auto potential_fill_len = code_point_length(begin, end);
  505|   709k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|  1.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 709k]
  |  |  |  Branch (153:45): [True: 0, False: 709k]
  |  |  |  Branch (153:45): [True: 0, False: 709k]
  |  |  ------------------
  ------------------
  506|   709k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   709k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   709k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   709k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   709k|    const auto begin_before_fill = begin;
  516|   709k|    begin += potential_fill_len;
  517|       |
  518|   709k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 709k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   709k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   709k|    const auto begin_after_fill = begin;
  524|   709k|    ++begin;
  525|       |
  526|   709k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 709k, False: 0]
  ------------------
  527|   709k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   709k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 709k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   709k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 709k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   709k|    }
  535|       |
  536|   709k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 709k, False: 0]
  ------------------
  537|   709k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 709k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   709k|        return begin_before_fill;
  542|   709k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   709k|}
_ZN3scn2v26detail17code_point_lengthIcEEiPKT_S5_:
  470|   815k|{
  471|   815k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   815k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   815k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|   815k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|   815k|        return 1;
  474|   815k|    }
  475|   815k|    else {
  476|   815k|        const auto lengths =
  477|   815k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|   815k|            "\3\4";
  479|   815k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|   815k|        return len;
  481|   815k|    }
  482|   815k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|  1.41M|    auto check_align = [](wchar_t ch) {
  492|  1.41M|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 1.41M]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 1.41M]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 1.41M]
  ------------------
  498|      0|                return align_type::center;
  499|  1.41M|            default:
  ------------------
  |  Branch (499:13): [True: 1.41M, False: 0]
  ------------------
  500|  1.41M|                return align_type::none;
  501|  1.41M|        }
  502|  1.41M|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  553|   709k|{
  554|   709k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   709k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   709k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   709k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 656k, False: 52.7k]
  |  Branch (556:33): [True: 0, False: 656k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   709k|    return begin;
  567|   709k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 1050|   630k|    {
 1051|   630k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|   630k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 285k, False: 344k]
  ------------------
 1053|   630k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 285k]
  ------------------
 1054|   630k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|   630k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|   630k|        Handler::on_localized();
 1063|   630k|    }
_ZN3scn2v26detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 1072|  5.09M|{
 1073|  5.09M|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  153|  5.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.09M]
  |  |  ------------------
  ------------------
 1074|      0|        return handler.on_error("Invalid type specifier for integer type");
 1075|      0|    }
 1076|  5.09M|    if (specs.localized) {
  ------------------
  |  Branch (1076:9): [True: 1.27M, False: 3.82M]
  ------------------
 1077|  1.27M|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  153|  1.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.27M]
  |  |  ------------------
  ------------------
 1078|       |            // clang-format off
 1079|      0|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 1080|       |            // clang-format on
 1081|      0|            return;
 1082|      0|        }
 1083|  1.27M|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  153|  1.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.27M]
  |  |  ------------------
  ------------------
 1084|       |            // clang-format off
 1085|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 1086|       |            // clang-format on
 1087|      0|        }
 1088|  1.27M|    }
 1089|  5.09M|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|   277k|{
  968|   277k|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|   277k|    handler.check_args_exhausted();
  970|   277k|    return handler.get_error();
  971|   277k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|   277k|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|   277k|    auto begin = format.data();
  937|   277k|    auto it = begin;
  938|   277k|    const auto end = format.data() + format.size();
  939|       |
  940|   316k|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 277k, False: 39.5k]
  ------------------
  941|   277k|        const auto ch = *it++;
  942|   277k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 277k, False: 0]
  ------------------
  943|   277k|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|   277k|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|   277k|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 237k, False: 39.5k]
  ------------------
  947|   237k|                return;
  948|   237k|            }
  949|   277k|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|   277k|    }
  960|       |
  961|  39.5k|    handler.on_literal_text(begin, end);
  962|  39.5k|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
  865|   277k|{
  866|   277k|    struct id_adapter {
  867|   277k|        constexpr void operator()()
  868|   277k|        {
  869|   277k|            arg_id = handler.on_arg_id();
  870|   277k|        }
  871|   277k|        constexpr void operator()(std::size_t id)
  872|   277k|        {
  873|   277k|            arg_id = handler.on_arg_id(id);
  874|   277k|        }
  875|       |
  876|   277k|        constexpr void on_error(const char* msg)
  877|   277k|        {
  878|   277k|            SCN_UNLIKELY_ATTR
  879|   277k|            handler.on_error(msg);
  880|   277k|        }
  881|       |
  882|   277k|        Handler& handler;
  883|   277k|        std::size_t arg_id;
  884|   277k|    };
  885|       |
  886|   277k|    ++begin;
  887|   277k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 277k]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|   277k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 277k]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|   277k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 277k]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|   277k|    else {
  899|   277k|        auto adapter = id_adapter{handler, 0};
  900|   277k|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|   277k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 277k]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|   277k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 277k]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|   277k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 277k, False: 0]
  ------------------
  911|   277k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 277k]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|   277k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|   277k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|   554k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 79.1k, False: 197k]
  |  |  |  Branch (153:45): [True: 0, False: 277k]
  |  |  |  Branch (153:45): [True: 79.1k, False: 197k]
  |  |  ------------------
  ------------------
  917|  79.1k|                handler.on_error("Unknown format specifier");
  918|  79.1k|                return begin;
  919|  79.1k|            }
  920|   277k|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|   277k|    }
  927|   197k|    return begin + 1;
  928|   277k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   277k|{
  400|   277k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   277k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   277k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   277k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 277k, False: 0]
  |  Branch (401:26): [True: 0, False: 277k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   277k|    handler();
  406|   277k|    return begin;
  407|   277k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|   277k|        {
  869|   277k|            arg_id = handler.on_arg_id();
  870|   277k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1045|   277k|    {
 1046|   277k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|   277k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   277k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|   277k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  794|   277k|{
  795|   277k|    auto do_presentation = [&]() -> const CharT* {
  796|   277k|        if (*begin == CharT{'['}) {
  797|   277k|            auto set = parse_presentation_set(begin, end, handler);
  798|   277k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|   277k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|   277k|                return begin;
  803|   277k|            }
  804|   277k|            handler.on_character_set_string(set);
  805|   277k|            return begin;
  806|   277k|        }
  807|   277k|        if (*begin == CharT{'/'}) {
  808|   277k|            return parse_presentation_regex(begin, end, handler);
  809|   277k|        }
  810|   277k|        presentation_type type = parse_presentation_type(*begin++);
  811|   277k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|   277k|            handler.on_error("Invalid type specifier in format string");
  813|   277k|            return begin;
  814|   277k|        }
  815|   277k|        handler.on_type(type);
  816|   277k|        return begin;
  817|   277k|    };
  818|       |
  819|   277k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 277k, False: 0]
  |  Branch (819:28): [True: 224k, False: 52.7k]
  ------------------
  820|   277k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 197k, False: 26.3k]
  |  Branch (820:36): [True: 171k, False: 26.3k]
  ------------------
  821|   171k|        return do_presentation();
  822|   171k|    }
  823|       |
  824|   105k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 105k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   105k|    begin = parse_align(begin, end, handler);
  830|   105k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 105k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   105k|    begin = parse_width(begin, end, handler);
  836|   105k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 105k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   105k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 26.3k, False: 79.1k]
  ------------------
  842|  26.3k|        handler.on_localized();
  843|  26.3k|        ++begin;
  844|  26.3k|    }
  845|   105k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 105k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   105k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 105k, False: 0]
  |  Branch (850:25): [True: 79.1k, False: 26.3k]
  ------------------
  851|  79.1k|        do_presentation();
  852|  79.1k|    }
  853|   105k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 105k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   105k|    return begin;
  859|   105k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  795|   250k|    auto do_presentation = [&]() -> const CharT* {
  796|   250k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 250k]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|   250k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 250k]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|   250k|        presentation_type type = parse_presentation_type(*begin++);
  811|   250k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 52.7k, False: 197k]
  |  |  ------------------
  ------------------
  812|  52.7k|            handler.on_error("Invalid type specifier in format string");
  813|  52.7k|            return begin;
  814|  52.7k|        }
  815|   197k|        handler.on_type(type);
  816|   197k|        return begin;
  817|   250k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  488|   105k|{
  489|   105k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   105k|        switch (ch) {
  493|   105k|            case L'<':
  494|   105k|                return align_type::left;
  495|   105k|            case L'>':
  496|   105k|                return align_type::right;
  497|   105k|            case L'^':
  498|   105k|                return align_type::center;
  499|   105k|            default:
  500|   105k|                return align_type::none;
  501|   105k|        }
  502|   105k|    };
  503|       |
  504|   105k|    auto potential_fill_len = code_point_length(begin, end);
  505|   105k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   211k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 105k]
  |  |  |  Branch (153:45): [True: 0, False: 105k]
  |  |  |  Branch (153:45): [True: 0, False: 105k]
  |  |  ------------------
  ------------------
  506|   105k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   105k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   105k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   105k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   105k|    const auto begin_before_fill = begin;
  516|   105k|    begin += potential_fill_len;
  517|       |
  518|   105k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 105k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   105k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   105k|    const auto begin_after_fill = begin;
  524|   105k|    ++begin;
  525|       |
  526|   105k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 105k, False: 0]
  ------------------
  527|   105k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 105k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   105k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 105k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   105k|    }
  535|       |
  536|   105k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 105k, False: 0]
  ------------------
  537|   105k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 105k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   105k|        return begin_before_fill;
  542|   105k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   105k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|   211k|    auto check_align = [](wchar_t ch) {
  492|   211k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 211k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 211k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 211k]
  ------------------
  498|      0|                return align_type::center;
  499|   211k|            default:
  ------------------
  |  Branch (499:13): [True: 211k, False: 0]
  ------------------
  500|   211k|                return align_type::none;
  501|   211k|        }
  502|   211k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  553|   105k|{
  554|   105k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   105k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 52.7k, False: 52.7k]
  |  Branch (556:33): [True: 0, False: 52.7k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   105k|    return begin;
  567|   105k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 1050|  26.3k|    {
 1051|  26.3k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|  26.3k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 13.1k, False: 13.1k]
  ------------------
 1053|  26.3k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 13.1k]
  ------------------
 1054|  26.3k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|  26.3k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|  26.3k|        Handler::on_localized();
 1063|  26.3k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|  2.32M|{
  968|  2.32M|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|  2.32M|    handler.check_args_exhausted();
  970|  2.32M|    return handler.get_error();
  971|  2.32M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|  2.32M|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|  2.32M|    auto begin = format.data();
  937|  2.32M|    auto it = begin;
  938|  2.32M|    const auto end = format.data() + format.size();
  939|       |
  940|  4.23M|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 2.32M, False: 1.90M]
  ------------------
  941|  2.32M|        const auto ch = *it++;
  942|  2.32M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 2.32M, False: 0]
  ------------------
  943|  2.32M|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|  2.32M|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|  2.32M|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 418k, False: 1.90M]
  ------------------
  947|   418k|                return;
  948|   418k|            }
  949|  2.32M|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|  2.32M|    }
  960|       |
  961|  1.90M|    handler.on_literal_text(begin, end);
  962|  1.90M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
  865|  2.32M|{
  866|  2.32M|    struct id_adapter {
  867|  2.32M|        constexpr void operator()()
  868|  2.32M|        {
  869|  2.32M|            arg_id = handler.on_arg_id();
  870|  2.32M|        }
  871|  2.32M|        constexpr void operator()(std::size_t id)
  872|  2.32M|        {
  873|  2.32M|            arg_id = handler.on_arg_id(id);
  874|  2.32M|        }
  875|       |
  876|  2.32M|        constexpr void on_error(const char* msg)
  877|  2.32M|        {
  878|  2.32M|            SCN_UNLIKELY_ATTR
  879|  2.32M|            handler.on_error(msg);
  880|  2.32M|        }
  881|       |
  882|  2.32M|        Handler& handler;
  883|  2.32M|        std::size_t arg_id;
  884|  2.32M|    };
  885|       |
  886|  2.32M|    ++begin;
  887|  2.32M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  2.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.32M]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|  2.32M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 2.32M]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|  2.32M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 2.32M]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|  2.32M|    else {
  899|  2.32M|        auto adapter = id_adapter{handler, 0};
  900|  2.32M|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|  2.32M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  2.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.32M]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|  2.32M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 2.32M]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|  2.32M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 2.32M, False: 0]
  ------------------
  911|  2.32M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  2.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.32M]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|  2.32M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|  2.32M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  4.65M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 139k, False: 2.18M]
  |  |  |  Branch (153:45): [True: 0, False: 2.32M]
  |  |  |  Branch (153:45): [True: 139k, False: 2.18M]
  |  |  ------------------
  ------------------
  917|   139k|                handler.on_error("Unknown format specifier");
  918|   139k|                return begin;
  919|   139k|            }
  920|  2.32M|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|  2.32M|    }
  927|  2.18M|    return begin + 1;
  928|  2.32M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  2.32M|{
  400|  2.32M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  2.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  2.32M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 2.32M, False: 0]
  |  Branch (401:26): [True: 0, False: 2.32M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  2.32M|    handler();
  406|  2.32M|    return begin;
  407|  2.32M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|  2.32M|        {
  869|  2.32M|            arg_id = handler.on_arg_id();
  870|  2.32M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1045|  2.32M|    {
 1046|  2.32M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  2.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|  2.32M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  794|  2.32M|{
  795|  2.32M|    auto do_presentation = [&]() -> const CharT* {
  796|  2.32M|        if (*begin == CharT{'['}) {
  797|  2.32M|            auto set = parse_presentation_set(begin, end, handler);
  798|  2.32M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|  2.32M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|  2.32M|                return begin;
  803|  2.32M|            }
  804|  2.32M|            handler.on_character_set_string(set);
  805|  2.32M|            return begin;
  806|  2.32M|        }
  807|  2.32M|        if (*begin == CharT{'/'}) {
  808|  2.32M|            return parse_presentation_regex(begin, end, handler);
  809|  2.32M|        }
  810|  2.32M|        presentation_type type = parse_presentation_type(*begin++);
  811|  2.32M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|  2.32M|            handler.on_error("Invalid type specifier in format string");
  813|  2.32M|            return begin;
  814|  2.32M|        }
  815|  2.32M|        handler.on_type(type);
  816|  2.32M|        return begin;
  817|  2.32M|    };
  818|       |
  819|  2.32M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 2.32M, False: 0]
  |  Branch (819:28): [True: 2.23M, False: 92.9k]
  ------------------
  820|  2.32M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 2.18M, False: 46.4k]
  |  Branch (820:36): [True: 1.61M, False: 567k]
  ------------------
  821|  1.61M|        return do_presentation();
  822|  1.61M|    }
  823|       |
  824|   706k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   706k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 706k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   706k|    begin = parse_align(begin, end, handler);
  830|   706k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   706k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 706k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   706k|    begin = parse_width(begin, end, handler);
  836|   706k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   706k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 706k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   706k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 567k, False: 139k]
  ------------------
  842|   567k|        handler.on_localized();
  843|   567k|        ++begin;
  844|   567k|    }
  845|   706k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   706k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 706k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   706k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 706k, False: 0]
  |  Branch (850:25): [True: 139k, False: 567k]
  ------------------
  851|   139k|        do_presentation();
  852|   139k|    }
  853|   706k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   706k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 706k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   706k|    return begin;
  859|   706k|}
_ZN3scn2v26detail15is_ascii_letterIwEEbT_:
  463|  2.59M|{
  464|  2.59M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 1.88M, False: 706k]
  |  Branch (464:33): [True: 1.88M, False: 0]
  ------------------
  465|  2.59M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 613k, False: 92.9k]
  |  Branch (465:33): [True: 613k, False: 0]
  ------------------
  466|  2.59M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  795|  1.75M|    auto do_presentation = [&]() -> const CharT* {
  796|  1.75M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 1.75M]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|  1.75M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 1.75M]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|  1.75M|        presentation_type type = parse_presentation_type(*begin++);
  811|  1.75M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 92.9k, False: 1.66M]
  |  |  ------------------
  ------------------
  812|  92.9k|            handler.on_error("Invalid type specifier in format string");
  813|  92.9k|            return begin;
  814|  92.9k|        }
  815|  1.66M|        handler.on_type(type);
  816|  1.66M|        return begin;
  817|  1.75M|    };
_ZN3scn2v26detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
  411|  2.16M|{
  412|  2.16M|    switch (type) {
  413|   129k|        case 'b':
  ------------------
  |  Branch (413:9): [True: 129k, False: 2.03M]
  ------------------
  414|   222k|        case 'B':
  ------------------
  |  Branch (414:9): [True: 92.9k, False: 2.07M]
  ------------------
  415|   222k|            return presentation_type::int_binary;
  416|   436k|        case 'd':
  ------------------
  |  Branch (416:9): [True: 436k, False: 1.73M]
  ------------------
  417|   436k|            return presentation_type::int_decimal;
  418|   612k|        case 'i':
  ------------------
  |  Branch (418:9): [True: 612k, False: 1.55M]
  ------------------
  419|   612k|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 2.16M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|   218k|        case 'o':
  ------------------
  |  Branch (422:9): [True: 218k, False: 1.94M]
  ------------------
  423|   218k|            return presentation_type::int_octal;
  424|   491k|        case 'x':
  ------------------
  |  Branch (424:9): [True: 491k, False: 1.67M]
  ------------------
  425|   491k|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 2.16M]
  ------------------
  426|   491k|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 2.16M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 2.16M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|      0|        case 'a':
  ------------------
  |  Branch (430:9): [True: 0, False: 2.16M]
  ------------------
  431|      0|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 2.16M]
  ------------------
  432|      0|            return presentation_type::float_hex;
  433|      0|        case 'e':
  ------------------
  |  Branch (433:9): [True: 0, False: 2.16M]
  ------------------
  434|      0|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 2.16M]
  ------------------
  435|      0|            return presentation_type::float_scientific;
  436|      0|        case 'f':
  ------------------
  |  Branch (436:9): [True: 0, False: 2.16M]
  ------------------
  437|      0|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 2.16M]
  ------------------
  438|      0|            return presentation_type::float_fixed;
  439|      0|        case 'g':
  ------------------
  |  Branch (439:9): [True: 0, False: 2.16M]
  ------------------
  440|      0|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 2.16M]
  ------------------
  441|      0|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 2.16M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 2.16M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 2.16M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 2.16M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 2.16M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 2.16M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|   185k|        default:
  ------------------
  |  Branch (456:9): [True: 185k, False: 1.98M]
  ------------------
  457|   185k|            return presentation_type::none;
  458|  2.16M|    }
  459|  2.16M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  488|   706k|{
  489|   706k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   706k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   706k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   706k|        switch (ch) {
  493|   706k|            case L'<':
  494|   706k|                return align_type::left;
  495|   706k|            case L'>':
  496|   706k|                return align_type::right;
  497|   706k|            case L'^':
  498|   706k|                return align_type::center;
  499|   706k|            default:
  500|   706k|                return align_type::none;
  501|   706k|        }
  502|   706k|    };
  503|       |
  504|   706k|    auto potential_fill_len = code_point_length(begin, end);
  505|   706k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|  1.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 706k]
  |  |  |  Branch (153:45): [True: 0, False: 706k]
  |  |  |  Branch (153:45): [True: 0, False: 706k]
  |  |  ------------------
  ------------------
  506|   706k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   706k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   706k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   706k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   706k|    const auto begin_before_fill = begin;
  516|   706k|    begin += potential_fill_len;
  517|       |
  518|   706k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 706k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   706k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   706k|    const auto begin_after_fill = begin;
  524|   706k|    ++begin;
  525|       |
  526|   706k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 706k, False: 0]
  ------------------
  527|   706k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   706k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 706k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   706k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 706k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   706k|    }
  535|       |
  536|   706k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 706k, False: 0]
  ------------------
  537|   706k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 706k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   706k|        return begin_before_fill;
  542|   706k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   706k|}
_ZN3scn2v26detail17code_point_lengthIwEEiPKT_S5_:
  470|   892k|{
  471|   892k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   892k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   892k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|   892k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|   892k|        return 1;
  474|   892k|    }
  475|   892k|    else {
  476|   892k|        const auto lengths =
  477|   892k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|   892k|            "\3\4";
  479|   892k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|   892k|        return len;
  481|   892k|    }
  482|   892k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|  1.41M|    auto check_align = [](wchar_t ch) {
  492|  1.41M|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 1.41M]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 1.41M]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 1.41M]
  ------------------
  498|      0|                return align_type::center;
  499|  1.41M|            default:
  ------------------
  |  Branch (499:13): [True: 1.41M, False: 0]
  ------------------
  500|  1.41M|                return align_type::none;
  501|  1.41M|        }
  502|  1.41M|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  553|   706k|{
  554|   706k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   706k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   706k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   706k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 613k, False: 92.9k]
  |  Branch (556:33): [True: 0, False: 613k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   706k|    return begin;
  567|   706k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 1050|   567k|    {
 1051|   567k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|   567k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 262k, False: 304k]
  ------------------
 1053|   567k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 262k]
  ------------------
 1054|   567k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|   567k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|   567k|        Handler::on_localized();
 1063|   567k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|   456k|{
  968|   456k|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|   456k|    handler.check_args_exhausted();
  970|   456k|    return handler.get_error();
  971|   456k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|   456k|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|   456k|    auto begin = format.data();
  937|   456k|    auto it = begin;
  938|   456k|    const auto end = format.data() + format.size();
  939|       |
  940|   495k|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 456k, False: 38.7k]
  ------------------
  941|   456k|        const auto ch = *it++;
  942|   456k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 456k, False: 0]
  ------------------
  943|   456k|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|   456k|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|   456k|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 418k, False: 38.7k]
  ------------------
  947|   418k|                return;
  948|   418k|            }
  949|   456k|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|   456k|    }
  960|       |
  961|  38.7k|    handler.on_literal_text(begin, end);
  962|  38.7k|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
  865|   456k|{
  866|   456k|    struct id_adapter {
  867|   456k|        constexpr void operator()()
  868|   456k|        {
  869|   456k|            arg_id = handler.on_arg_id();
  870|   456k|        }
  871|   456k|        constexpr void operator()(std::size_t id)
  872|   456k|        {
  873|   456k|            arg_id = handler.on_arg_id(id);
  874|   456k|        }
  875|       |
  876|   456k|        constexpr void on_error(const char* msg)
  877|   456k|        {
  878|   456k|            SCN_UNLIKELY_ATTR
  879|   456k|            handler.on_error(msg);
  880|   456k|        }
  881|       |
  882|   456k|        Handler& handler;
  883|   456k|        std::size_t arg_id;
  884|   456k|    };
  885|       |
  886|   456k|    ++begin;
  887|   456k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   456k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 456k]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|   456k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 456k]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|   456k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 456k]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|   456k|    else {
  899|   456k|        auto adapter = id_adapter{handler, 0};
  900|   456k|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|   456k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   456k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 456k]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|   456k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 456k]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|   456k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 456k, False: 0]
  ------------------
  911|   456k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|   456k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 456k]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|   456k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|   456k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|   913k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 139k, False: 317k]
  |  |  |  Branch (153:45): [True: 0, False: 456k]
  |  |  |  Branch (153:45): [True: 139k, False: 317k]
  |  |  ------------------
  ------------------
  917|   139k|                handler.on_error("Unknown format specifier");
  918|   139k|                return begin;
  919|   139k|            }
  920|   456k|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|   456k|    }
  927|   317k|    return begin + 1;
  928|   456k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   456k|{
  400|   456k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   456k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   456k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   456k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 456k, False: 0]
  |  Branch (401:26): [True: 0, False: 456k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   456k|    handler();
  406|   456k|    return begin;
  407|   456k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|   456k|        {
  869|   456k|            arg_id = handler.on_arg_id();
  870|   456k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1045|   456k|    {
 1046|   456k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|   456k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   456k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|   456k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  794|   456k|{
  795|   456k|    auto do_presentation = [&]() -> const CharT* {
  796|   456k|        if (*begin == CharT{'['}) {
  797|   456k|            auto set = parse_presentation_set(begin, end, handler);
  798|   456k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|   456k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|   456k|                return begin;
  803|   456k|            }
  804|   456k|            handler.on_character_set_string(set);
  805|   456k|            return begin;
  806|   456k|        }
  807|   456k|        if (*begin == CharT{'/'}) {
  808|   456k|            return parse_presentation_regex(begin, end, handler);
  809|   456k|        }
  810|   456k|        presentation_type type = parse_presentation_type(*begin++);
  811|   456k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|   456k|            handler.on_error("Invalid type specifier in format string");
  813|   456k|            return begin;
  814|   456k|        }
  815|   456k|        handler.on_type(type);
  816|   456k|        return begin;
  817|   456k|    };
  818|       |
  819|   456k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 456k, False: 0]
  |  Branch (819:28): [True: 363k, False: 92.9k]
  ------------------
  820|   456k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 317k, False: 46.4k]
  |  Branch (820:36): [True: 270k, False: 46.4k]
  ------------------
  821|   270k|        return do_presentation();
  822|   270k|    }
  823|       |
  824|   185k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 185k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   185k|    begin = parse_align(begin, end, handler);
  830|   185k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 185k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   185k|    begin = parse_width(begin, end, handler);
  836|   185k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 185k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   185k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 46.4k, False: 139k]
  ------------------
  842|  46.4k|        handler.on_localized();
  843|  46.4k|        ++begin;
  844|  46.4k|    }
  845|   185k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 185k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   185k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 185k, False: 0]
  |  Branch (850:25): [True: 139k, False: 46.4k]
  ------------------
  851|   139k|        do_presentation();
  852|   139k|    }
  853|   185k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 185k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   185k|    return begin;
  859|   185k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  795|   410k|    auto do_presentation = [&]() -> const CharT* {
  796|   410k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 410k]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|   410k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 410k]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|   410k|        presentation_type type = parse_presentation_type(*begin++);
  811|   410k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|   410k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 92.9k, False: 317k]
  |  |  ------------------
  ------------------
  812|  92.9k|            handler.on_error("Invalid type specifier in format string");
  813|  92.9k|            return begin;
  814|  92.9k|        }
  815|   317k|        handler.on_type(type);
  816|   317k|        return begin;
  817|   410k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  488|   185k|{
  489|   185k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   185k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   185k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   185k|        switch (ch) {
  493|   185k|            case L'<':
  494|   185k|                return align_type::left;
  495|   185k|            case L'>':
  496|   185k|                return align_type::right;
  497|   185k|            case L'^':
  498|   185k|                return align_type::center;
  499|   185k|            default:
  500|   185k|                return align_type::none;
  501|   185k|        }
  502|   185k|    };
  503|       |
  504|   185k|    auto potential_fill_len = code_point_length(begin, end);
  505|   185k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   371k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 185k]
  |  |  |  Branch (153:45): [True: 0, False: 185k]
  |  |  |  Branch (153:45): [True: 0, False: 185k]
  |  |  ------------------
  ------------------
  506|   185k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   185k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   185k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   185k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   185k|    const auto begin_before_fill = begin;
  516|   185k|    begin += potential_fill_len;
  517|       |
  518|   185k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 185k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   185k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   185k|    const auto begin_after_fill = begin;
  524|   185k|    ++begin;
  525|       |
  526|   185k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 185k, False: 0]
  ------------------
  527|   185k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 185k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   185k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 185k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   185k|    }
  535|       |
  536|   185k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 185k, False: 0]
  ------------------
  537|   185k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 185k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   185k|        return begin_before_fill;
  542|   185k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   185k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|   371k|    auto check_align = [](wchar_t ch) {
  492|   371k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 371k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 371k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 371k]
  ------------------
  498|      0|                return align_type::center;
  499|   371k|            default:
  ------------------
  |  Branch (499:13): [True: 371k, False: 0]
  ------------------
  500|   371k|                return align_type::none;
  501|   371k|        }
  502|   371k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  553|   185k|{
  554|   185k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   185k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   185k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   185k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 92.9k, False: 92.9k]
  |  Branch (556:33): [True: 0, False: 92.9k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   185k|    return begin;
  567|   185k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 1050|  46.4k|    {
 1051|  46.4k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|  46.4k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 23.2k, False: 23.2k]
  ------------------
 1053|  46.4k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 23.2k]
  ------------------
 1054|  46.4k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|  46.4k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|  46.4k|        Handler::on_localized();
 1063|  46.4k|    }

_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  3.41M|{
  226|  3.41M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  3.41M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  3.41M|                  "\n"
  230|  3.41M|                  "Unsupported range type given as input to a scanning "
  231|  3.41M|                  "function.\n"
  232|  3.41M|                  "A range needs to have a character type (value type) "
  233|  3.41M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  3.41M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  3.41M|                  "to be included.\n"
  236|  3.41M|                  "See the scnlib documentation for more details.");
  237|  3.41M|    static_assert(
  238|  3.41M|        !std::is_same_v<T, custom_char_traits>,
  239|  3.41M|        "\n"
  240|  3.41M|        "Unsupported range type given as input to a scanning "
  241|  3.41M|        "function.\n"
  242|  3.41M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  3.41M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  3.41M|        "not supported.");
  245|  3.41M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  3.41M|                  "\n"
  247|  3.41M|                  "Unsupported range type given as input to a scanning "
  248|  3.41M|                  "function.\n"
  249|  3.41M|                  "file_marker_found cannot be used as an "
  250|  3.41M|                  "source range type to scn::scan.\n"
  251|  3.41M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  3.41M|                  "and do not provide an explicit source range, "
  253|  3.41M|                  "or use scn::scan with a FILE* directly.");
  254|  3.41M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  3.41M|                  "\n"
  256|  3.41M|                  "Unsupported range type given as input to a scanning "
  257|  3.41M|                  "function.\n"
  258|  3.41M|                  "In order to be scannable, a range needs to satisfy "
  259|  3.41M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  3.41M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  3.41M|                  "\n"
  262|  3.41M|                  "Unsupported range type given as input to a scanning "
  263|  3.41M|                  "function.\n"
  264|  3.41M|                  "A range needs to model forward_range and have a valid "
  265|  3.41M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  3.41M|                  "Examples of scannable ranges are std::string, "
  267|  3.41M|                  "std::string_view, "
  268|  3.41M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  3.41M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  3.41M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  3.41M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  3.41M|{
  153|  3.41M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  3.41M|        return std::basic_string_view{ranges::data(r),
  155|  3.41M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  3.41M|    }
  162|  3.41M|    else {
  163|  3.41M|        return invalid_char_type{};
  164|  3.41M|    }
  165|  3.41M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|   316k|{
  226|   316k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   316k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   316k|                  "\n"
  230|   316k|                  "Unsupported range type given as input to a scanning "
  231|   316k|                  "function.\n"
  232|   316k|                  "A range needs to have a character type (value type) "
  233|   316k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   316k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   316k|                  "to be included.\n"
  236|   316k|                  "See the scnlib documentation for more details.");
  237|   316k|    static_assert(
  238|   316k|        !std::is_same_v<T, custom_char_traits>,
  239|   316k|        "\n"
  240|   316k|        "Unsupported range type given as input to a scanning "
  241|   316k|        "function.\n"
  242|   316k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   316k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   316k|        "not supported.");
  245|   316k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   316k|                  "\n"
  247|   316k|                  "Unsupported range type given as input to a scanning "
  248|   316k|                  "function.\n"
  249|   316k|                  "file_marker_found cannot be used as an "
  250|   316k|                  "source range type to scn::scan.\n"
  251|   316k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   316k|                  "and do not provide an explicit source range, "
  253|   316k|                  "or use scn::scan with a FILE* directly.");
  254|   316k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   316k|                  "\n"
  256|   316k|                  "Unsupported range type given as input to a scanning "
  257|   316k|                  "function.\n"
  258|   316k|                  "In order to be scannable, a range needs to satisfy "
  259|   316k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   316k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   316k|                  "\n"
  262|   316k|                  "Unsupported range type given as input to a scanning "
  263|   316k|                  "function.\n"
  264|   316k|                  "A range needs to model forward_range and have a valid "
  265|   316k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   316k|                  "Examples of scannable ranges are std::string, "
  267|   316k|                  "std::string_view, "
  268|   316k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   316k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   316k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   316k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|   316k|{
  196|   316k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|   316k|        return file_marker_found{};
  198|   316k|    }
  199|   316k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|   316k|        if constexpr (ranges::input_range<Range>) {
  201|   316k|            return insufficient_range{};
  202|   316k|        }
  203|   316k|        else {
  204|   316k|            return invalid_input_range{};
  205|   316k|        }
  206|   316k|    }
  207|   316k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|   316k|        return invalid_char_type{};
  209|   316k|    }
  210|   316k|    else {
  211|   316k|        return make_forward_scan_buffer(r);
  212|   316k|    }
  213|   316k|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  3.17M|{
  226|  3.17M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  3.17M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  3.17M|                  "\n"
  230|  3.17M|                  "Unsupported range type given as input to a scanning "
  231|  3.17M|                  "function.\n"
  232|  3.17M|                  "A range needs to have a character type (value type) "
  233|  3.17M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  3.17M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  3.17M|                  "to be included.\n"
  236|  3.17M|                  "See the scnlib documentation for more details.");
  237|  3.17M|    static_assert(
  238|  3.17M|        !std::is_same_v<T, custom_char_traits>,
  239|  3.17M|        "\n"
  240|  3.17M|        "Unsupported range type given as input to a scanning "
  241|  3.17M|        "function.\n"
  242|  3.17M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  3.17M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  3.17M|        "not supported.");
  245|  3.17M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  3.17M|                  "\n"
  247|  3.17M|                  "Unsupported range type given as input to a scanning "
  248|  3.17M|                  "function.\n"
  249|  3.17M|                  "file_marker_found cannot be used as an "
  250|  3.17M|                  "source range type to scn::scan.\n"
  251|  3.17M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  3.17M|                  "and do not provide an explicit source range, "
  253|  3.17M|                  "or use scn::scan with a FILE* directly.");
  254|  3.17M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  3.17M|                  "\n"
  256|  3.17M|                  "Unsupported range type given as input to a scanning "
  257|  3.17M|                  "function.\n"
  258|  3.17M|                  "In order to be scannable, a range needs to satisfy "
  259|  3.17M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  3.17M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  3.17M|                  "\n"
  262|  3.17M|                  "Unsupported range type given as input to a scanning "
  263|  3.17M|                  "function.\n"
  264|  3.17M|                  "A range needs to model forward_range and have a valid "
  265|  3.17M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  3.17M|                  "Examples of scannable ranges are std::string, "
  267|  3.17M|                  "std::string_view, "
  268|  3.17M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  3.17M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  3.17M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  3.17M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  3.17M|{
  153|  3.17M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  3.17M|        return std::basic_string_view{ranges::data(r),
  155|  3.17M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  3.17M|    }
  162|  3.17M|    else {
  163|  3.17M|        return invalid_char_type{};
  164|  3.17M|    }
  165|  3.17M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|   526k|{
  226|   526k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   526k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   526k|                  "\n"
  230|   526k|                  "Unsupported range type given as input to a scanning "
  231|   526k|                  "function.\n"
  232|   526k|                  "A range needs to have a character type (value type) "
  233|   526k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   526k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   526k|                  "to be included.\n"
  236|   526k|                  "See the scnlib documentation for more details.");
  237|   526k|    static_assert(
  238|   526k|        !std::is_same_v<T, custom_char_traits>,
  239|   526k|        "\n"
  240|   526k|        "Unsupported range type given as input to a scanning "
  241|   526k|        "function.\n"
  242|   526k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   526k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   526k|        "not supported.");
  245|   526k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   526k|                  "\n"
  247|   526k|                  "Unsupported range type given as input to a scanning "
  248|   526k|                  "function.\n"
  249|   526k|                  "file_marker_found cannot be used as an "
  250|   526k|                  "source range type to scn::scan.\n"
  251|   526k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   526k|                  "and do not provide an explicit source range, "
  253|   526k|                  "or use scn::scan with a FILE* directly.");
  254|   526k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   526k|                  "\n"
  256|   526k|                  "Unsupported range type given as input to a scanning "
  257|   526k|                  "function.\n"
  258|   526k|                  "In order to be scannable, a range needs to satisfy "
  259|   526k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   526k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   526k|                  "\n"
  262|   526k|                  "Unsupported range type given as input to a scanning "
  263|   526k|                  "function.\n"
  264|   526k|                  "A range needs to model forward_range and have a valid "
  265|   526k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   526k|                  "Examples of scannable ranges are std::string, "
  267|   526k|                  "std::string_view, "
  268|   526k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   526k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   526k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   526k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|   526k|{
  196|   526k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|   526k|        return file_marker_found{};
  198|   526k|    }
  199|   526k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|   526k|        if constexpr (ranges::input_range<Range>) {
  201|   526k|            return insufficient_range{};
  202|   526k|        }
  203|   526k|        else {
  204|   526k|            return invalid_input_range{};
  205|   526k|        }
  206|   526k|    }
  207|   526k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|   526k|        return invalid_char_type{};
  209|   526k|    }
  210|   526k|    else {
  211|   526k|        return make_forward_scan_buffer(r);
  212|   526k|    }
  213|   526k|}

_ZN3scn2v26detail10locale_refC2Ev:
   29|  5.30M|    constexpr locale_ref() = default;

_ZN3scn2v224basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
   44|  2.75M|    {
   45|  2.75M|    }
_ZN3scn2v224basic_scan_parse_contextIcE11next_arg_idEv:
   65|  2.75M|    {
   66|  2.75M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  2.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.75M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  2.75M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  2.75M|        do_check_arg_id(id);
   74|  2.75M|        return id;
   75|  2.75M|    }
_ZN3scn2v224basic_scan_parse_contextIcE15do_check_arg_idEm:
  209|  2.75M|{
  210|  2.75M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  2.75M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  2.75M|}
_ZN3scn2v224basic_scan_parse_contextIcE10advance_toEPKc:
   60|  2.59M|    {
   61|  2.59M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  2.59M|    }
_ZNK3scn2v224basic_scan_parse_contextIcE5beginEv:
   49|  5.34M|    {
   50|  5.34M|        return m_format.data();
   51|  5.34M|    }
_ZN3scn2v224basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
   44|  2.78M|    {
   45|  2.78M|    }
_ZN3scn2v224basic_scan_parse_contextIwE11next_arg_idEv:
   65|  2.78M|    {
   66|  2.78M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  2.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.78M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  2.78M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  2.78M|        do_check_arg_id(id);
   74|  2.78M|        return id;
   75|  2.78M|    }
_ZN3scn2v224basic_scan_parse_contextIwE15do_check_arg_idEm:
  209|  2.78M|{
  210|  2.78M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  2.78M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  2.78M|}
_ZN3scn2v224basic_scan_parse_contextIwE10advance_toEPKw:
   60|  2.50M|    {
   61|  2.50M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  2.50M|    }
_ZNK3scn2v224basic_scan_parse_contextIwE5beginEv:
   49|  5.28M|    {
   50|  5.28M|        return m_format.data();
   51|  5.28M|    }

_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIccEEDaSH_SR_:
  153|   395k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSE_T0_E_clIwcEEDaSE_SO_:
  153|  9.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIwcEEDaSH_SR_:
  153|   665k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  6.73M|    {
  482|  6.73M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  6.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  6.73M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmNSH_13make_unsignedISR_E4typeEE4typeE_EEOSK_:
  472|  6.73M|    {
  473|  6.73M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  6.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  6.73M|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  3.17M|    {
  482|  3.17M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  3.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  3.17M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmNSH_13make_unsignedISR_E4typeEE4typeE_EEOSK_:
  472|  3.17M|    {
  473|  3.17M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  3.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  3.17M|    }
_ZNK3scn2v24r_pf19prev_backtrack_impl2fnclIPKcEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm2EEEEEET_SB_:
  593|   501k|    {
  594|   501k|        return fn::impl(it, beg, detail::priority_tag<2>{});
  595|   501k|    }
_ZN3scn2v24r_pf19prev_backtrack_impl2fn4implIPKcEENSt3__19enable_ifIXsr10ranges_stdE22bidirectional_iteratorIT_EES9_E4typeES9_S9_NS0_6detail12priority_tagILm2EEE:
  563|   501k|    {
  564|   501k|        return ranges::prev(it);
  565|   501k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  2.28M|    {
  482|  2.28M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  2.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  2.28M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|  2.28M|    {
  473|  2.28M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  2.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  2.28M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclIPKcEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_l:
  512|  2.64M|    {
  513|  2.64M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  2.64M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implIPKcEEDaT_lNS0_6detail12priority_tagILm0EEE:
  504|  2.64M|    {
  505|  2.64M|        return ranges::next(it, n);
  506|  2.64M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKcS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  2.32M|    {
  549|  2.32M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  2.32M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKcS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  2.32M|    {
  541|  2.32M|        return ranges::distance(lhs, rhs);
  542|  2.32M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|   646k|    {
  513|   646k|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|   646k|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcldtfp_13batch_advancefp0_Efp_EE4typeEE4typeET_lNS5_12priority_tagILm1EEE:
  497|   646k|    {
  498|   646k|        it.batch_advance(n);
  499|   646k|        return it;
  500|   646k|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_T0_:
  548|  39.5k|    {
  549|  39.5k|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  39.5k|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTmicldtfp0_8positionEcldtfp_8positionEEE4typeEE4typeET_SH_NS5_12priority_tagILm1EEE:
  533|  39.5k|    {
  534|  39.5k|        return rhs.position() - lhs.position();
  535|  39.5k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  2.11M|    {
  482|  2.11M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  2.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  2.11M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|  2.11M|    {
  473|  2.11M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  2.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  2.11M|    }
_ZNK3scn2v24r_pf19prev_backtrack_impl2fnclIPKwEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm2EEEEEET_SB_:
  593|   414k|    {
  594|   414k|        return fn::impl(it, beg, detail::priority_tag<2>{});
  595|   414k|    }
_ZN3scn2v24r_pf19prev_backtrack_impl2fn4implIPKwEENSt3__19enable_ifIXsr10ranges_stdE22bidirectional_iteratorIT_EES9_E4typeES9_S9_NS0_6detail12priority_tagILm2EEE:
  563|   414k|    {
  564|   414k|        return ranges::prev(it);
  565|   414k|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclIPKwEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_l:
  512|  2.27M|    {
  513|  2.27M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  2.27M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implIPKwEEDaT_lNS0_6detail12priority_tagILm0EEE:
  504|  2.27M|    {
  505|  2.27M|        return ranges::next(it, n);
  506|  2.27M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKwS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  1.98M|    {
  549|  1.98M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  1.98M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKwS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  1.98M|    {
  541|  1.98M|        return ranges::distance(lhs, rhs);
  542|  1.98M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|  1.05M|    {
  513|  1.05M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  1.05M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcldtfp_13batch_advancefp0_Efp_EE4typeEE4typeET_lNS5_12priority_tagILm1EEE:
  497|  1.05M|    {
  498|  1.05M|        it.batch_advance(n);
  499|  1.05M|        return it;
  500|  1.05M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_T0_:
  548|  38.7k|    {
  549|  38.7k|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  38.7k|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTmicldtfp0_8positionEcldtfp_8positionEEE4typeEE4typeET_SH_NS5_12priority_tagILm1EEE:
  533|  38.7k|    {
  534|  38.7k|        return rhs.position() - lhs.position();
  535|  38.7k|    }

_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  3.14M|{
  343|  3.14M|    return {ranges::next(ranges::begin(source), n),
  344|  3.14M|            make_vscan_result_range_end(source)};
  345|  3.14M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  3.14M|{
  330|  3.14M|    return ranges::end(source);
  331|  3.14M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEC2ES9_ONSt3__15tupleIJaEEE:
  252|   489k|    {
  253|   489k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  3.14M|    {
  104|  3.14M|    }
_ZN3scn2v26detail25scan_result_value_storageIJaEEC2EONSt3__15tupleIJaEEE:
   38|   912k|    {
   39|   912k|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  3.14M|    {
  121|  3.14M|        return ranges::begin(m_range);
  122|  3.14M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEC2ES9_ONSt3__15tupleIJhEEE:
  252|   426k|    {
  253|   426k|    }
_ZN3scn2v26detail25scan_result_value_storageIJhEEC2EONSt3__15tupleIJhEEE:
   38|   813k|    {
   39|   813k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEC2ES9_ONSt3__15tupleIJiEEE:
  252|   614k|    {
  253|   614k|    }
_ZN3scn2v26detail25scan_result_value_storageIJiEEC2EONSt3__15tupleIJiEEE:
   38|  1.14M|    {
   39|  1.14M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEC2ES9_ONSt3__15tupleIJjEEE:
  252|   487k|    {
  253|   487k|    }
_ZN3scn2v26detail25scan_result_value_storageIJjEEC2EONSt3__15tupleIJjEEE:
   38|   927k|    {
   39|   927k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEC2ES9_ONSt3__15tupleIJxEEE:
  252|   626k|    {
  253|   626k|    }
_ZN3scn2v26detail25scan_result_value_storageIJxEEC2EONSt3__15tupleIJxEEE:
   38|  1.16M|    {
   39|  1.16M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEC2ES9_ONSt3__15tupleIJyEEE:
  252|   494k|    {
  253|   494k|    }
_ZN3scn2v26detail25scan_result_value_storageIJyEEC2EONSt3__15tupleIJyEEE:
   38|   937k|    {
   39|   937k|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_l:
  342|  39.5k|{
  343|  39.5k|    return {ranges::next(ranges::begin(source), n),
  344|  39.5k|            make_vscan_result_range_end(source)};
  345|  39.5k|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  39.5k|{
  330|  39.5k|    return ranges::end(source);
  331|  39.5k|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEC2ESF_ONS6_5tupleIJaEEE:
  252|  8.79k|    {
  253|  8.79k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEC2EOSG_:
  103|  39.5k|    {
  104|  39.5k|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  39.5k|    {
  121|  39.5k|        return ranges::begin(m_range);
  122|  39.5k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEC2ESF_ONS6_5tupleIJhEEE:
  252|  4.39k|    {
  253|  4.39k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEC2ESF_ONS6_5tupleIJiEEE:
  252|  8.79k|    {
  253|  8.79k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEC2ESF_ONS6_5tupleIJjEEE:
  252|  4.39k|    {
  253|  4.39k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEC2ESF_ONS6_5tupleIJxEEE:
  252|  8.79k|    {
  253|  8.79k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEC2ESF_ONS6_5tupleIJyEEE:
  252|  4.39k|    {
  253|  4.39k|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  2.68M|{
  343|  2.68M|    return {ranges::next(ranges::begin(source), n),
  344|  2.68M|            make_vscan_result_range_end(source)};
  345|  2.68M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  2.68M|{
  330|  2.68M|    return ranges::end(source);
  331|  2.68M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEC2ES9_ONSt3__15tupleIJaEEE:
  252|   414k|    {
  253|   414k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  2.68M|    {
  104|  2.68M|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  2.68M|    {
  121|  2.68M|        return ranges::begin(m_range);
  122|  2.68M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEC2ES9_ONSt3__15tupleIJhEEE:
  252|   374k|    {
  253|   374k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEC2ES9_ONSt3__15tupleIJiEEE:
  252|   516k|    {
  253|   516k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEC2ES9_ONSt3__15tupleIJjEEE:
  252|   427k|    {
  253|   427k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEC2ES9_ONSt3__15tupleIJxEEE:
  252|   523k|    {
  253|   523k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEC2ES9_ONSt3__15tupleIJyEEE:
  252|   431k|    {
  253|   431k|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_l:
  342|  38.7k|{
  343|  38.7k|    return {ranges::next(ranges::begin(source), n),
  344|  38.7k|            make_vscan_result_range_end(source)};
  345|  38.7k|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  38.7k|{
  330|  38.7k|    return ranges::end(source);
  331|  38.7k|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEC2ESF_ONS6_5tupleIJaEEE:
  252|      2|    {
  253|      2|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEC2EOSG_:
  103|  38.7k|    {
  104|  38.7k|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  38.7k|    {
  121|  38.7k|        return ranges::begin(m_range);
  122|  38.7k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEC2ESF_ONS6_5tupleIJhEEE:
  252|  7.74k|    {
  253|  7.74k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEC2ESF_ONS6_5tupleIJiEEE:
  252|  7.74k|    {
  253|  7.74k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEC2ESF_ONS6_5tupleIJjEEE:
  252|  7.74k|    {
  253|  7.74k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEC2ESF_ONS6_5tupleIJxEEE:
  252|  7.74k|    {
  253|  7.74k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEC2ESF_ONS6_5tupleIJyEEE:
  252|  7.74k|    {
  253|  7.74k|    }

_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   242k|{
  117|   242k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   242k|}
_ZN3scn2v26detail9scan_implIcJaEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JaEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   242k|{
   77|   242k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   242k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   242k|    static_cast<    \
  |  |  247|   242k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   242k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   242k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   242k|    static_cast<    \
  |  |  247|   242k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   242k|    static_cast<    \
  |  |  247|   242k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   242k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   484k|{
   55|   484k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   484k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 43.9k, False: 440k]
  |  |  ------------------
  ------------------
   56|  43.9k|        return unexpected(result.error());
   57|  43.9k|    }
   58|   440k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   440k|    static_cast<    \
  |  |  247|   440k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   440k|    static_cast<    \
  |  |  247|   440k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   484k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   242k|{
  201|   242k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   242k|                                                      format, {});
  203|   242k|}
_ZN3scn2v26detail19scan_localized_implIcJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   242k|{
  163|   242k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   242k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   242k|    static_cast<    \
  |  |  247|   242k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   242k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   242k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   242k|    static_cast<    \
  |  |  247|   242k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   242k|    static_cast<    \
  |  |  247|   242k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   242k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  51.6k|{
  248|  51.6k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  51.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  51.6k|}
_ZN3scn2v26detail15scan_value_implIcaN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  51.6k|{
  229|  51.6k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  51.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  51.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  51.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  51.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  51.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.19k, False: 49.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.19k|    }                                                  \
  |  |  |  |   70|  51.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  49.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  49.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  49.4k|    static_cast<    \
  |  |  247|  49.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  49.4k|    static_cast<    \
  |  |  247|  49.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  51.6k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   214k|{
  117|   214k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   214k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   214k|}
_ZN3scn2v26detail9scan_implIcJhEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JhEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   214k|{
   77|   214k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   214k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   214k|    static_cast<    \
  |  |  247|   214k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   214k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   214k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   214k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   214k|    static_cast<    \
  |  |  247|   214k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   214k|    static_cast<    \
  |  |  247|   214k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   214k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   428k|{
   55|   428k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   428k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 43.9k, False: 384k]
  |  |  ------------------
  ------------------
   56|  43.9k|        return unexpected(result.error());
   57|  43.9k|    }
   58|   384k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   384k|    static_cast<    \
  |  |  247|   384k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   384k|    static_cast<    \
  |  |  247|   384k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   428k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   214k|{
  201|   214k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   214k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   214k|                                                      format, {});
  203|   214k|}
_ZN3scn2v26detail19scan_localized_implIcJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   214k|{
  163|   214k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   214k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   214k|    static_cast<    \
  |  |  247|   214k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   214k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   214k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   214k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   214k|    static_cast<    \
  |  |  247|   214k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   214k|    static_cast<    \
  |  |  247|   214k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   214k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  44.3k|{
  248|  44.3k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  44.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  44.3k|}
_ZN3scn2v26detail15scan_value_implIchN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  44.3k|{
  229|  44.3k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  44.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  44.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  44.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  44.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  44.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.19k, False: 42.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.19k|    }                                                  \
  |  |  |  |   70|  44.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  42.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  42.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  42.1k|    static_cast<    \
  |  |  247|  42.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  42.1k|    static_cast<    \
  |  |  247|  42.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  44.3k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   300k|{
  117|   300k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   300k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   300k|}
_ZN3scn2v26detail9scan_implIcJiEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JiEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   300k|{
   77|   300k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   300k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   300k|    static_cast<    \
  |  |  247|   300k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   300k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   300k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   300k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   300k|    static_cast<    \
  |  |  247|   300k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   300k|    static_cast<    \
  |  |  247|   300k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   300k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   601k|{
   55|   601k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   601k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 43.9k, False: 557k]
  |  |  ------------------
  ------------------
   56|  43.9k|        return unexpected(result.error());
   57|  43.9k|    }
   58|   557k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   557k|    static_cast<    \
  |  |  247|   557k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   557k|    static_cast<    \
  |  |  247|   557k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   601k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   300k|{
  201|   300k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   300k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   300k|                                                      format, {});
  203|   300k|}
_ZN3scn2v26detail19scan_localized_implIcJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   300k|{
  163|   300k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   300k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   300k|    static_cast<    \
  |  |  247|   300k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   300k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   300k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   300k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   300k|    static_cast<    \
  |  |  247|   300k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   300k|    static_cast<    \
  |  |  247|   300k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   300k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  59.6k|{
  248|  59.6k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  59.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  59.6k|}
_ZN3scn2v26detail15scan_value_implIciN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  59.6k|{
  229|  59.6k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  59.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  59.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  59.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  59.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  59.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.19k, False: 57.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.19k|    }                                                  \
  |  |  |  |   70|  59.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  57.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  57.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  57.4k|    static_cast<    \
  |  |  247|  57.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  57.4k|    static_cast<    \
  |  |  247|  57.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  59.6k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   242k|{
  117|   242k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   242k|}
_ZN3scn2v26detail9scan_implIcJjEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JjEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   242k|{
   77|   242k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   242k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   242k|    static_cast<    \
  |  |  247|   242k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   242k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   242k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   242k|    static_cast<    \
  |  |  247|   242k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   242k|    static_cast<    \
  |  |  247|   242k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   242k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   485k|{
   55|   485k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   485k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 43.9k, False: 441k]
  |  |  ------------------
  ------------------
   56|  43.9k|        return unexpected(result.error());
   57|  43.9k|    }
   58|   441k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   441k|    static_cast<    \
  |  |  247|   441k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   441k|    static_cast<    \
  |  |  247|   441k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   485k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   242k|{
  201|   242k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   242k|                                                      format, {});
  203|   242k|}
_ZN3scn2v26detail19scan_localized_implIcJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   242k|{
  163|   242k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   242k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   242k|    static_cast<    \
  |  |  247|   242k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   242k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   242k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   242k|    static_cast<    \
  |  |  247|   242k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   242k|    static_cast<    \
  |  |  247|   242k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   242k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  48.8k|{
  248|  48.8k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  48.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  48.8k|}
_ZN3scn2v26detail15scan_value_implIcjN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  48.8k|{
  229|  48.8k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  48.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  48.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  48.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  48.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  48.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.19k, False: 46.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.19k|    }                                                  \
  |  |  |  |   70|  48.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  46.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  46.6k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  46.6k|    static_cast<    \
  |  |  247|  46.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  46.6k|    static_cast<    \
  |  |  247|  46.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  48.8k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   306k|{
  117|   306k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   306k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   306k|}
_ZN3scn2v26detail9scan_implIcJxEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JxEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   306k|{
   77|   306k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   306k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   306k|    static_cast<    \
  |  |  247|   306k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   306k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   306k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   306k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   306k|    static_cast<    \
  |  |  247|   306k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   306k|    static_cast<    \
  |  |  247|   306k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   306k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   612k|{
   55|   612k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   612k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 43.9k, False: 568k]
  |  |  ------------------
  ------------------
   56|  43.9k|        return unexpected(result.error());
   57|  43.9k|    }
   58|   568k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   568k|    static_cast<    \
  |  |  247|   568k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   568k|    static_cast<    \
  |  |  247|   568k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   612k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   306k|{
  201|   306k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   306k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   306k|                                                      format, {});
  203|   306k|}
_ZN3scn2v26detail19scan_localized_implIcJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   306k|{
  163|   306k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   306k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   306k|    static_cast<    \
  |  |  247|   306k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   306k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   306k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   306k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   306k|    static_cast<    \
  |  |  247|   306k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   306k|    static_cast<    \
  |  |  247|   306k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   306k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  60.6k|{
  248|  60.6k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  60.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  60.6k|}
_ZN3scn2v26detail15scan_value_implIcxN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  60.6k|{
  229|  60.6k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  60.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  60.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  60.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  60.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  60.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.19k, False: 58.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.19k|    }                                                  \
  |  |  |  |   70|  60.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  58.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  58.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  58.4k|    static_cast<    \
  |  |  247|  58.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  58.4k|    static_cast<    \
  |  |  247|  58.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  60.6k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   245k|{
  117|   245k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   245k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   245k|}
_ZN3scn2v26detail9scan_implIcJyEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JyEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   245k|{
   77|   245k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   245k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   245k|    static_cast<    \
  |  |  247|   245k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   245k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   245k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   245k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   245k|    static_cast<    \
  |  |  247|   245k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   245k|    static_cast<    \
  |  |  247|   245k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   245k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   491k|{
   55|   491k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   491k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 43.9k, False: 447k]
  |  |  ------------------
  ------------------
   56|  43.9k|        return unexpected(result.error());
   57|  43.9k|    }
   58|   447k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   447k|    static_cast<    \
  |  |  247|   447k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   447k|    static_cast<    \
  |  |  247|   447k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   491k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   245k|{
  201|   245k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   245k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   245k|                                                      format, {});
  203|   245k|}
_ZN3scn2v26detail19scan_localized_implIcJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   245k|{
  163|   245k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   245k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   245k|    static_cast<    \
  |  |  247|   245k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   245k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   245k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   245k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   245k|    static_cast<    \
  |  |  247|   245k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   245k|    static_cast<    \
  |  |  247|   245k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   245k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  49.2k|{
  248|  49.2k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  49.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  49.2k|}
_ZN3scn2v26detail15scan_value_implIcyN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  49.2k|{
  229|  49.2k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  49.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  49.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  49.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  49.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  49.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.19k, False: 47.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.19k|    }                                                  \
  |  |  |  |   70|  49.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  47.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  47.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  47.0k|    static_cast<    \
  |  |  247|  47.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  47.0k|    static_cast<    \
  |  |  247|  47.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  49.2k|}
_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  26.3k|{
  117|  26.3k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  26.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  26.3k|}
_ZN3scn2v26detail9scan_implIcJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  26.3k|{
   77|  26.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  26.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  26.3k|    static_cast<    \
  |  |  247|  26.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  26.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  26.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  26.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  26.3k|    static_cast<    \
  |  |  247|  26.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  26.3k|    static_cast<    \
  |  |  247|  26.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  26.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  52.7k|{
   55|  52.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  52.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 43.9k, False: 8.79k]
  |  |  ------------------
  ------------------
   56|  43.9k|        return unexpected(result.error());
   57|  43.9k|    }
   58|  8.79k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  8.79k|    static_cast<    \
  |  |  247|  8.79k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  8.79k|    static_cast<    \
  |  |  247|  8.79k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  52.7k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  26.3k|{
  201|  26.3k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  26.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  26.3k|                                                      format, {});
  203|  26.3k|}
_ZN3scn2v26detail19scan_localized_implIcJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  26.3k|{
  163|  26.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  26.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  26.3k|    static_cast<    \
  |  |  247|  26.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  26.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  26.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  26.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  26.3k|    static_cast<    \
  |  |  247|  26.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  26.3k|    static_cast<    \
  |  |  247|  26.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  26.3k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.19k|{
  248|  2.19k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.19k|}
_ZN3scn2v26detail15scan_value_implIcaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.19k|{
  229|  2.19k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.19k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.19k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.19k|    }                                                  \
  |  |  |  |   70|  2.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.19k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  24.1k|{
  117|  24.1k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  24.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  24.1k|}
_ZN3scn2v26detail9scan_implIcJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  24.1k|{
   77|  24.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  24.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  24.1k|    static_cast<    \
  |  |  247|  24.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  24.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  24.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  24.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  24.1k|    static_cast<    \
  |  |  247|  24.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  24.1k|    static_cast<    \
  |  |  247|  24.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  24.1k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  48.3k|{
   55|  48.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  48.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 43.9k, False: 4.39k]
  |  |  ------------------
  ------------------
   56|  43.9k|        return unexpected(result.error());
   57|  43.9k|    }
   58|  4.39k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  4.39k|    static_cast<    \
  |  |  247|  4.39k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  4.39k|    static_cast<    \
  |  |  247|  4.39k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  48.3k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  24.1k|{
  201|  24.1k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  24.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  24.1k|                                                      format, {});
  203|  24.1k|}
_ZN3scn2v26detail19scan_localized_implIcJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  24.1k|{
  163|  24.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  24.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  24.1k|    static_cast<    \
  |  |  247|  24.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  24.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  24.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  24.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  24.1k|    static_cast<    \
  |  |  247|  24.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  24.1k|    static_cast<    \
  |  |  247|  24.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  24.1k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.19k|{
  248|  2.19k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.19k|}
_ZN3scn2v26detail15scan_value_implIchN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.19k|{
  229|  2.19k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.19k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.19k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.19k|    }                                                  \
  |  |  |  |   70|  2.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.19k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  26.3k|{
  117|  26.3k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  26.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  26.3k|}
_ZN3scn2v26detail9scan_implIcJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  26.3k|{
   77|  26.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  26.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  26.3k|    static_cast<    \
  |  |  247|  26.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  26.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  26.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  26.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  26.3k|    static_cast<    \
  |  |  247|  26.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  26.3k|    static_cast<    \
  |  |  247|  26.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  26.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  52.7k|{
   55|  52.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  52.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 43.9k, False: 8.79k]
  |  |  ------------------
  ------------------
   56|  43.9k|        return unexpected(result.error());
   57|  43.9k|    }
   58|  8.79k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  8.79k|    static_cast<    \
  |  |  247|  8.79k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  8.79k|    static_cast<    \
  |  |  247|  8.79k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  52.7k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  26.3k|{
  201|  26.3k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  26.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  26.3k|                                                      format, {});
  203|  26.3k|}
_ZN3scn2v26detail19scan_localized_implIcJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  26.3k|{
  163|  26.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  26.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  26.3k|    static_cast<    \
  |  |  247|  26.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  26.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  26.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  26.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  26.3k|    static_cast<    \
  |  |  247|  26.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  26.3k|    static_cast<    \
  |  |  247|  26.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  26.3k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.19k|{
  248|  2.19k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.19k|}
_ZN3scn2v26detail15scan_value_implIciN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.19k|{
  229|  2.19k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.19k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.19k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.19k|    }                                                  \
  |  |  |  |   70|  2.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.19k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  24.1k|{
  117|  24.1k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  24.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  24.1k|}
_ZN3scn2v26detail9scan_implIcJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  24.1k|{
   77|  24.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  24.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  24.1k|    static_cast<    \
  |  |  247|  24.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  24.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  24.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  24.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  24.1k|    static_cast<    \
  |  |  247|  24.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  24.1k|    static_cast<    \
  |  |  247|  24.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  24.1k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  48.3k|{
   55|  48.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  48.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 43.9k, False: 4.39k]
  |  |  ------------------
  ------------------
   56|  43.9k|        return unexpected(result.error());
   57|  43.9k|    }
   58|  4.39k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  4.39k|    static_cast<    \
  |  |  247|  4.39k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  4.39k|    static_cast<    \
  |  |  247|  4.39k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  48.3k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  24.1k|{
  201|  24.1k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  24.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  24.1k|                                                      format, {});
  203|  24.1k|}
_ZN3scn2v26detail19scan_localized_implIcJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  24.1k|{
  163|  24.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  24.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  24.1k|    static_cast<    \
  |  |  247|  24.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  24.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  24.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  24.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  24.1k|    static_cast<    \
  |  |  247|  24.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  24.1k|    static_cast<    \
  |  |  247|  24.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  24.1k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.19k|{
  248|  2.19k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.19k|}
_ZN3scn2v26detail15scan_value_implIcjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.19k|{
  229|  2.19k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.19k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.19k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.19k|    }                                                  \
  |  |  |  |   70|  2.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.19k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  26.3k|{
  117|  26.3k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  26.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  26.3k|}
_ZN3scn2v26detail9scan_implIcJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  26.3k|{
   77|  26.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  26.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  26.3k|    static_cast<    \
  |  |  247|  26.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  26.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  26.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  26.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  26.3k|    static_cast<    \
  |  |  247|  26.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  26.3k|    static_cast<    \
  |  |  247|  26.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  26.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  52.7k|{
   55|  52.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  52.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 43.9k, False: 8.79k]
  |  |  ------------------
  ------------------
   56|  43.9k|        return unexpected(result.error());
   57|  43.9k|    }
   58|  8.79k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  8.79k|    static_cast<    \
  |  |  247|  8.79k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  8.79k|    static_cast<    \
  |  |  247|  8.79k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  52.7k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  26.3k|{
  201|  26.3k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  26.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  26.3k|                                                      format, {});
  203|  26.3k|}
_ZN3scn2v26detail19scan_localized_implIcJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  26.3k|{
  163|  26.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  26.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  26.3k|    static_cast<    \
  |  |  247|  26.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  26.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  26.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  26.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  26.3k|    static_cast<    \
  |  |  247|  26.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  26.3k|    static_cast<    \
  |  |  247|  26.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  26.3k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.19k|{
  248|  2.19k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.19k|}
_ZN3scn2v26detail15scan_value_implIcxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.19k|{
  229|  2.19k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.19k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.19k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.19k|    }                                                  \
  |  |  |  |   70|  2.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.19k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  24.1k|{
  117|  24.1k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  24.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  24.1k|}
_ZN3scn2v26detail9scan_implIcJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  24.1k|{
   77|  24.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  24.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  24.1k|    static_cast<    \
  |  |  247|  24.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  24.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  24.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  24.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  24.1k|    static_cast<    \
  |  |  247|  24.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  24.1k|    static_cast<    \
  |  |  247|  24.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  24.1k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  48.3k|{
   55|  48.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  48.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 43.9k, False: 4.39k]
  |  |  ------------------
  ------------------
   56|  43.9k|        return unexpected(result.error());
   57|  43.9k|    }
   58|  4.39k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  4.39k|    static_cast<    \
  |  |  247|  4.39k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  4.39k|    static_cast<    \
  |  |  247|  4.39k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  48.3k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  24.1k|{
  201|  24.1k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  24.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  24.1k|                                                      format, {});
  203|  24.1k|}
_ZN3scn2v26detail19scan_localized_implIcJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  24.1k|{
  163|  24.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  24.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  24.1k|    static_cast<    \
  |  |  247|  24.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  24.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  24.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  24.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  24.1k|    static_cast<    \
  |  |  247|  24.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  24.1k|    static_cast<    \
  |  |  247|  24.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  24.1k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.19k|{
  248|  2.19k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.19k|}
_ZN3scn2v26detail15scan_value_implIcyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.19k|{
  229|  2.19k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.19k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.19k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.19k|    }                                                  \
  |  |  |  |   70|  2.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.19k|}
_ZN3scn2v26detail9scan_implIwJaEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JaEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   224k|{
   77|   224k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   224k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   224k|    static_cast<    \
  |  |  247|   224k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   224k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   224k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   224k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   224k|    static_cast<    \
  |  |  247|   224k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   224k|    static_cast<    \
  |  |  247|   224k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   224k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   449k|{
   55|   449k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   449k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 77.4k, False: 371k]
  |  |  ------------------
  ------------------
   56|  77.4k|        return unexpected(result.error());
   57|  77.4k|    }
   58|   371k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   371k|    static_cast<    \
  |  |  247|   371k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   371k|    static_cast<    \
  |  |  247|   371k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   449k|}
_ZN3scn2v26detail19scan_localized_implIwJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   224k|{
  163|   224k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   224k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   224k|    static_cast<    \
  |  |  247|   224k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   224k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   224k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   224k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   224k|    static_cast<    \
  |  |  247|   224k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   224k|    static_cast<    \
  |  |  247|   224k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   224k|}
_ZN3scn2v26detail15scan_value_implIwaN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  46.2k|{
  229|  46.2k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  46.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  46.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  46.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  46.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  46.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.87k, False: 42.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.87k|    }                                                  \
  |  |  |  |   70|  46.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  42.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  42.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  42.3k|    static_cast<    \
  |  |  247|  42.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  42.3k|    static_cast<    \
  |  |  247|  42.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  46.2k|}
_ZN3scn2v26detail9scan_implIwJhEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JhEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   207k|{
   77|   207k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   207k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   207k|    static_cast<    \
  |  |  247|   207k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   207k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   207k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   207k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   207k|    static_cast<    \
  |  |  247|   207k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   207k|    static_cast<    \
  |  |  247|   207k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   207k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   414k|{
   55|   414k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   414k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 77.4k, False: 336k]
  |  |  ------------------
  ------------------
   56|  77.4k|        return unexpected(result.error());
   57|  77.4k|    }
   58|   336k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   336k|    static_cast<    \
  |  |  247|   336k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   336k|    static_cast<    \
  |  |  247|   336k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   414k|}
_ZN3scn2v26detail19scan_localized_implIwJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   207k|{
  163|   207k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   207k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   207k|    static_cast<    \
  |  |  247|   207k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   207k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   207k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   207k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   207k|    static_cast<    \
  |  |  247|   207k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   207k|    static_cast<    \
  |  |  247|   207k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   207k|}
_ZN3scn2v26detail15scan_value_implIwhN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  41.0k|{
  229|  41.0k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  41.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  41.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  41.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.87k, False: 37.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.87k|    }                                                  \
  |  |  |  |   70|  41.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  37.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  37.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  37.1k|    static_cast<    \
  |  |  247|  37.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  37.1k|    static_cast<    \
  |  |  247|  37.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  41.0k|}
_ZN3scn2v26detail9scan_implIwJiEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JiEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   272k|{
   77|   272k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   272k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   272k|    static_cast<    \
  |  |  247|   272k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   272k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   272k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   272k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   272k|    static_cast<    \
  |  |  247|   272k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   272k|    static_cast<    \
  |  |  247|   272k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   272k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   545k|{
   55|   545k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   545k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 77.4k, False: 467k]
  |  |  ------------------
  ------------------
   56|  77.4k|        return unexpected(result.error());
   57|  77.4k|    }
   58|   467k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   467k|    static_cast<    \
  |  |  247|   467k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   467k|    static_cast<    \
  |  |  247|   467k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   545k|}
_ZN3scn2v26detail19scan_localized_implIwJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   272k|{
  163|   272k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   272k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   272k|    static_cast<    \
  |  |  247|   272k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   272k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   272k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   272k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   272k|    static_cast<    \
  |  |  247|   272k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   272k|    static_cast<    \
  |  |  247|   272k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   272k|}
_ZN3scn2v26detail15scan_value_implIwiN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  52.6k|{
  229|  52.6k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  52.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  52.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  52.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  52.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.87k, False: 48.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.87k|    }                                                  \
  |  |  |  |   70|  52.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  48.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  48.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  48.7k|    static_cast<    \
  |  |  247|  48.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  48.7k|    static_cast<    \
  |  |  247|  48.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  52.6k|}
_ZN3scn2v26detail9scan_implIwJjEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JjEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   231k|{
   77|   231k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   231k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   231k|    static_cast<    \
  |  |  247|   231k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   231k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   231k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   231k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   231k|    static_cast<    \
  |  |  247|   231k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   231k|    static_cast<    \
  |  |  247|   231k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   231k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   463k|{
   55|   463k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   463k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 77.4k, False: 386k]
  |  |  ------------------
  ------------------
   56|  77.4k|        return unexpected(result.error());
   57|  77.4k|    }
   58|   386k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   386k|    static_cast<    \
  |  |  247|   386k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   386k|    static_cast<    \
  |  |  247|   386k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   463k|}
_ZN3scn2v26detail19scan_localized_implIwJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   231k|{
  163|   231k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   231k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   231k|    static_cast<    \
  |  |  247|   231k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   231k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   231k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   231k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   231k|    static_cast<    \
  |  |  247|   231k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   231k|    static_cast<    \
  |  |  247|   231k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   231k|}
_ZN3scn2v26detail15scan_value_implIwjN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  44.8k|{
  229|  44.8k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  44.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  44.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  44.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  44.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  44.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.87k, False: 40.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.87k|    }                                                  \
  |  |  |  |   70|  44.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  40.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  40.9k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  40.9k|    static_cast<    \
  |  |  247|  40.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  40.9k|    static_cast<    \
  |  |  247|  40.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  44.8k|}
_ZN3scn2v26detail9scan_implIwJxEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JxEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   275k|{
   77|   275k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   275k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   275k|    static_cast<    \
  |  |  247|   275k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   275k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   275k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   275k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   275k|    static_cast<    \
  |  |  247|   275k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   275k|    static_cast<    \
  |  |  247|   275k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   275k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   551k|{
   55|   551k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   551k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 77.4k, False: 473k]
  |  |  ------------------
  ------------------
   56|  77.4k|        return unexpected(result.error());
   57|  77.4k|    }
   58|   473k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   473k|    static_cast<    \
  |  |  247|   473k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   473k|    static_cast<    \
  |  |  247|   473k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   551k|}
_ZN3scn2v26detail19scan_localized_implIwJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   275k|{
  163|   275k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   275k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   275k|    static_cast<    \
  |  |  247|   275k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   275k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   275k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   275k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   275k|    static_cast<    \
  |  |  247|   275k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   275k|    static_cast<    \
  |  |  247|   275k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   275k|}
_ZN3scn2v26detail15scan_value_implIwxN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  53.1k|{
  229|  53.1k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  53.1k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  53.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  53.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  53.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  53.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.87k, False: 49.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.87k|    }                                                  \
  |  |  |  |   70|  53.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  49.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  49.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  49.2k|    static_cast<    \
  |  |  247|  49.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  49.2k|    static_cast<    \
  |  |  247|  49.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  53.1k|}
_ZN3scn2v26detail9scan_implIwJyEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JyEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   233k|{
   77|   233k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   233k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   233k|    static_cast<    \
  |  |  247|   233k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   233k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   233k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   233k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   233k|    static_cast<    \
  |  |  247|   233k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   233k|    static_cast<    \
  |  |  247|   233k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   233k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   467k|{
   55|   467k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   467k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 77.4k, False: 390k]
  |  |  ------------------
  ------------------
   56|  77.4k|        return unexpected(result.error());
   57|  77.4k|    }
   58|   390k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   390k|    static_cast<    \
  |  |  247|   390k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   390k|    static_cast<    \
  |  |  247|   390k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   467k|}
_ZN3scn2v26detail19scan_localized_implIwJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   233k|{
  163|   233k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   233k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   233k|    static_cast<    \
  |  |  247|   233k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   233k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   233k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   233k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   233k|    static_cast<    \
  |  |  247|   233k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   233k|    static_cast<    \
  |  |  247|   233k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   233k|}
_ZN3scn2v26detail15scan_value_implIwyN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  45.1k|{
  229|  45.1k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  45.1k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  45.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  45.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  45.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.87k, False: 41.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.87k|    }                                                  \
  |  |  |  |   70|  45.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  41.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  41.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  41.2k|    static_cast<    \
  |  |  247|  41.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  41.2k|    static_cast<    \
  |  |  247|  41.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  45.1k|}
_ZN3scn2v26detail9scan_implIwJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  38.7k|{
   77|  38.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  38.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  38.7k|    static_cast<    \
  |  |  247|  38.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  38.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  38.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  38.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  38.7k|    static_cast<    \
  |  |  247|  38.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  38.7k|    static_cast<    \
  |  |  247|  38.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  38.7k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  77.4k|{
   55|  77.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  77.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 77.4k, False: 2]
  |  |  ------------------
  ------------------
   56|  77.4k|        return unexpected(result.error());
   57|  77.4k|    }
   58|      2|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      2|    static_cast<    \
  |  |  247|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      2|    static_cast<    \
  |  |  247|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  77.4k|}
_ZN3scn2v26detail19scan_localized_implIwJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  38.7k|{
  163|  38.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  38.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  38.7k|    static_cast<    \
  |  |  247|  38.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  38.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  38.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  38.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  38.7k|    static_cast<    \
  |  |  247|  38.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  38.7k|    static_cast<    \
  |  |  247|  38.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  38.7k|}
_ZN3scn2v26detail15scan_value_implIwaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  3.87k|{
  229|  3.87k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  3.87k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  3.87k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.87k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.87k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.87k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.87k|    }                                                  \
  |  |  |  |   70|  3.87k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  3.87k|}
_ZN3scn2v26detail9scan_implIwJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  42.5k|{
   77|  42.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  42.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  42.5k|    static_cast<    \
  |  |  247|  42.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  42.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  42.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  42.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  42.5k|    static_cast<    \
  |  |  247|  42.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  42.5k|    static_cast<    \
  |  |  247|  42.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  42.5k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  85.1k|{
   55|  85.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  85.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 77.4k, False: 7.74k]
  |  |  ------------------
  ------------------
   56|  77.4k|        return unexpected(result.error());
   57|  77.4k|    }
   58|  7.74k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  7.74k|    static_cast<    \
  |  |  247|  7.74k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  7.74k|    static_cast<    \
  |  |  247|  7.74k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  85.1k|}
_ZN3scn2v26detail19scan_localized_implIwJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  42.5k|{
  163|  42.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  42.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  42.5k|    static_cast<    \
  |  |  247|  42.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  42.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  42.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  42.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  42.5k|    static_cast<    \
  |  |  247|  42.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  42.5k|    static_cast<    \
  |  |  247|  42.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  42.5k|}
_ZN3scn2v26detail15scan_value_implIwhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  3.87k|{
  229|  3.87k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  3.87k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  3.87k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.87k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.87k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.87k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.87k|    }                                                  \
  |  |  |  |   70|  3.87k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  3.87k|}
_ZN3scn2v26detail9scan_implIwJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  42.5k|{
   77|  42.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  42.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  42.5k|    static_cast<    \
  |  |  247|  42.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  42.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  42.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  42.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  42.5k|    static_cast<    \
  |  |  247|  42.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  42.5k|    static_cast<    \
  |  |  247|  42.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  42.5k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  85.1k|{
   55|  85.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  85.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 77.4k, False: 7.74k]
  |  |  ------------------
  ------------------
   56|  77.4k|        return unexpected(result.error());
   57|  77.4k|    }
   58|  7.74k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  7.74k|    static_cast<    \
  |  |  247|  7.74k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  7.74k|    static_cast<    \
  |  |  247|  7.74k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  85.1k|}
_ZN3scn2v26detail19scan_localized_implIwJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  42.5k|{
  163|  42.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  42.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  42.5k|    static_cast<    \
  |  |  247|  42.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  42.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  42.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  42.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  42.5k|    static_cast<    \
  |  |  247|  42.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  42.5k|    static_cast<    \
  |  |  247|  42.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  42.5k|}
_ZN3scn2v26detail15scan_value_implIwiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  3.87k|{
  229|  3.87k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  3.87k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  3.87k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.87k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.87k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.87k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.87k|    }                                                  \
  |  |  |  |   70|  3.87k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  3.87k|}
_ZN3scn2v26detail9scan_implIwJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  42.5k|{
   77|  42.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  42.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  42.5k|    static_cast<    \
  |  |  247|  42.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  42.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  42.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  42.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  42.5k|    static_cast<    \
  |  |  247|  42.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  42.5k|    static_cast<    \
  |  |  247|  42.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  42.5k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  85.1k|{
   55|  85.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  85.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 77.4k, False: 7.74k]
  |  |  ------------------
  ------------------
   56|  77.4k|        return unexpected(result.error());
   57|  77.4k|    }
   58|  7.74k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  7.74k|    static_cast<    \
  |  |  247|  7.74k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  7.74k|    static_cast<    \
  |  |  247|  7.74k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  85.1k|}
_ZN3scn2v26detail19scan_localized_implIwJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  42.5k|{
  163|  42.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  42.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  42.5k|    static_cast<    \
  |  |  247|  42.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  42.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  42.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  42.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  42.5k|    static_cast<    \
  |  |  247|  42.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  42.5k|    static_cast<    \
  |  |  247|  42.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  42.5k|}
_ZN3scn2v26detail15scan_value_implIwjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  3.87k|{
  229|  3.87k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  3.87k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  3.87k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.87k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.87k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.87k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.87k|    }                                                  \
  |  |  |  |   70|  3.87k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  3.87k|}
_ZN3scn2v26detail9scan_implIwJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  42.5k|{
   77|  42.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  42.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  42.5k|    static_cast<    \
  |  |  247|  42.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  42.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  42.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  42.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  42.5k|    static_cast<    \
  |  |  247|  42.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  42.5k|    static_cast<    \
  |  |  247|  42.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  42.5k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  85.1k|{
   55|  85.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  85.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 77.4k, False: 7.74k]
  |  |  ------------------
  ------------------
   56|  77.4k|        return unexpected(result.error());
   57|  77.4k|    }
   58|  7.74k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  7.74k|    static_cast<    \
  |  |  247|  7.74k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  7.74k|    static_cast<    \
  |  |  247|  7.74k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  85.1k|}
_ZN3scn2v26detail19scan_localized_implIwJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  42.5k|{
  163|  42.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  42.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  42.5k|    static_cast<    \
  |  |  247|  42.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  42.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  42.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  42.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  42.5k|    static_cast<    \
  |  |  247|  42.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  42.5k|    static_cast<    \
  |  |  247|  42.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  42.5k|}
_ZN3scn2v26detail15scan_value_implIwxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  3.87k|{
  229|  3.87k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  3.87k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  3.87k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.87k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.87k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.87k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.87k|    }                                                  \
  |  |  |  |   70|  3.87k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  3.87k|}
_ZN3scn2v26detail9scan_implIwJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  42.5k|{
   77|  42.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  42.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  42.5k|    static_cast<    \
  |  |  247|  42.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  42.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  42.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  42.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  42.5k|    static_cast<    \
  |  |  247|  42.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  42.5k|    static_cast<    \
  |  |  247|  42.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  42.5k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  85.1k|{
   55|  85.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  85.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 77.4k, False: 7.74k]
  |  |  ------------------
  ------------------
   56|  77.4k|        return unexpected(result.error());
   57|  77.4k|    }
   58|  7.74k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  7.74k|    static_cast<    \
  |  |  247|  7.74k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  7.74k|    static_cast<    \
  |  |  247|  7.74k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  85.1k|}
_ZN3scn2v26detail19scan_localized_implIwJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  42.5k|{
  163|  42.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  42.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  42.5k|    static_cast<    \
  |  |  247|  42.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  42.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  42.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  42.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  42.5k|    static_cast<    \
  |  |  247|  42.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  42.5k|    static_cast<    \
  |  |  247|  42.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  42.5k|}
_ZN3scn2v26detail15scan_value_implIwyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  3.87k|{
  229|  3.87k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  3.87k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  3.87k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.87k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.87k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.87k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.87k|    }                                                  \
  |  |  |  |   70|  3.87k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  3.87k|}

_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|   316k|{
  486|   316k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  248|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|   316k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|   316k|    {
  378|   316k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIcEC2Ev:
  359|   316k|    {
  360|   316k|    }
_ZN3scn2v26detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
  128|   316k|    {
  129|   316k|    }
_ZN3scn2v26detail17basic_scan_bufferIcED2Ev:
   43|   316k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|   528k|    {
  382|   528k|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 618, False: 527k]
  ------------------
  383|    618|            return false;
  384|    618|        }
  385|   527k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 290k, False: 237k]
  ------------------
  386|   290k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|   290k|                                          this->m_current_view.begin(),
  388|   290k|                                          this->m_current_view.end());
  389|   290k|        }
  390|   527k|        m_latest = *m_cursor;
  391|   527k|        ++m_cursor;
  392|   527k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|   527k|        return true;
  394|   528k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE4syncEl:
   48|   316k|    {
   49|   316k|        SCN_UNUSED(position);
  ------------------
  |  |  227|   316k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|   316k|    }
_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|   526k|{
  486|   526k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  248|   526k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|   526k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|   526k|    {
  378|   526k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIwEC2Ev:
  359|   526k|    {
  360|   526k|    }
_ZN3scn2v26detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
  128|   526k|    {
  129|   526k|    }
_ZN3scn2v26detail17basic_scan_bufferIwED2Ev:
   43|   526k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|   898k|    {
  382|   898k|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 614, False: 897k]
  ------------------
  383|    614|            return false;
  384|    614|        }
  385|   897k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 510k, False: 387k]
  ------------------
  386|   510k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|   510k|                                          this->m_current_view.begin(),
  388|   510k|                                          this->m_current_view.end());
  389|   510k|        }
  390|   897k|        m_latest = *m_cursor;
  391|   897k|        ++m_cursor;
  392|   897k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|   897k|        return true;
  394|   898k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE4syncEl:
   48|   526k|    {
   49|   526k|        SCN_UNUSED(position);
  ------------------
  |  |  227|   526k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|   526k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
  172|  13.4M|    {
  173|  13.4M|        return m_end == nullptr;
  174|  13.4M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
  188|   554k|    {
  189|   554k|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 554k]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|   554k|        return parent()->get_segment_starting_at(position());
  195|   554k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  182|  7.13M|    {
  183|  7.13M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  7.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|      0|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  7.13M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE23get_segment_starting_atEl:
   78|   554k|    {
   79|   554k|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|   554k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 52.7k, False: 501k]
  |  |  ------------------
  ------------------
   80|   554k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|  52.7k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|  52.7k|        }
   83|   501k|        const auto start = pos - m_putback_buffer.size();
   84|   501k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  242|   501k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   501k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|      0|        return m_current_view.substr(start);
   86|   554k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  177|   395k|    {
  178|   395k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|   395k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   395k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|      0|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|   395k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator8positionEv:
  167|  1.08M|    {
  168|  1.08M|        return m_position;
  169|  1.08M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE13is_contiguousEv:
  100|   949k|    {
  101|   949k|        return m_is_contiguous;
  102|   949k|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
  172|  22.7M|    {
  173|  22.7M|        return m_end == nullptr;
  174|  22.7M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
  188|   867k|    {
  189|   867k|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 867k]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|   867k|        return parent()->get_segment_starting_at(position());
  195|   867k|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  182|  12.0M|    {
  183|  12.0M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  12.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  12.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|      0|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  12.0M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE23get_segment_starting_atEl:
   78|   867k|    {
   79|   867k|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|   867k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 46.4k, False: 820k]
  |  |  ------------------
  ------------------
   80|   867k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|  46.4k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|  46.4k|        }
   83|   820k|        const auto start = pos - m_putback_buffer.size();
   84|   820k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  242|   820k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   820k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|      0|        return m_current_view.substr(start);
   86|   867k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  177|   665k|    {
  178|   665k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|   665k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   665k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|      0|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|   665k|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator8positionEv:
  167|  1.70M|    {
  168|  1.70M|        return m_position;
  169|  1.70M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE13is_contiguousEv:
  100|  1.57M|    {
  101|  1.57M|        return m_is_contiguous;
  102|  1.57M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE3getEv:
  321|   316k|{
  322|   316k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 316k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|   316k|    return ranges::subrange{forward_iterator{this, 0},
  327|   316k|                            ranges_std::default_sentinel};
  328|   316k|}
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
  154|   316k|    {
  155|   316k|        SCN_EXPECT(parent);
  ------------------
  |  |  242|   316k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   316k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   316k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  242|   316k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   316k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   316k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|  1.12M|    {
  258|  1.12M|        return x.is_at_end();
  259|  1.12M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
  301|  1.38M|    {
  302|  1.38M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 1.38M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  1.38M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 1.38M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  1.38M|        return !read_at_position();
  309|  1.38M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
  281|  3.43M|    {
  282|  3.43M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  3.43M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.43M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  3.43M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 3.43M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  3.43M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  152|  3.43M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 2.90M, False: 528k]
  |  |  ------------------
  ------------------
  289|  2.90M|            return true;
  290|  2.90M|        }
  291|       |
  292|  1.05M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 528k, False: 527k]
  ------------------
  293|   528k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 618, False: 527k]
  ------------------
  294|    618|                return false;
  295|    618|            }
  296|   528k|        }
  297|   527k|        return true;
  298|   528k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE15chars_availableEv:
   58|  4.88M|    {
   59|  4.88M|        return m_putback_buffer.size() + m_current_view.size();
   60|  4.88M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|   263k|    {
  269|   263k|        return !x.is_at_end();
  270|   263k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iteratordeEv:
  216|  1.56M|    {
  217|  1.56M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  1.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  1.56M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 1.56M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  1.56M|        auto res = read_at_position();
  226|  1.56M|        SCN_EXPECT(res);
  ------------------
  |  |  242|  1.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|      0|        return parent()->get_character_at(m_position);
  228|  1.56M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16get_character_atEl:
   89|  1.56M|    {
   90|  1.56M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.54M, False: 26.8k]
  |  |  ------------------
  ------------------
   91|  1.56M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  1.54M|            return m_putback_buffer[pos];
   93|  1.54M|        }
   94|  26.8k|        const auto start = pos - m_putback_buffer.size();
   95|  26.8k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  242|  26.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  26.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|      0|        return m_current_view[start];
   97|  1.56M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorppEv:
  202|   475k|    {
  203|   475k|        ++m_position;
  204|   475k|        std::ignore = read_at_position();
  205|   475k|        return *this;
  206|   475k|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  251|   448k|    {
  252|   448k|        return !(lhs == rhs);
  253|   448k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  246|   646k|    {
  247|   646k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 646k, False: 0]
  |  Branch (247:46): [True: 184k, False: 461k]
  ------------------
  248|   646k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator13batch_advanceEl:
  231|   646k|    {
  232|   646k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  242|   646k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   646k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|      0|        m_position += n;
  234|   646k|        return *this;
  235|   646k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE8sync_allEv:
   53|   277k|    {
   54|   277k|        sync(0);
   55|   277k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE3getEv:
  321|   526k|{
  322|   526k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 526k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|   526k|    return ranges::subrange{forward_iterator{this, 0},
  327|   526k|                            ranges_std::default_sentinel};
  328|   526k|}
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
  154|   526k|    {
  155|   526k|        SCN_EXPECT(parent);
  ------------------
  |  |  242|   526k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   526k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   526k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  242|   526k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   526k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   526k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|  1.83M|    {
  258|  1.83M|        return x.is_at_end();
  259|  1.83M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
  301|  2.29M|    {
  302|  2.29M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 2.29M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  2.29M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 2.29M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  2.29M|        return !read_at_position();
  309|  2.29M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
  281|  5.82M|    {
  282|  5.82M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  5.82M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.82M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  5.82M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 5.82M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  5.82M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  152|  5.82M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 4.92M, False: 898k]
  |  |  ------------------
  ------------------
  289|  4.92M|            return true;
  290|  4.92M|        }
  291|       |
  292|  1.79M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 898k, False: 897k]
  ------------------
  293|   898k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 614, False: 897k]
  ------------------
  294|    614|                return false;
  295|    614|            }
  296|   898k|        }
  297|   897k|        return true;
  298|   898k|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE15chars_availableEv:
   58|  8.28M|    {
   59|  8.28M|        return m_putback_buffer.size() + m_current_view.size();
   60|  8.28M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|   456k|    {
  269|   456k|        return !x.is_at_end();
  270|   456k|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iteratordeEv:
  216|  2.67M|    {
  217|  2.67M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  2.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  2.67M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 2.67M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  2.67M|        auto res = read_at_position();
  226|  2.67M|        SCN_EXPECT(res);
  ------------------
  |  |  242|  2.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|      0|        return parent()->get_character_at(m_position);
  228|  2.67M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16get_character_atEl:
   89|  2.67M|    {
   90|  2.67M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  2.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.57M, False: 93.3k]
  |  |  ------------------
  ------------------
   91|  2.67M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  2.57M|            return m_putback_buffer[pos];
   93|  2.57M|        }
   94|  93.3k|        const auto start = pos - m_putback_buffer.size();
   95|  93.3k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  242|  93.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  93.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|      0|        return m_current_view[start];
   97|  2.67M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorppEv:
  202|   859k|    {
  203|   859k|        ++m_position;
  204|   859k|        std::ignore = read_at_position();
  205|   859k|        return *this;
  206|   859k|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  251|   804k|    {
  252|   804k|        return !(lhs == rhs);
  253|   804k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  246|  1.12M|    {
  247|  1.12M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 1.12M, False: 0]
  |  Branch (247:46): [True: 317k, False: 804k]
  ------------------
  248|  1.12M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator13batch_advanceEl:
  231|  1.05M|    {
  232|  1.05M|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  242|  1.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|      0|        m_position += n;
  234|  1.05M|        return *this;
  235|  1.05M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE8sync_allEv:
   53|   487k|    {
   54|   487k|        sync(0);
   55|   487k|    }

_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIcEEmT_:
   71|   146k|{
   72|   146k|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|   146k|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|   146k|    }
   75|   146k|    else if constexpr (sizeof(U) == 2) {
   76|   146k|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|   146k|    }
   78|   146k|    else {
   79|       |        // utf-32
   80|   146k|        static_assert(sizeof(U) == 4);
   81|   146k|        SCN_UNUSED(ch);
   82|   146k|        return 1;
   83|   146k|    }
   84|   146k|}
_ZN3scn2v26detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
   35|   146k|{
   36|   146k|    static_assert(sizeof(U8) == 1);
   37|       |
   38|   146k|    SCN_GCC_COMPAT_PUSH
   39|   146k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
   40|   146k|    constexpr char lengths[] =
   41|   146k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
   42|   146k|        "\1\1\1\1\1\1\1\1"
   43|   146k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
   44|       |                            // byte
   45|   146k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
   46|   146k|        "\3\3"              // highest bits 1110 -> 3-byte cp
   47|   146k|        "\4";               // highest bits 11110 -> 4-byte cp
   48|   146k|    return lengths[static_cast<unsigned char>(ch) >> 3];
   49|   146k|    SCN_GCC_COMPAT_POP
   50|   146k|}
_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIwEEmT_:
   71|  45.1M|{
   72|  45.1M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|  45.1M|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|  45.1M|    }
   75|  45.1M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (75:24): [Folded - Ignored]
  ------------------
   76|  45.1M|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|  45.1M|    }
   78|  45.1M|    else {
   79|       |        // utf-32
   80|  45.1M|        static_assert(sizeof(U) == 4);
   81|  45.1M|        SCN_UNUSED(ch);
  ------------------
  |  |  227|  45.1M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   82|  45.1M|        return 1;
   83|  45.1M|    }
   84|  45.1M|}

_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   943k|{
   36|   943k|#define SCN_VISIT(Type)                                         \
   37|   943k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   943k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   943k|    }                                                           \
   40|   943k|    else {                                                      \
   41|   943k|        return vis(monostate_val);                              \
   42|   943k|    }
   43|       |
   44|   943k|    monostate monostate_val{};
   45|       |
   46|   943k|    switch (arg.m_type) {
   47|   154k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 154k, False: 788k]
  ------------------
   48|   154k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   154k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   154k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   154k|    }                                                           \
  |  |   40|   154k|    else {                                                      \
  |  |   41|   154k|        return vis(monostate_val);                              \
  |  |   42|   154k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 943k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   178k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 178k, False: 764k]
  ------------------
   52|   178k|            SCN_VISIT(int);
  ------------------
  |  |   37|   178k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   178k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   178k|    }                                                           \
  |  |   40|   178k|    else {                                                      \
  |  |   41|   178k|        return vis(monostate_val);                              \
  |  |   42|   178k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 943k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   181k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 181k, False: 761k]
  ------------------
   56|   181k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   181k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   181k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   181k|    }                                                           \
  |  |   40|   181k|    else {                                                      \
  |  |   41|   181k|        return vis(monostate_val);                              \
  |  |   42|   181k|    }
  ------------------
   57|   133k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 133k, False: 810k]
  ------------------
   58|   133k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   133k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   133k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   133k|    }                                                           \
  |  |   40|   133k|    else {                                                      \
  |  |   41|   133k|        return vis(monostate_val);                              \
  |  |   42|   133k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 943k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   146k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 146k, False: 796k]
  ------------------
   62|   146k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   146k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   146k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   146k|    }                                                           \
  |  |   40|   146k|    else {                                                      \
  |  |   41|   146k|        return vis(monostate_val);                              \
  |  |   42|   146k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 943k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   147k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 147k, False: 795k]
  ------------------
   66|   147k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   147k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   147k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   147k|    }                                                           \
  |  |   40|   147k|    else {                                                      \
  |  |   41|   147k|        return vis(monostate_val);                              \
  |  |   42|   147k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 943k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 943k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 943k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 943k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 943k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 943k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 943k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 943k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 943k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 943k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 943k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 943k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 943k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 943k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 943k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 943k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 943k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   943k|            SCN_CLANG_POP
  114|   943k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   943k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  39.5k|{
   36|  39.5k|#define SCN_VISIT(Type)                                         \
   37|  39.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  39.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  39.5k|    }                                                           \
   40|  39.5k|    else {                                                      \
   41|  39.5k|        return vis(monostate_val);                              \
   42|  39.5k|    }
   43|       |
   44|  39.5k|    monostate monostate_val{};
   45|       |
   46|  39.5k|    switch (arg.m_type) {
   47|  6.59k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 6.59k, False: 32.9k]
  ------------------
   48|  6.59k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  6.59k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.59k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.59k|    }                                                           \
  |  |   40|  6.59k|    else {                                                      \
  |  |   41|  6.59k|        return vis(monostate_val);                              \
  |  |   42|  6.59k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 39.5k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  6.59k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 6.59k, False: 32.9k]
  ------------------
   52|  6.59k|            SCN_VISIT(int);
  ------------------
  |  |   37|  6.59k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.59k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.59k|    }                                                           \
  |  |   40|  6.59k|    else {                                                      \
  |  |   41|  6.59k|        return vis(monostate_val);                              \
  |  |   42|  6.59k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 39.5k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  6.59k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 6.59k, False: 32.9k]
  ------------------
   56|  6.59k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  6.59k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.59k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.59k|    }                                                           \
  |  |   40|  6.59k|    else {                                                      \
  |  |   41|  6.59k|        return vis(monostate_val);                              \
  |  |   42|  6.59k|    }
  ------------------
   57|  6.59k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 6.59k, False: 32.9k]
  ------------------
   58|  6.59k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  6.59k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.59k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.59k|    }                                                           \
  |  |   40|  6.59k|    else {                                                      \
  |  |   41|  6.59k|        return vis(monostate_val);                              \
  |  |   42|  6.59k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 39.5k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  6.59k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 6.59k, False: 32.9k]
  ------------------
   62|  6.59k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  6.59k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.59k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.59k|    }                                                           \
  |  |   40|  6.59k|    else {                                                      \
  |  |   41|  6.59k|        return vis(monostate_val);                              \
  |  |   42|  6.59k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 39.5k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  6.59k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 6.59k, False: 32.9k]
  ------------------
   66|  6.59k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  6.59k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.59k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.59k|    }                                                           \
  |  |   40|  6.59k|    else {                                                      \
  |  |   41|  6.59k|        return vis(monostate_val);                              \
  |  |   42|  6.59k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 39.5k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 39.5k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 39.5k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 39.5k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 39.5k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 39.5k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 39.5k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 39.5k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 39.5k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 39.5k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 39.5k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 39.5k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 39.5k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 39.5k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 39.5k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 39.5k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 39.5k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  39.5k|            SCN_CLANG_POP
  114|  39.5k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  39.5k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  2.39M|{
   36|  2.39M|#define SCN_VISIT(Type)                                         \
   37|  2.39M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  2.39M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  2.39M|    }                                                           \
   40|  2.39M|    else {                                                      \
   41|  2.39M|        return vis(monostate_val);                              \
   42|  2.39M|    }
   43|       |
   44|  2.39M|    monostate monostate_val{};
   45|       |
   46|  2.39M|    switch (arg.m_type) {
   47|   367k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 367k, False: 2.02M]
  ------------------
   48|   367k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   367k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   367k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   367k|    }                                                           \
  |  |   40|   367k|    else {                                                      \
  |  |   41|   367k|        return vis(monostate_val);                              \
  |  |   42|   367k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 2.39M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   468k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 468k, False: 1.92M]
  ------------------
   52|   468k|            SCN_VISIT(int);
  ------------------
  |  |   37|   468k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   468k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   468k|    }                                                           \
  |  |   40|   468k|    else {                                                      \
  |  |   41|   468k|        return vis(monostate_val);                              \
  |  |   42|   468k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 2.39M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   477k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 477k, False: 1.91M]
  ------------------
   56|   477k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   477k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   477k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   477k|    }                                                           \
  |  |   40|   477k|    else {                                                      \
  |  |   41|   477k|        return vis(monostate_val);                              \
  |  |   42|   477k|    }
  ------------------
   57|   326k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 326k, False: 2.06M]
  ------------------
   58|   326k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   326k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   326k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   326k|    }                                                           \
  |  |   40|   326k|    else {                                                      \
  |  |   41|   326k|        return vis(monostate_val);                              \
  |  |   42|   326k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 2.39M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   374k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 374k, False: 2.02M]
  ------------------
   62|   374k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   374k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   374k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   374k|    }                                                           \
  |  |   40|   374k|    else {                                                      \
  |  |   41|   374k|        return vis(monostate_val);                              \
  |  |   42|   374k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 2.39M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   379k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 379k, False: 2.01M]
  ------------------
   66|   379k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   379k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   379k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   379k|    }                                                           \
  |  |   40|   379k|    else {                                                      \
  |  |   41|   379k|        return vis(monostate_val);                              \
  |  |   42|   379k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 2.39M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 2.39M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 2.39M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 2.39M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 2.39M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 2.39M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 2.39M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 2.39M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 2.39M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 2.39M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 2.39M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 2.39M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 2.39M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 2.39M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 2.39M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 2.39M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 2.39M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  2.39M|            SCN_CLANG_POP
  114|  2.39M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  2.39M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   197k|{
   36|   197k|#define SCN_VISIT(Type)                                         \
   37|   197k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   197k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   197k|    }                                                           \
   40|   197k|    else {                                                      \
   41|   197k|        return vis(monostate_val);                              \
   42|   197k|    }
   43|       |
   44|   197k|    monostate monostate_val{};
   45|       |
   46|   197k|    switch (arg.m_type) {
   47|  35.1k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 35.1k, False: 162k]
  ------------------
   48|  35.1k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  35.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  35.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  35.1k|    }                                                           \
  |  |   40|  35.1k|    else {                                                      \
  |  |   41|  35.1k|        return vis(monostate_val);                              \
  |  |   42|  35.1k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 197k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  35.1k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 35.1k, False: 162k]
  ------------------
   52|  35.1k|            SCN_VISIT(int);
  ------------------
  |  |   37|  35.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  35.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  35.1k|    }                                                           \
  |  |   40|  35.1k|    else {                                                      \
  |  |   41|  35.1k|        return vis(monostate_val);                              \
  |  |   42|  35.1k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 197k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  35.1k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 35.1k, False: 162k]
  ------------------
   56|  35.1k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  35.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  35.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  35.1k|    }                                                           \
  |  |   40|  35.1k|    else {                                                      \
  |  |   41|  35.1k|        return vis(monostate_val);                              \
  |  |   42|  35.1k|    }
  ------------------
   57|  30.7k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 30.7k, False: 167k]
  ------------------
   58|  30.7k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  30.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  30.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  30.7k|    }                                                           \
  |  |   40|  30.7k|    else {                                                      \
  |  |   41|  30.7k|        return vis(monostate_val);                              \
  |  |   42|  30.7k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 197k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  30.7k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 30.7k, False: 167k]
  ------------------
   62|  30.7k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  30.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  30.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  30.7k|    }                                                           \
  |  |   40|  30.7k|    else {                                                      \
  |  |   41|  30.7k|        return vis(monostate_val);                              \
  |  |   42|  30.7k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 197k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  30.7k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 30.7k, False: 167k]
  ------------------
   66|  30.7k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  30.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  30.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  30.7k|    }                                                           \
  |  |   40|  30.7k|    else {                                                      \
  |  |   41|  30.7k|        return vis(monostate_val);                              \
  |  |   42|  30.7k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 197k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 197k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 197k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 197k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 197k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 197k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 197k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 197k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 197k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 197k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 197k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 197k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 197k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 197k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 197k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 197k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 197k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   197k|            SCN_CLANG_POP
  114|   197k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   197k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   848k|{
   36|   848k|#define SCN_VISIT(Type)                                         \
   37|   848k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   848k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   848k|    }                                                           \
   40|   848k|    else {                                                      \
   41|   848k|        return vis(monostate_val);                              \
   42|   848k|    }
   43|       |
   44|   848k|    monostate monostate_val{};
   45|       |
   46|   848k|    switch (arg.m_type) {
   47|   138k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 138k, False: 710k]
  ------------------
   48|   138k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   138k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   138k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   138k|    }                                                           \
  |  |   40|   138k|    else {                                                      \
  |  |   41|   138k|        return vis(monostate_val);                              \
  |  |   42|   138k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 848k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   157k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 157k, False: 691k]
  ------------------
   52|   157k|            SCN_VISIT(int);
  ------------------
  |  |   37|   157k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   157k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   157k|    }                                                           \
  |  |   40|   157k|    else {                                                      \
  |  |   41|   157k|        return vis(monostate_val);                              \
  |  |   42|   157k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 848k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   159k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 159k, False: 689k]
  ------------------
   56|   159k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   159k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   159k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   159k|    }                                                           \
  |  |   40|   159k|    else {                                                      \
  |  |   41|   159k|        return vis(monostate_val);                              \
  |  |   42|   159k|    }
  ------------------
   57|   123k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 123k, False: 725k]
  ------------------
   58|   123k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   123k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   123k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   123k|    }                                                           \
  |  |   40|   123k|    else {                                                      \
  |  |   41|   123k|        return vis(monostate_val);                              \
  |  |   42|   123k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 848k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   134k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 134k, False: 714k]
  ------------------
   62|   134k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   134k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   134k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   134k|    }                                                           \
  |  |   40|   134k|    else {                                                      \
  |  |   41|   134k|        return vis(monostate_val);                              \
  |  |   42|   134k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 848k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   135k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 135k, False: 713k]
  ------------------
   66|   135k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   135k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   135k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   135k|    }                                                           \
  |  |   40|   135k|    else {                                                      \
  |  |   41|   135k|        return vis(monostate_val);                              \
  |  |   42|   135k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 848k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 848k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 848k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 848k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 848k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 848k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 848k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 848k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 848k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 848k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 848k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 848k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 848k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 848k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 848k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 848k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 848k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   848k|            SCN_CLANG_POP
  114|   848k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   848k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  2.18M|{
   36|  2.18M|#define SCN_VISIT(Type)                                         \
   37|  2.18M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  2.18M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  2.18M|    }                                                           \
   40|  2.18M|    else {                                                      \
   41|  2.18M|        return vis(monostate_val);                              \
   42|  2.18M|    }
   43|       |
   44|  2.18M|    monostate monostate_val{};
   45|       |
   46|  2.18M|    switch (arg.m_type) {
   47|   333k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 333k, False: 1.85M]
  ------------------
   48|   333k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   333k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   333k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   333k|    }                                                           \
  |  |   40|   333k|    else {                                                      \
  |  |   41|   333k|        return vis(monostate_val);                              \
  |  |   42|   333k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 2.18M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   416k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 416k, False: 1.76M]
  ------------------
   52|   416k|            SCN_VISIT(int);
  ------------------
  |  |   37|   416k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   416k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   416k|    }                                                           \
  |  |   40|   416k|    else {                                                      \
  |  |   41|   416k|        return vis(monostate_val);                              \
  |  |   42|   416k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 2.18M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   421k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 421k, False: 1.76M]
  ------------------
   56|   421k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   421k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   421k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   421k|    }                                                           \
  |  |   40|   421k|    else {                                                      \
  |  |   41|   421k|        return vis(monostate_val);                              \
  |  |   42|   421k|    }
  ------------------
   57|   309k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 309k, False: 1.87M]
  ------------------
   58|   309k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   309k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   309k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   309k|    }                                                           \
  |  |   40|   309k|    else {                                                      \
  |  |   41|   309k|        return vis(monostate_val);                              \
  |  |   42|   309k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 2.18M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   350k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 350k, False: 1.83M]
  ------------------
   62|   350k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   350k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   350k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   350k|    }                                                           \
  |  |   40|   350k|    else {                                                      \
  |  |   41|   350k|        return vis(monostate_val);                              \
  |  |   42|   350k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 2.18M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   354k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 354k, False: 1.83M]
  ------------------
   66|   354k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   354k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   354k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   354k|    }                                                           \
  |  |   40|   354k|    else {                                                      \
  |  |   41|   354k|        return vis(monostate_val);                              \
  |  |   42|   354k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 2.18M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 2.18M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 2.18M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 2.18M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 2.18M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 2.18M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 2.18M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 2.18M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 2.18M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 2.18M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 2.18M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 2.18M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 2.18M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 2.18M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 2.18M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 2.18M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 2.18M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  2.18M|            SCN_CLANG_POP
  114|  2.18M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  2.18M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  69.6k|{
   36|  69.6k|#define SCN_VISIT(Type)                                         \
   37|  69.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  69.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  69.6k|    }                                                           \
   40|  69.6k|    else {                                                      \
   41|  69.6k|        return vis(monostate_val);                              \
   42|  69.6k|    }
   43|       |
   44|  69.6k|    monostate monostate_val{};
   45|       |
   46|  69.6k|    switch (arg.m_type) {
   47|  11.6k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 11.6k, False: 58.0k]
  ------------------
   48|  11.6k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  11.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  11.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  11.6k|    }                                                           \
  |  |   40|  11.6k|    else {                                                      \
  |  |   41|  11.6k|        return vis(monostate_val);                              \
  |  |   42|  11.6k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 69.6k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  11.6k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 11.6k, False: 58.0k]
  ------------------
   52|  11.6k|            SCN_VISIT(int);
  ------------------
  |  |   37|  11.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  11.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  11.6k|    }                                                           \
  |  |   40|  11.6k|    else {                                                      \
  |  |   41|  11.6k|        return vis(monostate_val);                              \
  |  |   42|  11.6k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 69.6k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  11.6k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 11.6k, False: 58.0k]
  ------------------
   56|  11.6k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  11.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  11.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  11.6k|    }                                                           \
  |  |   40|  11.6k|    else {                                                      \
  |  |   41|  11.6k|        return vis(monostate_val);                              \
  |  |   42|  11.6k|    }
  ------------------
   57|  11.6k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 11.6k, False: 58.0k]
  ------------------
   58|  11.6k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  11.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  11.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  11.6k|    }                                                           \
  |  |   40|  11.6k|    else {                                                      \
  |  |   41|  11.6k|        return vis(monostate_val);                              \
  |  |   42|  11.6k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 69.6k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  11.6k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 11.6k, False: 58.0k]
  ------------------
   62|  11.6k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  11.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  11.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  11.6k|    }                                                           \
  |  |   40|  11.6k|    else {                                                      \
  |  |   41|  11.6k|        return vis(monostate_val);                              \
  |  |   42|  11.6k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 69.6k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  11.6k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 11.6k, False: 58.0k]
  ------------------
   66|  11.6k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  11.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  11.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  11.6k|    }                                                           \
  |  |   40|  11.6k|    else {                                                      \
  |  |   41|  11.6k|        return vis(monostate_val);                              \
  |  |   42|  11.6k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 69.6k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 69.6k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 69.6k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 69.6k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 69.6k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 69.6k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 69.6k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 69.6k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 69.6k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 69.6k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 69.6k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 69.6k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 69.6k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 69.6k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 69.6k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 69.6k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 69.6k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  69.6k|            SCN_CLANG_POP
  114|  69.6k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  69.6k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   317k|{
   36|   317k|#define SCN_VISIT(Type)                                         \
   37|   317k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   317k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   317k|    }                                                           \
   40|   317k|    else {                                                      \
   41|   317k|        return vis(monostate_val);                              \
   42|   317k|    }
   43|       |
   44|   317k|    monostate monostate_val{};
   45|       |
   46|   317k|    switch (arg.m_type) {
   47|  46.4k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 46.4k, False: 270k]
  ------------------
   48|  46.4k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  46.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  46.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  46.4k|    }                                                           \
  |  |   40|  46.4k|    else {                                                      \
  |  |   41|  46.4k|        return vis(monostate_val);                              \
  |  |   42|  46.4k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 317k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  54.1k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 54.1k, False: 263k]
  ------------------
   52|  54.1k|            SCN_VISIT(int);
  ------------------
  |  |   37|  54.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  54.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  54.1k|    }                                                           \
  |  |   40|  54.1k|    else {                                                      \
  |  |   41|  54.1k|        return vis(monostate_val);                              \
  |  |   42|  54.1k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 317k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  54.1k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 54.1k, False: 263k]
  ------------------
   56|  54.1k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  54.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  54.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  54.1k|    }                                                           \
  |  |   40|  54.1k|    else {                                                      \
  |  |   41|  54.1k|        return vis(monostate_val);                              \
  |  |   42|  54.1k|    }
  ------------------
   57|  54.1k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 54.1k, False: 263k]
  ------------------
   58|  54.1k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  54.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  54.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  54.1k|    }                                                           \
  |  |   40|  54.1k|    else {                                                      \
  |  |   41|  54.1k|        return vis(monostate_val);                              \
  |  |   42|  54.1k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 317k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  54.1k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 54.1k, False: 263k]
  ------------------
   62|  54.1k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  54.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  54.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  54.1k|    }                                                           \
  |  |   40|  54.1k|    else {                                                      \
  |  |   41|  54.1k|        return vis(monostate_val);                              \
  |  |   42|  54.1k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 317k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  54.1k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 54.1k, False: 263k]
  ------------------
   66|  54.1k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  54.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  54.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  54.1k|    }                                                           \
  |  |   40|  54.1k|    else {                                                      \
  |  |   41|  54.1k|        return vis(monostate_val);                              \
  |  |   42|  54.1k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 317k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 317k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 317k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 317k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 317k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 317k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 317k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 317k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 317k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 317k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 317k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 317k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 317k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 317k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 317k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 317k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 317k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   317k|            SCN_CLANG_POP
  114|   317k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   317k|}  // namespace scn

_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|  1.55M|{
  174|  1.55M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  1.55M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|  1.55M|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NSC_17basic_string_viewIT0_NSC_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  110|  1.55M|{
  111|  1.55M|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  1.55M|    auto result = vscan_impl(buffer, format, args);
  114|  1.55M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 131k, False: 1.41M]
  |  |  ------------------
  ------------------
  115|   131k|        return unexpected(result.error());
  116|   131k|    }
  117|  1.41M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.41M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  1.55M|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENSt3__16localeEvEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vINSA_9remove_cvINSA_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEERKT0_OSG_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|  1.55M|{
  192|  1.55M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  1.55M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|  1.55M|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT_OSH_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
  126|  1.55M|{
  127|  1.55M|#if !SCN_DISABLE_LOCALE
  128|  1.55M|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  1.55M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  1.55M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  1.55M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  1.55M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 131k, False: 1.41M]
  |  |  ------------------
  ------------------
  135|   131k|        return unexpected(result.error());
  136|   131k|    }
  137|  1.41M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.41M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  1.55M|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|   314k|{
  205|   314k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  248|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   314k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   314k|{
  151|   314k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   314k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   314k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.1k, False: 301k]
  |  |  ------------------
  ------------------
  155|  13.1k|        return unexpected(result.error());
  156|  13.1k|    }
  157|   301k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   314k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|   151k|{
  174|   151k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|   151k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS7_17basic_string_viewIT0_NS7_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  110|   151k|{
  111|   151k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   151k|    auto result = vscan_impl(buffer, format, args);
  114|   151k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 131k, False: 19.7k]
  |  |  ------------------
  ------------------
  115|   131k|        return unexpected(result.error());
  116|   131k|    }
  117|  19.7k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  19.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   151k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEERKT0_OSL_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|   151k|{
  192|   151k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|   151k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT_OSM_NS3_17basic_string_viewIT1_NS3_11char_traitsIS14_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS14_EEEE:
  126|   151k|{
  127|   151k|#if !SCN_DISABLE_LOCALE
  128|   151k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   151k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   151k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   151k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   151k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 131k, False: 19.7k]
  |  |  ------------------
  ------------------
  135|   131k|        return unexpected(result.error());
  136|   131k|    }
  137|  19.7k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  19.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   151k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|  13.1k|{
  205|  13.1k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  248|  13.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  13.1k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  13.1k|{
  151|  13.1k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  13.1k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  13.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  13.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.1k, False: 0]
  |  |  ------------------
  ------------------
  155|  13.1k|        return unexpected(result.error());
  156|  13.1k|    }
  157|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  13.1k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NSC_17basic_string_viewIT0_NSC_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  110|  1.44M|{
  111|  1.44M|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  1.44M|    auto result = vscan_impl(buffer, format, args);
  114|  1.44M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 232k, False: 1.21M]
  |  |  ------------------
  ------------------
  115|   232k|        return unexpected(result.error());
  116|   232k|    }
  117|  1.21M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  1.44M|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT_OSH_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
  126|  1.44M|{
  127|  1.44M|#if !SCN_DISABLE_LOCALE
  128|  1.44M|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  1.44M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  1.44M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  1.44M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  1.44M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 232k, False: 1.21M]
  |  |  ------------------
  ------------------
  135|   232k|        return unexpected(result.error());
  136|   232k|    }
  137|  1.21M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  1.44M|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   282k|{
  151|   282k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   282k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   282k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   282k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 23.2k, False: 259k]
  |  |  ------------------
  ------------------
  155|  23.2k|        return unexpected(result.error());
  156|  23.2k|    }
  157|   259k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   259k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   282k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS7_17basic_string_viewIT0_NS7_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  110|   251k|{
  111|   251k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   251k|    auto result = vscan_impl(buffer, format, args);
  114|   251k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   251k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 232k, False: 19.3k]
  |  |  ------------------
  ------------------
  115|   232k|        return unexpected(result.error());
  116|   232k|    }
  117|  19.3k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  19.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   251k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT_OSM_NS3_17basic_string_viewIT1_NS3_11char_traitsIS14_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS14_EEEE:
  126|   251k|{
  127|   251k|#if !SCN_DISABLE_LOCALE
  128|   251k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   251k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   251k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   251k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   251k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   251k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 232k, False: 19.3k]
  |  |  ------------------
  ------------------
  135|   232k|        return unexpected(result.error());
  136|   232k|    }
  137|  19.3k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  19.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   251k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  23.2k|{
  151|  23.2k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  23.2k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  23.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  23.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 23.2k, False: 0]
  |  |  ------------------
  ------------------
  155|  23.2k|        return unexpected(result.error());
  156|  23.2k|    }
  157|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  23.2k|}

_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   224k|{
   90|   224k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   224k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   224k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NSB_17basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|  1.44M|{
   45|  1.44M|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|  1.44M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  1.44M|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   224k|{
  125|   224k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   224k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   224k|                                                         format, {});
  127|   224k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENSt3__16localeELPv0EEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vINSA_9remove_cvINSA_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT0_OSH_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|  1.44M|{
   61|  1.44M|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|  1.44M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|  1.44M|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  46.2k|{
  159|  46.2k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  46.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  46.2k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|   282k|{
   73|   282k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  248|   282k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|   282k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   207k|{
   90|   207k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   207k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   207k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   207k|{
  125|   207k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   207k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   207k|                                                         format, {});
  127|   207k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  41.0k|{
  159|  41.0k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  41.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  41.0k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   272k|{
   90|   272k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   272k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   272k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   272k|{
  125|   272k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   272k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   272k|                                                         format, {});
  127|   272k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  52.6k|{
  159|  52.6k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  52.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  52.6k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   231k|{
   90|   231k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   231k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   231k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   231k|{
  125|   231k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   231k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   231k|                                                         format, {});
  127|   231k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  44.8k|{
  159|  44.8k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  44.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  44.8k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   275k|{
   90|   275k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   275k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   275k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   275k|{
  125|   275k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   275k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   275k|                                                         format, {});
  127|   275k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  53.1k|{
  159|  53.1k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  53.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  53.1k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   233k|{
   90|   233k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   233k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   233k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   233k|{
  125|   233k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   233k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   233k|                                                         format, {});
  127|   233k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  45.1k|{
  159|  45.1k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  45.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  45.1k|}
_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  38.7k|{
   90|  38.7k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  38.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  38.7k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|   251k|{
   45|   251k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|   251k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   251k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  38.7k|{
  125|  38.7k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  38.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  38.7k|                                                         format, {});
  127|  38.7k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT0_OSM_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|   251k|{
   61|   251k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|   251k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|   251k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  3.87k|{
  159|  3.87k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  3.87k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  3.87k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|  23.2k|{
   73|  23.2k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  248|  23.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|  23.2k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  42.5k|{
   90|  42.5k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  42.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  42.5k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  42.5k|{
  125|  42.5k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  42.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  42.5k|                                                         format, {});
  127|  42.5k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  3.87k|{
  159|  3.87k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  3.87k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  3.87k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  42.5k|{
   90|  42.5k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  42.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  42.5k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  42.5k|{
  125|  42.5k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  42.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  42.5k|                                                         format, {});
  127|  42.5k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  3.87k|{
  159|  3.87k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  3.87k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  3.87k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  42.5k|{
   90|  42.5k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  42.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  42.5k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  42.5k|{
  125|  42.5k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  42.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  42.5k|                                                         format, {});
  127|  42.5k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  3.87k|{
  159|  3.87k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  3.87k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  3.87k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  42.5k|{
   90|  42.5k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  42.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  42.5k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  42.5k|{
  125|  42.5k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  42.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  42.5k|                                                         format, {});
  127|  42.5k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  3.87k|{
  159|  3.87k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  3.87k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  3.87k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  42.5k|{
   90|  42.5k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  42.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  42.5k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  42.5k|{
  125|  42.5k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  42.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  42.5k|                                                         format, {});
  127|  42.5k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  3.87k|{
  159|  3.87k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  3.87k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  3.87k|}

_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|  3.79M|            {
 2693|  3.79M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  3.79M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|  3.79M|            {
 2672|  3.79M|                return decay_copy(t.begin());
 2673|  3.79M|            }
_ZN4nano6ranges6detail10decay_copyIPKcEENSt3__15decayIT_E4typeEOS7_:
 2605|   110M|    {
 2606|   110M|        return std::forward<T>(t);
 2607|   110M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  6.73M|            {
 3178|  6.73M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  6.73M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  6.73M|            {
 3158|  6.73M|                return t.data();
 3159|  6.73M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  6.73M|    {
 6095|  6.73M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 21.0k, False: 6.71M]
  ------------------
 6096|  6.73M|                   ? nullptr
 6097|  6.73M|                   : std::addressof(*ranges::begin(derived()));
 6098|  6.73M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  6.73M|            {
 3127|  6.73M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  6.73M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  6.73M|            {
 3098|  6.73M|                return bool((std::forward<T>(t).empty()));
 3099|  6.73M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  16.1M|        {
 6454|  16.1M|            return data_.begin_ == data_.end_;
 6455|  16.1M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  13.4M|    {
 6049|  13.4M|        return static_cast<const D&>(*this);
 6050|  13.4M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  27.7M|            {
 2693|  27.7M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  27.7M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  27.7M|            {
 2672|  27.7M|                return decay_copy(t.begin());
 2673|  27.7M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|  64.0M|        {
 6444|  64.0M|            return data_.begin_;
 6445|  64.0M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  6.73M|            {
 3038|  6.73M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  6.73M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  6.73M|            {
 3000|  6.73M|                return decay_copy(std::forward<T>(t).size());
 3001|  6.73M|            }
_ZN4nano6ranges6detail10decay_copyIlEENSt3__15decayIT_E4typeEOS5_:
 2605|  28.0M|    {
 2606|  28.0M|        return std::forward<T>(t);
 2607|  28.0M|    }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  16.2M|        {
 6462|  16.2M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  16.2M|                return data_.size_;
 6464|  16.2M|            }
 6465|  16.2M|            else {
 6466|  16.2M|                return data_.end_ - data_.begin_;
 6467|  16.2M|            }
 6468|  16.2M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  11.8M|            {
 3788|  11.8M|                ranges::advance(x, n);
 3789|  11.8M|                return x;
 3790|  11.8M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  11.8M|            {
 3678|  11.8M|                fn::impl(i, n);
 3679|  11.8M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  11.8M|            {
 3562|  11.8M|                r += n;
 3563|  11.8M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  33.7M|            {
 2693|  33.7M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  33.7M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  33.7M|            {
 2672|  33.7M|                return decay_copy(t.begin());
 2673|  33.7M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  16.8M|            {
 2759|  16.8M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  16.8M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  16.8M|            {
 2739|  16.8M|                return decay_copy(std::forward<T>(t).end());
 2740|  16.8M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE3endEv:
 6448|  42.7M|        {
 6449|  42.7M|            return data_.end_;
 6450|  42.7M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  6.93M|            {
 2759|  6.93M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  6.93M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEPKcSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  6.93M|            {
 2739|  6.93M|                return decay_copy(std::forward<T>(t).end());
 2740|  6.93M|            }
_ZN4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  27.3M|        {
 6375|  27.3M|        }
_ZN4nano6ranges6detail13subrange_dataIPKcS4_Lb0EEC2EOS4_S6_:
 6293|  27.3M|        {
 6294|  27.3M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   277k|            {
 2693|   277k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   277k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|   277k|            {
 2672|   277k|                return decay_copy(t.begin());
 2673|   277k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEEEENS3_5decayIT_E4typeEOSC_:
 2605|  1.55M|    {
 2606|  1.55M|        return std::forward<T>(t);
 2607|  1.55M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|   356k|            {
 2693|   356k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   356k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|   356k|            {
 2672|   356k|                return decay_copy(t.begin());
 2673|   356k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|   395k|        {
 6444|   395k|            return data_.begin_;
 6445|   395k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|   567k|            {
 2759|   567k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   567k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|   567k|            {
 2739|   567k|                return decay_copy(std::forward<T>(t).end());
 2740|   567k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|   567k|        {
 6449|   567k|            return data_.end_;
 6450|   567k|        }
_ZNK4nano6ranges6detail5next_2fnclINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EESE_E4typeESE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3787|  39.5k|            {
 3788|  39.5k|                ranges::advance(x, n);
 3789|  39.5k|                return x;
 3790|  39.5k|            }
_ZNK4nano6ranges6detail8advance_2fnclINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3677|  39.5k|            {
 3678|  39.5k|                fn::impl(i, n);
 3679|  39.5k|            }
_ZN4nano6ranges6detail8advance_2fn4implINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEEEENS5_9enable_ifIX22random_access_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3561|  39.5k|            {
 3562|  39.5k|                r += n;
 3563|  39.5k|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   316k|            {
 2759|   316k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   316k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEENS5_16__deque_iteratorIcPKcRSD_PKSE_lLl4096EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   316k|            {
 2739|   316k|                return decay_copy(std::forward<T>(t).end());
 2740|   316k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|   356k|        {
 6375|   356k|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_Lb0EEC2EOSA_SC_:
 6293|   356k|        {
 6294|   356k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSJ_:
 2692|  39.5k|            {
 2693|  39.5k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  39.5k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  39.5k|            {
 2672|  39.5k|                return decay_copy(t.begin());
 2673|  39.5k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|   878k|            {
 2693|   878k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   878k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|   878k|            {
 2672|   878k|                return decay_copy(t.begin());
 2673|   878k|            }
_ZN4nano6ranges6detail10decay_copyIPKwEENSt3__15decayIT_E4typeEOS7_:
 2605|   149M|    {
 2606|   149M|        return std::forward<T>(t);
 2607|   149M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  3.17M|            {
 3178|  3.17M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  3.17M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  3.17M|            {
 3158|  3.17M|                return t.data();
 3159|  3.17M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  3.17M|    {
 6095|  3.17M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 21.9k, False: 3.15M]
  ------------------
 6096|  3.17M|                   ? nullptr
 6097|  3.17M|                   : std::addressof(*ranges::begin(derived()));
 6098|  3.17M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  3.17M|            {
 3127|  3.17M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  3.17M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  3.17M|            {
 3098|  3.17M|                return bool((std::forward<T>(t).empty()));
 3099|  3.17M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  5.28M|        {
 6454|  5.28M|            return data_.begin_ == data_.end_;
 6455|  5.28M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  6.32M|    {
 6049|  6.32M|        return static_cast<const D&>(*this);
 6050|  6.32M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  25.1M|            {
 2693|  25.1M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  25.1M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  25.1M|            {
 2672|  25.1M|                return decay_copy(t.begin());
 2673|  25.1M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|  64.2M|        {
 6444|  64.2M|            return data_.begin_;
 6445|  64.2M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  3.17M|            {
 3038|  3.17M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  3.17M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  3.17M|            {
 3000|  3.17M|                return decay_copy(std::forward<T>(t).size());
 3001|  3.17M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  11.8M|        {
 6462|  11.8M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  11.8M|                return data_.size_;
 6464|  11.8M|            }
 6465|  11.8M|            else {
 6466|  11.8M|                return data_.end_ - data_.begin_;
 6467|  11.8M|            }
 6468|  11.8M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  13.6M|            {
 3788|  13.6M|                ranges::advance(x, n);
 3789|  13.6M|                return x;
 3790|  13.6M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  13.6M|            {
 3678|  13.6M|                fn::impl(i, n);
 3679|  13.6M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  13.6M|            {
 3562|  13.6M|                r += n;
 3563|  13.6M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  36.8M|            {
 2693|  36.8M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  36.8M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  36.8M|            {
 2672|  36.8M|                return decay_copy(t.begin());
 2673|  36.8M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  15.1M|            {
 2759|  15.1M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  15.1M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  15.1M|            {
 2739|  15.1M|                return decay_copy(std::forward<T>(t).end());
 2740|  15.1M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE3endEv:
 6448|  86.7M|        {
 6449|  86.7M|            return data_.end_;
 6450|  86.7M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  4.33M|            {
 2759|  4.33M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  4.33M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEPKwSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  4.33M|            {
 2739|  4.33M|                return decay_copy(std::forward<T>(t).end());
 2740|  4.33M|            }
_ZN4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  24.9M|        {
 6375|  24.9M|        }
_ZN4nano6ranges6detail13subrange_dataIPKwS4_Lb0EEC2EOS4_S6_:
 6293|  24.9M|        {
 6294|  24.9M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   487k|            {
 2693|   487k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   487k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|   487k|            {
 2672|   487k|                return decay_copy(t.begin());
 2673|   487k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEEEENS3_5decayIT_E4typeEOSC_:
 2605|  2.55M|    {
 2606|  2.55M|        return std::forward<T>(t);
 2607|  2.55M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|   565k|            {
 2693|   565k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   565k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|   565k|            {
 2672|   565k|                return decay_copy(t.begin());
 2673|   565k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|   603k|        {
 6444|   603k|            return data_.begin_;
 6445|   603k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|   937k|            {
 2759|   937k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   937k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|   937k|            {
 2739|   937k|                return decay_copy(std::forward<T>(t).end());
 2740|   937k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|   937k|        {
 6449|   937k|            return data_.end_;
 6450|   937k|        }
_ZNK4nano6ranges6detail5next_2fnclINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EESE_E4typeESE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3787|  38.7k|            {
 3788|  38.7k|                ranges::advance(x, n);
 3789|  38.7k|                return x;
 3790|  38.7k|            }
_ZNK4nano6ranges6detail8advance_2fnclINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3677|  38.7k|            {
 3678|  38.7k|                fn::impl(i, n);
 3679|  38.7k|            }
_ZN4nano6ranges6detail8advance_2fn4implINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX22random_access_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3561|  38.7k|            {
 3562|  38.7k|                r += n;
 3563|  38.7k|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   526k|            {
 2759|   526k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   526k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEENS5_16__deque_iteratorIwPKwRSD_PKSE_lLl1024EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   526k|            {
 2739|   526k|                return decay_copy(std::forward<T>(t).end());
 2740|   526k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|   565k|        {
 6375|   565k|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_Lb0EEC2EOSA_SC_:
 6293|   565k|        {
 6294|   565k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSJ_:
 2692|  38.7k|            {
 2693|  38.7k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  38.7k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  38.7k|            {
 2672|  38.7k|                return decay_copy(t.begin());
 2673|  38.7k|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  5.64M|        {
 6444|  5.64M|            return data_.begin_;
 6445|  5.64M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  9.73M|        {
 6444|  9.73M|            return data_.begin_;
 6445|  9.73M|        }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  18.9M|    {
 6044|  18.9M|        return static_cast<D&>(*this);
 6045|  18.9M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  9.45M|            {
 3098|  9.45M|                return bool((std::forward<T>(t).empty()));
 3099|  9.45M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  9.45M|            {
 3127|  9.45M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  9.45M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  9.45M|    {
 6085|  9.45M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 0, False: 9.45M]
  ------------------
 6086|  9.45M|                   ? nullptr
 6087|  9.45M|                   : std::addressof(*ranges::begin(derived()));
 6088|  9.45M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|  21.2M|            {
 2739|  21.2M|                return decay_copy(std::forward<T>(t).end());
 2740|  21.2M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|  21.2M|            {
 2759|  21.2M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  21.2M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  4.22M|    {
 6044|  4.22M|        return static_cast<D&>(*this);
 6045|  4.22M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  2.11M|            {
 3098|  2.11M|                return bool((std::forward<T>(t).empty()));
 3099|  2.11M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  2.11M|            {
 3127|  2.11M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  2.11M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  2.11M|    {
 6085|  2.11M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 0, False: 2.11M]
  ------------------
 6086|  2.11M|                   ? nullptr
 6087|  2.11M|                   : std::addressof(*ranges::begin(derived()));
 6088|  2.11M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|  67.4M|            {
 2739|  67.4M|                return decay_copy(std::forward<T>(t).end());
 2740|  67.4M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|  67.4M|            {
 2759|  67.4M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  67.4M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  5.63M|            {
 3780|  5.63M|                ++x;
 3781|  5.63M|                return x;
 3782|  5.63M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  9.50M|            {
 3038|  9.50M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  9.50M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  9.50M|            {
 3000|  9.50M|                return decay_copy(std::forward<T>(t).size());
 3001|  9.50M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  9.45M|            {
 3178|  9.45M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  9.45M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  9.45M|            {
 3158|  9.45M|                return t.data();
 3159|  9.45M|            }
_ZNK4nano6ranges6detail5prev_2fnclIPKcEENSt3__19enable_ifIX22bidirectional_iteratorIT_EES9_E4typeES9_:
 3827|   501k|            {
 3828|   501k|                --x;
 3829|   501k|                return x;
 3830|   501k|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 3076|   886k|            {
 3077|   886k|                return fn::impl(std::forward<T>(t));
 3078|   886k|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISF_EENS0_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSF_EEEEE15difference_typeEE4typeELm8EElSO_E4typeE_EEOSF_:
 3066|   886k|            {
 3067|   886k|                return static_cast<ssize_return_t<T>>(
 3068|   886k|                    ranges::size(std::forward<T>(t)));
 3069|   886k|            }
_ZNK4nano6ranges6detail5size_2fnclIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSE_:
 3037|   886k|            {
 3038|   886k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|   886k|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|   886k|            {
 3000|   886k|                return decay_copy(std::forward<T>(t).size());
 3001|   886k|            }
_ZN4nano6ranges6detail10decay_copyImEENSt3__15decayIT_E4typeEOS5_:
 2605|  8.46M|    {
 2606|  8.46M|        return std::forward<T>(t);
 2607|  8.46M|    }
_ZNK4nano6ranges6detail6ssize_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSB_:
 3076|  7.58M|            {
 3077|  7.58M|                return fn::impl(std::forward<T>(t));
 3078|  7.58M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISC_EENS0_20incrementable_traitsIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRSC_EEEEE15difference_typeEE4typeELm8EElSL_E4typeE_EEOSC_:
 3066|  7.58M|            {
 3067|  7.58M|                return static_cast<ssize_return_t<T>>(
 3068|  7.58M|                    ranges::size(std::forward<T>(t)));
 3069|  7.58M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 3037|  7.58M|            {
 3038|  7.58M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  7.58M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESC_E4typeEOSE_NS1_12priority_tagILm2EEE:
 2999|  7.58M|            {
 3000|  7.58M|                return decay_copy(std::forward<T>(t).size());
 3001|  7.58M|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS9_DpOSA_:
 1299|  6.75M|            {
 1300|  6.75M|                return fn::impl(std::forward<F>(f),
 1301|  6.75M|                                std::forward<Args>(args)...);
 1302|  6.75M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJRKcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS9_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISC_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSC_DpOSF_:
 1288|  6.75M|            {
 1289|  6.75M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  6.75M|            }
_ZNK4nano6ranges8identityclIRKcEEOT_S6_:
 1141|  6.75M|    {
 1142|  6.75M|        return std::forward<T>(t);
 1143|  6.75M|    }
_ZNK4nano6ranges6detail9distance_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  12.1M|            {
 3756|  12.1M|                return fn::impl(std::move(first), std::move(last));
 3757|  12.1M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKcS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  12.1M|            {
 3716|  12.1M|                return s - i;
 3717|  12.1M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  1.45M|        {
 6375|  1.45M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  1.45M|        {
 6294|  1.45M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  2.73M|            {
 2693|  2.73M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  2.73M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  2.73M|            {
 2672|  2.73M|                return decay_copy(t.begin());
 2673|  2.73M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__15decayIT_E4typeEOSB_:
 2605|  5.36M|    {
 2606|  5.36M|        return std::forward<T>(t);
 2607|  5.36M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|   976k|            {
 2759|   976k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   976k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|   976k|            {
 2739|   976k|                return decay_copy(std::forward<T>(t).end());
 2740|   976k|            }
_ZN4nano6ranges6detail10decay_copyINS0_18default_sentinel_tEEENSt3__15decayIT_E4typeEOS6_:
 2605|  6.00M|    {
 2606|  6.00M|        return std::forward<T>(t);
 2607|  6.00M|    }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  2.28M|        {
 6449|  2.28M|            return data_.end_;
 6450|  2.28M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EE5beginEv:
 6443|  92.3k|        {
 6444|  92.3k|            return data_.begin_;
 6445|  92.3k|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EE3endEv:
 6448|  92.3k|        {
 6449|  92.3k|            return data_.end_;
 6450|  92.3k|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S8_:
 6374|  39.5k|        {
 6375|  39.5k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_Lb0EEC2EOS8_SA_:
 6293|  39.5k|        {
 6294|  39.5k|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|   356k|            {
 3780|   356k|                ++x;
 3781|   356k|                return x;
 3782|   356k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbcESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|   197k|        {
 6793|   197k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   197k|                                    proj);
 6795|   197k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbcESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   197k|        {
 6761|   237k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 237k, False: 24]
  ------------------
 6762|   237k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 197k, False: 39.5k]
  ------------------
 6763|   197k|                    return first;
 6764|   197k|                }
 6765|  39.5k|                ++first;
 6766|  39.5k|            }
 6767|     24|            return first;
 6768|   197k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbcES9_EEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|   237k|            {
 1300|   237k|                return fn::impl(std::forward<F>(f),
 1301|   237k|                                std::forward<Args>(args)...);
 1302|   237k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbcES9_EEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSC_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISF_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSF_DpOSI_:
 1288|   237k|            {
 1289|   237k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   237k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|   237k|            {
 1300|   237k|                return fn::impl(std::forward<F>(f),
 1301|   237k|                                std::forward<Args>(args)...);
 1302|   237k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISA_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSA_DpOSD_:
 1288|   237k|            {
 1289|   237k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   237k|            }
_ZNK4nano6ranges8identityclIcEEOT_S4_:
 1141|   237k|    {
 1142|   237k|        return std::forward<T>(t);
 1143|   237k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  1.30M|            {
 2759|  1.30M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.30M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  1.30M|            {
 2739|  1.30M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.30M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  2.63M|            {
 2693|  2.63M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  2.63M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  2.63M|            {
 2672|  2.63M|                return decay_copy(t.begin());
 2673|  2.63M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  2.11M|            {
 3178|  2.11M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  2.11M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  2.11M|            {
 3158|  2.11M|                return t.data();
 3159|  2.11M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  8.63M|            {
 3038|  8.63M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  8.63M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  8.63M|            {
 3000|  8.63M|                return decay_copy(std::forward<T>(t).size());
 3001|  8.63M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  5.10M|            {
 3780|  5.10M|                ++x;
 3781|  5.10M|                return x;
 3782|  5.10M|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSC_:
 3076|  6.52M|            {
 3077|  6.52M|                return fn::impl(std::forward<T>(t));
 3078|  6.52M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNSt3__111conditionalIXltstNSE_9enable_ifIX5rangeISD_EENS0_20incrementable_traitsIDTclL_ZNSC_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSD_:
 3066|  6.52M|            {
 3067|  6.52M|                return static_cast<ssize_return_t<T>>(
 3068|  6.52M|                    ranges::size(std::forward<T>(t)));
 3069|  6.52M|            }
_ZNK4nano6ranges6detail5prev_2fnclIPKwEENSt3__19enable_ifIX22bidirectional_iteratorIT_EES9_E4typeES9_:
 3827|   414k|            {
 3828|   414k|                --x;
 3829|   414k|                return x;
 3830|   414k|            }
_ZNK4nano6ranges6detail9distance_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  7.77M|            {
 3756|  7.77M|                return fn::impl(std::move(first), std::move(last));
 3757|  7.77M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKwS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  7.77M|            {
 3716|  7.77M|                return s - i;
 3717|  7.77M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  2.36M|        {
 6375|  2.36M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  2.36M|        {
 6294|  2.36M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  4.91M|            {
 2693|  4.91M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  4.91M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  4.91M|            {
 2672|  4.91M|                return decay_copy(t.begin());
 2673|  4.91M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__15decayIT_E4typeEOSB_:
 2605|  9.28M|    {
 2606|  9.28M|        return std::forward<T>(t);
 2607|  9.28M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  1.57M|            {
 2759|  1.57M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.57M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  1.57M|            {
 2739|  1.57M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.57M|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  3.72M|        {
 6449|  3.72M|            return data_.end_;
 6450|  3.72M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EE5beginEv:
 6443|   139k|        {
 6444|   139k|            return data_.begin_;
 6445|   139k|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EE3endEv:
 6448|   139k|        {
 6449|   139k|            return data_.end_;
 6450|   139k|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S8_:
 6374|  46.4k|        {
 6375|  46.4k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_Lb0EEC2EOS8_SA_:
 6293|  46.4k|        {
 6294|  46.4k|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|   596k|            {
 3780|   596k|                ++x;
 3781|   596k|                return x;
 3782|   596k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbwESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|   317k|        {
 6793|   317k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   317k|                                    proj);
 6795|   317k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbwESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   317k|        {
 6761|   410k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 410k, False: 28]
  ------------------
 6762|   410k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 317k, False: 92.8k]
  ------------------
 6763|   317k|                    return first;
 6764|   317k|                }
 6765|  92.8k|                ++first;
 6766|  92.8k|            }
 6767|     28|            return first;
 6768|   317k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbwES9_EEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|   410k|            {
 1300|   410k|                return fn::impl(std::forward<F>(f),
 1301|   410k|                                std::forward<Args>(args)...);
 1302|   410k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbwES9_EEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSC_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISF_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSF_DpOSI_:
 1288|   410k|            {
 1289|   410k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   410k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|   410k|            {
 1300|   410k|                return fn::impl(std::forward<F>(f),
 1301|   410k|                                std::forward<Args>(args)...);
 1302|   410k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISA_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSA_DpOSD_:
 1288|   410k|            {
 1289|   410k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   410k|            }
_ZNK4nano6ranges8identityclIwEEOT_S4_:
 1141|   410k|    {
 1142|   410k|        return std::forward<T>(t);
 1143|   410k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  2.14M|            {
 2759|  2.14M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  2.14M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  2.14M|            {
 2739|  2.14M|                return decay_copy(std::forward<T>(t).end());
 2740|  2.14M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  4.36M|            {
 2693|  4.36M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  4.36M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  4.36M|            {
 2672|  4.36M|                return decay_copy(t.begin());
 2673|  4.36M|            }
find_whitespace.cpp:_ZNK4nano6ranges6detail10find_if_fnclIRNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEENS0_8identityEZN3scn2v24impl33find_classic_nonspace_narrow_fastES8_E3$_3EENS4_9enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SA_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSG_EEEENS1_16projected_helperISO_SJ_vEEEEEENSI_IX14borrowed_rangeISG_EEE4typeISO_NS0_8danglingEEEE4typeEOSG_SH_SJ_:
 6792|  3.51M|        {
 6793|  3.51M|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  3.51M|                                    proj);
 6795|  3.51M|        }
find_whitespace.cpp:_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEE3$_3NS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|  3.51M|        {
 6761|  6.79M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 6.75M, False: 36.4k]
  ------------------
 6762|  6.75M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 3.48M, False: 3.27M]
  ------------------
 6763|  3.48M|                    return first;
 6764|  3.48M|                }
 6765|  3.27M|                ++first;
 6766|  3.27M|            }
 6767|  36.4k|            return first;
 6768|  3.51M|        }
find_whitespace.cpp:_ZNK4nano6ranges6detail7invoke_2fnclIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSH_DpOSI_:
 1299|  6.75M|            {
 1300|  6.75M|                return fn::impl(std::forward<F>(f),
 1301|  6.75M|                                std::forward<Args>(args)...);
 1302|  6.75M|            }
find_whitespace.cpp:_ZN4nano6ranges6detail7invoke_2fn4implIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEENS8_9enable_ifIXntsr3std17is_member_pointerINS8_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISJ_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSJ_DpOSM_:
 1288|  6.75M|            {
 1289|  6.75M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  6.75M|            }

_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
   49|   333k|{
   50|   333k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|   333k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|   333k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
   49|   118k|{
   50|   118k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|   118k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|   118k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA51_KcEEEDaDpOT_:
   49|  99.6k|{
   50|  99.6k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  99.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  99.6k|}
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|   197k|    {
   44|   197k|    }
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|   317k|    {
   44|   317k|    }
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA17_KcEEEDaDpOT_:
   49|  52.7k|{
   50|  52.7k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  52.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  52.7k|}

_ZNK3scn2v28expectedIlNS0_10scan_errorEEcvbEv:
 1190|  8.27M|    {
 1191|  8.27M|        return has_value();
 1192|  8.27M|    }
_ZNK3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  188|  15.7M|    {
  189|  15.7M|        return m_has_value;
  190|  15.7M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5errorEv:
 1196|  1.52M|    {
 1197|  1.52M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.52M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.52M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.52M|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  1.52M|    {
  172|  1.52M|        return m_unexpected;
  173|  1.52M|    }
_ZNR3scn2v210unexpectedINS0_10scan_errorEE5errorEv:
   71|  11.4M|    {
   72|  11.4M|        return m_unexpected;
   73|  11.4M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
   57|  5.63M|    {
   58|  5.63M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  5.63M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  5.63M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   277k|    {
 1078|   277k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   277k|    {
  151|   277k|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
   66|  6.72M|    {
   67|  6.72M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  6.72M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  6.72M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.41M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1250|  5.98M|    {
 1251|  5.98M|        return value();
 1252|  5.98M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1220|  5.98M|    {
 1221|  5.98M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.98M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.98M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.98M|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  154|  5.98M|    {
  155|  5.98M|        return m_value;
  156|  5.98M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  3.14M|    {
 1034|  3.14M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  3.14M|    {
  142|  3.14M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  3.41M|    {
 1191|  3.41M|        return has_value();
 1192|  3.41M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  6.83M|    {
  189|  6.83M|        return m_has_value;
  190|  6.83M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   277k|    {
 1197|   277k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   277k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   277k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   277k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   277k|    {
  172|   277k|        return m_unexpected;
  173|   277k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  46.1k|    {
 1078|  46.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  46.1k|    {
  151|  46.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   536k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  2.83M|    {
 1251|  2.83M|        return value();
 1252|  2.83M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  3.14M|    {
 1221|  3.14M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.14M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.14M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.14M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  3.14M|    {
  155|  3.14M|        return m_value;
  156|  3.14M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   489k|    {
 1034|   489k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   489k|    {
  142|   489k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|   536k|    {
 1191|   536k|        return has_value();
 1192|   536k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.02M|    {
  189|  1.02M|        return m_has_value;
  190|  1.02M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|   489k|    {
 1274|   489k|        return std::addressof(value());
 1275|   489k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   489k|    {
 1221|   489k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   489k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   489k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   489k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   489k|    {
  155|   489k|        return m_value;
  156|   489k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|   301k|    {
 1263|   301k|        return std::move(value());
 1264|   301k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  46.1k|    {
 1078|  46.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  46.1k|    {
  151|  46.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   472k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   426k|    {
 1034|   426k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   426k|    {
  142|   426k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|   472k|    {
 1191|   472k|        return has_value();
 1192|   472k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   899k|    {
  189|   899k|        return m_has_value;
  190|   899k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|   426k|    {
 1274|   426k|        return std::addressof(value());
 1275|   426k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   426k|    {
 1221|   426k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   426k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   426k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   426k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   426k|    {
  155|   426k|        return m_value;
  156|   426k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  46.1k|    {
 1078|  46.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  46.1k|    {
  151|  46.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   660k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   614k|    {
 1034|   614k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   614k|    {
  142|   614k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|   660k|    {
 1191|   660k|        return has_value();
 1192|   660k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.27M|    {
  189|  1.27M|        return m_has_value;
  190|  1.27M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|   614k|    {
 1274|   614k|        return std::addressof(value());
 1275|   614k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   614k|    {
 1221|   614k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   614k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   614k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   614k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   614k|    {
  155|   614k|        return m_value;
  156|   614k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  46.1k|    {
 1078|  46.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  46.1k|    {
  151|  46.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   534k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   487k|    {
 1034|   487k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   487k|    {
  142|   487k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|   534k|    {
 1191|   534k|        return has_value();
 1192|   534k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.02M|    {
  189|  1.02M|        return m_has_value;
  190|  1.02M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|   487k|    {
 1274|   487k|        return std::addressof(value());
 1275|   487k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   487k|    {
 1221|   487k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   487k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   487k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   487k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   487k|    {
  155|   487k|        return m_value;
  156|   487k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  46.1k|    {
 1078|  46.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  46.1k|    {
  151|  46.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   673k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   626k|    {
 1034|   626k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   626k|    {
  142|   626k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|   673k|    {
 1191|   673k|        return has_value();
 1192|   673k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.29M|    {
  189|  1.29M|        return m_has_value;
  190|  1.29M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|   626k|    {
 1274|   626k|        return std::addressof(value());
 1275|   626k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   626k|    {
 1221|   626k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   626k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   626k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   626k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   626k|    {
  155|   626k|        return m_value;
  156|   626k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  46.1k|    {
 1078|  46.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  46.1k|    {
  151|  46.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   540k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   494k|    {
 1034|   494k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   494k|    {
  142|   494k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|   540k|    {
 1191|   540k|        return has_value();
 1192|   540k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.03M|    {
  189|  1.03M|        return m_has_value;
  190|  1.03M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|   494k|    {
 1274|   494k|        return std::addressof(value());
 1275|   494k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   494k|    {
 1221|   494k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   494k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   494k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   494k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   494k|    {
  155|   494k|        return m_value;
  156|   494k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|   277k|    {
 1078|   277k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|   277k|    {
  151|   277k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   316k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|  39.5k|    {
 1034|  39.5k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSG_EvEENS7_10in_place_tEDpOT_:
  141|  39.5k|    {
  142|  39.5k|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   316k|    {
 1191|   316k|        return has_value();
 1192|   316k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|   633k|    {
  189|   633k|        return m_has_value;
  190|   633k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   277k|    {
 1197|   277k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   277k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   277k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   277k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   277k|    {
  172|   277k|        return m_unexpected;
  173|   277k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  46.1k|    {
 1078|  46.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  46.1k|    {
  151|  46.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  54.9k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEERT_v:
 1250|  39.5k|    {
 1251|  39.5k|        return value();
 1252|  39.5k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|  39.5k|    {
 1221|  39.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  39.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  39.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  39.5k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  39.5k|    {
  155|  39.5k|        return m_value;
  156|  39.5k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  8.79k|    {
 1034|  8.79k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  8.79k|    {
  142|  8.79k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|  54.9k|    {
 1191|  54.9k|        return has_value();
 1192|  54.9k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  63.7k|    {
  189|  63.7k|        return m_has_value;
  190|  63.7k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|  8.79k|    {
 1274|  8.79k|        return std::addressof(value());
 1275|  8.79k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  8.79k|    {
 1221|  8.79k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  8.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  8.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  8.79k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  8.79k|    {
  155|  8.79k|        return m_value;
  156|  8.79k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  46.1k|    {
 1078|  46.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  46.1k|    {
  151|  46.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  50.5k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  4.39k|    {
 1034|  4.39k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  4.39k|    {
  142|  4.39k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|  50.5k|    {
 1191|  50.5k|        return has_value();
 1192|  50.5k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  54.9k|    {
  189|  54.9k|        return m_has_value;
  190|  54.9k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|  4.39k|    {
 1274|  4.39k|        return std::addressof(value());
 1275|  4.39k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  4.39k|    {
 1221|  4.39k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.39k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.39k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.39k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  4.39k|    {
  155|  4.39k|        return m_value;
  156|  4.39k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  46.1k|    {
 1078|  46.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  46.1k|    {
  151|  46.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  54.9k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  8.79k|    {
 1034|  8.79k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  8.79k|    {
  142|  8.79k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|  54.9k|    {
 1191|  54.9k|        return has_value();
 1192|  54.9k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  63.7k|    {
  189|  63.7k|        return m_has_value;
  190|  63.7k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|  8.79k|    {
 1274|  8.79k|        return std::addressof(value());
 1275|  8.79k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  8.79k|    {
 1221|  8.79k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  8.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  8.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  8.79k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  8.79k|    {
  155|  8.79k|        return m_value;
  156|  8.79k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  46.1k|    {
 1078|  46.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  46.1k|    {
  151|  46.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  50.5k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  4.39k|    {
 1034|  4.39k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  4.39k|    {
  142|  4.39k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|  50.5k|    {
 1191|  50.5k|        return has_value();
 1192|  50.5k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  54.9k|    {
  189|  54.9k|        return m_has_value;
  190|  54.9k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|  4.39k|    {
 1274|  4.39k|        return std::addressof(value());
 1275|  4.39k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  4.39k|    {
 1221|  4.39k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.39k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.39k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.39k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  4.39k|    {
  155|  4.39k|        return m_value;
  156|  4.39k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  46.1k|    {
 1078|  46.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  46.1k|    {
  151|  46.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  54.9k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  8.79k|    {
 1034|  8.79k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  8.79k|    {
  142|  8.79k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|  54.9k|    {
 1191|  54.9k|        return has_value();
 1192|  54.9k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  63.7k|    {
  189|  63.7k|        return m_has_value;
  190|  63.7k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|  8.79k|    {
 1274|  8.79k|        return std::addressof(value());
 1275|  8.79k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  8.79k|    {
 1221|  8.79k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  8.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  8.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  8.79k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  8.79k|    {
  155|  8.79k|        return m_value;
  156|  8.79k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  46.1k|    {
 1078|  46.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  46.1k|    {
  151|  46.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  50.5k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  4.39k|    {
 1034|  4.39k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  4.39k|    {
  142|  4.39k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|  50.5k|    {
 1191|  50.5k|        return has_value();
 1192|  50.5k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  54.9k|    {
  189|  54.9k|        return m_has_value;
  190|  54.9k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|  4.39k|    {
 1274|  4.39k|        return std::addressof(value());
 1275|  4.39k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  4.39k|    {
 1221|  4.39k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.39k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.39k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.39k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  4.39k|    {
  155|  4.39k|        return m_value;
  156|  4.39k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   487k|    {
 1078|   487k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   487k|    {
  151|   487k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.17M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  2.68M|    {
 1034|  2.68M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  2.68M|    {
  142|  2.68M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  3.17M|    {
 1191|  3.17M|        return has_value();
 1192|  3.17M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  6.34M|    {
  189|  6.34M|        return m_has_value;
  190|  6.34M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   487k|    {
 1197|   487k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   487k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   487k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   487k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   487k|    {
  172|   487k|        return m_unexpected;
  173|   487k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  81.2k|    {
 1078|  81.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  81.2k|    {
  151|  81.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   495k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  2.42M|    {
 1251|  2.42M|        return value();
 1252|  2.42M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  2.68M|    {
 1221|  2.68M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.68M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.68M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.68M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  2.68M|    {
  155|  2.68M|        return m_value;
  156|  2.68M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   414k|    {
 1034|   414k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   414k|    {
  142|   414k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|   495k|    {
 1191|   495k|        return has_value();
 1192|   495k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   909k|    {
  189|   909k|        return m_has_value;
  190|   909k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|   414k|    {
 1274|   414k|        return std::addressof(value());
 1275|   414k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   414k|    {
 1221|   414k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   414k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   414k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   414k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   414k|    {
  155|   414k|        return m_value;
  156|   414k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|   259k|    {
 1263|   259k|        return std::move(value());
 1264|   259k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  81.2k|    {
 1078|  81.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  81.2k|    {
  151|  81.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   455k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   374k|    {
 1034|   374k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   374k|    {
  142|   374k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|   455k|    {
 1191|   455k|        return has_value();
 1192|   455k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   829k|    {
  189|   829k|        return m_has_value;
  190|   829k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|   374k|    {
 1274|   374k|        return std::addressof(value());
 1275|   374k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   374k|    {
 1221|   374k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   374k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   374k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   374k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   374k|    {
  155|   374k|        return m_value;
  156|   374k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  81.2k|    {
 1078|  81.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  81.2k|    {
  151|  81.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   597k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   516k|    {
 1034|   516k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   516k|    {
  142|   516k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|   597k|    {
 1191|   597k|        return has_value();
 1192|   597k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.11M|    {
  189|  1.11M|        return m_has_value;
  190|  1.11M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|   516k|    {
 1274|   516k|        return std::addressof(value());
 1275|   516k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   516k|    {
 1221|   516k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   516k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   516k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   516k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   516k|    {
  155|   516k|        return m_value;
  156|   516k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  81.2k|    {
 1078|  81.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  81.2k|    {
  151|  81.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   508k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   427k|    {
 1034|   427k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   427k|    {
  142|   427k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|   508k|    {
 1191|   508k|        return has_value();
 1192|   508k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   935k|    {
  189|   935k|        return m_has_value;
  190|   935k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|   427k|    {
 1274|   427k|        return std::addressof(value());
 1275|   427k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   427k|    {
 1221|   427k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   427k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   427k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   427k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   427k|    {
  155|   427k|        return m_value;
  156|   427k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  81.2k|    {
 1078|  81.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  81.2k|    {
  151|  81.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   604k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   523k|    {
 1034|   523k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   523k|    {
  142|   523k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|   604k|    {
 1191|   604k|        return has_value();
 1192|   604k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.12M|    {
  189|  1.12M|        return m_has_value;
  190|  1.12M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|   523k|    {
 1274|   523k|        return std::addressof(value());
 1275|   523k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   523k|    {
 1221|   523k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   523k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   523k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   523k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   523k|    {
  155|   523k|        return m_value;
  156|   523k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  81.2k|    {
 1078|  81.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  81.2k|    {
  151|  81.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   512k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   431k|    {
 1034|   431k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   431k|    {
  142|   431k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|   512k|    {
 1191|   512k|        return has_value();
 1192|   512k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   944k|    {
  189|   944k|        return m_has_value;
  190|   944k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|   431k|    {
 1274|   431k|        return std::addressof(value());
 1275|   431k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   431k|    {
 1221|   431k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   431k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   431k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   431k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   431k|    {
  155|   431k|        return m_value;
  156|   431k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|   487k|    {
 1078|   487k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|   487k|    {
  151|   487k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   526k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|  38.7k|    {
 1034|  38.7k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSG_EvEENS7_10in_place_tEDpOT_:
  141|  38.7k|    {
  142|  38.7k|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   526k|    {
 1191|   526k|        return has_value();
 1192|   526k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.05M|    {
  189|  1.05M|        return m_has_value;
  190|  1.05M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   487k|    {
 1197|   487k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   487k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   487k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   487k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   487k|    {
  172|   487k|        return m_unexpected;
  173|   487k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  81.2k|    {
 1078|  81.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  81.2k|    {
  151|  81.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  81.2k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEERT_v:
 1250|  38.7k|    {
 1251|  38.7k|        return value();
 1252|  38.7k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|  38.7k|    {
 1221|  38.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  38.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  38.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  38.7k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  38.7k|    {
  155|  38.7k|        return m_value;
  156|  38.7k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|      2|    {
 1034|      2|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|      2|    {
  142|      2|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|  81.2k|    {
 1191|  81.2k|        return has_value();
 1192|  81.2k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  81.2k|    {
  189|  81.2k|        return m_has_value;
  190|  81.2k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|      2|    {
 1274|      2|        return std::addressof(value());
 1275|      2|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|      2|    {
 1221|      2|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|      2|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      2|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|      2|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|      2|    {
  155|      2|        return m_value;
  156|      2|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  81.2k|    {
 1078|  81.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  81.2k|    {
  151|  81.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  89.0k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  7.74k|    {
 1034|  7.74k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  7.74k|    {
  142|  7.74k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|  89.0k|    {
 1191|  89.0k|        return has_value();
 1192|  89.0k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  96.7k|    {
  189|  96.7k|        return m_has_value;
  190|  96.7k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|  7.74k|    {
 1274|  7.74k|        return std::addressof(value());
 1275|  7.74k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  7.74k|    {
 1221|  7.74k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  7.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  7.74k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  7.74k|    {
  155|  7.74k|        return m_value;
  156|  7.74k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  81.2k|    {
 1078|  81.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  81.2k|    {
  151|  81.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  89.0k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  7.74k|    {
 1034|  7.74k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  7.74k|    {
  142|  7.74k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|  89.0k|    {
 1191|  89.0k|        return has_value();
 1192|  89.0k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  96.7k|    {
  189|  96.7k|        return m_has_value;
  190|  96.7k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|  7.74k|    {
 1274|  7.74k|        return std::addressof(value());
 1275|  7.74k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  7.74k|    {
 1221|  7.74k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  7.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  7.74k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  7.74k|    {
  155|  7.74k|        return m_value;
  156|  7.74k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  81.2k|    {
 1078|  81.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  81.2k|    {
  151|  81.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  89.0k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  7.74k|    {
 1034|  7.74k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  7.74k|    {
  142|  7.74k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|  89.0k|    {
 1191|  89.0k|        return has_value();
 1192|  89.0k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  96.7k|    {
  189|  96.7k|        return m_has_value;
  190|  96.7k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|  7.74k|    {
 1274|  7.74k|        return std::addressof(value());
 1275|  7.74k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  7.74k|    {
 1221|  7.74k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  7.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  7.74k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  7.74k|    {
  155|  7.74k|        return m_value;
  156|  7.74k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  81.2k|    {
 1078|  81.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  81.2k|    {
  151|  81.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  89.0k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  7.74k|    {
 1034|  7.74k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  7.74k|    {
  142|  7.74k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|  89.0k|    {
 1191|  89.0k|        return has_value();
 1192|  89.0k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  96.7k|    {
  189|  96.7k|        return m_has_value;
  190|  96.7k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|  7.74k|    {
 1274|  7.74k|        return std::addressof(value());
 1275|  7.74k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  7.74k|    {
 1221|  7.74k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  7.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  7.74k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  7.74k|    {
  155|  7.74k|        return m_value;
  156|  7.74k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  81.2k|    {
 1078|  81.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  81.2k|    {
  151|  81.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  89.0k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  7.74k|    {
 1034|  7.74k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  7.74k|    {
  142|  7.74k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|  89.0k|    {
 1191|  89.0k|        return has_value();
 1192|  89.0k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  96.7k|    {
  189|  96.7k|        return m_has_value;
  190|  96.7k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|  7.74k|    {
 1274|  7.74k|        return std::addressof(value());
 1275|  7.74k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  7.74k|    {
 1221|  7.74k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  7.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  7.74k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  7.74k|    {
  155|  7.74k|        return m_value;
  156|  7.74k|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  3.33M|    {
 1405|  3.33M|        return detail::transform_error_impl(std::move(*this),
 1406|  3.33M|                                            std::forward<F>(f));
 1407|  3.33M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  3.33M|{
  927|  3.33M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  3.33M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  3.33M|        if (SCN_LIKELY(exp.has_value())) {
  930|  3.33M|            return result(*std::forward<Exp>(exp));
  931|  3.33M|        }
  932|       |
  933|  3.33M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  3.33M|        return result(unexpect, monostate{});
  935|  3.33M|    }
  936|  3.33M|    else {
  937|  3.33M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  3.33M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  3.33M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 3.31M, False: 26.2k]
  |  |  ------------------
  ------------------
  939|  3.33M|                   ? result(*std::forward<Exp>(exp))
  940|  3.33M|                   : result(unexpect,
  941|  26.2k|                            std::invoke(std::forward<F>(f),
  942|  26.2k|                                        std::forward<Exp>(exp).error()));
  943|  3.33M|    }
  944|  3.33M|}
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  13.5M|    {
  189|  13.5M|        return m_has_value;
  190|  13.5M|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  3.31M|    {
 1263|  3.31M|        return std::move(value());
 1264|  3.31M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  4.59M|    {
 1221|  4.59M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.59M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.59M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.59M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  4.59M|    {
  155|  4.59M|        return m_value;
  156|  4.59M|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  13.6M|    {
 1034|  13.6M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  13.6M|    {
  142|  13.6M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  14.0M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1206|  26.2k|    {
 1207|  26.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  26.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  26.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|  26.2k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|  27.6k|    {
  172|  27.6k|        return m_unexpected;
  173|  27.6k|    }
_ZNR3scn2v210unexpectedINS0_4impl9eof_errorEE5errorEv:
   71|   339k|    {
   72|   339k|        return m_unexpected;
   73|   339k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  26.2k|    {
 1088|  26.2k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|   371k|    {
  151|   371k|    }
_ZNK3scn2v28expectedIPKcNS0_10scan_errorEEcvbEv:
 1190|  14.0M|    {
 1191|  14.0M|        return has_value();
 1192|  14.0M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  188|  28.0M|    {
  189|  28.0M|        return m_has_value;
  190|  28.0M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5errorEv:
 1196|   371k|    {
 1197|   371k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   371k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   371k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   371k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   371k|    {
  172|   371k|        return m_unexpected;
  173|   371k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|   345k|    {
 1078|   345k|    }
_ZNO3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  11.4M|    {
 1263|  11.4M|        return std::move(value());
 1264|  11.4M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  13.6M|    {
 1221|  13.6M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  13.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  13.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  13.6M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  154|  13.6M|    {
  155|  13.6M|        return m_value;
  156|  13.6M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
   57|   603k|    {
   58|   603k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   603k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   603k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1077|  1.52M|    {
 1078|  1.52M|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  150|  1.52M|    {
  151|  1.52M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  7.43M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
   57|  57.7k|    {
   58|  57.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  57.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  57.7k|    }
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  27.6k|    {
 1078|  27.6k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  27.6k|    {
  151|  27.6k|    }
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|   169k|    {
   67|   169k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   169k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|   169k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  8.97M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  8.94M|    {
 1034|  8.94M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  8.94M|    {
  142|  8.94M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1190|  5.63M|    {
 1191|  5.63M|        return has_value();
 1192|  5.63M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1196|  1.32k|    {
 1197|  1.32k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.32k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.32k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.32k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
   57|  57.3k|    {
   58|  57.3k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  57.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  57.3k|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  55.7k|    {
 1078|  55.7k|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_errorEE5errorEv:
   71|  7.01M|    {
   72|  7.01M|        return m_unexpected;
   73|  7.01M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  55.7k|    {
  151|  55.7k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|   281k|    {
   67|   281k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   281k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|   281k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  15.2M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|  1.28M|    {
 1251|  1.28M|        return value();
 1252|  1.28M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|  2.27M|    {
 1034|  2.27M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|  2.27M|    {
  142|  2.27M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
   57|  27.1M|    {
   58|  27.1M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  27.1M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  27.1M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  12.8M|    {
 1078|  12.8M|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_error4codeEE5errorEv:
   71|  27.1M|    {
   72|  27.1M|        return m_unexpected;
   73|  27.1M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  12.8M|    {
  151|  12.8M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
   66|  27.1M|    {
   67|  27.1M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  27.1M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  27.1M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1190|  15.2M|    {
 1191|  15.2M|        return has_value();
 1192|  15.2M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  20.5M|    {
  189|  20.5M|        return m_has_value;
  190|  20.5M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1196|  2.98M|    {
 1197|  2.98M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  2.98M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.98M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  2.98M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  2.98M|    {
  172|  2.98M|        return m_unexpected;
  173|  2.98M|    }
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  3.31M|    {
 1034|  3.31M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  3.31M|    {
  142|  3.31M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.31M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
   57|   111k|    {
   58|   111k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   111k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   111k|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|  2.32M|    {
 1251|  2.32M|        return value();
 1252|  2.32M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  2.32M|    {
 1221|  2.32M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.32M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  2.32M|    {
  155|  2.32M|        return m_value;
  156|  2.32M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  3.31M|    {
 1191|  3.31M|        return has_value();
 1192|  3.31M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  6.62M|    {
  189|  6.62M|        return m_has_value;
  190|  6.62M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.31M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  3.31M|    {
 1263|  3.31M|        return std::move(value());
 1264|  3.31M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  3.31M|    {
 1221|  3.31M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.31M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  3.31M|    {
  155|  3.31M|        return m_value;
  156|  3.31M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  50.4k|    {
 1034|  50.4k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  50.4k|    {
  142|  50.4k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1033|  3.31M|    {
 1034|  3.31M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  3.31M|    {
  142|  3.31M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|  3.31M|    {
 1405|  3.31M|        return detail::transform_error_impl(std::move(*this),
 1406|  3.31M|                                            std::forward<F>(f));
 1407|  3.31M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
  926|  3.31M|{
  927|  3.31M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  3.31M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  3.31M|        if (SCN_LIKELY(exp.has_value())) {
  930|  3.31M|            return result(*std::forward<Exp>(exp));
  931|  3.31M|        }
  932|       |
  933|  3.31M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  3.31M|        return result(unexpect, monostate{});
  935|  3.31M|    }
  936|  3.31M|    else {
  937|  3.31M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  3.31M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  3.31M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 3.31M, False: 0]
  |  |  ------------------
  ------------------
  939|  3.31M|                   ? result(*std::forward<Exp>(exp))
  940|  3.31M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  3.31M|    }
  944|  3.31M|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  188|  6.62M|    {
  189|  6.62M|        return m_has_value;
  190|  6.62M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1262|  3.31M|    {
 1263|  3.31M|        return std::move(value());
 1264|  3.31M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1220|  3.31M|    {
 1221|  3.31M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.31M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  154|  3.31M|    {
  155|  3.31M|        return m_value;
  156|  3.31M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1033|  3.31M|    {
 1034|  3.31M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  3.31M|    {
  142|  3.31M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.31M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1190|  3.31M|    {
 1191|  3.31M|        return has_value();
 1192|  3.31M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  188|  6.62M|    {
  189|  6.62M|        return m_has_value;
  190|  6.62M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1262|  3.31M|    {
 1263|  3.31M|        return std::move(value());
 1264|  3.31M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1220|  3.31M|    {
 1221|  3.31M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.31M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  154|  3.31M|    {
  155|  3.31M|        return m_value;
  156|  3.31M|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_LPv0ELSG_0EEEONS0_10unexpectedIT_EE:
 1077|  10.0k|    {
 1078|  10.0k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  311|  10.0k|    {
  312|  10.0k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  10.0k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  372|  10.0k|    {
  373|  10.0k|        scn::detail::construct_at(unexpected_ptr(),
  374|  10.0k|                                  std::forward<Args>(args)...);
  375|  10.0k|        m_has_value = false;
  376|  10.0k|    }
_ZN3scn2v26detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  101|   115k|{
  102|   115k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   115k|        T(std::forward<Args>(args)...);
  104|   115k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  30.1k|    {
  403|  30.1k|        return reinterpret_cast<unexpected<E>*>(
  404|  30.1k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  30.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  30.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   490k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  316|   490k|    {
  317|   490k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 479k, False: 10.0k]
  ------------------
  318|   479k|            destroy_value();
  319|   479k|        }
  320|  10.0k|        else {
  321|  10.0k|            destroy_unexpected();
  322|  10.0k|        }
  323|   490k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  360|  1.47M|    {
  361|  1.47M|        return m_has_value;
  362|  1.47M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|   479k|    {
  380|   479k|        scn::detail::destroy_at(value_ptr());
  381|   479k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEEEvPT_:
  107|   479k|{
  108|   479k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   479k|        for (auto& elem : *p) {
  110|   479k|            scn::detail::destroy_at(std::addressof(elem));
  111|   479k|        }
  112|   479k|    }
  113|   479k|    else {
  114|   479k|        p->~T();
  115|   479k|    }
  116|   479k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  1.43M|    {
  390|  1.43M|        return reinterpret_cast<T*>(
  391|  1.43M|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  1.43M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  1.43M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  10.0k|    {
  384|  10.0k|        scn::detail::destroy_at(unexpected_ptr());
  385|  10.0k|    }
_ZN3scn2v26detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  107|   115k|{
  108|   115k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   115k|        for (auto& elem : *p) {
  110|   115k|            scn::detail::destroy_at(std::addressof(elem));
  111|   115k|        }
  112|   115k|    }
  113|   115k|    else {
  114|   115k|        p->~T();
  115|   115k|    }
  116|   115k|}
_ZN3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISC_vEEOT_:
 1033|   479k|    {
 1034|   479k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSD_EvEENS3_10in_place_tEDpOT_:
  302|   479k|    {
  303|   479k|        construct(std::forward<Args>(args)...);
  304|   479k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9constructIJSD_EEEvDpOT_:
  366|   479k|    {
  367|   479k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|   479k|        m_has_value = true;
  369|   479k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEJSD_EEEPT_SF_DpOT0_:
  101|   479k|{
  102|   479k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   479k|        T(std::forward<Args>(args)...);
  104|   479k|}
_ZNK3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1190|   490k|    {
 1191|   490k|        return has_value();
 1192|   490k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1196|  10.0k|    {
 1197|  10.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  10.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  10.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  10.0k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  10.0k|    {
  344|  10.0k|        return *unexpected_ptr();
  345|  10.0k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEdeISC_LPv0EEEOT_v:
 1262|   479k|    {
 1263|   479k|        return std::move(value());
 1264|   479k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5valueISC_LPv0EEERT_v:
 1220|   479k|    {
 1221|   479k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   479k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   479k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   479k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9get_valueEv:
  326|   479k|    {
  327|   479k|        return *value_ptr();
  328|   479k|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  2.23M|    {
 1251|  2.23M|        return value();
 1252|  2.23M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
   57|   111k|    {
   58|   111k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   111k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   111k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1033|  5.90M|    {
 1034|  5.90M|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  141|  5.90M|    {
  142|  5.90M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    210|    {
 1078|    210|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    210|    {
  151|    210|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   989k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|   989k|    {
 1034|   989k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   989k|    {
  142|   989k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|   237k|    {
 1405|   237k|        return detail::transform_error_impl(std::move(*this),
 1406|   237k|                                            std::forward<F>(f));
 1407|   237k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   237k|{
  927|   237k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   237k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   237k|        if (SCN_LIKELY(exp.has_value())) {
  930|   237k|            return result(*std::forward<Exp>(exp));
  931|   237k|        }
  932|       |
  933|   237k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   237k|        return result(unexpect, monostate{});
  935|   237k|    }
  936|   237k|    else {
  937|   237k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   237k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   237k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 237k, False: 18]
  |  |  ------------------
  ------------------
  939|   237k|                   ? result(*std::forward<Exp>(exp))
  940|   237k|                   : result(unexpect,
  941|     18|                            std::invoke(std::forward<F>(f),
  942|     18|                                        std::forward<Exp>(exp).error()));
  943|   237k|    }
  944|   237k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  1.64M|    {
  189|  1.64M|        return m_has_value;
  190|  1.64M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|   633k|    {
 1263|   633k|        return std::move(value());
 1264|   633k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|   659k|    {
 1221|   659k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   659k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   659k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   659k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|   659k|    {
  155|   659k|        return m_value;
  156|   659k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|   316k|    {
 1034|   316k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   316k|    {
  142|   316k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   672k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    210|    {
 1207|    210|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    210|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    210|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    210|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    210|    {
  172|    210|        return m_unexpected;
  173|    210|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|   158k|    {
 1088|   158k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   356k|    {
  151|   356k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|   356k|    {
 1191|   356k|        return has_value();
 1192|   356k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    192|    {
 1078|    192|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    384|    {
  151|    384|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.46M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1250|  26.3k|    {
 1251|  26.3k|        return value();
 1252|  26.3k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1033|  26.3k|    {
 1034|  26.3k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  141|  26.3k|    {
  142|  26.3k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  1.00M|    {
 1078|  1.00M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  1.00M|    {
  151|  1.00M|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|  1.26M|    {
 1191|  1.26M|        return has_value();
 1192|  1.26M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  2.29M|    {
  189|  2.29M|        return m_has_value;
  190|  2.29M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|   211k|    {
 1197|   211k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   211k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   211k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   211k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|   369k|    {
  172|   369k|        return m_unexpected;
  173|   369k|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|   237k|    {
 1034|   237k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   237k|    {
  142|   237k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   237k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1250|  26.3k|    {
 1251|  26.3k|        return value();
 1252|  26.3k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|   461k|    {
 1221|   461k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   461k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   461k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   461k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|   461k|    {
  155|   461k|        return m_value;
  156|   461k|    }
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1190|   237k|    {
 1191|   237k|        return has_value();
 1192|   237k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|   474k|    {
  189|   474k|        return m_has_value;
  190|   474k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   237k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|   237k|    {
 1263|   237k|        return std::move(value());
 1264|   237k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|   237k|    {
 1221|   237k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   237k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   237k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   237k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|   237k|    {
  155|   237k|        return m_value;
  156|   237k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|   395k|    {
 1405|   395k|        return detail::transform_error_impl(std::move(*this),
 1406|   395k|                                            std::forward<F>(f));
 1407|   395k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   395k|{
  927|   395k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   395k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   395k|        if (SCN_LIKELY(exp.has_value())) {
  930|   395k|            return result(*std::forward<Exp>(exp));
  931|   395k|        }
  932|       |
  933|   395k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   395k|        return result(unexpect, monostate{});
  935|   395k|    }
  936|   395k|    else {
  937|   395k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   395k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   395k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 395k, False: 192]
  |  |  ------------------
  ------------------
  939|   395k|                   ? result(*std::forward<Exp>(exp))
  940|   395k|                   : result(unexpect,
  941|    192|                            std::invoke(std::forward<F>(f),
  942|    192|                                        std::forward<Exp>(exp).error()));
  943|   395k|    }
  944|   395k|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|   435k|    {
 1034|   435k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   435k|    {
  142|   435k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    192|    {
 1088|    192|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|   435k|    {
 1263|   435k|        return std::move(value());
 1264|   435k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1033|   237k|    {
 1034|   237k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   237k|    {
  142|   237k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|   237k|    {
 1405|   237k|        return detail::transform_error_impl(std::move(*this),
 1406|   237k|                                            std::forward<F>(f));
 1407|   237k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
  926|   237k|{
  927|   237k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   237k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   237k|        if (SCN_LIKELY(exp.has_value())) {
  930|   237k|            return result(*std::forward<Exp>(exp));
  931|   237k|        }
  932|       |
  933|   237k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   237k|        return result(unexpect, monostate{});
  935|   237k|    }
  936|   237k|    else {
  937|   237k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   237k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   237k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 237k, False: 0]
  |  |  ------------------
  ------------------
  939|   237k|                   ? result(*std::forward<Exp>(exp))
  940|   237k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   237k|    }
  944|   237k|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  188|   474k|    {
  189|   474k|        return m_has_value;
  190|   474k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|   237k|    {
 1263|   237k|        return std::move(value());
 1264|   237k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|   237k|    {
 1221|   237k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   237k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   237k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   237k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  154|   237k|    {
  155|   237k|        return m_value;
  156|   237k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|   237k|    {
 1034|   237k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   237k|    {
  142|   237k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   237k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1190|   237k|    {
 1191|   237k|        return has_value();
 1192|   237k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   474k|    {
  189|   474k|        return m_has_value;
  190|   474k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|   237k|    {
 1263|   237k|        return std::move(value());
 1264|   237k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|   237k|    {
 1221|   237k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   237k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   237k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   237k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   237k|    {
  155|   237k|        return m_value;
  156|   237k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1404|   197k|    {
 1405|   197k|        return detail::transform_error_impl(std::move(*this),
 1406|   197k|                                            std::forward<F>(f));
 1407|   197k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESA_EEDaOT_OT0_:
  926|   197k|{
  927|   197k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   197k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   197k|        if (SCN_LIKELY(exp.has_value())) {
  930|   197k|            return result(*std::forward<Exp>(exp));
  931|   197k|        }
  932|       |
  933|   197k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   197k|        return result(unexpect, monostate{});
  935|   197k|    }
  936|   197k|    else {
  937|   197k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   197k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   197k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 39.5k, False: 158k]
  |  |  ------------------
  ------------------
  939|   197k|                   ? result(*std::forward<Exp>(exp))
  940|   197k|                   : result(unexpect,
  941|   158k|                            std::invoke(std::forward<F>(f),
  942|   158k|                                        std::forward<Exp>(exp).error()));
  943|   197k|    }
  944|   197k|}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1206|   158k|    {
 1207|   158k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   158k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   158k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   158k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   197k|    {
 1078|   197k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1077|  26.3k|    {
 1078|  26.3k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSF_EvEENS0_10unexpect_tEDpOT_:
  311|  26.3k|    {
  312|  26.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  26.3k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESF_EEEvDpOT_:
  372|  26.3k|    {
  373|  26.3k|        scn::detail::construct_at(unexpected_ptr(),
  374|  26.3k|                                  std::forward<Args>(args)...);
  375|  26.3k|        m_has_value = false;
  376|  26.3k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  79.1k|    {
  403|  79.1k|        return reinterpret_cast<unexpected<E>*>(
  404|  79.1k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  79.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  79.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  26.3k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EED2Ev:
  316|  26.3k|    {
  317|  26.3k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 0, False: 26.3k]
  ------------------
  318|      0|            destroy_value();
  319|      0|        }
  320|  26.3k|        else {
  321|  26.3k|            destroy_unexpected();
  322|  26.3k|        }
  323|  26.3k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9has_valueEv:
  360|  79.1k|    {
  361|  79.1k|        return m_has_value;
  362|  79.1k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  26.3k|    {
  384|  26.3k|        scn::detail::destroy_at(unexpected_ptr());
  385|  26.3k|    }
_ZNK3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEcvbEv:
 1190|  26.3k|    {
 1191|  26.3k|        return has_value();
 1192|  26.3k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5errorEv:
 1196|  26.3k|    {
 1197|  26.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  26.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  26.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  26.3k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  26.3k|    {
  344|  26.3k|        return *unexpected_ptr();
  345|  26.3k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1250|  39.5k|    {
 1251|  39.5k|        return value();
 1252|  39.5k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|   316k|    {
 1221|   316k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   316k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   316k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   316k|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.34M|    {
  189|  1.34M|        return m_has_value;
  190|  1.34M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|   316k|    {
  155|   316k|        return m_value;
  156|   316k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|   672k|    {
 1191|   672k|        return has_value();
 1192|   672k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|   356k|    {
 1197|   356k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   356k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   356k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   356k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   356k|    {
  172|   356k|        return m_unexpected;
  173|   356k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   277k|    {
 1263|   277k|        return std::move(value());
 1264|   277k|    }
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|   141k|    {
 1078|   141k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   141k|    {
  151|   141k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  14.6M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  14.5M|    {
 1034|  14.5M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  14.5M|    {
  142|  14.5M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  3.03M|    {
 1405|  3.03M|        return detail::transform_error_impl(std::move(*this),
 1406|  3.03M|                                            std::forward<F>(f));
 1407|  3.03M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  3.03M|{
  927|  3.03M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  3.03M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  3.03M|        if (SCN_LIKELY(exp.has_value())) {
  930|  3.03M|            return result(*std::forward<Exp>(exp));
  931|  3.03M|        }
  932|       |
  933|  3.03M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  3.03M|        return result(unexpect, monostate{});
  935|  3.03M|    }
  936|  3.03M|    else {
  937|  3.03M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  3.03M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  3.03M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 3.00M, False: 28.5k]
  |  |  ------------------
  ------------------
  939|  3.03M|                   ? result(*std::forward<Exp>(exp))
  940|  3.03M|                   : result(unexpect,
  941|  28.5k|                            std::invoke(std::forward<F>(f),
  942|  28.5k|                                        std::forward<Exp>(exp).error()));
  943|  3.03M|    }
  944|  3.03M|}
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  25.2M|    {
  189|  25.2M|        return m_has_value;
  190|  25.2M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  9.41M|    {
 1263|  9.41M|        return std::move(value());
 1264|  9.41M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  10.4M|    {
 1221|  10.4M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  10.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  10.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  10.4M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  10.4M|    {
  155|  10.4M|        return m_value;
  156|  10.4M|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  12.0M|    {
 1034|  12.0M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  12.0M|    {
  142|  12.0M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  12.7M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1206|   140k|    {
 1207|   140k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   140k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   140k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   140k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|   141k|    {
  172|   141k|        return m_unexpected;
  173|   141k|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  28.5k|    {
 1088|  28.5k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|   670k|    {
  151|   670k|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|   642k|    {
 1078|   642k|    }
_ZNK3scn2v28expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1190|  5.10M|    {
 1191|  5.10M|        return has_value();
 1192|  5.10M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1196|  1.59k|    {
 1197|  1.59k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.59k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.59k|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|   113k|    {
 1078|   113k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   224k|    {
  151|   224k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  20.2M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|  1.07M|    {
 1251|  1.07M|        return value();
 1252|  1.07M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|  1.92M|    {
 1034|  1.92M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|  1.92M|    {
  142|  1.92M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  11.6M|    {
 1078|  11.6M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  11.6M|    {
  151|  11.6M|    }
_ZNK3scn2v28expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1190|  20.2M|    {
 1191|  20.2M|        return has_value();
 1192|  20.2M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  31.5M|    {
  189|  31.5M|        return m_has_value;
  190|  31.5M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1196|  2.87M|    {
 1197|  2.87M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  2.87M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.87M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  2.87M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  2.87M|    {
  172|  2.87M|        return m_unexpected;
  173|  2.87M|    }
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  3.00M|    {
 1034|  3.00M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  3.00M|    {
  142|  3.00M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.00M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|  1.96M|    {
 1251|  1.96M|        return value();
 1252|  1.96M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  8.37M|    {
 1221|  8.37M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  8.37M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  8.37M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  8.37M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  8.37M|    {
  155|  8.37M|        return m_value;
  156|  8.37M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  3.00M|    {
 1191|  3.00M|        return has_value();
 1192|  3.00M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  6.01M|    {
  189|  6.01M|        return m_has_value;
  190|  6.01M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.00M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  3.00M|    {
 1263|  3.00M|        return std::move(value());
 1264|  3.00M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  3.00M|    {
 1221|  3.00M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.00M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  3.00M|    {
  155|  3.00M|        return m_value;
  156|  3.00M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDaOT_:
 1404|  6.52M|    {
 1405|  6.52M|        return detail::transform_error_impl(std::move(*this),
 1406|  6.52M|                                            std::forward<F>(f));
 1407|  6.52M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  6.52M|{
  927|  6.52M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  6.52M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  6.52M|        if (SCN_LIKELY(exp.has_value())) {
  930|  6.52M|            return result(*std::forward<Exp>(exp));
  931|  6.52M|        }
  932|       |
  933|  6.52M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  6.52M|        return result(unexpect, monostate{});
  935|  6.52M|    }
  936|  6.52M|    else {
  937|  6.52M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  6.52M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  6.52M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 6.40M, False: 111k]
  |  |  ------------------
  ------------------
  939|  6.52M|                   ? result(*std::forward<Exp>(exp))
  940|  6.52M|                   : result(unexpect,
  941|   111k|                            std::invoke(std::forward<F>(f),
  942|   111k|                                        std::forward<Exp>(exp).error()));
  943|  6.52M|    }
  944|  6.52M|}
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  6.45M|    {
 1034|  6.45M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  6.45M|    {
  142|  6.45M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1087|   111k|    {
 1088|   111k|    }
_ZNO3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1262|  6.40M|    {
 1263|  6.40M|        return std::move(value());
 1264|  6.40M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1033|  3.00M|    {
 1034|  3.00M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  3.00M|    {
  142|  3.00M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|  3.00M|    {
 1405|  3.00M|        return detail::transform_error_impl(std::move(*this),
 1406|  3.00M|                                            std::forward<F>(f));
 1407|  3.00M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
  926|  3.00M|{
  927|  3.00M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  3.00M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  3.00M|        if (SCN_LIKELY(exp.has_value())) {
  930|  3.00M|            return result(*std::forward<Exp>(exp));
  931|  3.00M|        }
  932|       |
  933|  3.00M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  3.00M|        return result(unexpect, monostate{});
  935|  3.00M|    }
  936|  3.00M|    else {
  937|  3.00M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  3.00M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  3.00M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 3.00M, False: 0]
  |  |  ------------------
  ------------------
  939|  3.00M|                   ? result(*std::forward<Exp>(exp))
  940|  3.00M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  3.00M|    }
  944|  3.00M|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  188|  6.01M|    {
  189|  6.01M|        return m_has_value;
  190|  6.01M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1262|  3.00M|    {
 1263|  3.00M|        return std::move(value());
 1264|  3.00M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1220|  3.00M|    {
 1221|  3.00M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.00M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  154|  3.00M|    {
  155|  3.00M|        return m_value;
  156|  3.00M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1033|  3.00M|    {
 1034|  3.00M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  3.00M|    {
  142|  3.00M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.00M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1190|  3.00M|    {
 1191|  3.00M|        return has_value();
 1192|  3.00M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  188|  6.01M|    {
  189|  6.01M|        return m_has_value;
  190|  6.01M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1262|  3.00M|    {
 1263|  3.00M|        return std::move(value());
 1264|  3.00M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1220|  3.00M|    {
 1221|  3.00M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.00M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  154|  3.00M|    {
  155|  3.00M|        return m_value;
  156|  3.00M|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|  32.5k|    {
 1078|  32.5k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  311|  32.5k|    {
  312|  32.5k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  32.5k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  372|  32.5k|    {
  373|  32.5k|        scn::detail::construct_at(unexpected_ptr(),
  374|  32.5k|                                  std::forward<Args>(args)...);
  375|  32.5k|        m_has_value = false;
  376|  32.5k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  97.7k|    {
  403|  97.7k|        return reinterpret_cast<unexpected<E>*>(
  404|  97.7k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  97.7k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  97.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   450k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|   450k|    {
  317|   450k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 417k, False: 32.5k]
  ------------------
  318|   417k|            destroy_value();
  319|   417k|        }
  320|  32.5k|        else {
  321|  32.5k|            destroy_unexpected();
  322|  32.5k|        }
  323|   450k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|  1.35M|    {
  361|  1.35M|        return m_has_value;
  362|  1.35M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|   417k|    {
  380|   417k|        scn::detail::destroy_at(value_ptr());
  381|   417k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEEEvPT_:
  107|   417k|{
  108|   417k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   417k|        for (auto& elem : *p) {
  110|   417k|            scn::detail::destroy_at(std::addressof(elem));
  111|   417k|        }
  112|   417k|    }
  113|   417k|    else {
  114|   417k|        p->~T();
  115|   417k|    }
  116|   417k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  1.25M|    {
  390|  1.25M|        return reinterpret_cast<T*>(
  391|  1.25M|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  1.25M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  1.25M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  32.5k|    {
  384|  32.5k|        scn::detail::destroy_at(unexpected_ptr());
  385|  32.5k|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|   417k|    {
 1034|   417k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSG_EvEENS3_10in_place_tEDpOT_:
  302|   417k|    {
  303|   417k|        construct(std::forward<Args>(args)...);
  304|   417k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSG_EEEvDpOT_:
  366|   417k|    {
  367|   417k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|   417k|        m_has_value = true;
  369|   417k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEJSG_EEEPT_SI_DpOT0_:
  101|   417k|{
  102|   417k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   417k|        T(std::forward<Args>(args)...);
  104|   417k|}
_ZNK3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1190|   450k|    {
 1191|   450k|        return has_value();
 1192|   450k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1196|  32.5k|    {
 1197|  32.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  32.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  32.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  32.5k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  32.5k|    {
  344|  32.5k|        return *unexpected_ptr();
  345|  32.5k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEdeISF_LPv0EEEOT_v:
 1262|   417k|    {
 1263|   417k|        return std::move(value());
 1264|   417k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|   417k|    {
 1221|   417k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   417k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   417k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   417k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  326|   417k|    {
  327|   417k|        return *value_ptr();
  328|   417k|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  1.90M|    {
 1251|  1.90M|        return value();
 1252|  1.90M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  12.0M|    {
 1221|  12.0M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  12.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  12.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  12.0M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  188|  25.4M|    {
  189|  25.4M|        return m_has_value;
  190|  25.4M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  154|  12.0M|    {
  155|  12.0M|        return m_value;
  156|  12.0M|    }
_ZNK3scn2v28expectedIPKwNS0_10scan_errorEEcvbEv:
 1190|  12.7M|    {
 1191|  12.7M|        return has_value();
 1192|  12.7M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5errorEv:
 1196|   670k|    {
 1197|   670k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   670k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   670k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   670k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   670k|    {
  172|   670k|        return m_unexpected;
  173|   670k|    }
_ZNO3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  10.1M|    {
 1263|  10.1M|        return std::move(value());
 1264|  10.1M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   348k|    {
 1078|   348k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   619k|    {
  151|   619k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.09M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|   472k|    {
 1034|   472k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   472k|    {
  142|   472k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|  1.09M|    {
 1191|  1.09M|        return has_value();
 1192|  1.09M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.18M|    {
  189|  2.18M|        return m_has_value;
  190|  2.18M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|   619k|    {
 1197|   619k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   619k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   619k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   619k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   619k|    {
  172|   619k|        return m_unexpected;
  173|   619k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1250|  38.7k|    {
 1251|  38.7k|        return value();
 1252|  38.7k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|   472k|    {
 1221|   472k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   472k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   472k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   472k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|   472k|    {
  155|   472k|        return m_value;
  156|   472k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    204|    {
 1078|    204|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    204|    {
  151|    204|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.64M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|  1.64M|    {
 1034|  1.64M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  1.64M|    {
  142|  1.64M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|   387k|    {
 1405|   387k|        return detail::transform_error_impl(std::move(*this),
 1406|   387k|                                            std::forward<F>(f));
 1407|   387k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   387k|{
  927|   387k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   387k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   387k|        if (SCN_LIKELY(exp.has_value())) {
  930|   387k|            return result(*std::forward<Exp>(exp));
  931|   387k|        }
  932|       |
  933|   387k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   387k|        return result(unexpect, monostate{});
  935|   387k|    }
  936|   387k|    else {
  937|   387k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   387k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   387k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 387k, False: 22]
  |  |  ------------------
  ------------------
  939|   387k|                   ? result(*std::forward<Exp>(exp))
  940|   387k|                   : result(unexpect,
  941|     22|                            std::invoke(std::forward<F>(f),
  942|     22|                                        std::forward<Exp>(exp).error()));
  943|   387k|    }
  944|   387k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  2.74M|    {
  189|  2.74M|        return m_has_value;
  190|  2.74M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|  1.05M|    {
 1263|  1.05M|        return std::move(value());
 1264|  1.05M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|  1.09M|    {
 1221|  1.09M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.09M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  1.09M|    {
  155|  1.09M|        return m_value;
  156|  1.09M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    204|    {
 1207|    204|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    204|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    204|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    204|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    204|    {
  172|    204|        return m_unexpected;
  173|    204|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|   270k|    {
 1088|   270k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|   596k|    {
 1191|   596k|        return has_value();
 1192|   596k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    182|    {
 1078|    182|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    364|    {
  151|    364|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.45M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1250|  38.6k|    {
 1251|  38.6k|        return value();
 1252|  38.6k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1033|  38.6k|    {
 1034|  38.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  141|  38.6k|    {
  142|  38.6k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  1.70M|    {
 1078|  1.70M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  1.70M|    {
  151|  1.70M|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|  2.13M|    {
 1191|  2.13M|        return has_value();
 1192|  2.13M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  3.82M|    {
  189|  3.82M|        return m_has_value;
  190|  3.82M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|   348k|    {
 1197|   348k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   348k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   348k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   348k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|   619k|    {
  172|   619k|        return m_unexpected;
  173|   619k|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|   387k|    {
 1034|   387k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   387k|    {
  142|   387k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   387k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1250|  38.6k|    {
 1251|  38.6k|        return value();
 1252|  38.6k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|   750k|    {
 1221|   750k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   750k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   750k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   750k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|   750k|    {
  155|   750k|        return m_value;
  156|   750k|    }
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1190|   387k|    {
 1191|   387k|        return has_value();
 1192|   387k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|   774k|    {
  189|   774k|        return m_has_value;
  190|   774k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   387k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|   387k|    {
 1263|   387k|        return std::move(value());
 1264|   387k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|   387k|    {
 1221|   387k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   387k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   387k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   387k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|   387k|    {
  155|   387k|        return m_value;
  156|   387k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|   665k|    {
 1405|   665k|        return detail::transform_error_impl(std::move(*this),
 1406|   665k|                                            std::forward<F>(f));
 1407|   665k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   665k|{
  927|   665k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   665k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   665k|        if (SCN_LIKELY(exp.has_value())) {
  930|   665k|            return result(*std::forward<Exp>(exp));
  931|   665k|        }
  932|       |
  933|   665k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   665k|        return result(unexpect, monostate{});
  935|   665k|    }
  936|   665k|    else {
  937|   665k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   665k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   665k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 665k, False: 182]
  |  |  ------------------
  ------------------
  939|   665k|                   ? result(*std::forward<Exp>(exp))
  940|   665k|                   : result(unexpect,
  941|    182|                            std::invoke(std::forward<F>(f),
  942|    182|                                        std::forward<Exp>(exp).error()));
  943|   665k|    }
  944|   665k|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|   712k|    {
 1034|   712k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   712k|    {
  142|   712k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    182|    {
 1088|    182|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|   712k|    {
 1263|   712k|        return std::move(value());
 1264|   712k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1033|   387k|    {
 1034|   387k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   387k|    {
  142|   387k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|   387k|    {
 1405|   387k|        return detail::transform_error_impl(std::move(*this),
 1406|   387k|                                            std::forward<F>(f));
 1407|   387k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
  926|   387k|{
  927|   387k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   387k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   387k|        if (SCN_LIKELY(exp.has_value())) {
  930|   387k|            return result(*std::forward<Exp>(exp));
  931|   387k|        }
  932|       |
  933|   387k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   387k|        return result(unexpect, monostate{});
  935|   387k|    }
  936|   387k|    else {
  937|   387k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   387k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   387k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 387k, False: 0]
  |  |  ------------------
  ------------------
  939|   387k|                   ? result(*std::forward<Exp>(exp))
  940|   387k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   387k|    }
  944|   387k|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  188|   774k|    {
  189|   774k|        return m_has_value;
  190|   774k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|   387k|    {
 1263|   387k|        return std::move(value());
 1264|   387k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|   387k|    {
 1221|   387k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   387k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   387k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   387k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  154|   387k|    {
  155|   387k|        return m_value;
  156|   387k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|   387k|    {
 1034|   387k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   387k|    {
  142|   387k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   387k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1190|   387k|    {
 1191|   387k|        return has_value();
 1192|   387k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   774k|    {
  189|   774k|        return m_has_value;
  190|   774k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|   387k|    {
 1263|   387k|        return std::move(value());
 1264|   387k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|   387k|    {
 1221|   387k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   387k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   387k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   387k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   387k|    {
  155|   387k|        return m_value;
  156|   387k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1404|   317k|    {
 1405|   317k|        return detail::transform_error_impl(std::move(*this),
 1406|   317k|                                            std::forward<F>(f));
 1407|   317k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESA_EEDaOT_OT0_:
  926|   317k|{
  927|   317k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   317k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   317k|        if (SCN_LIKELY(exp.has_value())) {
  930|   317k|            return result(*std::forward<Exp>(exp));
  931|   317k|        }
  932|       |
  933|   317k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   317k|        return result(unexpect, monostate{});
  935|   317k|    }
  936|   317k|    else {
  937|   317k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   317k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   317k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 46.4k, False: 270k]
  |  |  ------------------
  ------------------
  939|   317k|                   ? result(*std::forward<Exp>(exp))
  940|   317k|                   : result(unexpect,
  941|   270k|                            std::invoke(std::forward<F>(f),
  942|   270k|                                        std::forward<Exp>(exp).error()));
  943|   317k|    }
  944|   317k|}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1206|   270k|    {
 1207|   270k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   270k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   270k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   270k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  46.4k|    {
 1078|  46.4k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  311|  46.4k|    {
  312|  46.4k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  46.4k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  372|  46.4k|    {
  373|  46.4k|        scn::detail::construct_at(unexpected_ptr(),
  374|  46.4k|                                  std::forward<Args>(args)...);
  375|  46.4k|        m_has_value = false;
  376|  46.4k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|   139k|    {
  403|   139k|        return reinterpret_cast<unexpected<E>*>(
  404|   139k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|   139k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|   139k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  46.4k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|  46.4k|    {
  317|  46.4k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 0, False: 46.4k]
  ------------------
  318|      0|            destroy_value();
  319|      0|        }
  320|  46.4k|        else {
  321|  46.4k|            destroy_unexpected();
  322|  46.4k|        }
  323|  46.4k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|   139k|    {
  361|   139k|        return m_has_value;
  362|   139k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  46.4k|    {
  384|  46.4k|        scn::detail::destroy_at(unexpected_ptr());
  385|  46.4k|    }
_ZNK3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1190|  46.4k|    {
 1191|  46.4k|        return has_value();
 1192|  46.4k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1196|  46.4k|    {
 1197|  46.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  46.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  46.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  46.4k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  46.4k|    {
  344|  46.4k|        return *unexpected_ptr();
  345|  46.4k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   433k|    {
 1263|   433k|        return std::move(value());
 1264|   433k|    }

_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  4.39k|{
  200|  4.39k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  4.39k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  4.39k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  4.39k|{
  180|  4.39k|    return p;
  181|  4.39k|}
_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  4.39k|{
  200|  4.39k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  4.39k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  4.39k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  4.39k|{
  180|  4.39k|    return p;
  181|  4.39k|}
_ZN3scn2v26detail10to_addressIRPKhEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  4.39k|{
  200|  4.39k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  4.39k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  4.39k|}
_ZN3scn2v26detail15to_address_implIKhEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  4.39k|{
  180|  4.39k|    return p;
  181|  4.39k|}
_ZN3scn2v26detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  11.1M|{
  200|  11.1M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  11.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  11.1M|}
_ZN3scn2v26detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  11.1M|{
  180|  11.1M|    return p;
  181|  11.1M|}
_ZN3scn2v26detail10to_addressIRPDiEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  6.81M|{
  200|  6.81M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  6.81M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  6.81M|}
_ZN3scn2v26detail15to_address_implIDiEEPT_S4_NS1_12priority_tagILm2EEE:
  179|  6.81M|{
  180|  6.81M|    return p;
  181|  6.81M|}
_ZN3scn2v26detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  79.1k|{
  200|  79.1k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  79.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  79.1k|}
_ZN3scn2v26detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  6.81M|{
  200|  6.81M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  6.81M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  6.81M|}
_ZN3scn2v26detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  6.90M|{
  180|  6.90M|    return p;
  181|  6.90M|}
_ZN3scn2v26detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  92.9k|{
  200|  92.9k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  92.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  92.9k|}

_ZNK3scn2v24spanIKhE4sizeEv:
  241|  15.2k|    {
  242|  15.2k|        return static_cast<size_type>(m_end - m_ptr);
  243|  15.2k|    }
_ZN3scn2v24spanIKhE5beginEv:
  180|  2.19k|    {
  181|  2.19k|        return m_ptr;
  182|  2.19k|    }
_ZN3scn2v24spanIKhE3endEv:
  184|  2.19k|    {
  185|  2.19k|        return m_end;
  186|  2.19k|    }
_ZNK3scn2v24spanIKhE4dataEv:
  237|  2.19k|    {
  238|  2.19k|        return m_ptr;
  239|  2.19k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEC2IPS6_LPv0EEET_m:
  119|  2.19k|    {
  120|  2.19k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE5beginEv:
  180|  52.7k|    {
  181|  52.7k|        return m_ptr;
  182|  52.7k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE3endEv:
  184|  52.7k|    {
  185|  52.7k|        return m_end;
  186|  52.7k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEC2IPS6_LPv0EEET_m:
  119|  2.19k|    {
  120|  2.19k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE5beginEv:
  180|  92.9k|    {
  181|  92.9k|        return m_ptr;
  182|  92.9k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE3endEv:
  184|  92.9k|    {
  185|  92.9k|        return m_end;
  186|  92.9k|    }
_ZN3scn2v24spanIKhEC2IPS2_LPv0EEET_m:
  119|  2.19k|    {
  120|  2.19k|    }
_ZN3scn2v24spanIDiEC2IPDiLPv0EEET_m:
  119|  3.40M|    {
  120|  3.40M|    }
_ZNK3scn2v24spanIDiE4dataEv:
  237|  3.40M|    {
  238|  3.40M|        return m_ptr;
  239|  3.40M|    }
_ZNK3scn2v24spanIDiE4sizeEv:
  241|  3.40M|    {
  242|  3.40M|        return static_cast<size_type>(m_end - m_ptr);
  243|  3.40M|    }

_ZN3scn2v26detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  2.27M|{
   60|  2.27M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  2.27M|                                          const CharT*, const CharT*>) {
   62|  2.27M|        return {first, last};
   63|  2.27M|    }
   64|  2.27M|    else {
   65|  2.27M|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  2.27M|    }
   67|  2.27M|}
_ZN3scn2v26detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  5.36M|{
   60|  5.36M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  5.36M|                                          const CharT*, const CharT*>) {
   62|  5.36M|        return {first, last};
   63|  5.36M|    }
   64|  5.36M|    else {
   65|  5.36M|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  5.36M|    }
   67|  5.36M|}
_ZN3scn2v26detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
   43|  3.68M|{
   44|  3.68M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (44:19): [Folded - Ignored]
  |  Branch (44:19): [Folded - Ignored]
  ------------------
   45|  3.68M|                                          decltype(first), decltype(last)> &&
   46|  3.68M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (46:19): [Folded - Ignored]
  ------------------
   47|  3.68M|        return {first, last};
   48|  3.68M|    }
   49|  3.68M|    else {
   50|  3.68M|        return {to_address(first), static_cast<size_t>(std::distance(
   51|  3.68M|                                       to_address(first), to_address(last)))};
   52|  3.68M|    }
   53|  3.68M|}
_ZN3scn2v26detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
   74|  7.04M|{
   75|  7.04M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (75:19): [Folded - Ignored]
  |  Branch (75:19): [Folded - Ignored]
  ------------------
   76|  7.04M|                      typename std::basic_string_view<CharT>::iterator,
   77|  7.04M|                      decltype(it)> &&
   78|  7.04M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (78:19): [Folded - Ignored]
  ------------------
   79|  7.04M|        SCN_UNUSED(sv);
  ------------------
  |  |  227|  7.04M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   80|  7.04M|        return it;
   81|  7.04M|    }
   82|  7.04M|    else {
   83|  7.04M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
   84|  7.04M|    }
   85|  7.04M|}

_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|   237k|{
   54|   237k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|   237k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|   237k|        return true;
   57|   237k|    }
   58|   237k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|   237k|                           ranges::iterator_t<Range>,
   60|   237k|                           typename detail::basic_scan_buffer<
   61|   237k|                               detail::char_t<Range>>::forward_iterator>) {
   62|   237k|        auto beg = ranges::begin(r);
   63|   237k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 237k, False: 0]
  ------------------
   64|   237k|            return false;
   65|   237k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|   237k|    else {
   79|   237k|        return false;
   80|   237k|    }
   81|   237k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   237k|{
  112|   237k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   237k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   237k|        return r;
  115|   237k|    }
  116|   237k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   237k|                           ranges::iterator_t<Range>,
  118|   237k|                           typename detail::basic_scan_buffer<
  119|   237k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   237k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   237k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   237k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   237k|                ranges::begin(r), ranges::end(r)));
  124|   237k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   237k|        }
  126|   237k|        else {
  127|   237k|            return ranges::begin(r).contiguous_segment();
  128|   237k|        }
  129|   237k|    }
  130|   237k|    else {
  131|   237k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   237k|    }
  133|   237k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|   395k|{
  166|   395k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|   395k|        return ranges_polyfill::usize(r);
  168|   395k|    }
  169|   395k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|   395k|                           ranges::iterator_t<Range>,
  171|   395k|                           typename detail::basic_scan_buffer<
  172|   395k|                               detail::char_t<Range>>::forward_iterator>) {
  173|   395k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|   395k|            return static_cast<size_t>(ranges::end(r).position() -
  175|   395k|                                       ranges::begin(r).position());
  176|   395k|        }
  177|   395k|        else {
  178|   395k|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 395k, False: 0]
  ------------------
  179|   395k|                return static_cast<size_t>(
  180|   395k|                    ranges::begin(r).parent()->chars_available() -
  181|   395k|                    ranges::begin(r).position());
  182|   395k|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|   395k|        }
  185|   395k|    }
  186|   395k|    else {
  187|   395k|        return 0;
  188|   395k|    }
  189|   395k|}
_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|   387k|{
   54|   387k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|   387k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|   387k|        return true;
   57|   387k|    }
   58|   387k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|   387k|                           ranges::iterator_t<Range>,
   60|   387k|                           typename detail::basic_scan_buffer<
   61|   387k|                               detail::char_t<Range>>::forward_iterator>) {
   62|   387k|        auto beg = ranges::begin(r);
   63|   387k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 387k, False: 0]
  ------------------
   64|   387k|            return false;
   65|   387k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|   387k|    else {
   79|   387k|        return false;
   80|   387k|    }
   81|   387k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   387k|{
  112|   387k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   387k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   387k|        return r;
  115|   387k|    }
  116|   387k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   387k|                           ranges::iterator_t<Range>,
  118|   387k|                           typename detail::basic_scan_buffer<
  119|   387k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   387k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   387k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   387k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   387k|                ranges::begin(r), ranges::end(r)));
  124|   387k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   387k|        }
  126|   387k|        else {
  127|   387k|            return ranges::begin(r).contiguous_segment();
  128|   387k|        }
  129|   387k|    }
  130|   387k|    else {
  131|   387k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   387k|    }
  133|   387k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|   665k|{
  166|   665k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|   665k|        return ranges_polyfill::usize(r);
  168|   665k|    }
  169|   665k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|   665k|                           ranges::iterator_t<Range>,
  171|   665k|                           typename detail::basic_scan_buffer<
  172|   665k|                               detail::char_t<Range>>::forward_iterator>) {
  173|   665k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|   665k|            return static_cast<size_t>(ranges::end(r).position() -
  175|   665k|                                       ranges::begin(r).position());
  176|   665k|        }
  177|   665k|        else {
  178|   665k|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 665k, False: 0]
  ------------------
  179|   665k|                return static_cast<size_t>(
  180|   665k|                    ranges::begin(r).parent()->chars_available() -
  181|   665k|                    ranges::begin(r).position());
  182|   665k|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|   665k|        }
  185|   665k|    }
  186|   665k|    else {
  187|   665k|        return 0;
  188|   665k|    }
  189|   665k|}

_ZN3scn2v24impl22make_contiguous_bufferIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  3.31M|{
  235|  3.31M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  3.31M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  3.31M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  3.31M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  3.31M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  3.31M|    }
  240|  3.31M|    else {
  241|  3.31M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  3.31M|    }
  243|  3.31M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  3.31M|    {
   50|  3.31M|    }
_ZNK3scn2v24impl19string_view_wrapperIcE4viewEv:
   62|  11.0M|    {
   63|  11.0M|        return sv;
   64|  11.0M|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  2.28M|{
  235|  2.28M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  2.28M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  2.28M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  2.28M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  2.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  2.28M|    }
  240|  2.28M|    else {
  241|  2.28M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  2.28M|    }
  243|  2.28M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  2.28M|    {
   50|  2.28M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIcE4viewEv:
  141|  79.1k|    {
  142|  79.1k|        return m_view;
  143|  79.1k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcED2Ev:
  131|  39.5k|    ~contiguous_range_factory() = default;
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|  39.5k|{
  235|  39.5k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  39.5k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  39.5k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  39.5k|        return string_view_wrapper{SCN_FWD(range)};
  239|  39.5k|    }
  240|  39.5k|    else {
  241|  39.5k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  248|  39.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|  39.5k|    }
  243|  39.5k|}
_ZN3scn2v24impl24contiguous_range_factoryIcEC2IN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|  39.5k|    {
   97|  39.5k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  39.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|  39.5k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_LNS6_13subrange_kindE0EEEEEvOT_:
  180|  39.5k|    {
  181|  39.5k|        using value_t = ranges::range_value_t<Range>;
  182|  39.5k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  39.5k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  39.5k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  39.5k|            m_storage.reset();
  186|  39.5k|            m_view = string_view_type{ranges::data(range),
  187|  39.5k|                                      ranges_polyfill::usize(range)};
  188|  39.5k|        }
  189|  39.5k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|  39.5k|                                          std::basic_string<CharT>>) {
  191|  39.5k|            m_storage.emplace(SCN_FWD(range));
  192|  39.5k|            m_view = string_view_type{*m_storage};
  193|  39.5k|        }
  194|  39.5k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|  39.5k|                                          typename detail::basic_scan_buffer<
  196|  39.5k|                                              value_t>::forward_iterator> &&
  197|  39.5k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|  39.5k|            auto beg_seg = range.begin().contiguous_segment();
  199|  39.5k|            auto end_seg = range.end().contiguous_segment();
  200|  39.5k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  153|  39.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 26.3k, False: 13.1k]
  |  |  ------------------
  ------------------
  201|  39.5k|                             detail::to_address(end_seg.end()))) {
  202|  26.3k|                auto& str = m_storage.emplace();
  203|  26.3k|                str.reserve(range.end().position() - range.begin().position());
  204|  26.3k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  26.3k|                m_view = string_view_type{str};
  206|  26.3k|                return;
  207|  26.3k|            }
  208|       |
  209|  13.1k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|  13.1k|                                                            end_seg.data());
  211|  13.1k|            m_storage.reset();
  212|  13.1k|        }
  213|  39.5k|        else {
  214|  39.5k|            auto& str = m_storage.emplace();
  215|  39.5k|            if constexpr (ranges::sized_range<Range>) {
  216|  39.5k|                str.reserve(ranges_polyfill::usize(range));
  217|  39.5k|            }
  218|  39.5k|            std::copy(ranges::begin(range), ranges::end(range),
  219|  39.5k|                      std::back_inserter(str));
  220|  39.5k|            m_view = string_view_type{str};
  221|  39.5k|        }
  222|  39.5k|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  2.11M|{
  235|  2.11M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  2.11M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  2.11M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  2.11M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  2.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  2.11M|    }
  240|  2.11M|    else {
  241|  2.11M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  2.11M|    }
  243|  2.11M|}
_ZN3scn2v24impl19string_view_wrapperIwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  2.11M|    {
   50|  2.11M|    }
_ZNK3scn2v24impl19string_view_wrapperIwE4viewEv:
   62|  3.97M|    {
   63|  3.97M|        return sv;
   64|  3.97M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIwE4viewEv:
  141|  85.1k|    {
  142|  85.1k|        return m_view;
  143|  85.1k|    }
_ZN3scn2v24impl24contiguous_range_factoryIwED2Ev:
  131|  46.4k|    ~contiguous_range_factory() = default;
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|  46.4k|{
  235|  46.4k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  46.4k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  46.4k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  46.4k|        return string_view_wrapper{SCN_FWD(range)};
  239|  46.4k|    }
  240|  46.4k|    else {
  241|  46.4k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  248|  46.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|  46.4k|    }
  243|  46.4k|}
_ZN3scn2v24impl24contiguous_range_factoryIwEC2IN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|  46.4k|    {
   97|  46.4k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  46.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|  46.4k|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEEEEvOT_:
  180|  46.4k|    {
  181|  46.4k|        using value_t = ranges::range_value_t<Range>;
  182|  46.4k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  46.4k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  46.4k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  46.4k|            m_storage.reset();
  186|  46.4k|            m_view = string_view_type{ranges::data(range),
  187|  46.4k|                                      ranges_polyfill::usize(range)};
  188|  46.4k|        }
  189|  46.4k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|  46.4k|                                          std::basic_string<CharT>>) {
  191|  46.4k|            m_storage.emplace(SCN_FWD(range));
  192|  46.4k|            m_view = string_view_type{*m_storage};
  193|  46.4k|        }
  194|  46.4k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|  46.4k|                                          typename detail::basic_scan_buffer<
  196|  46.4k|                                              value_t>::forward_iterator> &&
  197|  46.4k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|  46.4k|            auto beg_seg = range.begin().contiguous_segment();
  199|  46.4k|            auto end_seg = range.end().contiguous_segment();
  200|  46.4k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  153|  46.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 46.4k, False: 12]
  |  |  ------------------
  ------------------
  201|  46.4k|                             detail::to_address(end_seg.end()))) {
  202|  46.4k|                auto& str = m_storage.emplace();
  203|  46.4k|                str.reserve(range.end().position() - range.begin().position());
  204|  46.4k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  46.4k|                m_view = string_view_type{str};
  206|  46.4k|                return;
  207|  46.4k|            }
  208|       |
  209|     12|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|     12|                                                            end_seg.data());
  211|     12|            m_storage.reset();
  212|     12|        }
  213|  46.4k|        else {
  214|  46.4k|            auto& str = m_storage.emplace();
  215|  46.4k|            if constexpr (ranges::sized_range<Range>) {
  216|  46.4k|                str.reserve(ranges_polyfill::usize(range));
  217|  46.4k|            }
  218|  46.4k|            std::copy(ranges::begin(range), ranges::end(range),
  219|  46.4k|                      std::back_inserter(str));
  220|  46.4k|            m_view = string_view_type{str};
  221|  46.4k|        }
  222|  46.4k|    }

_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  14.5M|{
   97|  14.5M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  14.5M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 28.8k, False: 14.5M]
  |  |  ------------------
  ------------------
   98|  28.8k|        return eof_error::eof;
   99|  28.8k|    }
  100|  14.5M|    return eof_error::good;
  101|  14.5M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  14.5M|{
   91|  14.5M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  14.5M|}
_ZN3scn2v24impl12is_range_eofIPKcS4_EEbT_T0_:
   74|  14.5M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  14.5M|    {
   84|  14.5M|        return begin == end;
   85|  14.5M|    }
   86|  14.5M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|   831k|{
   97|   831k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|   831k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 18, False: 831k]
  |  |  ------------------
  ------------------
   98|     18|        return eof_error::eof;
   99|     18|    }
  100|   831k|    return eof_error::good;
  101|   831k|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|   831k|{
   91|   831k|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|   831k|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|   831k|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|   831k|    {
   84|   831k|        return begin == end;
   85|   831k|    }
   86|   831k|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  13.2M|{
   97|  13.2M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  13.2M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 31.6k, False: 13.2M]
  |  |  ------------------
  ------------------
   98|  31.6k|        return eof_error::eof;
   99|  31.6k|    }
  100|  13.2M|    return eof_error::good;
  101|  13.2M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  13.2M|{
   91|  13.2M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  13.2M|}
_ZN3scn2v24impl12is_range_eofIPKwS4_EEbT_T0_:
   74|  13.2M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  13.2M|    {
   84|  13.2M|        return begin == end;
   85|  13.2M|    }
   86|  13.2M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|  1.37M|{
   97|  1.37M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  1.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 22, False: 1.37M]
  |  |  ------------------
  ------------------
   98|     22|        return eof_error::eof;
   99|     22|    }
  100|  1.37M|    return eof_error::good;
  101|  1.37M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|  1.37M|{
   91|  1.37M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  1.37M|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|  1.37M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  1.37M|    {
   84|  1.37M|        return begin == end;
   85|  1.37M|    }
   86|  1.37M|}

_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  127|  3.55M|{
  128|  3.55M|    return find_classic_impl(
  129|  3.55M|        source, [](char ch) { return !is_ascii_space(ch); },
  130|  3.55M|        [](char32_t cp) { return !is_cp_space(cp); });
  131|  3.55M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
   30|  3.58M|{
   31|  3.58M|    static_assert(sizeof(*source.data()) == 1);
   32|  3.58M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  242|  3.58M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.58M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   33|      0|    uint64_t word{};
   34|  3.58M|    std::memcpy(&word, source.data(), source.size());
   35|       |
   36|  3.58M|    return has_byte_greater(word, 127) != 0;
   37|  3.58M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_3ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_4EEPKcS8_T_T0_:
   43|  3.55M|{
   44|  3.55M|    auto it = source.begin();
   45|       |
   46|  3.59M|    while (it != source.end()) {
  ------------------
  |  Branch (46:12): [True: 3.58M, False: 5.22k]
  ------------------
   47|  3.58M|        auto sv =
   48|  3.58M|            detail::make_string_view_from_iterators<char>(it, source.end())
   49|  3.58M|                .substr(0, 8);
   50|       |
   51|  3.58M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (51:13): [True: 3.51M, False: 69.1k]
  ------------------
   52|  3.51M|            auto tmp_it = ranges::find_if(sv, cu_cb);
   53|  3.51M|            it = detail::make_string_view_iterator(source, tmp_it);
   54|  3.51M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (54:17): [True: 3.48M, False: 36.4k]
  ------------------
   55|  3.48M|                break;
   56|  3.48M|            }
   57|  36.4k|            continue;
   58|  3.51M|        }
   59|       |
   60|   103k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (60:28): [True: 100k, False: 3.12k]
  ------------------
   61|   100k|            auto tmp =
   62|   100k|                detail::make_string_view_from_iterators<char>(it, source.end());
   63|   100k|            auto res = get_next_code_point(tmp);
   64|   100k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (64:17): [True: 65.9k, False: 34.4k]
  ------------------
   65|  65.9k|                return it;
   66|  65.9k|            }
   67|  34.4k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
   68|  34.4k|            it = detail::make_string_view_iterator(source, res.iterator);
   69|  34.4k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  243|  34.4k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  34.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   70|  34.4k|        }
   71|  69.1k|    }
   72|       |
   73|  3.48M|    return detail::make_string_view_iterator(source, it);
   74|  3.55M|}
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_3clEc:
  129|  6.75M|        source, [](char ch) { return !is_ascii_space(ch); },
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_4clEDi:
  130|   100k|        [](char32_t cp) { return !is_cp_space(cp); });

_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  3.31M|{
  300|  3.31M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  3.31M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  3.31M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  3.31M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  ------------------
  |  |  248|  3.31M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  304|  3.31M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  3.31M|        return ranges::next(ranges::begin(range),
  306|  3.31M|                            ranges::distance(buf.view().begin(), it));
  307|  3.31M|    }
  308|  3.31M|    else {
  309|  3.31M|        auto it = ranges::begin(range);
  310|       |
  311|  3.31M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  312|  3.31M|            auto seg = get_contiguous_beginning(range);
  313|  3.31M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  3.31M|                seg_it != seg.end()) {
  315|  3.31M|                return ranges_polyfill::batch_next(
  316|  3.31M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  3.31M|            }
  318|  3.31M|            ranges_polyfill::batch_next(it, seg.size());
  319|  3.31M|        }
  320|       |
  321|  3.31M|        return read_while_code_point(
  322|  3.31M|            SCN_FWD(range),
  323|  3.31M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  3.31M|    }
  325|  3.31M|}
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  3.31M|{
  459|  3.31M|    auto it = read_code_unit(range);
  460|  3.31M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  3.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.31M]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  6.50M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 6.50M, False: 2.98M]
  ------------------
  465|  6.50M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 324k, False: 6.17M]
  ------------------
  466|   324k|            return *it;
  467|   324k|        }
  468|  6.50M|    }
  469|       |
  470|  2.98M|    return unexpected(parse_error::error);
  471|  3.31M|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEOSH_OSJ_:
  481|   693k|{
  482|   693k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 613k, False: 80.0k]
  ------------------
  483|   613k|        return ranges::begin(range);
  484|   613k|    }
  485|  80.0k|    return *result;
  486|   693k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  7.22M|{
  418|  7.22M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  7.22M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  7.22M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  7.22M|        if (ranges::size(range) < str.size()) {
  ------------------
  |  Branch (422:13): [True: 54.4k, False: 7.16M]
  ------------------
  423|  54.4k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  54.4k|        }
  425|  7.16M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  ------------------
  |  Branch (425:13): [True: 7.11M, False: 50.4k]
  ------------------
  426|  7.11M|            return unexpected(parse_error::error);
  427|  7.11M|        }
  428|  50.4k|        return ranges::next(ranges::begin(range), str.size());
  429|  7.16M|    }
  430|  7.22M|    else {
  431|  7.22M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  7.22M|            if (ch < 'A' || ch > 'Z') {
  433|  7.22M|                return ch;
  434|  7.22M|            }
  435|  7.22M|            return static_cast<char_type>(ch +
  436|  7.22M|                                          static_cast<char_type>('a' - 'A'));
  437|  7.22M|        };
  438|       |
  439|  7.22M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  440|  7.22M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  7.22M|        if (SCN_UNLIKELY(!std::equal(
  443|  7.22M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  7.22M|                    return ascii_tolower(a) ==
  445|  7.22M|                           static_cast<detail::char_t<Range>>(b);
  446|  7.22M|                }))) {
  447|  7.22M|            return unexpected(parse_error::error);
  448|  7.22M|        }
  449|       |
  450|  7.22M|        return it;
  451|  7.22M|    }
  452|  7.22M|}
_ZN3scn2v24impl17fast_streq_nocaseEPKcS3_m:
  406|  7.16M|{
  407|  7.16M|    unsigned char running_diff{0};
  408|  21.5M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (408:24): [True: 14.3M, False: 7.16M]
  ------------------
  409|  14.3M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
  410|  14.3M|    }
  411|  7.16M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (411:12): [True: 47.2k, False: 7.11M]
  |  Branch (411:33): [True: 3.24k, False: 7.11M]
  ------------------
  412|  7.16M|}
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NDTcl4implISE_EEE4typeE:
  331|  2.32M|{
  332|  2.32M|    auto it = read_code_unit(range);
  333|  2.32M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  2.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.32k, False: 2.31M]
  |  |  ------------------
  ------------------
  334|  1.32k|        return unexpected(make_eof_parse_error(it.error()));
  335|  1.32k|    }
  336|       |
  337|  2.31M|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|  2.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.35M, False: 962k]
  |  |  ------------------
  ------------------
  338|  2.31M|                     static_cast<detail::char_t<Range>>(ch))) {
  339|  1.35M|        return unexpected(parse_error::error);
  340|  1.35M|    }
  341|       |
  342|   962k|    return *it;
  343|  2.31M|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|   237k|{
  300|   237k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   237k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   237k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   237k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   237k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   237k|        return ranges::next(ranges::begin(range),
  306|   237k|                            ranges::distance(buf.view().begin(), it));
  307|   237k|    }
  308|   237k|    else {
  309|   237k|        auto it = ranges::begin(range);
  310|       |
  311|   237k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   237k|            auto seg = get_contiguous_beginning(range);
  313|   237k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   237k|                seg_it != seg.end()) {
  ------------------
  |  Branch (314:17): [True: 237k, False: 0]
  ------------------
  315|   237k|                return ranges_polyfill::batch_next(
  316|   237k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   237k|            }
  318|      0|            ranges_polyfill::batch_next(it, seg.size());
  319|      0|        }
  320|       |
  321|      0|        return read_while_code_point(
  322|      0|            SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|      0|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   237k|    }
  325|   237k|}
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|   237k|{
  459|   237k|    auto it = read_code_unit(range);
  460|   237k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 237k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|   474k|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 474k, False: 211k]
  ------------------
  465|   474k|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 26.3k, False: 448k]
  ------------------
  466|  26.3k|            return *it;
  467|  26.3k|        }
  468|   474k|    }
  469|       |
  470|   211k|    return unexpected(parse_error::error);
  471|   237k|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEOSK_OSM_:
  481|   118k|{
  482|   118k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 118k, False: 0]
  ------------------
  483|   118k|        return ranges::begin(range);
  484|   118k|    }
  485|      0|    return *result;
  486|   118k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|   395k|{
  418|   395k|    using char_type = detail::char_t<Range>;
  419|       |
  420|   395k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|   395k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|   395k|        if (ranges::size(range) < str.size()) {
  423|   395k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|   395k|        }
  425|   395k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|   395k|            return unexpected(parse_error::error);
  427|   395k|        }
  428|   395k|        return ranges::next(ranges::begin(range), str.size());
  429|   395k|    }
  430|   395k|    else {
  431|   395k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   395k|            if (ch < 'A' || ch > 'Z') {
  433|   395k|                return ch;
  434|   395k|            }
  435|   395k|            return static_cast<char_type>(ch +
  436|   395k|                                          static_cast<char_type>('a' - 'A'));
  437|   395k|        };
  438|       |
  439|   395k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|   395k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   395k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   395k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   395k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 192, False: 395k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    192|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    192|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    192|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    192|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    192|    }                                                  \
  |  |  |  |   70|   395k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   395k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|   395k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|   395k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|   395k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 395k, False: 0]
  |  |  ------------------
  ------------------
  443|   395k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|   395k|                    return ascii_tolower(a) ==
  445|   395k|                           static_cast<detail::char_t<Range>>(b);
  446|   395k|                }))) {
  447|   395k|            return unexpected(parse_error::error);
  448|   395k|        }
  449|       |
  450|      0|        return it;
  451|   395k|    }
  452|   395k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlcE_clEc:
  431|   395k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   395k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 39.5k, False: 356k]
  |  Branch (432:29): [True: 0, False: 356k]
  ------------------
  433|  39.5k|                return ch;
  434|  39.5k|            }
  435|   356k|            return static_cast<char_type>(ch +
  436|   356k|                                          static_cast<char_type>('a' - 'A'));
  437|   395k|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NDTcl4implISH_EEE4typeE:
  331|   118k|{
  332|   118k|    auto it = read_code_unit(range);
  333|   118k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 118k]
  |  |  ------------------
  ------------------
  334|      0|        return unexpected(make_eof_parse_error(it.error()));
  335|      0|    }
  336|       |
  337|   118k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 118k, False: 0]
  |  |  ------------------
  ------------------
  338|   118k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   118k|        return unexpected(parse_error::error);
  340|   118k|    }
  341|       |
  342|      0|    return *it;
  343|   118k|}
_ZN3scn2v24impl21read_while1_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NS1_12function_refIFbNDTcl4implISH_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
  158|   197k|{
  159|   197k|    auto it = read_while_code_unit(range, pred);
  160|   197k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 158k, False: 39.5k]
  ------------------
  161|   158k|        return unexpected(parse_error::error);
  162|   158k|    }
  163|  39.5k|    return it;
  164|   197k|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|   197k|{
  139|   197k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   197k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   197k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|   197k|{
  131|   197k|    return ranges::find_if(range, pred);
  132|   197k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  3.01M|{
  300|  3.01M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  3.01M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  3.01M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  3.01M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|  3.01M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  3.01M|        return ranges::next(ranges::begin(range),
  306|  3.01M|                            ranges::distance(buf.view().begin(), it));
  307|  3.01M|    }
  308|  3.01M|    else {
  309|  3.01M|        auto it = ranges::begin(range);
  310|       |
  311|  3.01M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|  3.01M|            auto seg = get_contiguous_beginning(range);
  313|  3.01M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  3.01M|                seg_it != seg.end()) {
  315|  3.01M|                return ranges_polyfill::batch_next(
  316|  3.01M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  3.01M|            }
  318|  3.01M|            ranges_polyfill::batch_next(it, seg.size());
  319|  3.01M|        }
  320|       |
  321|  3.01M|        return read_while_code_point(
  322|  3.01M|            SCN_FWD(range),
  ------------------
  |  |  248|  3.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  3.01M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  3.01M|    }
  325|  3.01M|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  263|  3.01M|{
  264|  3.01M|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  3.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|  3.01M|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  230|  3.01M|{
  231|  3.01M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|  3.01M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|  3.01M|        return read_until_code_point_eager(SCN_FWD(range), pred);
  ------------------
  |  |  248|  3.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  234|  3.01M|    }
  235|  3.01M|    else {
  236|  3.01M|        auto it = ranges::begin(range);
  237|  3.01M|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|  3.01M|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|  3.01M|            seg_it != seg.end()) {
  241|  3.01M|            return ranges_polyfill::batch_next(
  242|  3.01M|                it, ranges::distance(seg.begin(), seg_it));
  243|  3.01M|        }
  244|       |
  245|  3.01M|        while (it != ranges::end(range)) {
  246|  3.01M|            const auto [iter, value] =
  247|  3.01M|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  3.01M|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  3.01M|            if (pred(cp)) {
  250|  3.01M|                return it;
  251|  3.01M|            }
  252|  3.01M|            it = iter;
  253|  3.01M|        }
  254|       |
  255|  3.01M|        return it;
  256|  3.01M|    }
  257|  3.01M|}
_ZN3scn2v24impl27read_until_code_point_eagerIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  177|  3.01M|{
  178|  3.01M|    static_assert(ranges::contiguous_range<Range> &&
  179|  3.01M|                  ranges::sized_range<Range>);
  180|       |
  181|  3.01M|    std::array<char32_t, 16> cp_buf{};
  182|  3.01M|    std::array<uint8_t, 16> idx_buf{};
  183|  3.01M|    auto it = ranges::begin(range);
  184|  3.02M|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 3.02M, False: 6.54k]
  ------------------
  185|  3.02M|        auto chunk_begin = it;
  186|  3.02M|        size_t code_point_count = 0;
  187|  3.02M|        uint8_t code_unit_idx = 0;
  188|  47.7M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 45.1M, False: 2.63M]
  |  Branch (188:52): [True: 44.7M, False: 388k]
  ------------------
  189|  44.7M|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 44.7M, False: 0]
  ------------------
  190|  44.7M|                idx_buf[code_point_count] = code_unit_idx;
  191|  44.7M|                ++code_point_count;
  192|  44.7M|            }
  193|  44.7M|            ++it;
  194|  44.7M|            ++code_unit_idx;
  195|  44.7M|        }
  196|       |
  197|  3.02M|        auto input = detail::make_string_view_from_pointers(
  198|  3.02M|            detail::to_address(chunk_begin), detail::to_address(it));
  199|  3.02M|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|  3.02M|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|  3.02M|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|  3.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.02M]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|  5.91M|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 5.89M, False: 14.6k]
  ------------------
  217|  5.89M|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 3.00M, False: 2.89M]
  ------------------
  218|  3.00M|                return chunk_begin + idx_buf[i];
  219|  3.00M|            }
  220|  5.89M|        }
  221|  3.02M|    }
  222|       |
  223|  6.54k|    return it;
  224|  3.01M|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_ENKUlDiE_clEDi:
  323|  5.89M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  3.00M|{
  459|  3.00M|    auto it = read_code_unit(range);
  460|  3.00M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  3.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.00M]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  5.90M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 5.90M, False: 2.76M]
  ------------------
  465|  5.90M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 246k, False: 5.65M]
  ------------------
  466|   246k|            return *it;
  467|   246k|        }
  468|  5.90M|    }
  469|       |
  470|  2.76M|    return unexpected(parse_error::error);
  471|  3.00M|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEOSH_OSJ_:
  481|   654k|{
  482|   654k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 587k, False: 66.6k]
  ------------------
  483|   587k|        return ranges::begin(range);
  484|   587k|    }
  485|  66.6k|    return *result;
  486|   654k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  6.52M|{
  418|  6.52M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  6.52M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  6.52M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  6.52M|        if (ranges::size(range) < str.size()) {
  423|  6.52M|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  6.52M|        }
  425|  6.52M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  6.52M|            return unexpected(parse_error::error);
  427|  6.52M|        }
  428|  6.52M|        return ranges::next(ranges::begin(range), str.size());
  429|  6.52M|    }
  430|  6.52M|    else {
  431|  6.52M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  6.52M|            if (ch < 'A' || ch > 'Z') {
  433|  6.52M|                return ch;
  434|  6.52M|            }
  435|  6.52M|            return static_cast<char_type>(ch +
  436|  6.52M|                                          static_cast<char_type>('a' - 'A'));
  437|  6.52M|        };
  438|       |
  439|  6.52M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  6.52M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.52M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.52M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.52M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 111k, False: 6.40M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|   111k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|   111k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   111k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|   111k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|   111k|    }                                                  \
  |  |  |  |   70|  6.52M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.40M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  6.40M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  6.40M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  6.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.36M, False: 41.1k]
  |  |  ------------------
  ------------------
  443|  6.40M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  6.40M|                    return ascii_tolower(a) ==
  445|  6.40M|                           static_cast<detail::char_t<Range>>(b);
  446|  6.40M|                }))) {
  447|  6.36M|            return unexpected(parse_error::error);
  448|  6.36M|        }
  449|       |
  450|  41.1k|        return it;
  451|  6.40M|    }
  452|  6.52M|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
  431|  9.05M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  9.05M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 8.63M, False: 417k]
  |  Branch (432:29): [True: 388k, False: 29.7k]
  ------------------
  433|  9.02M|                return ch;
  434|  9.02M|            }
  435|  29.7k|            return static_cast<char_type>(ch +
  436|  29.7k|                                          static_cast<char_type>('a' - 'A'));
  437|  9.05M|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NDTcl4implISE_EEE4typeE:
  331|  2.09M|{
  332|  2.09M|    auto it = read_code_unit(range);
  333|  2.09M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  2.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.59k, False: 2.09M]
  |  |  ------------------
  ------------------
  334|  1.59k|        return unexpected(make_eof_parse_error(it.error()));
  335|  1.59k|    }
  336|       |
  337|  2.09M|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|  2.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.26M, False: 829k]
  |  |  ------------------
  ------------------
  338|  2.09M|                     static_cast<detail::char_t<Range>>(ch))) {
  339|  1.26M|        return unexpected(parse_error::error);
  340|  1.26M|    }
  341|       |
  342|   829k|    return *it;
  343|  2.09M|}
_ZN3scn2v24impl27read_until_code_point_eagerIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_NS1_12function_refIFbDiESF_EE:
  177|   387k|{
  178|   387k|    static_assert(ranges::contiguous_range<Range> &&
  179|   387k|                  ranges::sized_range<Range>);
  180|       |
  181|   387k|    std::array<char32_t, 16> cp_buf{};
  182|   387k|    std::array<uint8_t, 16> idx_buf{};
  183|   387k|    auto it = ranges::begin(range);
  184|   387k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 387k, False: 0]
  ------------------
  185|   387k|        auto chunk_begin = it;
  186|   387k|        size_t code_point_count = 0;
  187|   387k|        uint8_t code_unit_idx = 0;
  188|   774k|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 774k, False: 0]
  |  Branch (188:52): [True: 387k, False: 387k]
  ------------------
  189|   387k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 387k, False: 0]
  ------------------
  190|   387k|                idx_buf[code_point_count] = code_unit_idx;
  191|   387k|                ++code_point_count;
  192|   387k|            }
  193|   387k|            ++it;
  194|   387k|            ++code_unit_idx;
  195|   387k|        }
  196|       |
  197|   387k|        auto input = detail::make_string_view_from_pointers(
  198|   387k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|   387k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|   387k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|   387k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|   387k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 387k]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|   387k|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 387k, False: 0]
  ------------------
  217|   387k|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 387k, False: 0]
  ------------------
  218|   387k|                return chunk_begin + idx_buf[i];
  219|   387k|            }
  220|   387k|        }
  221|   387k|    }
  222|       |
  223|      0|    return it;
  224|   387k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|   387k|{
  300|   387k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   387k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   387k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   387k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   387k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   387k|        return ranges::next(ranges::begin(range),
  306|   387k|                            ranges::distance(buf.view().begin(), it));
  307|   387k|    }
  308|   387k|    else {
  309|   387k|        auto it = ranges::begin(range);
  310|       |
  311|   387k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   387k|            auto seg = get_contiguous_beginning(range);
  313|   387k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   387k|                seg_it != seg.end()) {
  315|   387k|                return ranges_polyfill::batch_next(
  316|   387k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   387k|            }
  318|   387k|            ranges_polyfill::batch_next(it, seg.size());
  319|   387k|        }
  320|       |
  321|   387k|        return read_while_code_point(
  322|   387k|            SCN_FWD(range),
  ------------------
  |  |  248|   387k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   387k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   387k|    }
  325|   387k|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  263|   387k|{
  264|   387k|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   387k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|   387k|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  230|   387k|{
  231|   387k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|   387k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|   387k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|   387k|    }
  235|   387k|    else {
  236|   387k|        auto it = ranges::begin(range);
  237|   387k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|   387k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|   387k|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 387k, False: 0]
  ------------------
  241|   387k|            return ranges_polyfill::batch_next(
  242|   387k|                it, ranges::distance(seg.begin(), seg_it));
  243|   387k|        }
  244|       |
  245|      0|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 0, False: 0]
  ------------------
  246|      0|            const auto [iter, value] =
  247|      0|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|      0|            const auto cp = decode_code_point_exhaustive(value.view());
  249|      0|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 0, False: 0]
  ------------------
  250|      0|                return it;
  251|      0|            }
  252|      0|            it = iter;
  253|      0|        }
  254|       |
  255|      0|        return it;
  256|      0|    }
  257|   387k|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_ENKUlDiE_clEDi:
  323|   387k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|   387k|{
  459|   387k|    auto it = read_code_unit(range);
  460|   387k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   387k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 387k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|   774k|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 774k, False: 348k]
  ------------------
  465|   774k|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 38.6k, False: 735k]
  ------------------
  466|  38.6k|            return *it;
  467|  38.6k|        }
  468|   774k|    }
  469|       |
  470|   348k|    return unexpected(parse_error::error);
  471|   387k|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEOSK_OSM_:
  481|   178k|{
  482|   178k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 178k, False: 0]
  ------------------
  483|   178k|        return ranges::begin(range);
  484|   178k|    }
  485|      0|    return *result;
  486|   178k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|   665k|{
  418|   665k|    using char_type = detail::char_t<Range>;
  419|       |
  420|   665k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|   665k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|   665k|        if (ranges::size(range) < str.size()) {
  423|   665k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|   665k|        }
  425|   665k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|   665k|            return unexpected(parse_error::error);
  427|   665k|        }
  428|   665k|        return ranges::next(ranges::begin(range), str.size());
  429|   665k|    }
  430|   665k|    else {
  431|   665k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   665k|            if (ch < 'A' || ch > 'Z') {
  433|   665k|                return ch;
  434|   665k|            }
  435|   665k|            return static_cast<char_type>(ch +
  436|   665k|                                          static_cast<char_type>('a' - 'A'));
  437|   665k|        };
  438|       |
  439|   665k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|   665k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   665k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   665k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   665k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 182, False: 665k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    182|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    182|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    182|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    182|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    182|    }                                                  \
  |  |  |  |   70|   665k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   665k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|   665k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|   665k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|   665k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 665k, False: 0]
  |  |  ------------------
  ------------------
  443|   665k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|   665k|                    return ascii_tolower(a) ==
  445|   665k|                           static_cast<detail::char_t<Range>>(b);
  446|   665k|                }))) {
  447|   665k|            return unexpected(parse_error::error);
  448|   665k|        }
  449|       |
  450|      0|        return it;
  451|   665k|    }
  452|   665k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlwE_clEw:
  431|   665k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   665k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 38.6k, False: 626k]
  |  Branch (432:29): [True: 0, False: 626k]
  ------------------
  433|  38.6k|                return ch;
  434|  38.6k|            }
  435|   626k|            return static_cast<char_type>(ch +
  436|   626k|                                          static_cast<char_type>('a' - 'A'));
  437|   665k|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NDTcl4implISH_EEE4typeE:
  331|   209k|{
  332|   209k|    auto it = read_code_unit(range);
  333|   209k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 209k]
  |  |  ------------------
  ------------------
  334|      0|        return unexpected(make_eof_parse_error(it.error()));
  335|      0|    }
  336|       |
  337|   209k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 209k, False: 0]
  |  |  ------------------
  ------------------
  338|   209k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   209k|        return unexpected(parse_error::error);
  340|   209k|    }
  341|       |
  342|      0|    return *it;
  343|   209k|}
_ZN3scn2v24impl21read_while1_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NS1_12function_refIFbNDTcl4implISH_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
  158|   317k|{
  159|   317k|    auto it = read_while_code_unit(range, pred);
  160|   317k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 270k, False: 46.4k]
  ------------------
  161|   270k|        return unexpected(parse_error::error);
  162|   270k|    }
  163|  46.4k|    return it;
  164|   317k|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|   317k|{
  139|   317k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   317k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   317k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|   317k|{
  131|   317k|    return ranges::find_if(range, pred);
  132|   317k|}

_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  5.63M|{
   36|  5.63M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  5.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.32k, False: 5.63M]
  |  |  ------------------
  ------------------
   37|  1.32k|        return unexpected(e);
   38|  1.32k|    }
   39|       |
   40|  5.63M|    return ranges::next(ranges::begin(range));
   41|  5.63M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|   356k|{
   36|   356k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   356k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 356k]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|   356k|    return ranges::next(ranges::begin(range));
   41|   356k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|   395k|{
   48|   395k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|   395k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   395k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|   395k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|   395k|        const auto sz = ranges::ssize(range);
   52|   395k|        if (sz < count) {
   53|   395k|            return unexpected(eof_error::eof);
   54|   395k|        }
   55|       |
   56|   395k|        return ranges::next(ranges::begin(range), count);
   57|   395k|    }
   58|   395k|    else {
   59|   395k|        auto it = ranges::begin(range);
   60|   395k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 369k, False: 26.5k]
  ------------------
   61|   369k|            return ranges_polyfill::batch_next(it, count);
   62|   369k|        }
   63|       |
   64|  79.4k|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 53.0k, False: 26.3k]
  ------------------
   65|  53.0k|             ++i, (void)++it) {
   66|  53.0k|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 192, False: 52.8k]
  ------------------
   67|    192|                return unexpected(eof_error::eof);
   68|    192|            }
   69|  53.0k|        }
   70|       |
   71|  26.3k|        return it;
   72|  26.5k|    }
   73|   395k|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  5.10M|{
   36|  5.10M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  5.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.59k, False: 5.10M]
  |  |  ------------------
  ------------------
   37|  1.59k|        return unexpected(e);
   38|  1.59k|    }
   39|       |
   40|  5.10M|    return ranges::next(ranges::begin(range));
   41|  5.10M|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__19enable_ifIX5rangeISE_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeE:
   47|  6.52M|{
   48|  6.52M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  6.52M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.52M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  6.52M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  6.52M|        const auto sz = ranges::ssize(range);
   52|  6.52M|        if (sz < count) {
  ------------------
  |  Branch (52:13): [True: 111k, False: 6.40M]
  ------------------
   53|   111k|            return unexpected(eof_error::eof);
   54|   111k|        }
   55|       |
   56|  6.40M|        return ranges::next(ranges::begin(range), count);
   57|  6.52M|    }
   58|  6.52M|    else {
   59|  6.52M|        auto it = ranges::begin(range);
   60|  6.52M|        if (guaranteed_minimum_size(range) >= count) {
   61|  6.52M|            return ranges_polyfill::batch_next(it, count);
   62|  6.52M|        }
   63|       |
   64|  6.52M|        for (ranges::range_difference_t<Range> i = 0; i < count;
   65|  6.52M|             ++i, (void)++it) {
   66|  6.52M|            if (it == ranges::end(range)) {
   67|  6.52M|                return unexpected(eof_error::eof);
   68|  6.52M|            }
   69|  6.52M|        }
   70|       |
   71|  6.52M|        return it;
   72|  6.52M|    }
   73|  6.52M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|   596k|{
   36|   596k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   596k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 596k]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|   596k|    return ranges::next(ranges::begin(range));
   41|   596k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|   665k|{
   48|   665k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|   665k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   665k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|   665k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|   665k|        const auto sz = ranges::ssize(range);
   52|   665k|        if (sz < count) {
   53|   665k|            return unexpected(eof_error::eof);
   54|   665k|        }
   55|       |
   56|   665k|        return ranges::next(ranges::begin(range), count);
   57|   665k|    }
   58|   665k|    else {
   59|   665k|        auto it = ranges::begin(range);
   60|   665k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 626k, False: 38.8k]
  ------------------
   61|   626k|            return ranges_polyfill::batch_next(it, count);
   62|   626k|        }
   63|       |
   64|   116k|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 77.6k, False: 38.6k]
  ------------------
   65|  77.6k|             ++i, (void)++it) {
   66|  77.6k|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 182, False: 77.5k]
  ------------------
   67|    182|                return unexpected(eof_error::eof);
   68|    182|            }
   69|  77.6k|        }
   70|       |
   71|  38.6k|        return it;
   72|  38.8k|    }
   73|   665k|}

_ZN3scn2v26detail10locale_refC2INSt3__16localeEEERKT_:
   32|  3.40M|{
   33|  3.40M|    static_assert(std::is_same_v<Locale, std::locale>);
   34|  3.40M|}
_ZNK3scn2v26detail10locale_ref3getINSt3__16localeEEET_v:
   38|  1.01M|{
   39|  1.01M|    static_assert(std::is_same_v<Locale, std::locale>);
   40|  1.01M|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (40:12): [True: 506k, False: 506k]
  ------------------
   41|  1.01M|                    : std::locale{};
   42|  1.01M|}

_ZN3scn2v24impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
  111|   516k|    {
  112|   516k|        auto stdloc = loc.get<std::locale>();
  113|   516k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|   516k|        grouping = numpunct.grouping();
  115|   516k|        thousands_sep =
  116|   516k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 516k]
  ------------------
  117|   516k|        decimal_point = numpunct.decimal_point();
  118|   516k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
   48|   516k|{
   49|   516k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 516k, False: 0]
  ------------------
   50|   516k|        return std::use_facet<Facet>(stdloc);
   51|   516k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|   516k|}
_ZN3scn2v24impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
  111|   496k|    {
  112|   496k|        auto stdloc = loc.get<std::locale>();
  113|   496k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|   496k|        grouping = numpunct.grouping();
  115|   496k|        thousands_sep =
  116|   496k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 496k]
  ------------------
  117|   496k|        decimal_point = numpunct.decimal_point();
  118|   496k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
   48|   496k|{
   49|   496k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 496k, False: 0]
  ------------------
   50|   496k|        return std::use_facet<Facet>(stdloc);
   51|   496k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|   496k|}

_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  3.31M|{
   46|  3.31M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 3.31M, False: 0]
  ------------------
   47|  3.31M|        auto it = read_while_classic_space(range);
   48|  3.31M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  3.31M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  3.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.22k, False: 3.31M]
  |  |  ------------------
  ------------------
   50|  5.22k|            return unexpected(e);
   51|  5.22k|        }
   52|       |
   53|  3.31M|        return it;
   54|  3.31M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  3.31M|}
_ZNK3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
  125|  3.57M|    {
  126|  3.57M|        return true;
  127|  3.57M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|   237k|{
   46|   237k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 237k, False: 0]
  ------------------
   47|   237k|        auto it = read_while_classic_space(range);
   48|   237k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   237k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 237k]
  |  |  ------------------
  ------------------
   50|      0|            return unexpected(e);
   51|      0|        }
   52|       |
   53|   237k|        return it;
   54|   237k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   237k|}
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
  130|  2.59M|    {
  131|  2.59M|        reader_error_handler eh{};
  132|  2.59M|        get_derived().check_specs_impl(specs, eh);
  133|  2.59M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  2.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.59M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  2.59M|        return {};
  137|  2.59M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
  141|  2.59M|    {
  142|  2.59M|        return static_cast<Derived&>(*this);
  143|  2.59M|    }
_ZNK3scn2v24impl20reader_error_handlercvbEv:
   34|  5.09M|    {
   35|  5.09M|        return m_msg == nullptr;
   36|  5.09M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  3.01M|{
   46|  3.01M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 3.01M, False: 0]
  ------------------
   47|  3.01M|        auto it = read_while_classic_space(range);
   48|  3.01M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  3.01M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  3.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.54k, False: 3.00M]
  |  |  ------------------
  ------------------
   50|  6.54k|            return unexpected(e);
   51|  6.54k|        }
   52|       |
   53|  3.00M|        return it;
   54|  3.01M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  3.01M|}
_ZNK3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
  125|  3.42M|    {
  126|  3.42M|        return true;
  127|  3.42M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
  130|  2.50M|    {
  131|  2.50M|        reader_error_handler eh{};
  132|  2.50M|        get_derived().check_specs_impl(specs, eh);
  133|  2.50M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  2.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.50M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  2.50M|        return {};
  137|  2.50M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
  141|  2.50M|    {
  142|  2.50M|        return static_cast<Derived&>(*this);
  143|  2.50M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|   387k|{
   46|   387k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 387k, False: 0]
  ------------------
   47|   387k|        auto it = read_while_classic_space(range);
   48|   387k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   387k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   387k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 387k]
  |  |  ------------------
  ------------------
   50|      0|            return unexpected(e);
   51|      0|        }
   52|       |
   53|   387k|        return it;
   54|   387k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   387k|}

_ZN3scn2v24impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   442k|{
  218|   442k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   442k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   442k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   442k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   442k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   442k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   442k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   442k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   442k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   442k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   442k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   442k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   442k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 16.0k, False: 426k]
  ------------------
  224|  16.0k|        SCN_UNLIKELY_ATTR
  225|  16.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  16.0k|                                     "Invalid integer value");
  227|  16.0k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   426k|    auto start = source.data();
  231|   426k|    const auto end = source.data() + source.size();
  232|   426k|    {
  233|   883k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 875k, False: 8.60k]
  ------------------
  234|   875k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 417k, False: 457k]
  ------------------
  235|   417k|                break;
  236|   417k|            }
  237|   875k|        }
  238|   426k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   844k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 64.2k, False: 362k]
  |  |  |  Branch (153:45): [True: 8.60k, False: 417k]
  |  |  |  Branch (153:45): [True: 55.6k, False: 362k]
  |  |  ------------------
  ------------------
  239|  64.2k|            value = 0;
  240|  64.2k|            return ranges::next(source.begin(),
  241|  64.2k|                                ranges::distance(source.data(), start));
  242|  64.2k|        }
  243|   426k|    }
  244|       |
  245|   362k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   362k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 255k, False: 106k]
  ------------------
  247|   255k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   255k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   255k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   255k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   255k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.83k, False: 249k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.83k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.83k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.83k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.83k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.83k|    }                                                  \
  |  |  |  |   70|   255k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   249k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   249k|                             detail::make_string_view_from_pointers(start, end),
  249|   249k|                             value, sign == sign_type::minus_sign));
  250|   249k|            return ranges::next(source.begin(),
  251|   249k|                                ranges::distance(source.data(), ptr));
  252|   255k|        }
  253|   362k|    }
  254|       |
  255|   106k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   106k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   106k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   106k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.04k, False: 101k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.04k|    }                                                  \
  |  |  |  |   70|   106k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   101k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   101k|                     base, sign == sign_type::minus_sign));
  258|   101k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   106k|}
_ZN3scn2v24impl19parse_integer_valueIwaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   401k|{
  218|   401k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   401k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   401k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   401k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   401k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   401k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   401k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   401k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   401k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   401k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   401k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   401k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   401k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 39.6k, False: 362k]
  ------------------
  224|  39.6k|        SCN_UNLIKELY_ATTR
  225|  39.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  39.6k|                                     "Invalid integer value");
  227|  39.6k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   362k|    auto start = source.data();
  231|   362k|    const auto end = source.data() + source.size();
  232|   362k|    {
  233|   759k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 751k, False: 7.69k]
  ------------------
  234|   751k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 354k, False: 397k]
  ------------------
  235|   354k|                break;
  236|   354k|            }
  237|   751k|        }
  238|   362k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   716k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 55.5k, False: 306k]
  |  |  |  Branch (153:45): [True: 7.69k, False: 354k]
  |  |  |  Branch (153:45): [True: 47.8k, False: 306k]
  |  |  ------------------
  ------------------
  239|  55.5k|            value = 0;
  240|  55.5k|            return ranges::next(source.begin(),
  241|  55.5k|                                ranges::distance(source.data(), start));
  242|  55.5k|        }
  243|   362k|    }
  244|       |
  245|   306k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   306k|        if (base == 10) {
  247|   306k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   306k|                             detail::make_string_view_from_pointers(start, end),
  249|   306k|                             value, sign == sign_type::minus_sign));
  250|   306k|            return ranges::next(source.begin(),
  251|   306k|                                ranges::distance(source.data(), ptr));
  252|   306k|        }
  253|   306k|    }
  254|       |
  255|   306k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   306k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   306k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   306k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   306k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 15.9k, False: 290k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  15.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  15.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  15.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  15.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  15.9k|    }                                                  \
  |  |  |  |   70|   306k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   290k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   290k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   290k|                     base, sign == sign_type::minus_sign));
  258|   290k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   306k|}
_ZN3scn2v24impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   556k|{
  218|   556k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   556k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   556k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   556k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   556k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   556k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   556k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   556k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   556k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   556k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   556k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   556k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   556k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 19.6k, False: 536k]
  ------------------
  224|  19.6k|        SCN_UNLIKELY_ATTR
  225|  19.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  19.6k|                                     "Invalid integer value");
  227|  19.6k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   536k|    auto start = source.data();
  231|   536k|    const auto end = source.data() + source.size();
  232|   536k|    {
  233|  1.05M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.04M, False: 10.1k]
  ------------------
  234|  1.04M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 526k, False: 515k]
  ------------------
  235|   526k|                break;
  236|   526k|            }
  237|  1.04M|        }
  238|   536k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 81.0k, False: 455k]
  |  |  |  Branch (153:45): [True: 10.1k, False: 526k]
  |  |  |  Branch (153:45): [True: 70.9k, False: 455k]
  |  |  ------------------
  ------------------
  239|  81.0k|            value = 0;
  240|  81.0k|            return ranges::next(source.begin(),
  241|  81.0k|                                ranges::distance(source.data(), start));
  242|  81.0k|        }
  243|   536k|    }
  244|       |
  245|   455k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   455k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 300k, False: 155k]
  ------------------
  247|   300k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   300k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   300k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   300k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   300k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.29k, False: 297k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.29k|    }                                                  \
  |  |  |  |   70|   300k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   297k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   297k|                             detail::make_string_view_from_pointers(start, end),
  249|   297k|                             value, sign == sign_type::minus_sign));
  250|   297k|            return ranges::next(source.begin(),
  251|   297k|                                ranges::distance(source.data(), ptr));
  252|   300k|        }
  253|   455k|    }
  254|       |
  255|   155k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   155k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   155k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   155k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.11k, False: 153k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.11k|    }                                                  \
  |  |  |  |   70|   155k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   153k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   153k|                     base, sign == sign_type::minus_sign));
  258|   153k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   155k|}
_ZN3scn2v24impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   494k|{
  218|   494k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   494k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   494k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   494k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   494k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   494k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   494k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   494k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   494k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   494k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   494k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   494k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   494k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 41.9k, False: 452k]
  ------------------
  224|  41.9k|        SCN_UNLIKELY_ATTR
  225|  41.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  41.9k|                                     "Invalid integer value");
  227|  41.9k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   452k|    auto start = source.data();
  231|   452k|    const auto end = source.data() + source.size();
  232|   452k|    {
  233|   900k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 891k, False: 8.91k]
  ------------------
  234|   891k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 443k, False: 447k]
  ------------------
  235|   443k|                break;
  236|   443k|            }
  237|   891k|        }
  238|   452k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   895k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 69.3k, False: 383k]
  |  |  |  Branch (153:45): [True: 8.91k, False: 443k]
  |  |  |  Branch (153:45): [True: 60.4k, False: 383k]
  |  |  ------------------
  ------------------
  239|  69.3k|            value = 0;
  240|  69.3k|            return ranges::next(source.begin(),
  241|  69.3k|                                ranges::distance(source.data(), start));
  242|  69.3k|        }
  243|   452k|    }
  244|       |
  245|   383k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   383k|        if (base == 10) {
  247|   383k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   383k|                             detail::make_string_view_from_pointers(start, end),
  249|   383k|                             value, sign == sign_type::minus_sign));
  250|   383k|            return ranges::next(source.begin(),
  251|   383k|                                ranges::distance(source.data(), ptr));
  252|   383k|        }
  253|   383k|    }
  254|       |
  255|   383k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   383k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   383k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   383k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   383k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.27k, False: 379k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.27k|    }                                                  \
  |  |  |  |   70|   383k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   379k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   379k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   379k|                     base, sign == sign_type::minus_sign));
  258|   379k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   383k|}
_ZN3scn2v24impl19parse_integer_valueIcxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   565k|{
  218|   565k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   565k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   565k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   565k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   565k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   565k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   565k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   565k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   565k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   565k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   565k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   565k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   565k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 21.0k, False: 544k]
  ------------------
  224|  21.0k|        SCN_UNLIKELY_ATTR
  225|  21.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  21.0k|                                     "Invalid integer value");
  227|  21.0k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   544k|    auto start = source.data();
  231|   544k|    const auto end = source.data() + source.size();
  232|   544k|    {
  233|  1.06M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.05M, False: 10.3k]
  ------------------
  234|  1.05M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 533k, False: 520k]
  ------------------
  235|   533k|                break;
  236|   533k|            }
  237|  1.05M|        }
  238|   544k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 83.5k, False: 460k]
  |  |  |  Branch (153:45): [True: 10.3k, False: 533k]
  |  |  |  Branch (153:45): [True: 73.1k, False: 460k]
  |  |  ------------------
  ------------------
  239|  83.5k|            value = 0;
  240|  83.5k|            return ranges::next(source.begin(),
  241|  83.5k|                                ranges::distance(source.data(), start));
  242|  83.5k|        }
  243|   544k|    }
  244|       |
  245|   460k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   460k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 302k, False: 157k]
  ------------------
  247|   302k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   302k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   302k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   302k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.26k, False: 301k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.26k|    }                                                  \
  |  |  |  |   70|   302k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   301k|                             detail::make_string_view_from_pointers(start, end),
  249|   301k|                             value, sign == sign_type::minus_sign));
  250|   301k|            return ranges::next(source.begin(),
  251|   301k|                                ranges::distance(source.data(), ptr));
  252|   302k|        }
  253|   460k|    }
  254|       |
  255|   157k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   157k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   157k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   157k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.11k, False: 156k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.11k|    }                                                  \
  |  |  |  |   70|   157k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   156k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   156k|                     base, sign == sign_type::minus_sign));
  258|   156k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   157k|}
_ZN3scn2v24impl19parse_integer_valueIwxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   499k|{
  218|   499k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   499k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   499k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   499k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   499k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   499k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   499k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   499k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   499k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   499k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   499k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   499k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   499k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 42.8k, False: 456k]
  ------------------
  224|  42.8k|        SCN_UNLIKELY_ATTR
  225|  42.8k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  42.8k|                                     "Invalid integer value");
  227|  42.8k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   456k|    auto start = source.data();
  231|   456k|    const auto end = source.data() + source.size();
  232|   456k|    {
  233|   907k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 898k, False: 9.05k]
  ------------------
  234|   898k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 447k, False: 450k]
  ------------------
  235|   447k|                break;
  236|   447k|            }
  237|   898k|        }
  238|   456k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   904k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 70.4k, False: 386k]
  |  |  |  Branch (153:45): [True: 9.05k, False: 447k]
  |  |  |  Branch (153:45): [True: 61.3k, False: 386k]
  |  |  ------------------
  ------------------
  239|  70.4k|            value = 0;
  240|  70.4k|            return ranges::next(source.begin(),
  241|  70.4k|                                ranges::distance(source.data(), start));
  242|  70.4k|        }
  243|   456k|    }
  244|       |
  245|   386k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   386k|        if (base == 10) {
  247|   386k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   386k|                             detail::make_string_view_from_pointers(start, end),
  249|   386k|                             value, sign == sign_type::minus_sign));
  250|   386k|            return ranges::next(source.begin(),
  251|   386k|                                ranges::distance(source.data(), ptr));
  252|   386k|        }
  253|   386k|    }
  254|       |
  255|   386k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   386k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   386k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   386k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   386k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.84k, False: 384k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.84k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.84k|    }                                                  \
  |  |  |  |   70|   386k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   384k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   384k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   384k|                     base, sign == sign_type::minus_sign));
  258|   384k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   386k|}
_ZN3scn2v24impl19parse_integer_valueIchEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   375k|{
  218|   375k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   375k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   375k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   375k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   375k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   375k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   375k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   375k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   375k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   375k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   375k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   375k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   375k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 11.7k, False: 363k]
  ------------------
  224|  11.7k|        SCN_UNLIKELY_ATTR
  225|  11.7k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  11.7k|                                     "Invalid integer value");
  227|  11.7k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   363k|    auto start = source.data();
  231|   363k|    const auto end = source.data() + source.size();
  232|   363k|    {
  233|   791k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 783k, False: 8.75k]
  ------------------
  234|   783k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 354k, False: 428k]
  ------------------
  235|   354k|                break;
  236|   354k|            }
  237|   783k|        }
  238|   363k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   717k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 66.8k, False: 296k]
  |  |  |  Branch (153:45): [True: 8.75k, False: 354k]
  |  |  |  Branch (153:45): [True: 58.0k, False: 296k]
  |  |  ------------------
  ------------------
  239|  66.8k|            value = 0;
  240|  66.8k|            return ranges::next(source.begin(),
  241|  66.8k|                                ranges::distance(source.data(), start));
  242|  66.8k|        }
  243|   363k|    }
  244|       |
  245|   296k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   296k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 198k, False: 98.1k]
  ------------------
  247|   198k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   198k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   198k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   198k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.87k, False: 195k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.87k|    }                                                  \
  |  |  |  |   70|   198k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   195k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   195k|                             detail::make_string_view_from_pointers(start, end),
  249|   195k|                             value, sign == sign_type::minus_sign));
  250|   195k|            return ranges::next(source.begin(),
  251|   195k|                                ranges::distance(source.data(), ptr));
  252|   198k|        }
  253|   296k|    }
  254|       |
  255|  98.1k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|  98.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  98.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  98.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  98.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.16k, False: 95.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.16k|    }                                                  \
  |  |  |  |   70|  98.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  95.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|  95.9k|                     detail::make_string_view_from_pointers(start, end), value,
  257|  95.9k|                     base, sign == sign_type::minus_sign));
  258|  95.9k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|  98.1k|}
_ZN3scn2v24impl19parse_integer_valueIwhEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   361k|{
  218|   361k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   361k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   361k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   361k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   361k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   361k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   361k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   361k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   361k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   361k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   361k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   361k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   361k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 36.8k, False: 324k]
  ------------------
  224|  36.8k|        SCN_UNLIKELY_ATTR
  225|  36.8k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  36.8k|                                     "Invalid integer value");
  227|  36.8k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   324k|    auto start = source.data();
  231|   324k|    const auto end = source.data() + source.size();
  232|   324k|    {
  233|   693k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 685k, False: 7.71k]
  ------------------
  234|   685k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 316k, False: 368k]
  ------------------
  235|   316k|                break;
  236|   316k|            }
  237|   685k|        }
  238|   324k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   640k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 58.1k, False: 266k]
  |  |  |  Branch (153:45): [True: 7.71k, False: 316k]
  |  |  |  Branch (153:45): [True: 50.4k, False: 266k]
  |  |  ------------------
  ------------------
  239|  58.1k|            value = 0;
  240|  58.1k|            return ranges::next(source.begin(),
  241|  58.1k|                                ranges::distance(source.data(), start));
  242|  58.1k|        }
  243|   324k|    }
  244|       |
  245|   266k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   266k|        if (base == 10) {
  247|   266k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   266k|                             detail::make_string_view_from_pointers(start, end),
  249|   266k|                             value, sign == sign_type::minus_sign));
  250|   266k|            return ranges::next(source.begin(),
  251|   266k|                                ranges::distance(source.data(), ptr));
  252|   266k|        }
  253|   266k|    }
  254|       |
  255|   266k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   266k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   266k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   266k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   266k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.14k, False: 261k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.14k|    }                                                  \
  |  |  |  |   70|   266k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   261k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   261k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   261k|                     base, sign == sign_type::minus_sign));
  258|   261k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   266k|}
_ZN3scn2v24impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   428k|{
  218|   428k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   428k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   428k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   428k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   428k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   428k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   428k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   428k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   428k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   428k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   428k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   428k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   428k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 13.2k, False: 415k]
  ------------------
  224|  13.2k|        SCN_UNLIKELY_ATTR
  225|  13.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  13.2k|                                     "Invalid integer value");
  227|  13.2k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   415k|    auto start = source.data();
  231|   415k|    const auto end = source.data() + source.size();
  232|   415k|    {
  233|   863k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 854k, False: 9.28k]
  ------------------
  234|   854k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 406k, False: 447k]
  ------------------
  235|   406k|                break;
  236|   406k|            }
  237|   854k|        }
  238|   415k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   822k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 72.4k, False: 343k]
  |  |  |  Branch (153:45): [True: 9.28k, False: 406k]
  |  |  |  Branch (153:45): [True: 63.1k, False: 343k]
  |  |  ------------------
  ------------------
  239|  72.4k|            value = 0;
  240|  72.4k|            return ranges::next(source.begin(),
  241|  72.4k|                                ranges::distance(source.data(), start));
  242|  72.4k|        }
  243|   415k|    }
  244|       |
  245|   343k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   343k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 226k, False: 116k]
  ------------------
  247|   226k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   226k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   226k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   226k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   226k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 906, False: 226k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    906|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    906|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    906|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    906|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    906|    }                                                  \
  |  |  |  |   70|   226k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   226k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   226k|                             detail::make_string_view_from_pointers(start, end),
  249|   226k|                             value, sign == sign_type::minus_sign));
  250|   226k|            return ranges::next(source.begin(),
  251|   226k|                                ranges::distance(source.data(), ptr));
  252|   226k|        }
  253|   343k|    }
  254|       |
  255|   116k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   116k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   116k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   116k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 888, False: 115k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    888|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    888|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    888|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    888|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    888|    }                                                  \
  |  |  |  |   70|   116k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   115k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   115k|                     base, sign == sign_type::minus_sign));
  258|   115k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   116k|}
_ZN3scn2v24impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   408k|{
  218|   408k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   408k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   408k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   408k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   408k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   408k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   408k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   408k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   408k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   408k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   408k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   408k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   408k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 38.0k, False: 370k]
  ------------------
  224|  38.0k|        SCN_UNLIKELY_ATTR
  225|  38.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  38.0k|                                     "Invalid integer value");
  227|  38.0k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   370k|    auto start = source.data();
  231|   370k|    const auto end = source.data() + source.size();
  232|   370k|    {
  233|   755k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 747k, False: 8.14k]
  ------------------
  234|   747k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 362k, False: 385k]
  ------------------
  235|   362k|                break;
  236|   362k|            }
  237|   747k|        }
  238|   370k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   732k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 62.8k, False: 307k]
  |  |  |  Branch (153:45): [True: 8.14k, False: 362k]
  |  |  |  Branch (153:45): [True: 54.7k, False: 307k]
  |  |  ------------------
  ------------------
  239|  62.8k|            value = 0;
  240|  62.8k|            return ranges::next(source.begin(),
  241|  62.8k|                                ranges::distance(source.data(), start));
  242|  62.8k|        }
  243|   370k|    }
  244|       |
  245|   307k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   307k|        if (base == 10) {
  247|   307k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   307k|                             detail::make_string_view_from_pointers(start, end),
  249|   307k|                             value, sign == sign_type::minus_sign));
  250|   307k|            return ranges::next(source.begin(),
  251|   307k|                                ranges::distance(source.data(), ptr));
  252|   307k|        }
  253|   307k|    }
  254|       |
  255|   307k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   307k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   307k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   307k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.45k, False: 305k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.45k|    }                                                  \
  |  |  |  |   70|   307k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   305k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   305k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   305k|                     base, sign == sign_type::minus_sign));
  258|   305k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   307k|}
_ZN3scn2v24impl19parse_integer_valueIcyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   433k|{
  218|   433k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   433k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   433k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   433k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   433k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   433k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   433k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   433k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   433k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   433k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   433k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   433k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   433k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 13.6k, False: 419k]
  ------------------
  224|  13.6k|        SCN_UNLIKELY_ATTR
  225|  13.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  13.6k|                                     "Invalid integer value");
  227|  13.6k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   419k|    auto start = source.data();
  231|   419k|    const auto end = source.data() + source.size();
  232|   419k|    {
  233|   870k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 861k, False: 9.39k]
  ------------------
  234|   861k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 410k, False: 450k]
  ------------------
  235|   410k|                break;
  236|   410k|            }
  237|   861k|        }
  238|   419k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   829k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 74.1k, False: 345k]
  |  |  |  Branch (153:45): [True: 9.39k, False: 410k]
  |  |  |  Branch (153:45): [True: 64.7k, False: 345k]
  |  |  ------------------
  ------------------
  239|  74.1k|            value = 0;
  240|  74.1k|            return ranges::next(source.begin(),
  241|  74.1k|                                ranges::distance(source.data(), start));
  242|  74.1k|        }
  243|   419k|    }
  244|       |
  245|   345k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   345k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 227k, False: 117k]
  ------------------
  247|   227k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   227k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   227k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   227k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 407, False: 227k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    407|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    407|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    407|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    407|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    407|    }                                                  \
  |  |  |  |   70|   227k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   227k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   227k|                             detail::make_string_view_from_pointers(start, end),
  249|   227k|                             value, sign == sign_type::minus_sign));
  250|   227k|            return ranges::next(source.begin(),
  251|   227k|                                ranges::distance(source.data(), ptr));
  252|   227k|        }
  253|   345k|    }
  254|       |
  255|   117k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   117k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   117k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   117k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 427, False: 117k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    427|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    427|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    427|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    427|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    427|    }                                                  \
  |  |  |  |   70|   117k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   117k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   117k|                     base, sign == sign_type::minus_sign));
  258|   117k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   117k|}
_ZN3scn2v24impl19parse_integer_valueIwyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   411k|{
  218|   411k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   411k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   411k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   411k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   411k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   411k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   411k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   411k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   411k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   411k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   411k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   411k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   411k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 38.2k, False: 373k]
  ------------------
  224|  38.2k|        SCN_UNLIKELY_ATTR
  225|  38.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  38.2k|                                     "Invalid integer value");
  227|  38.2k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   373k|    auto start = source.data();
  231|   373k|    const auto end = source.data() + source.size();
  232|   373k|    {
  233|   761k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 752k, False: 8.22k]
  ------------------
  234|   752k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 364k, False: 387k]
  ------------------
  235|   364k|                break;
  236|   364k|            }
  237|   752k|        }
  238|   373k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   737k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 63.7k, False: 309k]
  |  |  |  Branch (153:45): [True: 8.22k, False: 364k]
  |  |  |  Branch (153:45): [True: 55.5k, False: 309k]
  |  |  ------------------
  ------------------
  239|  63.7k|            value = 0;
  240|  63.7k|            return ranges::next(source.begin(),
  241|  63.7k|                                ranges::distance(source.data(), start));
  242|  63.7k|        }
  243|   373k|    }
  244|       |
  245|   309k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   309k|        if (base == 10) {
  247|   309k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   309k|                             detail::make_string_view_from_pointers(start, end),
  249|   309k|                             value, sign == sign_type::minus_sign));
  250|   309k|            return ranges::next(source.begin(),
  251|   309k|                                ranges::distance(source.data(), ptr));
  252|   309k|        }
  253|   309k|    }
  254|       |
  255|   309k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   309k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   309k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   309k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   309k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 707, False: 308k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    707|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    707|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    707|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    707|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    707|    }                                                  \
  |  |  |  |   70|   309k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   308k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   308k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   308k|                     base, sign == sign_type::minus_sign));
  258|   308k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   309k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIaEEbmmib:
  125|   669k|{
  126|   669k|    auto max_digits = maxdigits_u64(base);
  127|   669k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 3.29k, False: 665k]
  ------------------
  128|  3.29k|        return true;
  129|  3.29k|    }
  130|   665k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 521, False: 665k]
  |  Branch (130:39): [True: 72, False: 449]
  ------------------
  131|     72|        return true;
  132|     72|    }
  133|   665k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   665k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 23.4k, False: 642k]
  ------------------
  135|   665k|                      static_cast<uint64_t>(is_negative)) {
  136|  23.4k|            SCN_UNLIKELY_ATTR
  137|  23.4k|            return true;
  138|  23.4k|        }
  139|   665k|    }
  140|       |
  141|   642k|    return false;
  142|   665k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113maxdigits_u64Ei:
   95|  4.22M|{
   96|  4.22M|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  242|  4.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   97|      0|    return maxdigits_u64_table[static_cast<size_t>(base - 2)];
   98|  4.22M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112min_safe_u64Ei:
  115|  3.01k|{
  116|  3.01k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  242|  3.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  117|      0|    return min_safe_u64_table[static_cast<size_t>(base - 2)];
  118|  3.01k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIaEET_mb:
  146|   642k|{
  147|   642k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 77.5k, False: 564k]
  ------------------
  148|  77.5k|        SCN_MSVC_PUSH
  149|  77.5k|        SCN_MSVC_IGNORE(4146)
  150|  77.5k|        return static_cast<T>(
  151|  77.5k|            -std::numeric_limits<T>::max() -
  152|  77.5k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|  77.5k|        SCN_MSVC_POP
  154|  77.5k|    }
  155|       |
  156|   564k|    return static_cast<T>(u64val);
  157|   642k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIiEEbmmib:
  125|   838k|{
  126|   838k|    auto max_digits = maxdigits_u64(base);
  127|   838k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 3.34k, False: 835k]
  ------------------
  128|  3.34k|        return true;
  129|  3.34k|    }
  130|   835k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 537, False: 834k]
  |  Branch (130:39): [True: 72, False: 465]
  ------------------
  131|     72|        return true;
  132|     72|    }
  133|   834k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   834k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 4.26k, False: 830k]
  ------------------
  135|   834k|                      static_cast<uint64_t>(is_negative)) {
  136|  4.26k|            SCN_UNLIKELY_ATTR
  137|  4.26k|            return true;
  138|  4.26k|        }
  139|   834k|    }
  140|       |
  141|   830k|    return false;
  142|   834k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIiEET_mb:
  146|   830k|{
  147|   830k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 87.0k, False: 743k]
  ------------------
  148|  87.0k|        SCN_MSVC_PUSH
  149|  87.0k|        SCN_MSVC_IGNORE(4146)
  150|  87.0k|        return static_cast<T>(
  151|  87.0k|            -std::numeric_limits<T>::max() -
  152|  87.0k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|  87.0k|        SCN_MSVC_POP
  154|  87.0k|    }
  155|       |
  156|   743k|    return static_cast<T>(u64val);
  157|   830k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIxEEbmmib:
  125|   846k|{
  126|   846k|    auto max_digits = maxdigits_u64(base);
  127|   846k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 3.80k, False: 843k]
  ------------------
  128|  3.80k|        return true;
  129|  3.80k|    }
  130|   843k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 673, False: 842k]
  |  Branch (130:39): [True: 76, False: 597]
  ------------------
  131|     76|        return true;
  132|     76|    }
  133|   842k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   842k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 339, False: 842k]
  ------------------
  135|   842k|                      static_cast<uint64_t>(is_negative)) {
  136|    339|            SCN_UNLIKELY_ATTR
  137|    339|            return true;
  138|    339|        }
  139|   842k|    }
  140|       |
  141|   842k|    return false;
  142|   842k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIxEET_mb:
  146|   842k|{
  147|   842k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 89.9k, False: 752k]
  ------------------
  148|  89.9k|        SCN_MSVC_PUSH
  149|  89.9k|        SCN_MSVC_IGNORE(4146)
  150|  89.9k|        return static_cast<T>(
  151|  89.9k|            -std::numeric_limits<T>::max() -
  152|  89.9k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|  89.9k|        SCN_MSVC_POP
  154|  89.9k|    }
  155|       |
  156|   752k|    return static_cast<T>(u64val);
  157|   842k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIhEEbmmib:
  125|   562k|{
  126|   562k|    auto max_digits = maxdigits_u64(base);
  127|   562k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 1.44k, False: 561k]
  ------------------
  128|  1.44k|        return true;
  129|  1.44k|    }
  130|   561k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 337, False: 560k]
  |  Branch (130:39): [True: 72, False: 265]
  ------------------
  131|     72|        return true;
  132|     72|    }
  133|   561k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   561k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 7.67k, False: 553k]
  ------------------
  135|   561k|                      static_cast<uint64_t>(is_negative)) {
  136|  7.67k|            SCN_UNLIKELY_ATTR
  137|  7.67k|            return true;
  138|  7.67k|        }
  139|   561k|    }
  140|       |
  141|   553k|    return false;
  142|   561k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIhEET_mb:
  146|   553k|{
  147|   553k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 553k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   553k|    return static_cast<T>(u64val);
  157|   553k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIjEEbmmib:
  125|   650k|{
  126|   650k|    auto max_digits = maxdigits_u64(base);
  127|   650k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 1.46k, False: 649k]
  ------------------
  128|  1.46k|        return true;
  129|  1.46k|    }
  130|   649k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 349, False: 648k]
  |  Branch (130:39): [True: 72, False: 277]
  ------------------
  131|     72|        return true;
  132|     72|    }
  133|   648k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   648k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 1.70k, False: 647k]
  ------------------
  135|   648k|                      static_cast<uint64_t>(is_negative)) {
  136|  1.70k|            SCN_UNLIKELY_ATTR
  137|  1.70k|            return true;
  138|  1.70k|        }
  139|   648k|    }
  140|       |
  141|   647k|    return false;
  142|   648k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIjEET_mb:
  146|   647k|{
  147|   647k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 647k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   647k|    return static_cast<T>(u64val);
  157|   647k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIyEEbmmib:
  125|   654k|{
  126|   654k|    auto max_digits = maxdigits_u64(base);
  127|   654k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 1.46k, False: 653k]
  ------------------
  128|  1.46k|        return true;
  129|  1.46k|    }
  130|   653k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 597, False: 652k]
  |  Branch (130:39): [True: 72, False: 525]
  ------------------
  131|     72|        return true;
  132|     72|    }
  133|   653k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   653k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 0, False: 653k]
  ------------------
  135|   653k|                      static_cast<uint64_t>(is_negative)) {
  136|      0|            SCN_UNLIKELY_ATTR
  137|      0|            return true;
  138|      0|        }
  139|   653k|    }
  140|       |
  141|   653k|    return false;
  142|   653k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIyEET_mb:
  146|   653k|{
  147|   653k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 653k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   653k|    return static_cast<T>(u64val);
  157|   653k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121get_eight_digits_wordEPKc:
   33|  1.29M|{
   34|  1.29M|    uint64_t val{};
   35|  1.29M|    std::memcpy(&val, input, sizeof(uint64_t));
   36|  1.29M|    if constexpr (SCN_IS_BIG_ENDIAN) {
  ------------------
  |  |  542|  1.29M|#define SCN_IS_BIG_ENDIAN 0
  |  |  ------------------
  |  |  |  Branch (542:27): [Folded - Ignored]
  |  |  ------------------
  ------------------
   37|      0|        val = byteswap(val);
   38|      0|    }
   39|  1.29M|    return val;
   40|  1.29M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_140parse_eight_decimal_digits_unrolled_fastEm:
   43|  83.9k|{
   44|  83.9k|    constexpr uint64_t mask = 0x000000FF000000FF;
   45|  83.9k|    constexpr uint64_t mul1 = 0x000F424000000064;  // 100 + (1000000ULL << 32)
   46|  83.9k|    constexpr uint64_t mul2 = 0x0000271000000001;  // 1 + (10000ULL << 32)
   47|  83.9k|    word -= 0x3030303030303030;
   48|  83.9k|    word = (word * 10) + (word >> 8);  // val = (val * 2561) >> 8;
   49|  83.9k|    word = (((word & mask) * mul1) + (((word >> 16) & mask) * mul2)) >> 32;
   50|  83.9k|    return static_cast<uint32_t>(word);
   51|  83.9k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_141is_word_made_of_eight_decimal_digits_fastEm:
   54|  1.20M|{
   55|  1.20M|    return !((((word + 0x4646464646464646) | (word - 0x3030303030303030)) &
   56|  1.20M|              0x8080808080808080));
   57|  1.20M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIaEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   255k|{
  164|   255k|    uint64_t u64val{};
  165|   255k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   255k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   255k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   255k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   255k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.83k, False: 249k]
  |  |  ------------------
  ------------------
  170|   255k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  5.83k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  5.83k|                                     "Integer overflow");
  173|  5.83k|    }
  174|       |
  175|   249k|    val = store_result<T>(u64val, is_negative);
  176|   249k|    return ptr;
  177|   255k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_131parse_decimal_integer_fast_implEPKcS4_Rm:
   75|  1.51M|{
   76|  1.51M|    loop_parse_if_eight_decimal_digits(begin, end, val);
   77|       |
   78|  3.53M|    while (begin != end) {
  ------------------
  |  Branch (78:12): [True: 3.18M, False: 349k]
  ------------------
   79|  3.18M|        const auto digit = char_to_int(*begin);
   80|  3.18M|        if (digit >= 10) {
  ------------------
  |  Branch (80:13): [True: 1.16M, False: 2.02M]
  ------------------
   81|  1.16M|            break;
   82|  1.16M|        }
   83|  2.02M|        val = 10ull * val + static_cast<uint64_t>(digit);
   84|  2.02M|        ++begin;
   85|  2.02M|    }
   86|       |
   87|  1.51M|    return begin;
   88|  1.51M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_134loop_parse_if_eight_decimal_digitsERPKcS4_Rm:
   62|  1.51M|{
   63|  1.51M|    while (
   64|  1.59M|        std::distance(p, end) >= 8 &&
  ------------------
  |  Branch (64:9): [True: 1.20M, False: 386k]
  ------------------
   65|  1.59M|        is_word_made_of_eight_decimal_digits_fast(get_eight_digits_word(p))) {
  ------------------
  |  Branch (65:9): [True: 83.9k, False: 1.12M]
  ------------------
   66|  83.9k|        val = val * 100'000'000 + parse_eight_decimal_digits_unrolled_fast(
   67|  83.9k|                                      get_eight_digits_word(p));
   68|  83.9k|        p += 8;
   69|  83.9k|    }
   70|  1.51M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   106k|{
  185|   106k|    uint64_t u64val{};
  186|   106k|    const CharT* begin = input.data();
  187|   106k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   347k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 325k, False: 22.5k]
  ------------------
  190|   325k|        const auto digit = char_to_int(*begin);
  191|   325k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 84.3k, False: 240k]
  ------------------
  192|  84.3k|            break;
  193|  84.3k|        }
  194|   240k|        u64val =
  195|   240k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   240k|        ++begin;
  197|   240k|    }
  198|       |
  199|   106k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   106k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.04k, False: 101k]
  |  |  ------------------
  ------------------
  201|   106k|                                               is_negative))) {
  202|  5.04k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  5.04k|                                     "Integer overflow");
  204|  5.04k|    }
  205|       |
  206|   101k|    val = store_result<T>(u64val, is_negative);
  207|   101k|    return begin;
  208|   106k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   306k|{
  185|   306k|    uint64_t u64val{};
  186|   306k|    const CharT* begin = input.data();
  187|   306k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   939k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 867k, False: 71.5k]
  ------------------
  190|   867k|        const auto digit = char_to_int(*begin);
  191|   867k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 235k, False: 632k]
  ------------------
  192|   235k|            break;
  193|   235k|        }
  194|   632k|        u64val =
  195|   632k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   632k|        ++begin;
  197|   632k|    }
  198|       |
  199|   306k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   306k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   306k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 15.9k, False: 290k]
  |  |  ------------------
  ------------------
  201|   306k|                                               is_negative))) {
  202|  15.9k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  15.9k|                                     "Integer overflow");
  204|  15.9k|    }
  205|       |
  206|   290k|    val = store_result<T>(u64val, is_negative);
  207|   290k|    return begin;
  208|   306k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIiEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   300k|{
  164|   300k|    uint64_t u64val{};
  165|   300k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   300k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   300k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   300k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   300k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.29k, False: 297k]
  |  |  ------------------
  ------------------
  170|   300k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  2.29k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  2.29k|                                     "Integer overflow");
  173|  2.29k|    }
  174|       |
  175|   297k|    val = store_result<T>(u64val, is_negative);
  176|   297k|    return ptr;
  177|   300k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIciEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   155k|{
  185|   155k|    uint64_t u64val{};
  186|   155k|    const CharT* begin = input.data();
  187|   155k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   465k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 439k, False: 25.7k]
  ------------------
  190|   439k|        const auto digit = char_to_int(*begin);
  191|   439k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 129k, False: 310k]
  ------------------
  192|   129k|            break;
  193|   129k|        }
  194|   310k|        u64val =
  195|   310k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   310k|        ++begin;
  197|   310k|    }
  198|       |
  199|   155k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   155k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.11k, False: 153k]
  |  |  ------------------
  ------------------
  201|   155k|                                               is_negative))) {
  202|  2.11k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  2.11k|                                     "Integer overflow");
  204|  2.11k|    }
  205|       |
  206|   153k|    val = store_result<T>(u64val, is_negative);
  207|   153k|    return begin;
  208|   155k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwiEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   383k|{
  185|   383k|    uint64_t u64val{};
  186|   383k|    const CharT* begin = input.data();
  187|   383k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|  1.14M|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 1.05M, False: 81.2k]
  ------------------
  190|  1.05M|        const auto digit = char_to_int(*begin);
  191|  1.05M|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 301k, False: 756k]
  ------------------
  192|   301k|            break;
  193|   301k|        }
  194|   756k|        u64val =
  195|   756k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   756k|        ++begin;
  197|   756k|    }
  198|       |
  199|   383k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   383k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   383k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.27k, False: 379k]
  |  |  ------------------
  ------------------
  201|   383k|                                               is_negative))) {
  202|  3.27k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  3.27k|                                     "Integer overflow");
  204|  3.27k|    }
  205|       |
  206|   379k|    val = store_result<T>(u64val, is_negative);
  207|   379k|    return begin;
  208|   383k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIxEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   302k|{
  164|   302k|    uint64_t u64val{};
  165|   302k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   302k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   302k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   302k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.26k, False: 301k]
  |  |  ------------------
  ------------------
  170|   302k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  1.26k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  1.26k|                                     "Integer overflow");
  173|  1.26k|    }
  174|       |
  175|   301k|    val = store_result<T>(u64val, is_negative);
  176|   301k|    return ptr;
  177|   302k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   157k|{
  185|   157k|    uint64_t u64val{};
  186|   157k|    const CharT* begin = input.data();
  187|   157k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   483k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 457k, False: 25.9k]
  ------------------
  190|   457k|        const auto digit = char_to_int(*begin);
  191|   457k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 131k, False: 326k]
  ------------------
  192|   131k|            break;
  193|   131k|        }
  194|   326k|        u64val =
  195|   326k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   326k|        ++begin;
  197|   326k|    }
  198|       |
  199|   157k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   157k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.11k, False: 156k]
  |  |  ------------------
  ------------------
  201|   157k|                                               is_negative))) {
  202|  1.11k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.11k|                                     "Integer overflow");
  204|  1.11k|    }
  205|       |
  206|   156k|    val = store_result<T>(u64val, is_negative);
  207|   156k|    return begin;
  208|   157k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   386k|{
  185|   386k|    uint64_t u64val{};
  186|   386k|    const CharT* begin = input.data();
  187|   386k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|  1.16M|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 1.08M, False: 81.7k]
  ------------------
  190|  1.08M|        const auto digit = char_to_int(*begin);
  191|  1.08M|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 304k, False: 777k]
  ------------------
  192|   304k|            break;
  193|   304k|        }
  194|   777k|        u64val =
  195|   777k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   777k|        ++begin;
  197|   777k|    }
  198|       |
  199|   386k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   386k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   386k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.84k, False: 384k]
  |  |  ------------------
  ------------------
  201|   386k|                                               is_negative))) {
  202|  1.84k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.84k|                                     "Integer overflow");
  204|  1.84k|    }
  205|       |
  206|   384k|    val = store_result<T>(u64val, is_negative);
  207|   384k|    return begin;
  208|   386k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIhEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   198k|{
  164|   198k|    uint64_t u64val{};
  165|   198k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   198k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   198k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   198k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.87k, False: 195k]
  |  |  ------------------
  ------------------
  170|   198k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  2.87k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  2.87k|                                     "Integer overflow");
  173|  2.87k|    }
  174|       |
  175|   195k|    val = store_result<T>(u64val, is_negative);
  176|   195k|    return ptr;
  177|   198k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIchEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|  98.1k|{
  185|  98.1k|    uint64_t u64val{};
  186|  98.1k|    const CharT* begin = input.data();
  187|  98.1k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   255k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 238k, False: 17.2k]
  ------------------
  190|   238k|        const auto digit = char_to_int(*begin);
  191|   238k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 80.8k, False: 157k]
  ------------------
  192|  80.8k|            break;
  193|  80.8k|        }
  194|   157k|        u64val =
  195|   157k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   157k|        ++begin;
  197|   157k|    }
  198|       |
  199|  98.1k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|  98.1k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|  98.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.16k, False: 95.9k]
  |  |  ------------------
  ------------------
  201|  98.1k|                                               is_negative))) {
  202|  2.16k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  2.16k|                                     "Integer overflow");
  204|  2.16k|    }
  205|       |
  206|  95.9k|    val = store_result<T>(u64val, is_negative);
  207|  95.9k|    return begin;
  208|  98.1k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwhEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   266k|{
  185|   266k|    uint64_t u64val{};
  186|   266k|    const CharT* begin = input.data();
  187|   266k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   671k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 610k, False: 61.4k]
  ------------------
  190|   610k|        const auto digit = char_to_int(*begin);
  191|   610k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 204k, False: 405k]
  ------------------
  192|   204k|            break;
  193|   204k|        }
  194|   405k|        u64val =
  195|   405k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   405k|        ++begin;
  197|   405k|    }
  198|       |
  199|   266k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   266k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   266k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.14k, False: 261k]
  |  |  ------------------
  ------------------
  201|   266k|                                               is_negative))) {
  202|  4.14k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  4.14k|                                     "Integer overflow");
  204|  4.14k|    }
  205|       |
  206|   261k|    val = store_result<T>(u64val, is_negative);
  207|   261k|    return begin;
  208|   266k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIjEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   226k|{
  164|   226k|    uint64_t u64val{};
  165|   226k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   226k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   226k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   226k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   226k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 906, False: 226k]
  |  |  ------------------
  ------------------
  170|   226k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|    906|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|    906|                                     "Integer overflow");
  173|    906|    }
  174|       |
  175|   226k|    val = store_result<T>(u64val, is_negative);
  176|   226k|    return ptr;
  177|   226k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   116k|{
  185|   116k|    uint64_t u64val{};
  186|   116k|    const CharT* begin = input.data();
  187|   116k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   303k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 284k, False: 18.8k]
  ------------------
  190|   284k|        const auto digit = char_to_int(*begin);
  191|   284k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 97.3k, False: 187k]
  ------------------
  192|  97.3k|            break;
  193|  97.3k|        }
  194|   187k|        u64val =
  195|   187k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   187k|        ++begin;
  197|   187k|    }
  198|       |
  199|   116k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   116k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 888, False: 115k]
  |  |  ------------------
  ------------------
  201|   116k|                                               is_negative))) {
  202|    888|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    888|                                     "Integer overflow");
  204|    888|    }
  205|       |
  206|   115k|    val = store_result<T>(u64val, is_negative);
  207|   115k|    return begin;
  208|   116k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   307k|{
  185|   307k|    uint64_t u64val{};
  186|   307k|    const CharT* begin = input.data();
  187|   307k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   791k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 723k, False: 67.4k]
  ------------------
  190|   723k|        const auto digit = char_to_int(*begin);
  191|   723k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 239k, False: 483k]
  ------------------
  192|   239k|            break;
  193|   239k|        }
  194|   483k|        u64val =
  195|   483k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   483k|        ++begin;
  197|   483k|    }
  198|       |
  199|   307k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   307k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.45k, False: 305k]
  |  |  ------------------
  ------------------
  201|   307k|                                               is_negative))) {
  202|  1.45k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.45k|                                     "Integer overflow");
  204|  1.45k|    }
  205|       |
  206|   305k|    val = store_result<T>(u64val, is_negative);
  207|   305k|    return begin;
  208|   307k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIyEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   227k|{
  164|   227k|    uint64_t u64val{};
  165|   227k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   227k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   227k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   227k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 407, False: 227k]
  |  |  ------------------
  ------------------
  170|   227k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|    407|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|    407|                                     "Integer overflow");
  173|    407|    }
  174|       |
  175|   227k|    val = store_result<T>(u64val, is_negative);
  176|   227k|    return ptr;
  177|   227k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   117k|{
  185|   117k|    uint64_t u64val{};
  186|   117k|    const CharT* begin = input.data();
  187|   117k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   312k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 293k, False: 18.9k]
  ------------------
  190|   293k|        const auto digit = char_to_int(*begin);
  191|   293k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 98.6k, False: 194k]
  ------------------
  192|  98.6k|            break;
  193|  98.6k|        }
  194|   194k|        u64val =
  195|   194k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   194k|        ++begin;
  197|   194k|    }
  198|       |
  199|   117k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   117k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 427, False: 117k]
  |  |  ------------------
  ------------------
  201|   117k|                                               is_negative))) {
  202|    427|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    427|                                     "Integer overflow");
  204|    427|    }
  205|       |
  206|   117k|    val = store_result<T>(u64val, is_negative);
  207|   117k|    return begin;
  208|   117k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   309k|{
  185|   309k|    uint64_t u64val{};
  186|   309k|    const CharT* begin = input.data();
  187|   309k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   802k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 734k, False: 67.6k]
  ------------------
  190|   734k|        const auto digit = char_to_int(*begin);
  191|   734k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 241k, False: 493k]
  ------------------
  192|   241k|            break;
  193|   241k|        }
  194|   493k|        u64val =
  195|   493k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   493k|        ++begin;
  197|   493k|    }
  198|       |
  199|   309k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   309k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   309k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 707, False: 308k]
  |  |  ------------------
  ------------------
  201|   309k|                                               is_negative))) {
  202|    707|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    707|                                     "Integer overflow");
  204|    707|    }
  205|       |
  206|   308k|    val = store_result<T>(u64val, is_negative);
  207|   308k|    return begin;
  208|   309k|}

_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   153k|    {
  324|   153k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   153k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   153k|        return read_default_with_base(range, value, 0);
  326|   153k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   153k|    {
  287|   153k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   153k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   153k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   153k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 153k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   153k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   153k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   153k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   153k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   153k|                return unexpected_scan_error(
  293|   153k|                    scan_error::invalid_scanned_value,
  294|   153k|                    "Unexpected '-' sign when parsing an "
  295|   153k|                    "unsigned value");
  296|   153k|            }
  297|   153k|        }
  298|       |
  299|   153k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 32.2k, False: 121k]
  ------------------
  300|  32.2k|            value = T{0};
  301|  32.2k|            return std::next(prefix_result.iterator);
  302|  32.2k|        }
  303|       |
  304|   243k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   121k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   121k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   121k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 54, False: 121k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     54|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     54|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     54|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     54|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     54|    }                                                  \
  |  |  |  |   70|   121k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   121k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   243k|                                     ranges::subrange{prefix_result.iterator,
  306|   243k|                                                      ranges::end(range)},
  307|   243k|                                     prefix_result.parsed_base));
  308|       |
  309|   243k|        auto buf = make_contiguous_buffer(
  310|   243k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   243k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   121k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   121k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   121k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.53k, False: 116k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.53k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.53k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.53k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.53k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.53k|    }                                                  \
  |  |  |  |   70|   121k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   116k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   116k|                                    prefix_result.parsed_base));
  314|       |
  315|   116k|        return ranges_polyfill::batch_next(
  316|   116k|            prefix_result.iterator,
  317|   116k|            ranges::distance(buf.view().begin(), result_it));
  318|   243k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESE_i:
  120|  3.31M|{
  121|  3.31M|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|  3.31M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.31M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.31M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 3.31M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  3.31M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.31M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|  3.31M|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|  3.31M|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|  3.31M|        parse_integer_base_prefix(
  126|  3.31M|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|  3.31M|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 962k, False: 2.34M]
  ------------------
  129|   962k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 2.17k, False: 960k]
  ------------------
  130|   962k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 499k, False: 461k]
  ------------------
  131|   501k|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|   501k|                digits_begin_it, ranges::begin(range));
  133|   501k|        }
  134|   461k|        else {
  135|   461k|            parsed_zero = false;
  136|   461k|        }
  137|   962k|    }
  138|  2.34M|    else {
  139|  2.34M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 4.79k, False: 2.34M]
  ------------------
  140|  2.34M|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 112k, False: 2.23M]
  ------------------
  141|   117k|            digits_begin_it = base_prefix_begin_it;
  142|   117k|        }
  143|  2.34M|    }
  144|       |
  145|  3.31M|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 2.98M, False: 324k]
  ------------------
  146|  2.98M|        sign = sign_type::plus_sign;
  147|  2.98M|    }
  148|  3.31M|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|  3.31M|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|  3.31M|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_i:
   87|  3.31M|{
   88|  3.31M|    switch (base) {
   89|  68.2k|        case 2:
  ------------------
  |  Branch (89:9): [True: 68.2k, False: 3.24M]
  ------------------
   90|       |            // allow 0b/0B
   91|  68.2k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  68.2k|                    false};
   93|       |
   94|   179k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 179k, False: 3.13M]
  ------------------
   95|       |            // allow 0o/0O/0
   96|   179k|            bool zero_parsed = false;
   97|   179k|            auto it = apply_opt(
   98|   179k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|   179k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|   445k|        case 16:
  ------------------
  |  Branch (102:9): [True: 445k, False: 2.86M]
  ------------------
  103|       |            // allow 0x/0X
  104|   445k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|   445k|                    false};
  106|       |
  107|  2.18M|        case 0:
  ------------------
  |  Branch (107:9): [True: 2.18M, False: 1.12M]
  ------------------
  108|       |            // detect base
  109|  2.18M|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|  2.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|   431k|        default:
  ------------------
  |  Branch (111:9): [True: 431k, False: 2.88M]
  ------------------
  112|       |            // no base prefix allowed
  113|   431k|            return {ranges::begin(range), base, false};
  114|  3.31M|    }
  115|  3.31M|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   37|  2.24M|{
   38|  2.24M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|  2.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|  2.24M|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_Rb:
   52|  2.34M|{
   53|  2.34M|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 26.4k, False: 2.32M]
  ------------------
   54|  26.4k|        return *r;
   55|  26.4k|    }
   56|       |
   57|  2.32M|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 962k, False: 1.35M]
  ------------------
   58|   962k|        zero_parsed = true;
   59|   962k|        return *r;
   60|   962k|    }
   61|       |
   62|  1.35M|    return unexpected(parse_error::error);
   63|  2.32M|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   44|  2.63M|{
   45|  2.63M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  2.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  2.63M|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_:
   68|  2.18M|{
   69|  2.18M|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 13.2k, False: 2.17M]
  ------------------
   70|  13.2k|        return {*r, 16, false};
   71|  13.2k|    }
   72|  2.17M|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 6.12k, False: 2.16M]
  ------------------
   73|  6.12k|        return {*r, 2, false};
   74|  6.12k|    }
   75|  2.16M|    {
   76|  2.16M|        bool zero_parsed{false};
   77|  2.16M|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 914k, False: 1.25M]
  ------------------
   78|   914k|            return {*r, 8, zero_parsed};
   79|   914k|        }
   80|  2.16M|    }
   81|  1.25M|    return {ranges::begin(range), 10, false};
   82|  2.16M|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESD_i:
  155|  2.28M|{
  156|  2.28M|    using char_type = detail::char_t<Range>;
  157|       |
  158|  2.28M|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|  2.28M|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.23k, False: 2.28M]
  |  |  ------------------
  ------------------
  160|  1.23k|            return unexpected_scan_error(
  161|  1.23k|                scan_error::invalid_scanned_value,
  162|  1.23k|                "Failed to parse integer: No digits found");
  163|  1.23k|        }
  164|  2.28M|        return ranges::end(range);
  165|  2.28M|    }
  166|  2.28M|    else {
  167|  2.28M|        return read_while1_code_unit(
  168|  2.28M|                   range, [&](char_type ch)
  169|  2.28M|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|  2.28M|            .transform_error(map_parse_error_to_scan_error(
  171|  2.28M|                scan_error::invalid_scanned_value,
  172|  2.28M|                "Failed to parse integer: No digits found"));
  173|  2.28M|    }
  174|  2.28M|}
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   177k|    {
  324|   177k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   177k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   177k|        return read_default_with_base(range, value, 0);
  326|   177k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   177k|    {
  287|   177k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   177k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   177k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   177k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 177k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   177k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   177k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   177k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   177k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   177k|                return unexpected_scan_error(
  293|   177k|                    scan_error::invalid_scanned_value,
  294|   177k|                    "Unexpected '-' sign when parsing an "
  295|   177k|                    "unsigned value");
  296|   177k|            }
  297|   177k|        }
  298|       |
  299|   177k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 35.7k, False: 141k]
  ------------------
  300|  35.7k|            value = T{0};
  301|  35.7k|            return std::next(prefix_result.iterator);
  302|  35.7k|        }
  303|       |
  304|   283k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   141k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   141k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   141k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 111, False: 141k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    111|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    111|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    111|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    111|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    111|    }                                                  \
  |  |  |  |   70|   141k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   283k|                                     ranges::subrange{prefix_result.iterator,
  306|   283k|                                                      ranges::end(range)},
  307|   283k|                                     prefix_result.parsed_base));
  308|       |
  309|   283k|        auto buf = make_contiguous_buffer(
  310|   283k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   283k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   141k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   141k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   141k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.05k, False: 136k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.05k|    }                                                  \
  |  |  |  |   70|   141k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   136k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   136k|                                    prefix_result.parsed_base));
  314|       |
  315|   136k|        return ranges_polyfill::batch_next(
  316|   136k|            prefix_result.iterator,
  317|   136k|            ranges::distance(buf.view().begin(), result_it));
  318|   283k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   180k|    {
  324|   180k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   180k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   180k|        return read_default_with_base(range, value, 0);
  326|   180k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   180k|    {
  287|   180k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   180k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   180k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   180k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   180k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 180k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   180k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   180k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   180k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   180k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   180k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   180k|                return unexpected_scan_error(
  293|   180k|                    scan_error::invalid_scanned_value,
  294|   180k|                    "Unexpected '-' sign when parsing an "
  295|   180k|                    "unsigned value");
  296|   180k|            }
  297|   180k|        }
  298|       |
  299|   180k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 36.7k, False: 143k]
  ------------------
  300|  36.7k|            value = T{0};
  301|  36.7k|            return std::next(prefix_result.iterator);
  302|  36.7k|        }
  303|       |
  304|   287k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   143k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   143k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   143k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 126, False: 143k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    126|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    126|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    126|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    126|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    126|    }                                                  \
  |  |  |  |   70|   143k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   287k|                                     ranges::subrange{prefix_result.iterator,
  306|   287k|                                                      ranges::end(range)},
  307|   287k|                                     prefix_result.parsed_base));
  308|       |
  309|   287k|        auto buf = make_contiguous_buffer(
  310|   287k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   287k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   143k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   143k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   143k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.96k, False: 138k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.96k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.96k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.96k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.96k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.96k|    }                                                  \
  |  |  |  |   70|   143k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   138k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   138k|                                    prefix_result.parsed_base));
  314|       |
  315|   138k|        return ranges_polyfill::batch_next(
  316|   138k|            prefix_result.iterator,
  317|   138k|            ranges::distance(buf.view().begin(), result_it));
  318|   287k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   132k|    {
  324|   132k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   132k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   132k|        return read_default_with_base(range, value, 0);
  326|   132k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   132k|    {
  287|   132k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   132k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   132k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   132k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 132k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   132k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   132k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   132k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   132k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   132k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.62k, False: 129k]
  ------------------
  292|  2.62k|                return unexpected_scan_error(
  293|  2.62k|                    scan_error::invalid_scanned_value,
  294|  2.62k|                    "Unexpected '-' sign when parsing an "
  295|  2.62k|                    "unsigned value");
  296|  2.62k|            }
  297|   132k|        }
  298|       |
  299|   129k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 28.5k, False: 101k]
  ------------------
  300|  28.5k|            value = T{0};
  301|  28.5k|            return std::next(prefix_result.iterator);
  302|  28.5k|        }
  303|       |
  304|   202k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   101k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   101k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   101k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 24, False: 101k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     24|    }                                                  \
  |  |  |  |   70|   101k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   202k|                                     ranges::subrange{prefix_result.iterator,
  306|   202k|                                                      ranges::end(range)},
  307|   202k|                                     prefix_result.parsed_base));
  308|       |
  309|   202k|        auto buf = make_contiguous_buffer(
  310|   202k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   202k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   101k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   101k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   101k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.20k, False: 97.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.20k|    }                                                  \
  |  |  |  |   70|   101k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  97.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  97.9k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  97.9k|                                    prefix_result.parsed_base));
  314|       |
  315|  97.9k|        return ranges_polyfill::batch_next(
  316|  97.9k|            prefix_result.iterator,
  317|  97.9k|            ranges::distance(buf.view().begin(), result_it));
  318|   202k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   145k|    {
  324|   145k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   145k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   145k|        return read_default_with_base(range, value, 0);
  326|   145k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   145k|    {
  287|   145k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   145k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   145k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   145k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 145k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   145k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   145k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   145k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   145k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.73k, False: 142k]
  ------------------
  292|  2.73k|                return unexpected_scan_error(
  293|  2.73k|                    scan_error::invalid_scanned_value,
  294|  2.73k|                    "Unexpected '-' sign when parsing an "
  295|  2.73k|                    "unsigned value");
  296|  2.73k|            }
  297|   145k|        }
  298|       |
  299|   142k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 30.8k, False: 111k]
  ------------------
  300|  30.8k|            value = T{0};
  301|  30.8k|            return std::next(prefix_result.iterator);
  302|  30.8k|        }
  303|       |
  304|   223k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   111k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   111k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   111k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 24, False: 111k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     24|    }                                                  \
  |  |  |  |   70|   111k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   223k|                                     ranges::subrange{prefix_result.iterator,
  306|   223k|                                                      ranges::end(range)},
  307|   223k|                                     prefix_result.parsed_base));
  308|       |
  309|   223k|        auto buf = make_contiguous_buffer(
  310|   223k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   223k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   111k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   111k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   111k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.86k, False: 108k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.86k|    }                                                  \
  |  |  |  |   70|   111k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   108k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   108k|                                    prefix_result.parsed_base));
  314|       |
  315|   108k|        return ranges_polyfill::batch_next(
  316|   108k|            prefix_result.iterator,
  317|   108k|            ranges::distance(buf.view().begin(), result_it));
  318|   223k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   146k|    {
  324|   146k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   146k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   146k|        return read_default_with_base(range, value, 0);
  326|   146k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   146k|    {
  287|   146k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   146k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   146k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   146k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 146k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   146k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   146k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   146k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   146k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.80k, False: 143k]
  ------------------
  292|  2.80k|                return unexpected_scan_error(
  293|  2.80k|                    scan_error::invalid_scanned_value,
  294|  2.80k|                    "Unexpected '-' sign when parsing an "
  295|  2.80k|                    "unsigned value");
  296|  2.80k|            }
  297|   146k|        }
  298|       |
  299|   143k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 31.3k, False: 112k]
  ------------------
  300|  31.3k|            value = T{0};
  301|  31.3k|            return std::next(prefix_result.iterator);
  302|  31.3k|        }
  303|       |
  304|   224k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   112k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   112k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   112k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 24, False: 112k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     24|    }                                                  \
  |  |  |  |   70|   112k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   224k|                                     ranges::subrange{prefix_result.iterator,
  306|   224k|                                                      ranges::end(range)},
  307|   224k|                                     prefix_result.parsed_base));
  308|       |
  309|   224k|        auto buf = make_contiguous_buffer(
  310|   224k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   224k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   112k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   112k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   112k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.73k, False: 109k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.73k|    }                                                  \
  |  |  |  |   70|   112k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   109k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   109k|                                    prefix_result.parsed_base));
  314|       |
  315|   109k|        return ranges_polyfill::batch_next(
  316|   109k|            prefix_result.iterator,
  317|   109k|            ranges::distance(buf.view().begin(), result_it));
  318|   224k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSC_12basic_stringIT0_NSC_11char_traitsISJ_EENSC_9allocatorISJ_EEEENSI_IcNSK_IcEENSM_IcEEEEEEEEESF_iRKNS1_35localized_number_formatting_optionsISJ_EE:
  184|   490k|{
  185|   490k|    std::basic_string<CharT> output;
  186|   490k|    std::string thsep_indices;
  187|   490k|    auto it = ranges::begin(range);
  188|   490k|    bool digit_matched = false;
  189|  2.06M|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 2.05M, False: 4.96k]
  ------------------
  190|  2.05M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 86.4k, False: 1.96M]
  ------------------
  191|  86.4k|            thsep_indices.push_back(static_cast<char>(
  192|  86.4k|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|  86.4k|        }
  194|  1.96M|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 485k, False: 1.48M]
  ------------------
  195|   485k|            break;
  196|   485k|        }
  197|  1.48M|        else {
  198|  1.48M|            output.push_back(*it);
  199|  1.48M|            digit_matched = true;
  200|  1.48M|        }
  201|  2.05M|    }
  202|   490k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|   490k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 10.0k, False: 479k]
  |  |  ------------------
  ------------------
  203|  10.0k|        return unexpected_scan_error(
  204|  10.0k|            scan_error::invalid_scanned_value,
  205|  10.0k|            "Failed to parse integer: No digits found");
  206|  10.0k|    }
  207|   479k|    return std::tuple{it, output, thsep_indices};
  208|   490k|}
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  6.59k|    {
  324|  6.59k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  6.59k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  6.59k|        return read_default_with_base(range, value, 0);
  326|  6.59k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  6.59k|    {
  287|  6.59k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  6.59k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.59k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.59k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.59k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.59k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  6.59k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  6.59k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  6.59k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  6.59k|                return unexpected_scan_error(
  293|  6.59k|                    scan_error::invalid_scanned_value,
  294|  6.59k|                    "Unexpected '-' sign when parsing an "
  295|  6.59k|                    "unsigned value");
  296|  6.59k|            }
  297|  6.59k|        }
  298|       |
  299|  6.59k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 6.59k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  6.59k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  6.59k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.59k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.59k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.59k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.59k|    }                                                  \
  |  |  |  |   70|  6.59k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  6.59k|                                     ranges::subrange{prefix_result.iterator,
  306|  6.59k|                                                      ranges::end(range)},
  307|  6.59k|                                     prefix_result.parsed_base));
  308|       |
  309|  6.59k|        auto buf = make_contiguous_buffer(
  310|  6.59k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  6.59k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  6.59k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESH_i:
  120|   237k|{
  121|   237k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|   237k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   237k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   237k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 237k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   237k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   237k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|   237k|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|   237k|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|   237k|        parse_integer_base_prefix(
  126|   237k|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|   237k|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 0, False: 237k]
  ------------------
  129|      0|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 0, False: 0]
  ------------------
  130|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 0, False: 0]
  ------------------
  131|      0|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|      0|                digits_begin_it, ranges::begin(range));
  133|      0|        }
  134|      0|        else {
  135|      0|            parsed_zero = false;
  136|      0|        }
  137|      0|    }
  138|   237k|    else {
  139|   237k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 12, False: 237k]
  ------------------
  140|   237k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 184k, False: 52.7k]
  ------------------
  141|   184k|            digits_begin_it = base_prefix_begin_it;
  142|   184k|        }
  143|   237k|    }
  144|       |
  145|   237k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 211k, False: 26.3k]
  ------------------
  146|   211k|        sign = sign_type::plus_sign;
  147|   211k|    }
  148|   237k|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|   237k|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|   237k|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_i:
   87|   237k|{
   88|   237k|    switch (base) {
   89|  26.3k|        case 2:
  ------------------
  |  Branch (89:9): [True: 26.3k, False: 211k]
  ------------------
   90|       |            // allow 0b/0B
   91|  26.3k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  26.3k|                    false};
   93|       |
   94|  26.3k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 26.3k, False: 211k]
  ------------------
   95|       |            // allow 0o/0O/0
   96|  26.3k|            bool zero_parsed = false;
   97|  26.3k|            auto it = apply_opt(
   98|  26.3k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|  26.3k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|  65.9k|        case 16:
  ------------------
  |  Branch (102:9): [True: 65.9k, False: 171k]
  ------------------
  103|       |            // allow 0x/0X
  104|  65.9k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|  65.9k|                    false};
  106|       |
  107|  92.3k|        case 0:
  ------------------
  |  Branch (107:9): [True: 92.3k, False: 145k]
  ------------------
  108|       |            // detect base
  109|  92.3k|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|  92.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|  26.3k|        default:
  ------------------
  |  Branch (111:9): [True: 26.3k, False: 211k]
  ------------------
  112|       |            // no base prefix allowed
  113|  26.3k|            return {ranges::begin(range), base, false};
  114|   237k|    }
  115|   237k|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   37|   118k|{
   38|   118k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|   118k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|   118k|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_Rb:
   52|   118k|{
   53|   118k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 0, False: 118k]
  ------------------
   54|      0|        return *r;
   55|      0|    }
   56|       |
   57|   118k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 0, False: 118k]
  ------------------
   58|      0|        zero_parsed = true;
   59|      0|        return *r;
   60|      0|    }
   61|       |
   62|   118k|    return unexpected(parse_error::error);
   63|   118k|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   44|   158k|{
   45|   158k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   158k|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_:
   68|  92.3k|{
   69|  92.3k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 0, False: 92.3k]
  ------------------
   70|      0|        return {*r, 16, false};
   71|      0|    }
   72|  92.3k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 0, False: 92.3k]
  ------------------
   73|      0|        return {*r, 2, false};
   74|      0|    }
   75|  92.3k|    {
   76|  92.3k|        bool zero_parsed{false};
   77|  92.3k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 0, False: 92.3k]
  ------------------
   78|      0|            return {*r, 8, zero_parsed};
   79|      0|        }
   80|  92.3k|    }
   81|  92.3k|    return {ranges::begin(range), 10, false};
   82|  92.3k|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_i:
  155|   197k|{
  156|   197k|    using char_type = detail::char_t<Range>;
  157|       |
  158|   197k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|   197k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  160|   197k|            return unexpected_scan_error(
  161|   197k|                scan_error::invalid_scanned_value,
  162|   197k|                "Failed to parse integer: No digits found");
  163|   197k|        }
  164|   197k|        return ranges::end(range);
  165|   197k|    }
  166|   197k|    else {
  167|   197k|        return read_while1_code_unit(
  168|   197k|                   range, [&](char_type ch)
  169|   197k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|   197k|            .transform_error(map_parse_error_to_scan_error(
  171|   197k|                scan_error::invalid_scanned_value,
  172|   197k|                "Failed to parse integer: No digits found"));
  173|   197k|    }
  174|   197k|}
_ZZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_iENKUlcE_clEc:
  169|   237k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  6.59k|    {
  324|  6.59k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  6.59k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  6.59k|        return read_default_with_base(range, value, 0);
  326|  6.59k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  6.59k|    {
  287|  6.59k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  6.59k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.59k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.59k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.59k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.59k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  6.59k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  6.59k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  6.59k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  6.59k|                return unexpected_scan_error(
  293|  6.59k|                    scan_error::invalid_scanned_value,
  294|  6.59k|                    "Unexpected '-' sign when parsing an "
  295|  6.59k|                    "unsigned value");
  296|  6.59k|            }
  297|  6.59k|        }
  298|       |
  299|  6.59k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 6.59k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  6.59k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  6.59k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.59k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.59k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.59k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.59k|    }                                                  \
  |  |  |  |   70|  6.59k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  6.59k|                                     ranges::subrange{prefix_result.iterator,
  306|  6.59k|                                                      ranges::end(range)},
  307|  6.59k|                                     prefix_result.parsed_base));
  308|       |
  309|  6.59k|        auto buf = make_contiguous_buffer(
  310|  6.59k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  6.59k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  6.59k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  6.59k|    {
  324|  6.59k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  6.59k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  6.59k|        return read_default_with_base(range, value, 0);
  326|  6.59k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  6.59k|    {
  287|  6.59k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  6.59k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.59k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.59k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.59k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.59k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  6.59k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  6.59k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  6.59k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  6.59k|                return unexpected_scan_error(
  293|  6.59k|                    scan_error::invalid_scanned_value,
  294|  6.59k|                    "Unexpected '-' sign when parsing an "
  295|  6.59k|                    "unsigned value");
  296|  6.59k|            }
  297|  6.59k|        }
  298|       |
  299|  6.59k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 6.59k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  6.59k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  6.59k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.59k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.59k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.59k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.59k|    }                                                  \
  |  |  |  |   70|  6.59k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  6.59k|                                     ranges::subrange{prefix_result.iterator,
  306|  6.59k|                                                      ranges::end(range)},
  307|  6.59k|                                     prefix_result.parsed_base));
  308|       |
  309|  6.59k|        auto buf = make_contiguous_buffer(
  310|  6.59k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  6.59k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  6.59k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  6.59k|    {
  324|  6.59k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  6.59k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  6.59k|        return read_default_with_base(range, value, 0);
  326|  6.59k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  6.59k|    {
  287|  6.59k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  6.59k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.59k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.59k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.59k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.59k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  6.59k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  6.59k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  6.59k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 6.59k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  6.59k|        }
  298|       |
  299|  6.59k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 6.59k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  6.59k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  6.59k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.59k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.59k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.59k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.59k|    }                                                  \
  |  |  |  |   70|  6.59k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  6.59k|                                     ranges::subrange{prefix_result.iterator,
  306|  6.59k|                                                      ranges::end(range)},
  307|  6.59k|                                     prefix_result.parsed_base));
  308|       |
  309|  6.59k|        auto buf = make_contiguous_buffer(
  310|  6.59k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  6.59k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  6.59k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  6.59k|    {
  324|  6.59k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  6.59k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  6.59k|        return read_default_with_base(range, value, 0);
  326|  6.59k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  6.59k|    {
  287|  6.59k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  6.59k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.59k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.59k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.59k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.59k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  6.59k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  6.59k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  6.59k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 6.59k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  6.59k|        }
  298|       |
  299|  6.59k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 6.59k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  6.59k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  6.59k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.59k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.59k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.59k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.59k|    }                                                  \
  |  |  |  |   70|  6.59k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  6.59k|                                     ranges::subrange{prefix_result.iterator,
  306|  6.59k|                                                      ranges::end(range)},
  307|  6.59k|                                     prefix_result.parsed_base));
  308|       |
  309|  6.59k|        auto buf = make_contiguous_buffer(
  310|  6.59k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  6.59k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  6.59k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  6.59k|    {
  324|  6.59k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  6.59k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  6.59k|        return read_default_with_base(range, value, 0);
  326|  6.59k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  6.59k|    {
  287|  6.59k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  6.59k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.59k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.59k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.59k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.59k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  6.59k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  6.59k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  6.59k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 6.59k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  6.59k|        }
  298|       |
  299|  6.59k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 6.59k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  6.59k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  6.59k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.59k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.59k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.59k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.59k|    }                                                  \
  |  |  |  |   70|  6.59k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  6.59k|                                     ranges::subrange{prefix_result.iterator,
  306|  6.59k|                                                      ranges::end(range)},
  307|  6.59k|                                     prefix_result.parsed_base));
  308|       |
  309|  6.59k|        auto buf = make_contiguous_buffer(
  310|  6.59k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  6.59k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  6.59k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSF_12basic_stringIT0_NSF_11char_traitsISM_EENSF_9allocatorISM_EEEENSL_IcNSN_IcEENSP_IcEEEEEEEEESI_iRKNS1_35localized_number_formatting_optionsISM_EE:
  184|  26.3k|{
  185|  26.3k|    std::basic_string<CharT> output;
  186|  26.3k|    std::string thsep_indices;
  187|  26.3k|    auto it = ranges::begin(range);
  188|  26.3k|    bool digit_matched = false;
  189|  26.3k|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 26.3k, False: 0]
  ------------------
  190|  26.3k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 0, False: 26.3k]
  ------------------
  191|      0|            thsep_indices.push_back(static_cast<char>(
  192|      0|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|      0|        }
  194|  26.3k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 26.3k, False: 0]
  ------------------
  195|  26.3k|            break;
  196|  26.3k|        }
  197|      0|        else {
  198|      0|            output.push_back(*it);
  199|      0|            digit_matched = true;
  200|      0|        }
  201|  26.3k|    }
  202|  26.3k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|  26.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 26.3k, False: 0]
  |  |  ------------------
  ------------------
  203|  26.3k|        return unexpected_scan_error(
  204|  26.3k|            scan_error::invalid_scanned_value,
  205|  26.3k|            "Failed to parse integer: No digits found");
  206|  26.3k|    }
  207|      0|    return std::tuple{it, output, thsep_indices};
  208|  26.3k|}
_ZN3scn2v24impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  279|  2.59M|    {
  280|  2.59M|        detail::check_int_type_specs(specs, eh);
  281|  2.59M|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   365k|    {
  335|   365k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   365k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   365k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   365k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 365k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   365k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   365k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   365k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   365k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 38.8k, False: 326k]
  ------------------
  339|  38.8k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  38.8k|                return unexpected_scan_error(
  341|  38.8k|                    scan_error::invalid_scanned_value,
  342|  38.8k|                    "Unexpected '-' sign when parsing an "
  343|  38.8k|                    "unsigned value");
  344|  38.8k|            }
  345|  38.8k|            else {
  346|  38.8k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 38.8k]
  ------------------
  347|  38.8k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  38.8k|            }
  353|  38.8k|        }
  354|       |
  355|   365k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 50.6k, False: 314k]
  ------------------
  356|  50.6k|            value = T{0};
  357|  50.6k|            return std::next(prefix_result.iterator);
  358|  50.6k|        }
  359|       |
  360|   314k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   314k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 233k, False: 81.3k]
  |  |  ------------------
  ------------------
  361|   233k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   233k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   233k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   233k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   233k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 132, False: 232k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    132|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    132|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    132|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    132|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    132|    }                                                  \
  |  |  |  |   70|   233k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   232k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   232k|                    parse_integer_digits_without_thsep(
  363|   232k|                        ranges::subrange{prefix_result.iterator,
  364|   232k|                                         ranges::end(range)},
  365|   232k|                        prefix_result.parsed_base));
  366|       |
  367|   232k|            auto buf = make_contiguous_buffer(
  368|   232k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   232k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   232k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   232k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   232k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   232k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 19.8k, False: 213k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  19.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  19.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  19.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  19.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  19.8k|    }                                                  \
  |  |  |  |   70|   232k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   213k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   213k|                                        prefix_result.parsed_base));
  372|       |
  373|   213k|            return ranges_polyfill::batch_next(
  374|   213k|                prefix_result.iterator,
  375|   213k|                ranges::distance(buf.view().begin(), result_it));
  376|   232k|        }
  377|       |
  378|  81.3k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  81.3k|            localized_number_formatting_options<CharT>{loc};
  383|  81.3k|#endif
  384|       |
  385|  81.3k|        SCN_TRY(
  ------------------
  |  |   71|  81.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  81.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  81.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  81.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.63k, False: 79.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.63k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.63k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.63k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.63k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.63k|    }                                                  \
  |  |  |  |   70|  81.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  79.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  79.7k|            parse_digits_result,
  387|  79.7k|            parse_integer_digits_with_thsep(
  388|  79.7k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  79.7k|                prefix_result.parsed_base, locale_options));
  390|  79.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  79.7k|            parse_digits_result;
  392|       |
  393|  79.7k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 1.12k, False: 78.6k]
  ------------------
  394|  1.12k|            if (auto e = check_thsep_grouping(
  395|  1.12k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  1.12k|                    thsep_indices, locale_options.grouping);
  397|  1.12k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 496, False: 624]
  |  |  ------------------
  ------------------
  398|    496|                return unexpected(e);
  399|    496|            }
  400|  1.12k|        }
  401|       |
  402|  79.2k|        auto nothsep_source_view =
  403|  79.2k|            std::basic_string_view<CharT>{nothsep_source};
  404|  79.2k|        SCN_TRY(
  ------------------
  |  |   71|  79.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  79.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  79.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  79.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.58k, False: 77.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.58k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.58k|    }                                                  \
  |  |  |  |   70|  79.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  77.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  77.6k|            nothsep_source_it,
  406|  77.6k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  77.6k|                                prefix_result.parsed_base));
  408|       |
  409|  77.6k|        return ranges_polyfill::batch_next(
  410|  77.6k|            prefix_result.iterator,
  411|  77.6k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  77.6k|                ranges::ssize(thsep_indices));
  413|  79.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   464k|    {
  335|   464k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   464k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   464k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   464k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   464k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 464k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   464k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   464k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   464k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   464k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 43.2k, False: 421k]
  ------------------
  339|  43.2k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  43.2k|                return unexpected_scan_error(
  341|  43.2k|                    scan_error::invalid_scanned_value,
  342|  43.2k|                    "Unexpected '-' sign when parsing an "
  343|  43.2k|                    "unsigned value");
  344|  43.2k|            }
  345|  43.2k|            else {
  346|  43.2k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 43.2k]
  ------------------
  347|  43.2k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  43.2k|            }
  353|  43.2k|        }
  354|       |
  355|   464k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 55.6k, False: 408k]
  ------------------
  356|  55.6k|            value = T{0};
  357|  55.6k|            return std::next(prefix_result.iterator);
  358|  55.6k|        }
  359|       |
  360|   408k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   408k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 314k, False: 94.6k]
  |  |  ------------------
  ------------------
  361|   314k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   314k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   314k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   314k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 266, False: 313k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    266|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    266|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    266|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    266|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    266|    }                                                  \
  |  |  |  |   70|   314k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   313k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   313k|                    parse_integer_digits_without_thsep(
  363|   313k|                        ranges::subrange{prefix_result.iterator,
  364|   313k|                                         ranges::end(range)},
  365|   313k|                        prefix_result.parsed_base));
  366|       |
  367|   313k|            auto buf = make_contiguous_buffer(
  368|   313k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   313k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   313k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   313k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   313k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   313k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 18.4k, False: 295k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  18.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  18.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  18.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  18.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  18.4k|    }                                                  \
  |  |  |  |   70|   313k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   295k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   295k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   295k|                                        prefix_result.parsed_base));
  372|       |
  373|   295k|            return ranges_polyfill::batch_next(
  374|   295k|                prefix_result.iterator,
  375|   295k|                ranges::distance(buf.view().begin(), result_it));
  376|   313k|        }
  377|       |
  378|  94.6k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  94.6k|            localized_number_formatting_options<CharT>{loc};
  383|  94.6k|#endif
  384|       |
  385|  94.6k|        SCN_TRY(
  ------------------
  |  |   71|  94.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  94.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  94.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  94.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.20k, False: 92.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.20k|    }                                                  \
  |  |  |  |   70|  94.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  92.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  92.4k|            parse_digits_result,
  387|  92.4k|            parse_integer_digits_with_thsep(
  388|  92.4k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  92.4k|                prefix_result.parsed_base, locale_options));
  390|  92.4k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  92.4k|            parse_digits_result;
  392|       |
  393|  92.4k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 1.20k, False: 91.2k]
  ------------------
  394|  1.20k|            if (auto e = check_thsep_grouping(
  395|  1.20k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  1.20k|                    thsep_indices, locale_options.grouping);
  397|  1.20k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 584, False: 624]
  |  |  ------------------
  ------------------
  398|    584|                return unexpected(e);
  399|    584|            }
  400|  1.20k|        }
  401|       |
  402|  91.9k|        auto nothsep_source_view =
  403|  91.9k|            std::basic_string_view<CharT>{nothsep_source};
  404|  91.9k|        SCN_TRY(
  ------------------
  |  |   71|  91.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  91.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  91.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  91.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 644, False: 91.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    644|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    644|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    644|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    644|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    644|    }                                                  \
  |  |  |  |   70|  91.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  91.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  91.2k|            nothsep_source_it,
  406|  91.2k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  91.2k|                                prefix_result.parsed_base));
  408|       |
  409|  91.2k|        return ranges_polyfill::batch_next(
  410|  91.2k|            prefix_result.iterator,
  411|  91.2k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  91.2k|                ranges::ssize(thsep_indices));
  413|  91.9k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   473k|    {
  335|   473k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   473k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   473k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   473k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   473k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 473k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   473k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   473k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   473k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   473k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 43.9k, False: 429k]
  ------------------
  339|  43.9k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  43.9k|                return unexpected_scan_error(
  341|  43.9k|                    scan_error::invalid_scanned_value,
  342|  43.9k|                    "Unexpected '-' sign when parsing an "
  343|  43.9k|                    "unsigned value");
  344|  43.9k|            }
  345|  43.9k|            else {
  346|  43.9k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 43.9k]
  ------------------
  347|  43.9k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  43.9k|            }
  353|  43.9k|        }
  354|       |
  355|   473k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 57.0k, False: 416k]
  ------------------
  356|  57.0k|            value = T{0};
  357|  57.0k|            return std::next(prefix_result.iterator);
  358|  57.0k|        }
  359|       |
  360|   416k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   416k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 320k, False: 95.9k]
  |  |  ------------------
  ------------------
  361|   320k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   320k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   320k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   320k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   320k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 312, False: 319k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    312|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    312|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    312|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    312|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    312|    }                                                  \
  |  |  |  |   70|   320k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   319k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   319k|                    parse_integer_digits_without_thsep(
  363|   319k|                        ranges::subrange{prefix_result.iterator,
  364|   319k|                                         ranges::end(range)},
  365|   319k|                        prefix_result.parsed_base));
  366|       |
  367|   319k|            auto buf = make_contiguous_buffer(
  368|   319k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   319k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   319k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   319k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   319k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 18.1k, False: 301k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  18.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  18.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  18.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  18.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  18.1k|    }                                                  \
  |  |  |  |   70|   319k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   301k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   301k|                                        prefix_result.parsed_base));
  372|       |
  373|   301k|            return ranges_polyfill::batch_next(
  374|   301k|                prefix_result.iterator,
  375|   301k|                ranges::distance(buf.view().begin(), result_it));
  376|   319k|        }
  377|       |
  378|  95.9k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  95.9k|            localized_number_formatting_options<CharT>{loc};
  383|  95.9k|#endif
  384|       |
  385|  95.9k|        SCN_TRY(
  ------------------
  |  |   71|  95.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  95.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  95.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  95.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.38k, False: 93.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.38k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.38k|    }                                                  \
  |  |  |  |   70|  95.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  93.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  93.5k|            parse_digits_result,
  387|  93.5k|            parse_integer_digits_with_thsep(
  388|  93.5k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  93.5k|                prefix_result.parsed_base, locale_options));
  390|  93.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  93.5k|            parse_digits_result;
  392|       |
  393|  93.5k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 1.31k, False: 92.2k]
  ------------------
  394|  1.31k|            if (auto e = check_thsep_grouping(
  395|  1.31k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  1.31k|                    thsep_indices, locale_options.grouping);
  397|  1.31k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 684, False: 626]
  |  |  ------------------
  ------------------
  398|    684|                return unexpected(e);
  399|    684|            }
  400|  1.31k|        }
  401|       |
  402|  92.8k|        auto nothsep_source_view =
  403|  92.8k|            std::basic_string_view<CharT>{nothsep_source};
  404|  92.8k|        SCN_TRY(
  ------------------
  |  |   71|  92.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  92.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  92.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  92.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 308, False: 92.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    308|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    308|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    308|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    308|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    308|    }                                                  \
  |  |  |  |   70|  92.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  92.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  92.5k|            nothsep_source_it,
  406|  92.5k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  92.5k|                                prefix_result.parsed_base));
  408|       |
  409|  92.5k|        return ranges_polyfill::batch_next(
  410|  92.5k|            prefix_result.iterator,
  411|  92.5k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  92.5k|                ranges::ssize(thsep_indices));
  413|  92.8k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   324k|    {
  335|   324k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   324k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   324k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   324k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   324k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 324k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   324k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   324k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   324k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   324k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 9.29k, False: 315k]
  ------------------
  339|  9.29k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  9.29k|                return unexpected_scan_error(
  341|  9.29k|                    scan_error::invalid_scanned_value,
  342|  9.29k|                    "Unexpected '-' sign when parsing an "
  343|  9.29k|                    "unsigned value");
  344|  9.29k|            }
  345|  9.29k|            else {
  346|  9.29k|                if (specs.type ==
  347|  9.29k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  9.29k|                    return unexpected_scan_error(
  349|  9.29k|                        scan_error::invalid_scanned_value,
  350|  9.29k|                        "'u'-option disallows negative values");
  351|  9.29k|                }
  352|  9.29k|            }
  353|  9.29k|        }
  354|       |
  355|   315k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 44.3k, False: 270k]
  ------------------
  356|  44.3k|            value = T{0};
  357|  44.3k|            return std::next(prefix_result.iterator);
  358|  44.3k|        }
  359|       |
  360|   270k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   270k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 203k, False: 67.8k]
  |  |  ------------------
  ------------------
  361|   203k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   203k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   203k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   203k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   203k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 50, False: 203k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     50|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     50|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     50|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     50|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     50|    }                                                  \
  |  |  |  |   70|   203k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   203k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   203k|                    parse_integer_digits_without_thsep(
  363|   203k|                        ranges::subrange{prefix_result.iterator,
  364|   203k|                                         ranges::end(range)},
  365|   203k|                        prefix_result.parsed_base));
  366|       |
  367|   203k|            auto buf = make_contiguous_buffer(
  368|   203k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   203k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   203k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   203k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   203k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   203k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 12.8k, False: 190k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  12.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  12.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  12.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  12.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  12.8k|    }                                                  \
  |  |  |  |   70|   203k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   190k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   190k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   190k|                                        prefix_result.parsed_base));
  372|       |
  373|   190k|            return ranges_polyfill::batch_next(
  374|   190k|                prefix_result.iterator,
  375|   190k|                ranges::distance(buf.view().begin(), result_it));
  376|   203k|        }
  377|       |
  378|  67.8k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  67.8k|            localized_number_formatting_options<CharT>{loc};
  383|  67.8k|#endif
  384|       |
  385|  67.8k|        SCN_TRY(
  ------------------
  |  |   71|  67.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  67.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  67.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  67.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.13k, False: 66.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.13k|    }                                                  \
  |  |  |  |   70|  67.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  66.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  66.6k|            parse_digits_result,
  387|  66.6k|            parse_integer_digits_with_thsep(
  388|  66.6k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  66.6k|                prefix_result.parsed_base, locale_options));
  390|  66.6k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  66.6k|            parse_digits_result;
  392|       |
  393|  66.6k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 842, False: 65.8k]
  ------------------
  394|    842|            if (auto e = check_thsep_grouping(
  395|    842|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    842|                    thsep_indices, locale_options.grouping);
  397|    842|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    842|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 230, False: 612]
  |  |  ------------------
  ------------------
  398|    230|                return unexpected(e);
  399|    230|            }
  400|    842|        }
  401|       |
  402|  66.4k|        auto nothsep_source_view =
  403|  66.4k|            std::basic_string_view<CharT>{nothsep_source};
  404|  66.4k|        SCN_TRY(
  ------------------
  |  |   71|  66.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  66.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  66.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  66.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 736, False: 65.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    736|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    736|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    736|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    736|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    736|    }                                                  \
  |  |  |  |   70|  66.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  65.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  65.7k|            nothsep_source_it,
  406|  65.7k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  65.7k|                                prefix_result.parsed_base));
  408|       |
  409|  65.7k|        return ranges_polyfill::batch_next(
  410|  65.7k|            prefix_result.iterator,
  411|  65.7k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  65.7k|                ranges::ssize(thsep_indices));
  413|  66.4k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   371k|    {
  335|   371k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   371k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   371k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   371k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   371k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 371k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   371k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   371k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   371k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   371k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 9.66k, False: 361k]
  ------------------
  339|  9.66k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  9.66k|                return unexpected_scan_error(
  341|  9.66k|                    scan_error::invalid_scanned_value,
  342|  9.66k|                    "Unexpected '-' sign when parsing an "
  343|  9.66k|                    "unsigned value");
  344|  9.66k|            }
  345|  9.66k|            else {
  346|  9.66k|                if (specs.type ==
  347|  9.66k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  9.66k|                    return unexpected_scan_error(
  349|  9.66k|                        scan_error::invalid_scanned_value,
  350|  9.66k|                        "'u'-option disallows negative values");
  351|  9.66k|                }
  352|  9.66k|            }
  353|  9.66k|        }
  354|       |
  355|   361k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 47.6k, False: 314k]
  ------------------
  356|  47.6k|            value = T{0};
  357|  47.6k|            return std::next(prefix_result.iterator);
  358|  47.6k|        }
  359|       |
  360|   314k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   314k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 239k, False: 74.9k]
  |  |  ------------------
  ------------------
  361|   239k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   239k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   239k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   239k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   239k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 58, False: 239k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     58|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     58|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     58|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     58|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     58|    }                                                  \
  |  |  |  |   70|   239k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   239k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   239k|                    parse_integer_digits_without_thsep(
  363|   239k|                        ranges::subrange{prefix_result.iterator,
  364|   239k|                                         ranges::end(range)},
  365|   239k|                        prefix_result.parsed_base));
  366|       |
  367|   239k|            auto buf = make_contiguous_buffer(
  368|   239k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   239k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   239k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   239k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   239k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   239k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.9k, False: 227k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.9k|    }                                                  \
  |  |  |  |   70|   239k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   227k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   227k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   227k|                                        prefix_result.parsed_base));
  372|       |
  373|   227k|            return ranges_polyfill::batch_next(
  374|   227k|                prefix_result.iterator,
  375|   227k|                ranges::distance(buf.view().begin(), result_it));
  376|   239k|        }
  377|       |
  378|  74.9k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  74.9k|            localized_number_formatting_options<CharT>{loc};
  383|  74.9k|#endif
  384|       |
  385|  74.9k|        SCN_TRY(
  ------------------
  |  |   71|  74.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  74.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  74.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  74.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.31k, False: 73.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.31k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.31k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.31k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.31k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.31k|    }                                                  \
  |  |  |  |   70|  74.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  73.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  73.5k|            parse_digits_result,
  387|  73.5k|            parse_integer_digits_with_thsep(
  388|  73.5k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  73.5k|                prefix_result.parsed_base, locale_options));
  390|  73.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  73.5k|            parse_digits_result;
  392|       |
  393|  73.5k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 906, False: 72.6k]
  ------------------
  394|    906|            if (auto e = check_thsep_grouping(
  395|    906|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    906|                    thsep_indices, locale_options.grouping);
  397|    906|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    906|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 294, False: 612]
  |  |  ------------------
  ------------------
  398|    294|                return unexpected(e);
  399|    294|            }
  400|    906|        }
  401|       |
  402|  73.3k|        auto nothsep_source_view =
  403|  73.3k|            std::basic_string_view<CharT>{nothsep_source};
  404|  73.3k|        SCN_TRY(
  ------------------
  |  |   71|  73.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  73.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  73.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  73.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 268, False: 73.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    268|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    268|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    268|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    268|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    268|    }                                                  \
  |  |  |  |   70|  73.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  73.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  73.0k|            nothsep_source_it,
  406|  73.0k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  73.0k|                                prefix_result.parsed_base));
  408|       |
  409|  73.0k|        return ranges_polyfill::batch_next(
  410|  73.0k|            prefix_result.iterator,
  411|  73.0k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  73.0k|                ranges::ssize(thsep_indices));
  413|  73.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   376k|    {
  335|   376k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   376k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   376k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   376k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   376k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 376k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   376k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   376k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   376k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   376k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 9.87k, False: 366k]
  ------------------
  339|  9.87k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  9.87k|                return unexpected_scan_error(
  341|  9.87k|                    scan_error::invalid_scanned_value,
  342|  9.87k|                    "Unexpected '-' sign when parsing an "
  343|  9.87k|                    "unsigned value");
  344|  9.87k|            }
  345|  9.87k|            else {
  346|  9.87k|                if (specs.type ==
  347|  9.87k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  9.87k|                    return unexpected_scan_error(
  349|  9.87k|                        scan_error::invalid_scanned_value,
  350|  9.87k|                        "'u'-option disallows negative values");
  351|  9.87k|                }
  352|  9.87k|            }
  353|  9.87k|        }
  354|       |
  355|   366k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 48.3k, False: 318k]
  ------------------
  356|  48.3k|            value = T{0};
  357|  48.3k|            return std::next(prefix_result.iterator);
  358|  48.3k|        }
  359|       |
  360|   318k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   318k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 242k, False: 75.3k]
  |  |  ------------------
  ------------------
  361|   242k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   242k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   242k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   242k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 58, False: 242k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     58|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     58|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     58|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     58|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     58|    }                                                  \
  |  |  |  |   70|   242k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   242k|                    parse_integer_digits_without_thsep(
  363|   242k|                        ranges::subrange{prefix_result.iterator,
  364|   242k|                                         ranges::end(range)},
  365|   242k|                        prefix_result.parsed_base));
  366|       |
  367|   242k|            auto buf = make_contiguous_buffer(
  368|   242k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   242k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   242k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   242k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   242k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.6k, False: 231k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.6k|    }                                                  \
  |  |  |  |   70|   242k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   231k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   231k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   231k|                                        prefix_result.parsed_base));
  372|       |
  373|   231k|            return ranges_polyfill::batch_next(
  374|   231k|                prefix_result.iterator,
  375|   231k|                ranges::distance(buf.view().begin(), result_it));
  376|   242k|        }
  377|       |
  378|  75.3k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  75.3k|            localized_number_formatting_options<CharT>{loc};
  383|  75.3k|#endif
  384|       |
  385|  75.3k|        SCN_TRY(
  ------------------
  |  |   71|  75.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  75.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  75.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  75.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.38k, False: 73.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.38k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.38k|    }                                                  \
  |  |  |  |   70|  75.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  73.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  73.9k|            parse_digits_result,
  387|  73.9k|            parse_integer_digits_with_thsep(
  388|  73.9k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  73.9k|                prefix_result.parsed_base, locale_options));
  390|  73.9k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  73.9k|            parse_digits_result;
  392|       |
  393|  73.9k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 910, False: 73.0k]
  ------------------
  394|    910|            if (auto e = check_thsep_grouping(
  395|    910|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    910|                    thsep_indices, locale_options.grouping);
  397|    910|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    910|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 296, False: 614]
  |  |  ------------------
  ------------------
  398|    296|                return unexpected(e);
  399|    296|            }
  400|    910|        }
  401|       |
  402|  73.6k|        auto nothsep_source_view =
  403|  73.6k|            std::basic_string_view<CharT>{nothsep_source};
  404|  73.6k|        SCN_TRY(
  ------------------
  |  |   71|  73.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  73.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  73.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  73.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 112, False: 73.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    112|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    112|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    112|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    112|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    112|    }                                                  \
  |  |  |  |   70|  73.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  73.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  73.5k|            nothsep_source_it,
  406|  73.5k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  73.5k|                                prefix_result.parsed_base));
  408|       |
  409|  73.5k|        return ranges_polyfill::batch_next(
  410|  73.5k|            prefix_result.iterator,
  411|  73.5k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  73.5k|                ranges::ssize(thsep_indices));
  413|  73.6k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  35.1k|    {
  335|  35.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  35.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  35.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  35.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  35.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 35.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  35.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  35.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  35.1k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  35.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 4.39k, False: 30.7k]
  ------------------
  339|  4.39k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  4.39k|                return unexpected_scan_error(
  341|  4.39k|                    scan_error::invalid_scanned_value,
  342|  4.39k|                    "Unexpected '-' sign when parsing an "
  343|  4.39k|                    "unsigned value");
  344|  4.39k|            }
  345|  4.39k|            else {
  346|  4.39k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 4.39k]
  ------------------
  347|  4.39k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  4.39k|            }
  353|  4.39k|        }
  354|       |
  355|  35.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 35.1k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  35.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  35.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 30.7k, False: 4.39k]
  |  |  ------------------
  ------------------
  361|  30.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  30.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  30.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  30.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 21.9k, False: 8.79k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  21.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  21.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  21.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  21.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  21.9k|    }                                                  \
  |  |  |  |   70|  30.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  8.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  8.79k|                    parse_integer_digits_without_thsep(
  363|  8.79k|                        ranges::subrange{prefix_result.iterator,
  364|  8.79k|                                         ranges::end(range)},
  365|  8.79k|                        prefix_result.parsed_base));
  366|       |
  367|  8.79k|            auto buf = make_contiguous_buffer(
  368|  8.79k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  8.79k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  8.79k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.79k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.79k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 8.79k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  8.79k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  8.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  8.79k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  8.79k|                                        prefix_result.parsed_base));
  372|       |
  373|  8.79k|            return ranges_polyfill::batch_next(
  374|  8.79k|                prefix_result.iterator,
  375|  8.79k|                ranges::distance(buf.view().begin(), result_it));
  376|  8.79k|        }
  377|       |
  378|  4.39k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.39k|            localized_number_formatting_options<CharT>{loc};
  383|  4.39k|#endif
  384|       |
  385|  4.39k|        SCN_TRY(
  ------------------
  |  |   71|  4.39k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.39k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.39k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.39k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.39k|    }                                                  \
  |  |  |  |   70|  4.39k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  35.1k|    {
  335|  35.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  35.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  35.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  35.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  35.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 35.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  35.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  35.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  35.1k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  35.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 4.39k, False: 30.7k]
  ------------------
  339|  4.39k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  4.39k|                return unexpected_scan_error(
  341|  4.39k|                    scan_error::invalid_scanned_value,
  342|  4.39k|                    "Unexpected '-' sign when parsing an "
  343|  4.39k|                    "unsigned value");
  344|  4.39k|            }
  345|  4.39k|            else {
  346|  4.39k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 4.39k]
  ------------------
  347|  4.39k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  4.39k|            }
  353|  4.39k|        }
  354|       |
  355|  35.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 35.1k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  35.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  35.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 30.7k, False: 4.39k]
  |  |  ------------------
  ------------------
  361|  30.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  30.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  30.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  30.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 21.9k, False: 8.79k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  21.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  21.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  21.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  21.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  21.9k|    }                                                  \
  |  |  |  |   70|  30.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  8.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  8.79k|                    parse_integer_digits_without_thsep(
  363|  8.79k|                        ranges::subrange{prefix_result.iterator,
  364|  8.79k|                                         ranges::end(range)},
  365|  8.79k|                        prefix_result.parsed_base));
  366|       |
  367|  8.79k|            auto buf = make_contiguous_buffer(
  368|  8.79k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  8.79k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  8.79k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.79k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.79k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 8.79k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  8.79k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  8.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  8.79k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  8.79k|                                        prefix_result.parsed_base));
  372|       |
  373|  8.79k|            return ranges_polyfill::batch_next(
  374|  8.79k|                prefix_result.iterator,
  375|  8.79k|                ranges::distance(buf.view().begin(), result_it));
  376|  8.79k|        }
  377|       |
  378|  4.39k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.39k|            localized_number_formatting_options<CharT>{loc};
  383|  4.39k|#endif
  384|       |
  385|  4.39k|        SCN_TRY(
  ------------------
  |  |   71|  4.39k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.39k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.39k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.39k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.39k|    }                                                  \
  |  |  |  |   70|  4.39k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  35.1k|    {
  335|  35.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  35.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  35.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  35.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  35.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 35.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  35.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  35.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  35.1k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  35.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 4.39k, False: 30.7k]
  ------------------
  339|  4.39k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  4.39k|                return unexpected_scan_error(
  341|  4.39k|                    scan_error::invalid_scanned_value,
  342|  4.39k|                    "Unexpected '-' sign when parsing an "
  343|  4.39k|                    "unsigned value");
  344|  4.39k|            }
  345|  4.39k|            else {
  346|  4.39k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 4.39k]
  ------------------
  347|  4.39k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  4.39k|            }
  353|  4.39k|        }
  354|       |
  355|  35.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 35.1k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  35.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  35.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 30.7k, False: 4.39k]
  |  |  ------------------
  ------------------
  361|  30.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  30.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  30.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  30.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 21.9k, False: 8.79k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  21.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  21.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  21.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  21.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  21.9k|    }                                                  \
  |  |  |  |   70|  30.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  8.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  8.79k|                    parse_integer_digits_without_thsep(
  363|  8.79k|                        ranges::subrange{prefix_result.iterator,
  364|  8.79k|                                         ranges::end(range)},
  365|  8.79k|                        prefix_result.parsed_base));
  366|       |
  367|  8.79k|            auto buf = make_contiguous_buffer(
  368|  8.79k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  8.79k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  8.79k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.79k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.79k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 8.79k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  8.79k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  8.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  8.79k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  8.79k|                                        prefix_result.parsed_base));
  372|       |
  373|  8.79k|            return ranges_polyfill::batch_next(
  374|  8.79k|                prefix_result.iterator,
  375|  8.79k|                ranges::distance(buf.view().begin(), result_it));
  376|  8.79k|        }
  377|       |
  378|  4.39k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.39k|            localized_number_formatting_options<CharT>{loc};
  383|  4.39k|#endif
  384|       |
  385|  4.39k|        SCN_TRY(
  ------------------
  |  |   71|  4.39k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.39k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.39k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.39k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.39k|    }                                                  \
  |  |  |  |   70|  4.39k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  30.7k|    {
  335|  30.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  30.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  30.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  30.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 30.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  30.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  30.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  30.7k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  30.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 4.39k, False: 26.3k]
  ------------------
  339|  4.39k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  4.39k|                return unexpected_scan_error(
  341|  4.39k|                    scan_error::invalid_scanned_value,
  342|  4.39k|                    "Unexpected '-' sign when parsing an "
  343|  4.39k|                    "unsigned value");
  344|  4.39k|            }
  345|  4.39k|            else {
  346|  4.39k|                if (specs.type ==
  347|  4.39k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  4.39k|                    return unexpected_scan_error(
  349|  4.39k|                        scan_error::invalid_scanned_value,
  350|  4.39k|                        "'u'-option disallows negative values");
  351|  4.39k|                }
  352|  4.39k|            }
  353|  4.39k|        }
  354|       |
  355|  26.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 26.3k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  26.3k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  26.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 21.9k, False: 4.39k]
  |  |  ------------------
  ------------------
  361|  21.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  21.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 17.5k, False: 4.39k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  17.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  17.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  17.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  17.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  17.5k|    }                                                  \
  |  |  |  |   70|  21.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.39k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  4.39k|                    parse_integer_digits_without_thsep(
  363|  4.39k|                        ranges::subrange{prefix_result.iterator,
  364|  4.39k|                                         ranges::end(range)},
  365|  4.39k|                        prefix_result.parsed_base));
  366|       |
  367|  4.39k|            auto buf = make_contiguous_buffer(
  368|  4.39k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  4.39k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  4.39k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.39k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.39k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.39k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.39k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.39k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  4.39k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  4.39k|                                        prefix_result.parsed_base));
  372|       |
  373|  4.39k|            return ranges_polyfill::batch_next(
  374|  4.39k|                prefix_result.iterator,
  375|  4.39k|                ranges::distance(buf.view().begin(), result_it));
  376|  4.39k|        }
  377|       |
  378|  4.39k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.39k|            localized_number_formatting_options<CharT>{loc};
  383|  4.39k|#endif
  384|       |
  385|  4.39k|        SCN_TRY(
  ------------------
  |  |   71|  4.39k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.39k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.39k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.39k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.39k|    }                                                  \
  |  |  |  |   70|  4.39k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  30.7k|    {
  335|  30.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  30.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  30.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  30.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 30.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  30.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  30.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  30.7k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  30.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 4.39k, False: 26.3k]
  ------------------
  339|  4.39k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  4.39k|                return unexpected_scan_error(
  341|  4.39k|                    scan_error::invalid_scanned_value,
  342|  4.39k|                    "Unexpected '-' sign when parsing an "
  343|  4.39k|                    "unsigned value");
  344|  4.39k|            }
  345|  4.39k|            else {
  346|  4.39k|                if (specs.type ==
  347|  4.39k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  4.39k|                    return unexpected_scan_error(
  349|  4.39k|                        scan_error::invalid_scanned_value,
  350|  4.39k|                        "'u'-option disallows negative values");
  351|  4.39k|                }
  352|  4.39k|            }
  353|  4.39k|        }
  354|       |
  355|  26.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 26.3k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  26.3k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  26.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 21.9k, False: 4.39k]
  |  |  ------------------
  ------------------
  361|  21.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  21.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 17.5k, False: 4.39k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  17.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  17.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  17.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  17.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  17.5k|    }                                                  \
  |  |  |  |   70|  21.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.39k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  4.39k|                    parse_integer_digits_without_thsep(
  363|  4.39k|                        ranges::subrange{prefix_result.iterator,
  364|  4.39k|                                         ranges::end(range)},
  365|  4.39k|                        prefix_result.parsed_base));
  366|       |
  367|  4.39k|            auto buf = make_contiguous_buffer(
  368|  4.39k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  4.39k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  4.39k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.39k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.39k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.39k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.39k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.39k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  4.39k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  4.39k|                                        prefix_result.parsed_base));
  372|       |
  373|  4.39k|            return ranges_polyfill::batch_next(
  374|  4.39k|                prefix_result.iterator,
  375|  4.39k|                ranges::distance(buf.view().begin(), result_it));
  376|  4.39k|        }
  377|       |
  378|  4.39k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.39k|            localized_number_formatting_options<CharT>{loc};
  383|  4.39k|#endif
  384|       |
  385|  4.39k|        SCN_TRY(
  ------------------
  |  |   71|  4.39k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.39k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.39k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.39k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.39k|    }                                                  \
  |  |  |  |   70|  4.39k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  30.7k|    {
  335|  30.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  30.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  30.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  30.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 30.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  30.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  30.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  30.7k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  30.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 4.39k, False: 26.3k]
  ------------------
  339|  4.39k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  4.39k|                return unexpected_scan_error(
  341|  4.39k|                    scan_error::invalid_scanned_value,
  342|  4.39k|                    "Unexpected '-' sign when parsing an "
  343|  4.39k|                    "unsigned value");
  344|  4.39k|            }
  345|  4.39k|            else {
  346|  4.39k|                if (specs.type ==
  347|  4.39k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  4.39k|                    return unexpected_scan_error(
  349|  4.39k|                        scan_error::invalid_scanned_value,
  350|  4.39k|                        "'u'-option disallows negative values");
  351|  4.39k|                }
  352|  4.39k|            }
  353|  4.39k|        }
  354|       |
  355|  26.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 26.3k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  26.3k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  26.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 21.9k, False: 4.39k]
  |  |  ------------------
  ------------------
  361|  21.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  21.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 17.5k, False: 4.39k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  17.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  17.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  17.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  17.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  17.5k|    }                                                  \
  |  |  |  |   70|  21.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.39k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  4.39k|                    parse_integer_digits_without_thsep(
  363|  4.39k|                        ranges::subrange{prefix_result.iterator,
  364|  4.39k|                                         ranges::end(range)},
  365|  4.39k|                        prefix_result.parsed_base));
  366|       |
  367|  4.39k|            auto buf = make_contiguous_buffer(
  368|  4.39k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  4.39k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  4.39k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.39k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.39k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.39k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.39k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.39k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  4.39k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  4.39k|                                        prefix_result.parsed_base));
  372|       |
  373|  4.39k|            return ranges_polyfill::batch_next(
  374|  4.39k|                prefix_result.iterator,
  375|  4.39k|                ranges::distance(buf.view().begin(), result_it));
  376|  4.39k|        }
  377|       |
  378|  4.39k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.39k|            localized_number_formatting_options<CharT>{loc};
  383|  4.39k|#endif
  384|       |
  385|  4.39k|        SCN_TRY(
  ------------------
  |  |   71|  4.39k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.39k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.39k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.39k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.39k|    }                                                  \
  |  |  |  |   70|  4.39k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   137k|    {
  324|   137k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   137k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   137k|        return read_default_with_base(range, value, 0);
  326|   137k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   137k|    {
  287|   137k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   137k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   137k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   137k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 137k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   137k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   137k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   137k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   137k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   137k|                return unexpected_scan_error(
  293|   137k|                    scan_error::invalid_scanned_value,
  294|   137k|                    "Unexpected '-' sign when parsing an "
  295|   137k|                    "unsigned value");
  296|   137k|            }
  297|   137k|        }
  298|       |
  299|   137k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 26.5k, False: 111k]
  ------------------
  300|  26.5k|            value = T{0};
  301|  26.5k|            return std::next(prefix_result.iterator);
  302|  26.5k|        }
  303|       |
  304|   222k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   111k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   111k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   111k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 69, False: 110k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     69|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     69|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     69|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     69|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     69|    }                                                  \
  |  |  |  |   70|   111k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   222k|                                     ranges::subrange{prefix_result.iterator,
  306|   222k|                                                      ranges::end(range)},
  307|   222k|                                     prefix_result.parsed_base));
  308|       |
  309|   222k|        auto buf = make_contiguous_buffer(
  310|   222k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   222k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   110k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   110k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   110k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.4k, False: 100k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.4k|    }                                                  \
  |  |  |  |   70|   110k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   100k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   100k|                                    prefix_result.parsed_base));
  314|       |
  315|   100k|        return ranges_polyfill::batch_next(
  316|   100k|            prefix_result.iterator,
  317|   100k|            ranges::distance(buf.view().begin(), result_it));
  318|   222k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESE_i:
  120|  3.00M|{
  121|  3.00M|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|  3.00M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.00M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.00M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 3.00M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  3.00M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|  3.00M|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|  3.00M|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|  3.00M|        parse_integer_base_prefix(
  126|  3.00M|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|  3.00M|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 829k, False: 2.17M]
  ------------------
  129|   829k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 2.33k, False: 826k]
  ------------------
  130|   829k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 412k, False: 414k]
  ------------------
  131|   414k|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|   414k|                digits_begin_it, ranges::begin(range));
  133|   414k|        }
  134|   414k|        else {
  135|   414k|            parsed_zero = false;
  136|   414k|        }
  137|   829k|    }
  138|  2.17M|    else {
  139|  2.17M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 5.24k, False: 2.17M]
  ------------------
  140|  2.17M|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 275k, False: 1.89M]
  ------------------
  141|   280k|            digits_begin_it = base_prefix_begin_it;
  142|   280k|        }
  143|  2.17M|    }
  144|       |
  145|  3.00M|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 2.76M, False: 246k]
  ------------------
  146|  2.76M|        sign = sign_type::plus_sign;
  147|  2.76M|    }
  148|  3.00M|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|  3.00M|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|  3.00M|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_i:
   87|  3.00M|{
   88|  3.00M|    switch (base) {
   89|  82.4k|        case 2:
  ------------------
  |  Branch (89:9): [True: 82.4k, False: 2.92M]
  ------------------
   90|       |            // allow 0b/0B
   91|  82.4k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  82.4k|                    false};
   93|       |
   94|   170k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 170k, False: 2.83M]
  ------------------
   95|       |            // allow 0o/0O/0
   96|   170k|            bool zero_parsed = false;
   97|   170k|            auto it = apply_opt(
   98|   170k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|   170k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|   401k|        case 16:
  ------------------
  |  Branch (102:9): [True: 401k, False: 2.60M]
  ------------------
  103|       |            // allow 0x/0X
  104|   401k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|   401k|                    false};
  106|       |
  107|  1.96M|        case 0:
  ------------------
  |  Branch (107:9): [True: 1.96M, False: 1.04M]
  ------------------
  108|       |            // detect base
  109|  1.96M|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|  1.96M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|   386k|        default:
  ------------------
  |  Branch (111:9): [True: 386k, False: 2.62M]
  ------------------
  112|       |            // no base prefix allowed
  113|   386k|            return {ranges::begin(range), base, false};
  114|  3.00M|    }
  115|  3.00M|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   37|  2.03M|{
   38|  2.03M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|  2.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|  2.03M|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_Rb:
   52|  2.11M|{
   53|  2.11M|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 18.8k, False: 2.09M]
  ------------------
   54|  18.8k|        return *r;
   55|  18.8k|    }
   56|       |
   57|  2.09M|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 829k, False: 1.27M]
  ------------------
   58|   829k|        zero_parsed = true;
   59|   829k|        return *r;
   60|   829k|    }
   61|       |
   62|  1.27M|    return unexpected(parse_error::error);
   63|  2.09M|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   44|  2.36M|{
   45|  2.36M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  2.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  2.36M|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_:
   68|  1.96M|{
   69|  1.96M|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 12.3k, False: 1.95M]
  ------------------
   70|  12.3k|        return {*r, 16, false};
   71|  12.3k|    }
   72|  1.95M|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 5.51k, False: 1.94M]
  ------------------
   73|  5.51k|        return {*r, 2, false};
   74|  5.51k|    }
   75|  1.94M|    {
   76|  1.94M|        bool zero_parsed{false};
   77|  1.94M|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 785k, False: 1.16M]
  ------------------
   78|   785k|            return {*r, 8, zero_parsed};
   79|   785k|        }
   80|  1.94M|    }
   81|  1.16M|    return {ranges::begin(range), 10, false};
   82|  1.94M|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESD_i:
  155|  2.11M|{
  156|  2.11M|    using char_type = detail::char_t<Range>;
  157|       |
  158|  2.11M|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|  2.11M|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.47k, False: 2.11M]
  |  |  ------------------
  ------------------
  160|  1.47k|            return unexpected_scan_error(
  161|  1.47k|                scan_error::invalid_scanned_value,
  162|  1.47k|                "Failed to parse integer: No digits found");
  163|  1.47k|        }
  164|  2.11M|        return ranges::end(range);
  165|  2.11M|    }
  166|  2.11M|    else {
  167|  2.11M|        return read_while1_code_unit(
  168|  2.11M|                   range, [&](char_type ch)
  169|  2.11M|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|  2.11M|            .transform_error(map_parse_error_to_scan_error(
  171|  2.11M|                scan_error::invalid_scanned_value,
  172|  2.11M|                "Failed to parse integer: No digits found"));
  173|  2.11M|    }
  174|  2.11M|}
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   156k|    {
  324|   156k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   156k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   156k|        return read_default_with_base(range, value, 0);
  326|   156k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   156k|    {
  287|   156k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   156k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   156k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   156k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 156k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   156k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   156k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   156k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   156k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   156k|                return unexpected_scan_error(
  293|   156k|                    scan_error::invalid_scanned_value,
  294|   156k|                    "Unexpected '-' sign when parsing an "
  295|   156k|                    "unsigned value");
  296|   156k|            }
  297|   156k|        }
  298|       |
  299|   156k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 29.5k, False: 126k]
  ------------------
  300|  29.5k|            value = T{0};
  301|  29.5k|            return std::next(prefix_result.iterator);
  302|  29.5k|        }
  303|       |
  304|   253k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   126k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   126k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   126k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 126, False: 126k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    126|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    126|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    126|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    126|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    126|    }                                                  \
  |  |  |  |   70|   126k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   253k|                                     ranges::subrange{prefix_result.iterator,
  306|   253k|                                                      ranges::end(range)},
  307|   253k|                                     prefix_result.parsed_base));
  308|       |
  309|   253k|        auto buf = make_contiguous_buffer(
  310|   253k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   253k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   126k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   126k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   126k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.97k, False: 116k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.97k|    }                                                  \
  |  |  |  |   70|   126k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   116k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   116k|                                    prefix_result.parsed_base));
  314|       |
  315|   116k|        return ranges_polyfill::batch_next(
  316|   116k|            prefix_result.iterator,
  317|   116k|            ranges::distance(buf.view().begin(), result_it));
  318|   253k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   157k|    {
  324|   157k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   157k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   157k|        return read_default_with_base(range, value, 0);
  326|   157k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   157k|    {
  287|   157k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   157k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   157k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   157k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 157k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   157k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   157k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   157k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   157k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   157k|                return unexpected_scan_error(
  293|   157k|                    scan_error::invalid_scanned_value,
  294|   157k|                    "Unexpected '-' sign when parsing an "
  295|   157k|                    "unsigned value");
  296|   157k|            }
  297|   157k|        }
  298|       |
  299|   157k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 29.9k, False: 127k]
  ------------------
  300|  29.9k|            value = T{0};
  301|  29.9k|            return std::next(prefix_result.iterator);
  302|  29.9k|        }
  303|       |
  304|   255k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   127k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   127k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   127k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 141, False: 127k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    141|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    141|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    141|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    141|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    141|    }                                                  \
  |  |  |  |   70|   127k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   255k|                                     ranges::subrange{prefix_result.iterator,
  306|   255k|                                                      ranges::end(range)},
  307|   255k|                                     prefix_result.parsed_base));
  308|       |
  309|   255k|        auto buf = make_contiguous_buffer(
  310|   255k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   255k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   127k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   127k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   127k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.88k, False: 117k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.88k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.88k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.88k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.88k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.88k|    }                                                  \
  |  |  |  |   70|   127k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   117k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   117k|                                    prefix_result.parsed_base));
  314|       |
  315|   117k|        return ranges_polyfill::batch_next(
  316|   117k|            prefix_result.iterator,
  317|   117k|            ranges::distance(buf.view().begin(), result_it));
  318|   255k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   122k|    {
  324|   122k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   122k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   122k|        return read_default_with_base(range, value, 0);
  326|   122k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   122k|    {
  287|   122k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   122k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   122k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   122k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 122k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   122k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   122k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   122k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   122k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   122k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 1.86k, False: 120k]
  ------------------
  292|  1.86k|                return unexpected_scan_error(
  293|  1.86k|                    scan_error::invalid_scanned_value,
  294|  1.86k|                    "Unexpected '-' sign when parsing an "
  295|  1.86k|                    "unsigned value");
  296|  1.86k|            }
  297|   122k|        }
  298|       |
  299|   120k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 24.1k, False: 96.2k]
  ------------------
  300|  24.1k|            value = T{0};
  301|  24.1k|            return std::next(prefix_result.iterator);
  302|  24.1k|        }
  303|       |
  304|   192k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  96.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  96.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  96.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  96.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 27, False: 96.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     27|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     27|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     27|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     27|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     27|    }                                                  \
  |  |  |  |   70|  96.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  96.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   192k|                                     ranges::subrange{prefix_result.iterator,
  306|   192k|                                                      ranges::end(range)},
  307|   192k|                                     prefix_result.parsed_base));
  308|       |
  309|   192k|        auto buf = make_contiguous_buffer(
  310|   192k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   192k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  96.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  96.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  96.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  96.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.90k, False: 87.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.90k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.90k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.90k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.90k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.90k|    }                                                  \
  |  |  |  |   70|  96.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  87.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  87.3k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  87.3k|                                    prefix_result.parsed_base));
  314|       |
  315|  87.3k|        return ranges_polyfill::batch_next(
  316|  87.3k|            prefix_result.iterator,
  317|  87.3k|            ranges::distance(buf.view().begin(), result_it));
  318|   192k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   133k|    {
  324|   133k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   133k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   133k|        return read_default_with_base(range, value, 0);
  326|   133k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   133k|    {
  287|   133k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   133k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   133k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   133k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 133k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   133k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   133k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   133k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   133k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 1.95k, False: 131k]
  ------------------
  292|  1.95k|                return unexpected_scan_error(
  293|  1.95k|                    scan_error::invalid_scanned_value,
  294|  1.95k|                    "Unexpected '-' sign when parsing an "
  295|  1.95k|                    "unsigned value");
  296|  1.95k|            }
  297|   133k|        }
  298|       |
  299|   131k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 25.9k, False: 105k]
  ------------------
  300|  25.9k|            value = T{0};
  301|  25.9k|            return std::next(prefix_result.iterator);
  302|  25.9k|        }
  303|       |
  304|   211k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   105k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   105k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   105k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 27, False: 105k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     27|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     27|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     27|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     27|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     27|    }                                                  \
  |  |  |  |   70|   105k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   211k|                                     ranges::subrange{prefix_result.iterator,
  306|   211k|                                                      ranges::end(range)},
  307|   211k|                                     prefix_result.parsed_base));
  308|       |
  309|   211k|        auto buf = make_contiguous_buffer(
  310|   211k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   211k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   105k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   105k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   105k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.59k, False: 96.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.59k|    }                                                  \
  |  |  |  |   70|   105k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  96.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  96.9k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  96.9k|                                    prefix_result.parsed_base));
  314|       |
  315|  96.9k|        return ranges_polyfill::batch_next(
  316|  96.9k|            prefix_result.iterator,
  317|  96.9k|            ranges::distance(buf.view().begin(), result_it));
  318|   211k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   134k|    {
  324|   134k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   134k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   134k|        return read_default_with_base(range, value, 0);
  326|   134k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   134k|    {
  287|   134k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   134k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   134k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   134k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 134k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   134k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   134k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   134k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   134k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.01k, False: 132k]
  ------------------
  292|  2.01k|                return unexpected_scan_error(
  293|  2.01k|                    scan_error::invalid_scanned_value,
  294|  2.01k|                    "Unexpected '-' sign when parsing an "
  295|  2.01k|                    "unsigned value");
  296|  2.01k|            }
  297|   134k|        }
  298|       |
  299|   132k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 26.2k, False: 106k]
  ------------------
  300|  26.2k|            value = T{0};
  301|  26.2k|            return std::next(prefix_result.iterator);
  302|  26.2k|        }
  303|       |
  304|   212k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   106k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   106k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   106k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 27, False: 105k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     27|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     27|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     27|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     27|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     27|    }                                                  \
  |  |  |  |   70|   106k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   212k|                                     ranges::subrange{prefix_result.iterator,
  306|   212k|                                                      ranges::end(range)},
  307|   212k|                                     prefix_result.parsed_base));
  308|       |
  309|   212k|        auto buf = make_contiguous_buffer(
  310|   212k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   212k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   105k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   105k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   105k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.47k, False: 97.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.47k|    }                                                  \
  |  |  |  |   70|   105k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  97.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  97.5k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  97.5k|                                    prefix_result.parsed_base));
  314|       |
  315|  97.5k|        return ranges_polyfill::batch_next(
  316|  97.5k|            prefix_result.iterator,
  317|  97.5k|            ranges::distance(buf.view().begin(), result_it));
  318|   212k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSC_12basic_stringIT0_NSC_11char_traitsISJ_EENSC_9allocatorISJ_EEEENSI_IcNSK_IcEENSM_IcEEEEEEEEESF_iRKNS1_35localized_number_formatting_optionsISJ_EE:
  184|   450k|{
  185|   450k|    std::basic_string<CharT> output;
  186|   450k|    std::string thsep_indices;
  187|   450k|    auto it = ranges::begin(range);
  188|   450k|    bool digit_matched = false;
  189|  1.80M|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 1.79M, False: 5.29k]
  ------------------
  190|  1.79M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 75.7k, False: 1.72M]
  ------------------
  191|  75.7k|            thsep_indices.push_back(static_cast<char>(
  192|  75.7k|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|  75.7k|        }
  194|  1.72M|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 445k, False: 1.27M]
  ------------------
  195|   445k|            break;
  196|   445k|        }
  197|  1.27M|        else {
  198|  1.27M|            output.push_back(*it);
  199|  1.27M|            digit_matched = true;
  200|  1.27M|        }
  201|  1.79M|    }
  202|   450k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|   450k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 32.5k, False: 417k]
  |  |  ------------------
  ------------------
  203|  32.5k|        return unexpected_scan_error(
  204|  32.5k|            scan_error::invalid_scanned_value,
  205|  32.5k|            "Failed to parse integer: No digits found");
  206|  32.5k|    }
  207|   417k|    return std::tuple{it, output, thsep_indices};
  208|   450k|}
_ZN3scn2v24impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  279|  2.50M|    {
  280|  2.50M|        detail::check_int_type_specs(specs, eh);
  281|  2.50M|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   330k|    {
  335|   330k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   330k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   330k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   330k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 330k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   330k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   330k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   330k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 26.3k, False: 304k]
  ------------------
  339|  26.3k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  26.3k|                return unexpected_scan_error(
  341|  26.3k|                    scan_error::invalid_scanned_value,
  342|  26.3k|                    "Unexpected '-' sign when parsing an "
  343|  26.3k|                    "unsigned value");
  344|  26.3k|            }
  345|  26.3k|            else {
  346|  26.3k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 26.3k]
  ------------------
  347|  26.3k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  26.3k|            }
  353|  26.3k|        }
  354|       |
  355|   330k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 41.4k, False: 289k]
  ------------------
  356|  41.4k|            value = T{0};
  357|  41.4k|            return std::next(prefix_result.iterator);
  358|  41.4k|        }
  359|       |
  360|   289k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   289k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 215k, False: 74.2k]
  |  |  ------------------
  ------------------
  361|   215k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   215k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   215k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   215k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   215k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 182, False: 214k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    182|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    182|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    182|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    182|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    182|    }                                                  \
  |  |  |  |   70|   215k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   214k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   214k|                    parse_integer_digits_without_thsep(
  363|   214k|                        ranges::subrange{prefix_result.iterator,
  364|   214k|                                         ranges::end(range)},
  365|   214k|                        prefix_result.parsed_base));
  366|       |
  367|   214k|            auto buf = make_contiguous_buffer(
  368|   214k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   214k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   214k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   214k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   214k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   214k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 36.2k, False: 178k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  36.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  36.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  36.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  36.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  36.2k|    }                                                  \
  |  |  |  |   70|   214k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   178k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   178k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   178k|                                        prefix_result.parsed_base));
  372|       |
  373|   178k|            return ranges_polyfill::batch_next(
  374|   178k|                prefix_result.iterator,
  375|   178k|                ranges::distance(buf.view().begin(), result_it));
  376|   214k|        }
  377|       |
  378|  74.2k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  74.2k|            localized_number_formatting_options<CharT>{loc};
  383|  74.2k|#endif
  384|       |
  385|  74.2k|        SCN_TRY(
  ------------------
  |  |   71|  74.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  74.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  74.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  74.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.40k, False: 68.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.40k|    }                                                  \
  |  |  |  |   70|  74.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  68.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  68.8k|            parse_digits_result,
  387|  68.8k|            parse_integer_digits_with_thsep(
  388|  68.8k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  68.8k|                prefix_result.parsed_base, locale_options));
  390|  68.8k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  68.8k|            parse_digits_result;
  392|       |
  393|  68.8k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 962, False: 67.8k]
  ------------------
  394|    962|            if (auto e = check_thsep_grouping(
  395|    962|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    962|                    thsep_indices, locale_options.grouping);
  397|    962|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    962|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 426, False: 536]
  |  |  ------------------
  ------------------
  398|    426|                return unexpected(e);
  399|    426|            }
  400|    962|        }
  401|       |
  402|  68.4k|        auto nothsep_source_view =
  403|  68.4k|            std::basic_string_view<CharT>{nothsep_source};
  404|  68.4k|        SCN_TRY(
  ------------------
  |  |   71|  68.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  68.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  68.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  68.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.17k, False: 67.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.17k|    }                                                  \
  |  |  |  |   70|  68.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  67.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  67.2k|            nothsep_source_it,
  406|  67.2k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  67.2k|                                prefix_result.parsed_base));
  408|       |
  409|  67.2k|        return ranges_polyfill::batch_next(
  410|  67.2k|            prefix_result.iterator,
  411|  67.2k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  67.2k|                ranges::ssize(thsep_indices));
  413|  68.4k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   412k|    {
  335|   412k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   412k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   412k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   412k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   412k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 412k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   412k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   412k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   412k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   412k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 28.8k, False: 383k]
  ------------------
  339|  28.8k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  28.8k|                return unexpected_scan_error(
  341|  28.8k|                    scan_error::invalid_scanned_value,
  342|  28.8k|                    "Unexpected '-' sign when parsing an "
  343|  28.8k|                    "unsigned value");
  344|  28.8k|            }
  345|  28.8k|            else {
  346|  28.8k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 28.8k]
  ------------------
  347|  28.8k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  28.8k|            }
  353|  28.8k|        }
  354|       |
  355|   412k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 45.6k, False: 366k]
  ------------------
  356|  45.6k|            value = T{0};
  357|  45.6k|            return std::next(prefix_result.iterator);
  358|  45.6k|        }
  359|       |
  360|   366k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   366k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 281k, False: 84.6k]
  |  |  ------------------
  ------------------
  361|   281k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   281k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   281k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   281k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 316, False: 281k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    316|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    316|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    316|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    316|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    316|    }                                                  \
  |  |  |  |   70|   281k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   281k|                    parse_integer_digits_without_thsep(
  363|   281k|                        ranges::subrange{prefix_result.iterator,
  364|   281k|                                         ranges::end(range)},
  365|   281k|                        prefix_result.parsed_base));
  366|       |
  367|   281k|            auto buf = make_contiguous_buffer(
  368|   281k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   281k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   281k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   281k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   281k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 34.8k, False: 246k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  34.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  34.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  34.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  34.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  34.8k|    }                                                  \
  |  |  |  |   70|   281k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   246k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   246k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   246k|                                        prefix_result.parsed_base));
  372|       |
  373|   246k|            return ranges_polyfill::batch_next(
  374|   246k|                prefix_result.iterator,
  375|   246k|                ranges::distance(buf.view().begin(), result_it));
  376|   281k|        }
  377|       |
  378|  84.6k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  84.6k|            localized_number_formatting_options<CharT>{loc};
  383|  84.6k|#endif
  384|       |
  385|  84.6k|        SCN_TRY(
  ------------------
  |  |   71|  84.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  84.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  84.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  84.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.75k, False: 78.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.75k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.75k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.75k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.75k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.75k|    }                                                  \
  |  |  |  |   70|  84.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  78.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  78.9k|            parse_digits_result,
  387|  78.9k|            parse_integer_digits_with_thsep(
  388|  78.9k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  78.9k|                prefix_result.parsed_base, locale_options));
  390|  78.9k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  78.9k|            parse_digits_result;
  392|       |
  393|  78.9k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 1.03k, False: 77.8k]
  ------------------
  394|  1.03k|            if (auto e = check_thsep_grouping(
  395|  1.03k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  1.03k|                    thsep_indices, locale_options.grouping);
  397|  1.03k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 500, False: 536]
  |  |  ------------------
  ------------------
  398|    500|                return unexpected(e);
  399|    500|            }
  400|  1.03k|        }
  401|       |
  402|  78.4k|        auto nothsep_source_view =
  403|  78.4k|            std::basic_string_view<CharT>{nothsep_source};
  404|  78.4k|        SCN_TRY(
  ------------------
  |  |   71|  78.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  78.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  78.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  78.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 468, False: 77.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    468|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    468|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    468|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    468|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    468|    }                                                  \
  |  |  |  |   70|  78.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  77.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  77.9k|            nothsep_source_it,
  406|  77.9k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  77.9k|                                prefix_result.parsed_base));
  408|       |
  409|  77.9k|        return ranges_polyfill::batch_next(
  410|  77.9k|            prefix_result.iterator,
  411|  77.9k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  77.9k|                ranges::ssize(thsep_indices));
  413|  78.4k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   416k|    {
  335|   416k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   416k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   416k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   416k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   416k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 416k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   416k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   416k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   416k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   416k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 29.3k, False: 387k]
  ------------------
  339|  29.3k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  29.3k|                return unexpected_scan_error(
  341|  29.3k|                    scan_error::invalid_scanned_value,
  342|  29.3k|                    "Unexpected '-' sign when parsing an "
  343|  29.3k|                    "unsigned value");
  344|  29.3k|            }
  345|  29.3k|            else {
  346|  29.3k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 29.3k]
  ------------------
  347|  29.3k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  29.3k|            }
  353|  29.3k|        }
  354|       |
  355|   416k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 46.1k, False: 370k]
  ------------------
  356|  46.1k|            value = T{0};
  357|  46.1k|            return std::next(prefix_result.iterator);
  358|  46.1k|        }
  359|       |
  360|   370k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   370k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 285k, False: 85.3k]
  |  |  ------------------
  ------------------
  361|   285k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   285k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   285k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   285k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   285k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 362, False: 285k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    362|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    362|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    362|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    362|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    362|    }                                                  \
  |  |  |  |   70|   285k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   285k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   285k|                    parse_integer_digits_without_thsep(
  363|   285k|                        ranges::subrange{prefix_result.iterator,
  364|   285k|                                         ranges::end(range)},
  365|   285k|                        prefix_result.parsed_base));
  366|       |
  367|   285k|            auto buf = make_contiguous_buffer(
  368|   285k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   285k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   285k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   285k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   285k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   285k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 34.5k, False: 250k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  34.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  34.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  34.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  34.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  34.5k|    }                                                  \
  |  |  |  |   70|   285k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   250k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   250k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   250k|                                        prefix_result.parsed_base));
  372|       |
  373|   250k|            return ranges_polyfill::batch_next(
  374|   250k|                prefix_result.iterator,
  375|   250k|                ranges::distance(buf.view().begin(), result_it));
  376|   285k|        }
  377|       |
  378|  85.3k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  85.3k|            localized_number_formatting_options<CharT>{loc};
  383|  85.3k|#endif
  384|       |
  385|  85.3k|        SCN_TRY(
  ------------------
  |  |   71|  85.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  85.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  85.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  85.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.88k, False: 79.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.88k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.88k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.88k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.88k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.88k|    }                                                  \
  |  |  |  |   70|  85.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  79.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  79.4k|            parse_digits_result,
  387|  79.4k|            parse_integer_digits_with_thsep(
  388|  79.4k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  79.4k|                prefix_result.parsed_base, locale_options));
  390|  79.4k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  79.4k|            parse_digits_result;
  392|       |
  393|  79.4k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 1.09k, False: 78.4k]
  ------------------
  394|  1.09k|            if (auto e = check_thsep_grouping(
  395|  1.09k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  1.09k|                    thsep_indices, locale_options.grouping);
  397|  1.09k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 552, False: 538]
  |  |  ------------------
  ------------------
  398|    552|                return unexpected(e);
  399|    552|            }
  400|  1.09k|        }
  401|       |
  402|  78.9k|        auto nothsep_source_view =
  403|  78.9k|            std::basic_string_view<CharT>{nothsep_source};
  404|  78.9k|        SCN_TRY(
  ------------------
  |  |   71|  78.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  78.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  78.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  78.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 236, False: 78.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    236|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    236|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    236|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    236|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    236|    }                                                  \
  |  |  |  |   70|  78.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  78.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  78.7k|            nothsep_source_it,
  406|  78.7k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  78.7k|                                prefix_result.parsed_base));
  408|       |
  409|  78.7k|        return ranges_polyfill::batch_next(
  410|  78.7k|            prefix_result.iterator,
  411|  78.7k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  78.7k|                ranges::ssize(thsep_indices));
  413|  78.9k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   306k|    {
  335|   306k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   306k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   306k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   306k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   306k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 306k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   306k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   306k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   306k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   306k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 6.57k, False: 300k]
  ------------------
  339|  6.57k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  6.57k|                return unexpected_scan_error(
  341|  6.57k|                    scan_error::invalid_scanned_value,
  342|  6.57k|                    "Unexpected '-' sign when parsing an "
  343|  6.57k|                    "unsigned value");
  344|  6.57k|            }
  345|  6.57k|            else {
  346|  6.57k|                if (specs.type ==
  347|  6.57k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  6.57k|                    return unexpected_scan_error(
  349|  6.57k|                        scan_error::invalid_scanned_value,
  350|  6.57k|                        "'u'-option disallows negative values");
  351|  6.57k|                }
  352|  6.57k|            }
  353|  6.57k|        }
  354|       |
  355|   300k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 37.5k, False: 262k]
  ------------------
  356|  37.5k|            value = T{0};
  357|  37.5k|            return std::next(prefix_result.iterator);
  358|  37.5k|        }
  359|       |
  360|   262k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   262k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 198k, False: 64.4k]
  |  |  ------------------
  ------------------
  361|   198k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   198k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   198k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   198k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 60, False: 198k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     60|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     60|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     60|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     60|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     60|    }                                                  \
  |  |  |  |   70|   198k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   198k|                    parse_integer_digits_without_thsep(
  363|   198k|                        ranges::subrange{prefix_result.iterator,
  364|   198k|                                         ranges::end(range)},
  365|   198k|                        prefix_result.parsed_base));
  366|       |
  367|   198k|            auto buf = make_contiguous_buffer(
  368|   198k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   198k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   198k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   198k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   198k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 31.5k, False: 166k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  31.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  31.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  31.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  31.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  31.5k|    }                                                  \
  |  |  |  |   70|   198k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   166k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   166k|                                        prefix_result.parsed_base));
  372|       |
  373|   166k|            return ranges_polyfill::batch_next(
  374|   166k|                prefix_result.iterator,
  375|   166k|                ranges::distance(buf.view().begin(), result_it));
  376|   198k|        }
  377|       |
  378|  64.4k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  64.4k|            localized_number_formatting_options<CharT>{loc};
  383|  64.4k|#endif
  384|       |
  385|  64.4k|        SCN_TRY(
  ------------------
  |  |   71|  64.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  64.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  64.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  64.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.08k, False: 59.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.08k|    }                                                  \
  |  |  |  |   70|  64.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  59.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  59.3k|            parse_digits_result,
  387|  59.3k|            parse_integer_digits_with_thsep(
  388|  59.3k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  59.3k|                prefix_result.parsed_base, locale_options));
  390|  59.3k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  59.3k|            parse_digits_result;
  392|       |
  393|  59.3k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 746, False: 58.6k]
  ------------------
  394|    746|            if (auto e = check_thsep_grouping(
  395|    746|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    746|                    thsep_indices, locale_options.grouping);
  397|    746|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    746|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 222, False: 524]
  |  |  ------------------
  ------------------
  398|    222|                return unexpected(e);
  399|    222|            }
  400|    746|        }
  401|       |
  402|  59.1k|        auto nothsep_source_view =
  403|  59.1k|            std::basic_string_view<CharT>{nothsep_source};
  404|  59.1k|        SCN_TRY(
  ------------------
  |  |   71|  59.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  59.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  59.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  59.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 618, False: 58.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    618|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    618|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    618|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    618|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    618|    }                                                  \
  |  |  |  |   70|  59.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  58.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  58.5k|            nothsep_source_it,
  406|  58.5k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  58.5k|                                prefix_result.parsed_base));
  408|       |
  409|  58.5k|        return ranges_polyfill::batch_next(
  410|  58.5k|            prefix_result.iterator,
  411|  58.5k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  58.5k|                ranges::ssize(thsep_indices));
  413|  59.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   347k|    {
  335|   347k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   347k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   347k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   347k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 347k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   347k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   347k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   347k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   347k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 6.85k, False: 340k]
  ------------------
  339|  6.85k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  6.85k|                return unexpected_scan_error(
  341|  6.85k|                    scan_error::invalid_scanned_value,
  342|  6.85k|                    "Unexpected '-' sign when parsing an "
  343|  6.85k|                    "unsigned value");
  344|  6.85k|            }
  345|  6.85k|            else {
  346|  6.85k|                if (specs.type ==
  347|  6.85k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  6.85k|                    return unexpected_scan_error(
  349|  6.85k|                        scan_error::invalid_scanned_value,
  350|  6.85k|                        "'u'-option disallows negative values");
  351|  6.85k|                }
  352|  6.85k|            }
  353|  6.85k|        }
  354|       |
  355|   340k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 40.0k, False: 300k]
  ------------------
  356|  40.0k|            value = T{0};
  357|  40.0k|            return std::next(prefix_result.iterator);
  358|  40.0k|        }
  359|       |
  360|   300k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   300k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 229k, False: 70.6k]
  |  |  ------------------
  ------------------
  361|   229k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   229k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   229k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   229k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   229k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 68, False: 229k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     68|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     68|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     68|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     68|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     68|    }                                                  \
  |  |  |  |   70|   229k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   229k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   229k|                    parse_integer_digits_without_thsep(
  363|   229k|                        ranges::subrange{prefix_result.iterator,
  364|   229k|                                         ranges::end(range)},
  365|   229k|                        prefix_result.parsed_base));
  366|       |
  367|   229k|            auto buf = make_contiguous_buffer(
  368|   229k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   229k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   229k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   229k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   229k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   229k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 30.6k, False: 199k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  30.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  30.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  30.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  30.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  30.6k|    }                                                  \
  |  |  |  |   70|   229k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   199k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   199k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   199k|                                        prefix_result.parsed_base));
  372|       |
  373|   199k|            return ranges_polyfill::batch_next(
  374|   199k|                prefix_result.iterator,
  375|   199k|                ranges::distance(buf.view().begin(), result_it));
  376|   229k|        }
  377|       |
  378|  70.6k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  70.6k|            localized_number_formatting_options<CharT>{loc};
  383|  70.6k|#endif
  384|       |
  385|  70.6k|        SCN_TRY(
  ------------------
  |  |   71|  70.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  70.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  70.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  70.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.21k, False: 65.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.21k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.21k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.21k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.21k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.21k|    }                                                  \
  |  |  |  |   70|  70.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  65.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  65.3k|            parse_digits_result,
  387|  65.3k|            parse_integer_digits_with_thsep(
  388|  65.3k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  65.3k|                prefix_result.parsed_base, locale_options));
  390|  65.3k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  65.3k|            parse_digits_result;
  392|       |
  393|  65.3k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 806, False: 64.5k]
  ------------------
  394|    806|            if (auto e = check_thsep_grouping(
  395|    806|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    806|                    thsep_indices, locale_options.grouping);
  397|    806|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    806|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 282, False: 524]
  |  |  ------------------
  ------------------
  398|    282|                return unexpected(e);
  399|    282|            }
  400|    806|        }
  401|       |
  402|  65.1k|        auto nothsep_source_view =
  403|  65.1k|            std::basic_string_view<CharT>{nothsep_source};
  404|  65.1k|        SCN_TRY(
  ------------------
  |  |   71|  65.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  65.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  65.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  65.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 218, False: 64.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    218|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    218|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    218|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    218|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    218|    }                                                  \
  |  |  |  |   70|  65.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  64.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  64.8k|            nothsep_source_it,
  406|  64.8k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  64.8k|                                prefix_result.parsed_base));
  408|       |
  409|  64.8k|        return ranges_polyfill::batch_next(
  410|  64.8k|            prefix_result.iterator,
  411|  64.8k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  64.8k|                ranges::ssize(thsep_indices));
  413|  65.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   350k|    {
  335|   350k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   350k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   350k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   350k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   350k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 350k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   350k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   350k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   350k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   350k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 7.03k, False: 343k]
  ------------------
  339|  7.03k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  7.03k|                return unexpected_scan_error(
  341|  7.03k|                    scan_error::invalid_scanned_value,
  342|  7.03k|                    "Unexpected '-' sign when parsing an "
  343|  7.03k|                    "unsigned value");
  344|  7.03k|            }
  345|  7.03k|            else {
  346|  7.03k|                if (specs.type ==
  347|  7.03k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  7.03k|                    return unexpected_scan_error(
  349|  7.03k|                        scan_error::invalid_scanned_value,
  350|  7.03k|                        "'u'-option disallows negative values");
  351|  7.03k|                }
  352|  7.03k|            }
  353|  7.03k|        }
  354|       |
  355|   343k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 40.4k, False: 303k]
  ------------------
  356|  40.4k|            value = T{0};
  357|  40.4k|            return std::next(prefix_result.iterator);
  358|  40.4k|        }
  359|       |
  360|   303k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   303k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 232k, False: 70.9k]
  |  |  ------------------
  ------------------
  361|   232k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   232k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   232k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   232k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   232k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 68, False: 232k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     68|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     68|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     68|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     68|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     68|    }                                                  \
  |  |  |  |   70|   232k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   232k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   232k|                    parse_integer_digits_without_thsep(
  363|   232k|                        ranges::subrange{prefix_result.iterator,
  364|   232k|                                         ranges::end(range)},
  365|   232k|                        prefix_result.parsed_base));
  366|       |
  367|   232k|            auto buf = make_contiguous_buffer(
  368|   232k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   232k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   232k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   232k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   232k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   232k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 30.3k, False: 201k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  30.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  30.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  30.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  30.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  30.3k|    }                                                  \
  |  |  |  |   70|   232k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   201k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   201k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   201k|                                        prefix_result.parsed_base));
  372|       |
  373|   201k|            return ranges_polyfill::batch_next(
  374|   201k|                prefix_result.iterator,
  375|   201k|                ranges::distance(buf.view().begin(), result_it));
  376|   232k|        }
  377|       |
  378|  70.9k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  70.9k|            localized_number_formatting_options<CharT>{loc};
  383|  70.9k|#endif
  384|       |
  385|  70.9k|        SCN_TRY(
  ------------------
  |  |   71|  70.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  70.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  70.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  70.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.25k, False: 65.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.25k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.25k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.25k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.25k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.25k|    }                                                  \
  |  |  |  |   70|  70.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  65.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  65.6k|            parse_digits_result,
  387|  65.6k|            parse_integer_digits_with_thsep(
  388|  65.6k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  65.6k|                prefix_result.parsed_base, locale_options));
  390|  65.6k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  65.6k|            parse_digits_result;
  392|       |
  393|  65.6k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 810, False: 64.8k]
  ------------------
  394|    810|            if (auto e = check_thsep_grouping(
  395|    810|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    810|                    thsep_indices, locale_options.grouping);
  397|    810|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    810|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 284, False: 526]
  |  |  ------------------
  ------------------
  398|    284|                return unexpected(e);
  399|    284|            }
  400|    810|        }
  401|       |
  402|  65.3k|        auto nothsep_source_view =
  403|  65.3k|            std::basic_string_view<CharT>{nothsep_source};
  404|  65.3k|        SCN_TRY(
  ------------------
  |  |   71|  65.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  65.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  65.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  65.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 94, False: 65.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     94|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     94|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     94|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     94|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     94|    }                                                  \
  |  |  |  |   70|  65.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  65.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  65.2k|            nothsep_source_it,
  406|  65.2k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  65.2k|                                prefix_result.parsed_base));
  408|       |
  409|  65.2k|        return ranges_polyfill::batch_next(
  410|  65.2k|            prefix_result.iterator,
  411|  65.2k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  65.2k|                ranges::ssize(thsep_indices));
  413|  65.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  11.6k|    {
  324|  11.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  11.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  11.6k|        return read_default_with_base(range, value, 0);
  326|  11.6k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  11.6k|    {
  287|  11.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  11.6k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  11.6k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  11.6k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  11.6k|                return unexpected_scan_error(
  293|  11.6k|                    scan_error::invalid_scanned_value,
  294|  11.6k|                    "Unexpected '-' sign when parsing an "
  295|  11.6k|                    "unsigned value");
  296|  11.6k|            }
  297|  11.6k|        }
  298|       |
  299|  11.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 11.6k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  11.6k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.6k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.6k|    }                                                  \
  |  |  |  |   70|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  11.6k|                                     ranges::subrange{prefix_result.iterator,
  306|  11.6k|                                                      ranges::end(range)},
  307|  11.6k|                                     prefix_result.parsed_base));
  308|       |
  309|  11.6k|        auto buf = make_contiguous_buffer(
  310|  11.6k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  11.6k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  11.6k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESH_i:
  120|   387k|{
  121|   387k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|   387k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   387k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   387k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   387k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 387k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   387k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   387k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|   387k|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|   387k|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|   387k|        parse_integer_base_prefix(
  126|   387k|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|   387k|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 0, False: 387k]
  ------------------
  129|      0|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 0, False: 0]
  ------------------
  130|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 0, False: 0]
  ------------------
  131|      0|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|      0|                digits_begin_it, ranges::begin(range));
  133|      0|        }
  134|      0|        else {
  135|      0|            parsed_zero = false;
  136|      0|        }
  137|      0|    }
  138|   387k|    else {
  139|   387k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 10, False: 387k]
  ------------------
  140|   387k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 340k, False: 46.4k]
  ------------------
  141|   340k|            digits_begin_it = base_prefix_begin_it;
  142|   340k|        }
  143|   387k|    }
  144|       |
  145|   387k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 348k, False: 38.6k]
  ------------------
  146|   348k|        sign = sign_type::plus_sign;
  147|   348k|    }
  148|   387k|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|   387k|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|   387k|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_i:
   87|   387k|{
   88|   387k|    switch (base) {
   89|  46.4k|        case 2:
  ------------------
  |  Branch (89:9): [True: 46.4k, False: 340k]
  ------------------
   90|       |            // allow 0b/0B
   91|  46.4k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  46.4k|                    false};
   93|       |
   94|  46.4k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 46.4k, False: 340k]
  ------------------
   95|       |            // allow 0o/0O/0
   96|  46.4k|            bool zero_parsed = false;
   97|  46.4k|            auto it = apply_opt(
   98|  46.4k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|  46.4k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|  85.1k|        case 16:
  ------------------
  |  Branch (102:9): [True: 85.1k, False: 301k]
  ------------------
  103|       |            // allow 0x/0X
  104|  85.1k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|  85.1k|                    false};
  106|       |
  107|   162k|        case 0:
  ------------------
  |  Branch (107:9): [True: 162k, False: 224k]
  ------------------
  108|       |            // detect base
  109|   162k|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|   162k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|  46.4k|        default:
  ------------------
  |  Branch (111:9): [True: 46.4k, False: 340k]
  ------------------
  112|       |            // no base prefix allowed
  113|  46.4k|            return {ranges::begin(range), base, false};
  114|   387k|    }
  115|   387k|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   37|   209k|{
   38|   209k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|   209k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|   209k|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_Rb:
   52|   209k|{
   53|   209k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 0, False: 209k]
  ------------------
   54|      0|        return *r;
   55|      0|    }
   56|       |
   57|   209k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 0, False: 209k]
  ------------------
   58|      0|        zero_parsed = true;
   59|      0|        return *r;
   60|      0|    }
   61|       |
   62|   209k|    return unexpected(parse_error::error);
   63|   209k|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   44|   247k|{
   45|   247k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|   247k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   247k|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_:
   68|   162k|{
   69|   162k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 0, False: 162k]
  ------------------
   70|      0|        return {*r, 16, false};
   71|      0|    }
   72|   162k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 0, False: 162k]
  ------------------
   73|      0|        return {*r, 2, false};
   74|      0|    }
   75|   162k|    {
   76|   162k|        bool zero_parsed{false};
   77|   162k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 0, False: 162k]
  ------------------
   78|      0|            return {*r, 8, zero_parsed};
   79|      0|        }
   80|   162k|    }
   81|   162k|    return {ranges::begin(range), 10, false};
   82|   162k|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_i:
  155|   317k|{
  156|   317k|    using char_type = detail::char_t<Range>;
  157|       |
  158|   317k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|   317k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  160|   317k|            return unexpected_scan_error(
  161|   317k|                scan_error::invalid_scanned_value,
  162|   317k|                "Failed to parse integer: No digits found");
  163|   317k|        }
  164|   317k|        return ranges::end(range);
  165|   317k|    }
  166|   317k|    else {
  167|   317k|        return read_while1_code_unit(
  168|   317k|                   range, [&](char_type ch)
  169|   317k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|   317k|            .transform_error(map_parse_error_to_scan_error(
  171|   317k|                scan_error::invalid_scanned_value,
  172|   317k|                "Failed to parse integer: No digits found"));
  173|   317k|    }
  174|   317k|}
_ZZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_iENKUlwE_clEw:
  169|   410k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  11.6k|    {
  324|  11.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  11.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  11.6k|        return read_default_with_base(range, value, 0);
  326|  11.6k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  11.6k|    {
  287|  11.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  11.6k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  11.6k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  11.6k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  11.6k|                return unexpected_scan_error(
  293|  11.6k|                    scan_error::invalid_scanned_value,
  294|  11.6k|                    "Unexpected '-' sign when parsing an "
  295|  11.6k|                    "unsigned value");
  296|  11.6k|            }
  297|  11.6k|        }
  298|       |
  299|  11.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 11.6k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  11.6k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.6k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.6k|    }                                                  \
  |  |  |  |   70|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  11.6k|                                     ranges::subrange{prefix_result.iterator,
  306|  11.6k|                                                      ranges::end(range)},
  307|  11.6k|                                     prefix_result.parsed_base));
  308|       |
  309|  11.6k|        auto buf = make_contiguous_buffer(
  310|  11.6k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  11.6k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  11.6k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  11.6k|    {
  324|  11.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  11.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  11.6k|        return read_default_with_base(range, value, 0);
  326|  11.6k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  11.6k|    {
  287|  11.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  11.6k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  11.6k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  11.6k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  11.6k|                return unexpected_scan_error(
  293|  11.6k|                    scan_error::invalid_scanned_value,
  294|  11.6k|                    "Unexpected '-' sign when parsing an "
  295|  11.6k|                    "unsigned value");
  296|  11.6k|            }
  297|  11.6k|        }
  298|       |
  299|  11.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 11.6k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  11.6k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.6k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.6k|    }                                                  \
  |  |  |  |   70|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  11.6k|                                     ranges::subrange{prefix_result.iterator,
  306|  11.6k|                                                      ranges::end(range)},
  307|  11.6k|                                     prefix_result.parsed_base));
  308|       |
  309|  11.6k|        auto buf = make_contiguous_buffer(
  310|  11.6k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  11.6k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  11.6k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  11.6k|    {
  324|  11.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  11.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  11.6k|        return read_default_with_base(range, value, 0);
  326|  11.6k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  11.6k|    {
  287|  11.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  11.6k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  11.6k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  11.6k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 11.6k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  11.6k|        }
  298|       |
  299|  11.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 11.6k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  11.6k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.6k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.6k|    }                                                  \
  |  |  |  |   70|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  11.6k|                                     ranges::subrange{prefix_result.iterator,
  306|  11.6k|                                                      ranges::end(range)},
  307|  11.6k|                                     prefix_result.parsed_base));
  308|       |
  309|  11.6k|        auto buf = make_contiguous_buffer(
  310|  11.6k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  11.6k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  11.6k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  11.6k|    {
  324|  11.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  11.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  11.6k|        return read_default_with_base(range, value, 0);
  326|  11.6k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  11.6k|    {
  287|  11.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  11.6k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  11.6k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  11.6k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 11.6k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  11.6k|        }
  298|       |
  299|  11.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 11.6k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  11.6k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.6k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.6k|    }                                                  \
  |  |  |  |   70|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  11.6k|                                     ranges::subrange{prefix_result.iterator,
  306|  11.6k|                                                      ranges::end(range)},
  307|  11.6k|                                     prefix_result.parsed_base));
  308|       |
  309|  11.6k|        auto buf = make_contiguous_buffer(
  310|  11.6k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  11.6k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  11.6k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  11.6k|    {
  324|  11.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  11.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  11.6k|        return read_default_with_base(range, value, 0);
  326|  11.6k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  11.6k|    {
  287|  11.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  11.6k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  11.6k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  11.6k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 11.6k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  11.6k|        }
  298|       |
  299|  11.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 11.6k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  11.6k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.6k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.6k|    }                                                  \
  |  |  |  |   70|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  11.6k|                                     ranges::subrange{prefix_result.iterator,
  306|  11.6k|                                                      ranges::end(range)},
  307|  11.6k|                                     prefix_result.parsed_base));
  308|       |
  309|  11.6k|        auto buf = make_contiguous_buffer(
  310|  11.6k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  11.6k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  11.6k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSF_12basic_stringIT0_NSF_11char_traitsISM_EENSF_9allocatorISM_EEEENSL_IcNSN_IcEENSP_IcEEEEEEEEESI_iRKNS1_35localized_number_formatting_optionsISM_EE:
  184|  46.4k|{
  185|  46.4k|    std::basic_string<CharT> output;
  186|  46.4k|    std::string thsep_indices;
  187|  46.4k|    auto it = ranges::begin(range);
  188|  46.4k|    bool digit_matched = false;
  189|  46.4k|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 46.4k, False: 0]
  ------------------
  190|  46.4k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 0, False: 46.4k]
  ------------------
  191|      0|            thsep_indices.push_back(static_cast<char>(
  192|      0|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|      0|        }
  194|  46.4k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 46.4k, False: 0]
  ------------------
  195|  46.4k|            break;
  196|  46.4k|        }
  197|      0|        else {
  198|      0|            output.push_back(*it);
  199|      0|            digit_matched = true;
  200|      0|        }
  201|  46.4k|    }
  202|  46.4k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|  46.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 46.4k, False: 0]
  |  |  ------------------
  ------------------
  203|  46.4k|        return unexpected_scan_error(
  204|  46.4k|            scan_error::invalid_scanned_value,
  205|  46.4k|            "Failed to parse integer: No digits found");
  206|  46.4k|    }
  207|      0|    return std::tuple{it, output, thsep_indices};
  208|  46.4k|}
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  46.4k|    {
  335|  46.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  46.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  46.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  46.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  46.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 46.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  46.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  46.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  46.4k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  46.4k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 46.4k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  46.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 46.4k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  46.4k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  46.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 38.7k, False: 7.74k]
  |  |  ------------------
  ------------------
  361|  38.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  38.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  38.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  38.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  38.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 30.9k, False: 7.74k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  30.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  30.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  30.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  30.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  30.9k|    }                                                  \
  |  |  |  |   70|  38.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.74k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  7.74k|                    parse_integer_digits_without_thsep(
  363|  7.74k|                        ranges::subrange{prefix_result.iterator,
  364|  7.74k|                                         ranges::end(range)},
  365|  7.74k|                        prefix_result.parsed_base));
  366|       |
  367|  7.74k|            auto buf = make_contiguous_buffer(
  368|  7.74k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  7.74k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  7.74k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.74k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.74k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.74k, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.74k|    }                                                  \
  |  |  |  |   70|  7.74k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      2|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      2|                                        prefix_result.parsed_base));
  372|       |
  373|      2|            return ranges_polyfill::batch_next(
  374|      2|                prefix_result.iterator,
  375|      2|                ranges::distance(buf.view().begin(), result_it));
  376|  7.74k|        }
  377|       |
  378|  7.74k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  7.74k|            localized_number_formatting_options<CharT>{loc};
  383|  7.74k|#endif
  384|       |
  385|  7.74k|        SCN_TRY(
  ------------------
  |  |   71|  7.74k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.74k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.74k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.74k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.74k|    }                                                  \
  |  |  |  |   70|  7.74k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  54.1k|    {
  335|  54.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  54.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  54.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  54.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  54.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 54.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  54.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  54.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  54.1k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  54.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 7.73k, False: 46.4k]
  ------------------
  339|  7.73k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  7.73k|                return unexpected_scan_error(
  341|  7.73k|                    scan_error::invalid_scanned_value,
  342|  7.73k|                    "Unexpected '-' sign when parsing an "
  343|  7.73k|                    "unsigned value");
  344|  7.73k|            }
  345|  7.73k|            else {
  346|  7.73k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 7.73k]
  ------------------
  347|  7.73k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  7.73k|            }
  353|  7.73k|        }
  354|       |
  355|  54.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 54.1k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  54.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  54.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 46.4k, False: 7.74k]
  |  |  ------------------
  ------------------
  361|  46.4k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  46.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  46.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  46.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  46.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 38.7k, False: 7.74k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  38.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  38.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  38.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  38.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  38.7k|    }                                                  \
  |  |  |  |   70|  46.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.74k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  7.74k|                    parse_integer_digits_without_thsep(
  363|  7.74k|                        ranges::subrange{prefix_result.iterator,
  364|  7.74k|                                         ranges::end(range)},
  365|  7.74k|                        prefix_result.parsed_base));
  366|       |
  367|  7.74k|            auto buf = make_contiguous_buffer(
  368|  7.74k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  7.74k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  7.74k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.74k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.74k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.74k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.74k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.74k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  7.74k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  7.74k|                                        prefix_result.parsed_base));
  372|       |
  373|  7.74k|            return ranges_polyfill::batch_next(
  374|  7.74k|                prefix_result.iterator,
  375|  7.74k|                ranges::distance(buf.view().begin(), result_it));
  376|  7.74k|        }
  377|       |
  378|  7.74k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  7.74k|            localized_number_formatting_options<CharT>{loc};
  383|  7.74k|#endif
  384|       |
  385|  7.74k|        SCN_TRY(
  ------------------
  |  |   71|  7.74k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.74k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.74k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.74k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.74k|    }                                                  \
  |  |  |  |   70|  7.74k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  54.1k|    {
  335|  54.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  54.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  54.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  54.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  54.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 54.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  54.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  54.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  54.1k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  54.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 7.73k, False: 46.4k]
  ------------------
  339|  7.73k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  7.73k|                return unexpected_scan_error(
  341|  7.73k|                    scan_error::invalid_scanned_value,
  342|  7.73k|                    "Unexpected '-' sign when parsing an "
  343|  7.73k|                    "unsigned value");
  344|  7.73k|            }
  345|  7.73k|            else {
  346|  7.73k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 7.73k]
  ------------------
  347|  7.73k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  7.73k|            }
  353|  7.73k|        }
  354|       |
  355|  54.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 54.1k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  54.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  54.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 46.4k, False: 7.74k]
  |  |  ------------------
  ------------------
  361|  46.4k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  46.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  46.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  46.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  46.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 38.7k, False: 7.74k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  38.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  38.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  38.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  38.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  38.7k|    }                                                  \
  |  |  |  |   70|  46.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.74k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  7.74k|                    parse_integer_digits_without_thsep(
  363|  7.74k|                        ranges::subrange{prefix_result.iterator,
  364|  7.74k|                                         ranges::end(range)},
  365|  7.74k|                        prefix_result.parsed_base));
  366|       |
  367|  7.74k|            auto buf = make_contiguous_buffer(
  368|  7.74k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  7.74k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  7.74k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.74k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.74k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.74k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.74k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.74k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  7.74k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  7.74k|                                        prefix_result.parsed_base));
  372|       |
  373|  7.74k|            return ranges_polyfill::batch_next(
  374|  7.74k|                prefix_result.iterator,
  375|  7.74k|                ranges::distance(buf.view().begin(), result_it));
  376|  7.74k|        }
  377|       |
  378|  7.74k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  7.74k|            localized_number_formatting_options<CharT>{loc};
  383|  7.74k|#endif
  384|       |
  385|  7.74k|        SCN_TRY(
  ------------------
  |  |   71|  7.74k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.74k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.74k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.74k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.74k|    }                                                  \
  |  |  |  |   70|  7.74k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  54.1k|    {
  335|  54.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  54.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  54.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  54.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  54.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 54.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  54.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  54.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  54.1k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  54.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 7.73k, False: 46.4k]
  ------------------
  339|  7.73k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  7.73k|                return unexpected_scan_error(
  341|  7.73k|                    scan_error::invalid_scanned_value,
  342|  7.73k|                    "Unexpected '-' sign when parsing an "
  343|  7.73k|                    "unsigned value");
  344|  7.73k|            }
  345|  7.73k|            else {
  346|  7.73k|                if (specs.type ==
  347|  7.73k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  7.73k|                    return unexpected_scan_error(
  349|  7.73k|                        scan_error::invalid_scanned_value,
  350|  7.73k|                        "'u'-option disallows negative values");
  351|  7.73k|                }
  352|  7.73k|            }
  353|  7.73k|        }
  354|       |
  355|  46.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 46.4k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  46.4k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  46.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 38.7k, False: 7.74k]
  |  |  ------------------
  ------------------
  361|  38.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  38.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  38.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  38.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  38.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 30.9k, False: 7.74k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  30.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  30.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  30.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  30.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  30.9k|    }                                                  \
  |  |  |  |   70|  38.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.74k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  7.74k|                    parse_integer_digits_without_thsep(
  363|  7.74k|                        ranges::subrange{prefix_result.iterator,
  364|  7.74k|                                         ranges::end(range)},
  365|  7.74k|                        prefix_result.parsed_base));
  366|       |
  367|  7.74k|            auto buf = make_contiguous_buffer(
  368|  7.74k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  7.74k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  7.74k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.74k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.74k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.74k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.74k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.74k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  7.74k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  7.74k|                                        prefix_result.parsed_base));
  372|       |
  373|  7.74k|            return ranges_polyfill::batch_next(
  374|  7.74k|                prefix_result.iterator,
  375|  7.74k|                ranges::distance(buf.view().begin(), result_it));
  376|  7.74k|        }
  377|       |
  378|  7.74k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  7.74k|            localized_number_formatting_options<CharT>{loc};
  383|  7.74k|#endif
  384|       |
  385|  7.74k|        SCN_TRY(
  ------------------
  |  |   71|  7.74k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.74k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.74k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.74k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.74k|    }                                                  \
  |  |  |  |   70|  7.74k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  54.1k|    {
  335|  54.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  54.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  54.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  54.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  54.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 54.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  54.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  54.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  54.1k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  54.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 7.73k, False: 46.4k]
  ------------------
  339|  7.73k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  7.73k|                return unexpected_scan_error(
  341|  7.73k|                    scan_error::invalid_scanned_value,
  342|  7.73k|                    "Unexpected '-' sign when parsing an "
  343|  7.73k|                    "unsigned value");
  344|  7.73k|            }
  345|  7.73k|            else {
  346|  7.73k|                if (specs.type ==
  347|  7.73k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  7.73k|                    return unexpected_scan_error(
  349|  7.73k|                        scan_error::invalid_scanned_value,
  350|  7.73k|                        "'u'-option disallows negative values");
  351|  7.73k|                }
  352|  7.73k|            }
  353|  7.73k|        }
  354|       |
  355|  46.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 46.4k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  46.4k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  46.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 38.7k, False: 7.74k]
  |  |  ------------------
  ------------------
  361|  38.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  38.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  38.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  38.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  38.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 30.9k, False: 7.74k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  30.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  30.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  30.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  30.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  30.9k|    }                                                  \
  |  |  |  |   70|  38.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.74k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  7.74k|                    parse_integer_digits_without_thsep(
  363|  7.74k|                        ranges::subrange{prefix_result.iterator,
  364|  7.74k|                                         ranges::end(range)},
  365|  7.74k|                        prefix_result.parsed_base));
  366|       |
  367|  7.74k|            auto buf = make_contiguous_buffer(
  368|  7.74k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  7.74k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  7.74k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.74k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.74k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.74k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.74k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.74k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  7.74k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  7.74k|                                        prefix_result.parsed_base));
  372|       |
  373|  7.74k|            return ranges_polyfill::batch_next(
  374|  7.74k|                prefix_result.iterator,
  375|  7.74k|                ranges::distance(buf.view().begin(), result_it));
  376|  7.74k|        }
  377|       |
  378|  7.74k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  7.74k|            localized_number_formatting_options<CharT>{loc};
  383|  7.74k|#endif
  384|       |
  385|  7.74k|        SCN_TRY(
  ------------------
  |  |   71|  7.74k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.74k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.74k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.74k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.74k|    }                                                  \
  |  |  |  |   70|  7.74k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  54.1k|    {
  335|  54.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  54.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  54.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  54.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  54.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 54.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  54.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  54.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  54.1k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  54.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 7.73k, False: 46.4k]
  ------------------
  339|  7.73k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  7.73k|                return unexpected_scan_error(
  341|  7.73k|                    scan_error::invalid_scanned_value,
  342|  7.73k|                    "Unexpected '-' sign when parsing an "
  343|  7.73k|                    "unsigned value");
  344|  7.73k|            }
  345|  7.73k|            else {
  346|  7.73k|                if (specs.type ==
  347|  7.73k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  7.73k|                    return unexpected_scan_error(
  349|  7.73k|                        scan_error::invalid_scanned_value,
  350|  7.73k|                        "'u'-option disallows negative values");
  351|  7.73k|                }
  352|  7.73k|            }
  353|  7.73k|        }
  354|       |
  355|  46.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 46.4k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  46.4k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  46.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 38.7k, False: 7.74k]
  |  |  ------------------
  ------------------
  361|  38.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  38.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  38.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  38.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  38.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 30.9k, False: 7.74k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  30.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  30.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  30.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  30.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  30.9k|    }                                                  \
  |  |  |  |   70|  38.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.74k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  7.74k|                    parse_integer_digits_without_thsep(
  363|  7.74k|                        ranges::subrange{prefix_result.iterator,
  364|  7.74k|                                         ranges::end(range)},
  365|  7.74k|                        prefix_result.parsed_base));
  366|       |
  367|  7.74k|            auto buf = make_contiguous_buffer(
  368|  7.74k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  7.74k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  7.74k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.74k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.74k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.74k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.74k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.74k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  7.74k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  7.74k|                                        prefix_result.parsed_base));
  372|       |
  373|  7.74k|            return ranges_polyfill::batch_next(
  374|  7.74k|                prefix_result.iterator,
  375|  7.74k|                ranges::distance(buf.view().begin(), result_it));
  376|  7.74k|        }
  377|       |
  378|  7.74k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  7.74k|            localized_number_formatting_options<CharT>{loc};
  383|  7.74k|#endif
  384|       |
  385|  7.74k|        SCN_TRY(
  ------------------
  |  |   71|  7.74k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.74k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.74k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.74k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.74k|    }                                                  \
  |  |  |  |   70|  7.74k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }

_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  3.31M|{
   69|  3.31M|    auto r = read_one_of_code_unit(range, "+-");
   70|  3.31M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 2.98M, False: 324k]
  ------------------
   71|  2.98M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 2.98M, False: 0]
  ------------------
   72|  2.98M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  2.98M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  2.98M|    }
   76|       |
   77|   324k|    auto& it = *r;
   78|   324k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 202k, False: 122k]
  ------------------
   79|   202k|        return std::pair{it, sign_type::minus_sign};
   80|   202k|    }
   81|   122k|    return std::pair{it, sign_type::plus_sign};
   82|   324k|}
_ZN3scn2v24impl11char_to_intEc:
   50|  31.5M|{
   51|  31.5M|    return char_to_int_table[static_cast<unsigned char>(ch)];
   52|  31.5M|}
_ZN3scn2v24impl20check_thsep_groupingIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEELPv0EEENS0_10scan_errorEOT_NSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEENSF_17basic_string_viewIcSI_EE:
  139|  6.29k|{
  140|  6.29k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  242|  6.29k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.29k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  141|       |
  142|  6.29k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (142:9): [True: 2.58k, False: 3.71k]
  ------------------
  143|  2.58k|        SCN_UNLIKELY_ATTR
  144|  2.58k|        return {scan_error::invalid_scanned_value,
  145|  2.58k|                "Invalid thousands separator grouping"};
  146|  2.58k|    }
  147|       |
  148|  3.71k|    return {};
  149|  6.29k|}
_ZN3scn2v24impl25check_thsep_grouping_implIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
  100|  6.29k|{
  101|  6.29k|    transform_thsep_indices(
  102|  6.29k|        thsep_indices,
  103|  6.29k|        ranges::distance(ranges::begin(range), ranges::end(range)));
  104|       |
  105|  6.29k|    auto thsep_it = thsep_indices.rbegin();
  106|  6.29k|    for (auto grouping_it = grouping.begin();
  107|  6.29k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (107:10): [True: 0, False: 6.29k]
  |  Branch (107:10): [True: 0, False: 6.29k]
  |  Branch (107:43): [True: 0, False: 0]
  ------------------
  108|  6.29k|         ++grouping_it, (void)++thsep_it) {
  109|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (109:13): [True: 0, False: 0]
  ------------------
  110|      0|            return false;
  111|      0|        }
  112|      0|    }
  113|       |
  114|  6.29k|    SCN_CLANG_PUSH
  115|       |    // false positive
  116|  6.29k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
  117|       |
  118|  73.7k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (118:12): [True: 68.5k, False: 5.22k]
  ------------------
  119|  68.5k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (119:13): [True: 1.07k, False: 67.4k]
  ------------------
  120|  1.07k|            return false;
  121|  1.07k|        }
  122|  68.5k|    }
  123|       |
  124|  5.22k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (124:9): [True: 5.22k, False: 0]
  ------------------
  125|  5.22k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (125:13): [True: 1.51k, False: 3.71k]
  ------------------
  126|  1.51k|            return false;
  127|  1.51k|        }
  128|  5.22k|    }
  129|       |
  130|  3.71k|    SCN_CLANG_POP
  131|       |
  132|  3.71k|    return true;
  133|  5.22k|}
_ZN3scn2v24impl23transform_thsep_indicesERNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEl:
   86|  11.7k|{
   87|   168k|    for (auto thsep_it = indices.rbegin(); thsep_it != indices.rend();
  ------------------
  |  Branch (87:44): [True: 156k, False: 11.7k]
  ------------------
   88|   156k|         ++thsep_it) {
   89|   156k|        const auto tmp = *thsep_it;
   90|   156k|        *thsep_it = static_cast<char>(last_thsep_index - tmp - 1);
   91|   156k|        last_thsep_index = static_cast<std::ptrdiff_t>(tmp);
   92|   156k|    }
   93|  11.7k|    indices.insert(indices.begin(), static_cast<char>(last_thsep_index));
   94|  11.7k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|   237k|{
   69|   237k|    auto r = read_one_of_code_unit(range, "+-");
   70|   237k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 211k, False: 26.3k]
  ------------------
   71|   211k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 211k, False: 0]
  ------------------
   72|   211k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|   211k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|   211k|    }
   76|       |
   77|  26.3k|    auto& it = *r;
   78|  26.3k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 26.3k, False: 0]
  ------------------
   79|  26.3k|        return std::pair{it, sign_type::minus_sign};
   80|  26.3k|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|  26.3k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  3.00M|{
   69|  3.00M|    auto r = read_one_of_code_unit(range, "+-");
   70|  3.00M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 2.76M, False: 246k]
  ------------------
   71|  2.76M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 2.76M, False: 0]
  ------------------
   72|  2.76M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  2.76M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  2.76M|    }
   76|       |
   77|   246k|    auto& it = *r;
   78|   246k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 137k, False: 109k]
  ------------------
   79|   137k|        return std::pair{it, sign_type::minus_sign};
   80|   137k|    }
   81|   109k|    return std::pair{it, sign_type::plus_sign};
   82|   246k|}
_ZN3scn2v24impl11char_to_intEw:
   54|  15.5M|{
   55|  15.5M|#if WCHAR_MIN < 0
   56|  15.5M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (56:9): [True: 15.4M, False: 24.7k]
  |  Branch (56:20): [True: 15.1M, False: 369k]
  ------------------
   57|       |#else
   58|       |    if (ch <= 255) {
   59|       |#endif
   60|  15.1M|        return char_to_int(static_cast<char>(ch));
   61|  15.1M|    }
   62|   393k|    return 255;
   63|  15.5M|}
_ZN3scn2v24impl20check_thsep_groupingIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEELPv0EEENS0_10scan_errorEOT_NSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEENSF_17basic_string_viewIcSI_EE:
  139|  5.45k|{
  140|  5.45k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  242|  5.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  141|       |
  142|  5.45k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (142:9): [True: 2.26k, False: 3.18k]
  ------------------
  143|  2.26k|        SCN_UNLIKELY_ATTR
  144|  2.26k|        return {scan_error::invalid_scanned_value,
  145|  2.26k|                "Invalid thousands separator grouping"};
  146|  2.26k|    }
  147|       |
  148|  3.18k|    return {};
  149|  5.45k|}
_ZN3scn2v24impl25check_thsep_grouping_implIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
  100|  5.45k|{
  101|  5.45k|    transform_thsep_indices(
  102|  5.45k|        thsep_indices,
  103|  5.45k|        ranges::distance(ranges::begin(range), ranges::end(range)));
  104|       |
  105|  5.45k|    auto thsep_it = thsep_indices.rbegin();
  106|  5.45k|    for (auto grouping_it = grouping.begin();
  107|  5.45k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (107:10): [True: 0, False: 5.45k]
  |  Branch (107:10): [True: 0, False: 5.45k]
  |  Branch (107:43): [True: 0, False: 0]
  ------------------
  108|  5.45k|         ++grouping_it, (void)++thsep_it) {
  109|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (109:13): [True: 0, False: 0]
  ------------------
  110|      0|            return false;
  111|      0|        }
  112|      0|    }
  113|       |
  114|  5.45k|    SCN_CLANG_PUSH
  115|       |    // false positive
  116|  5.45k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
  117|       |
  118|  64.4k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (118:12): [True: 59.9k, False: 4.54k]
  ------------------
  119|  59.9k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (119:13): [True: 902, False: 59.0k]
  ------------------
  120|    902|            return false;
  121|    902|        }
  122|  59.9k|    }
  123|       |
  124|  4.54k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (124:9): [True: 4.54k, False: 0]
  ------------------
  125|  4.54k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (125:13): [True: 1.36k, False: 3.18k]
  ------------------
  126|  1.36k|            return false;
  127|  1.36k|        }
  128|  4.54k|    }
  129|       |
  130|  3.18k|    SCN_CLANG_POP
  131|       |
  132|  3.18k|    return true;
  133|  4.54k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|   387k|{
   69|   387k|    auto r = read_one_of_code_unit(range, "+-");
   70|   387k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 348k, False: 38.6k]
  ------------------
   71|   348k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 348k, False: 0]
  ------------------
   72|   348k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|   348k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|   348k|    }
   76|       |
   77|  38.6k|    auto& it = *r;
   78|  38.6k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 38.6k, False: 0]
  ------------------
   79|  38.6k|        return std::pair{it, sign_type::minus_sign};
   80|  38.6k|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|  38.6k|}

_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
  121|   154k|    {
  122|   154k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   154k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   154k|                          basic_contiguous_scan_context<char_type>>) {
  126|   154k|            auto rd = make_reader<T, char_type>();
  127|   154k|            return impl(rd, range, value);
  128|   154k|        }
  129|   154k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   154k|            auto rd = make_reader<T, char_type>();
  131|   154k|            if (!is_segment_contiguous(range)) {
  132|   154k|                return impl(rd, range, value);
  133|   154k|            }
  134|   154k|            auto crange = get_as_contiguous(range);
  135|   154k|            SCN_TRY(it, impl(rd, crange, value));
  136|   154k|            return ranges_polyfill::batch_next(
  137|   154k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   154k|        }
  139|   154k|        else {
  140|   154k|            SCN_EXPECT(false);
  141|   154k|            SCN_UNREACHABLE;
  142|   154k|        }
  143|   154k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   154k|    {
  112|   154k|        SCN_TRY(it,
  ------------------
  |  |   71|   154k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   154k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   154k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.01k, False: 153k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.01k|    }                                                  \
  |  |  |  |   70|   154k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   153k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   153k|                    .transform_error(make_eof_scan_error));
  115|   153k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   153k|                               loc);
  117|   154k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  3.33M|{
   43|  3.33M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  3.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 21.0k, False: 3.31M]
  |  |  ------------------
  ------------------
   44|  21.0k|        return unexpected(e);
   45|  21.0k|    }
   46|       |
   47|  3.31M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 3.31M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  3.31M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  3.31M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  3.31M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
  121|   178k|    {
  122|   178k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   178k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   178k|                          basic_contiguous_scan_context<char_type>>) {
  126|   178k|            auto rd = make_reader<T, char_type>();
  127|   178k|            return impl(rd, range, value);
  128|   178k|        }
  129|   178k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   178k|            auto rd = make_reader<T, char_type>();
  131|   178k|            if (!is_segment_contiguous(range)) {
  132|   178k|                return impl(rd, range, value);
  133|   178k|            }
  134|   178k|            auto crange = get_as_contiguous(range);
  135|   178k|            SCN_TRY(it, impl(rd, crange, value));
  136|   178k|            return ranges_polyfill::batch_next(
  137|   178k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   178k|        }
  139|   178k|        else {
  140|   178k|            SCN_EXPECT(false);
  141|   178k|            SCN_UNREACHABLE;
  142|   178k|        }
  143|   178k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   178k|    {
  112|   178k|        SCN_TRY(it,
  ------------------
  |  |   71|   178k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   178k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   178k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.42k, False: 177k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.42k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.42k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.42k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.42k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.42k|    }                                                  \
  |  |  |  |   70|   178k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   177k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   177k|                    .transform_error(make_eof_scan_error));
  115|   177k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   177k|                               loc);
  117|   178k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
  121|   181k|    {
  122|   181k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   181k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   181k|                          basic_contiguous_scan_context<char_type>>) {
  126|   181k|            auto rd = make_reader<T, char_type>();
  127|   181k|            return impl(rd, range, value);
  128|   181k|        }
  129|   181k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   181k|            auto rd = make_reader<T, char_type>();
  131|   181k|            if (!is_segment_contiguous(range)) {
  132|   181k|                return impl(rd, range, value);
  133|   181k|            }
  134|   181k|            auto crange = get_as_contiguous(range);
  135|   181k|            SCN_TRY(it, impl(rd, crange, value));
  136|   181k|            return ranges_polyfill::batch_next(
  137|   181k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   181k|        }
  139|   181k|        else {
  140|   181k|            SCN_EXPECT(false);
  141|   181k|            SCN_UNREACHABLE;
  142|   181k|        }
  143|   181k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   181k|    {
  112|   181k|        SCN_TRY(it,
  ------------------
  |  |   71|   181k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   181k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   181k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.50k, False: 180k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.50k|    }                                                  \
  |  |  |  |   70|   181k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   180k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   180k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   180k|                    .transform_error(make_eof_scan_error));
  115|   180k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   180k|                               loc);
  117|   181k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
  121|   133k|    {
  122|   133k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   133k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   133k|                          basic_contiguous_scan_context<char_type>>) {
  126|   133k|            auto rd = make_reader<T, char_type>();
  127|   133k|            return impl(rd, range, value);
  128|   133k|        }
  129|   133k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   133k|            auto rd = make_reader<T, char_type>();
  131|   133k|            if (!is_segment_contiguous(range)) {
  132|   133k|                return impl(rd, range, value);
  133|   133k|            }
  134|   133k|            auto crange = get_as_contiguous(range);
  135|   133k|            SCN_TRY(it, impl(rd, crange, value));
  136|   133k|            return ranges_polyfill::batch_next(
  137|   133k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   133k|        }
  139|   133k|        else {
  140|   133k|            SCN_EXPECT(false);
  141|   133k|            SCN_UNREACHABLE;
  142|   133k|        }
  143|   133k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   133k|    {
  112|   133k|        SCN_TRY(it,
  ------------------
  |  |   71|   133k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   133k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   133k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 747, False: 132k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    747|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    747|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    747|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    747|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    747|    }                                                  \
  |  |  |  |   70|   133k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   132k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   132k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   132k|                    .transform_error(make_eof_scan_error));
  115|   132k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   132k|                               loc);
  117|   133k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
  121|   146k|    {
  122|   146k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   146k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   146k|                          basic_contiguous_scan_context<char_type>>) {
  126|   146k|            auto rd = make_reader<T, char_type>();
  127|   146k|            return impl(rd, range, value);
  128|   146k|        }
  129|   146k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   146k|            auto rd = make_reader<T, char_type>();
  131|   146k|            if (!is_segment_contiguous(range)) {
  132|   146k|                return impl(rd, range, value);
  133|   146k|            }
  134|   146k|            auto crange = get_as_contiguous(range);
  135|   146k|            SCN_TRY(it, impl(rd, crange, value));
  136|   146k|            return ranges_polyfill::batch_next(
  137|   146k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   146k|        }
  139|   146k|        else {
  140|   146k|            SCN_EXPECT(false);
  141|   146k|            SCN_UNREACHABLE;
  142|   146k|        }
  143|   146k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   146k|    {
  112|   146k|        SCN_TRY(it,
  ------------------
  |  |   71|   146k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   146k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   146k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 969, False: 145k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    969|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    969|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    969|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    969|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    969|    }                                                  \
  |  |  |  |   70|   146k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   145k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   145k|                    .transform_error(make_eof_scan_error));
  115|   145k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   145k|                               loc);
  117|   146k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
  121|   147k|    {
  122|   147k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   147k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   147k|                          basic_contiguous_scan_context<char_type>>) {
  126|   147k|            auto rd = make_reader<T, char_type>();
  127|   147k|            return impl(rd, range, value);
  128|   147k|        }
  129|   147k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   147k|            auto rd = make_reader<T, char_type>();
  131|   147k|            if (!is_segment_contiguous(range)) {
  132|   147k|                return impl(rd, range, value);
  133|   147k|            }
  134|   147k|            auto crange = get_as_contiguous(range);
  135|   147k|            SCN_TRY(it, impl(rd, crange, value));
  136|   147k|            return ranges_polyfill::batch_next(
  137|   147k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   147k|        }
  139|   147k|        else {
  140|   147k|            SCN_EXPECT(false);
  141|   147k|            SCN_UNREACHABLE;
  142|   147k|        }
  143|   147k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   147k|    {
  112|   147k|        SCN_TRY(it,
  ------------------
  |  |   71|   147k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   147k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   147k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.02k, False: 146k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.02k|    }                                                  \
  |  |  |  |   70|   147k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   146k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   146k|                    .transform_error(make_eof_scan_error));
  115|   146k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   146k|                               loc);
  117|   147k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  6.59k|    {
  122|  6.59k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  6.59k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  6.59k|            auto rd = make_reader<T, char_type>();
  127|  6.59k|            return impl(rd, range, value);
  128|  6.59k|        }
  129|  6.59k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.59k|            auto rd = make_reader<T, char_type>();
  131|  6.59k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 6.59k, False: 0]
  ------------------
  132|  6.59k|                return impl(rd, range, value);
  133|  6.59k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  6.59k|        else {
  140|  6.59k|            SCN_EXPECT(false);
  141|  6.59k|            SCN_UNREACHABLE;
  142|  6.59k|        }
  143|  6.59k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  6.59k|    {
  112|  6.59k|        SCN_TRY(it,
  ------------------
  |  |   71|  6.59k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.59k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.59k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.59k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.59k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  6.59k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  6.59k|                    .transform_error(make_eof_scan_error));
  115|  6.59k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  6.59k|                               loc);
  117|  6.59k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|   237k|{
   43|   237k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 18, False: 237k]
  |  |  ------------------
  ------------------
   44|     18|        return unexpected(e);
   45|     18|    }
   46|       |
   47|   237k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 237k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|   237k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|   237k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   237k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  6.59k|    {
  122|  6.59k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  6.59k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  6.59k|            auto rd = make_reader<T, char_type>();
  127|  6.59k|            return impl(rd, range, value);
  128|  6.59k|        }
  129|  6.59k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.59k|            auto rd = make_reader<T, char_type>();
  131|  6.59k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 6.59k, False: 0]
  ------------------
  132|  6.59k|                return impl(rd, range, value);
  133|  6.59k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  6.59k|        else {
  140|  6.59k|            SCN_EXPECT(false);
  141|  6.59k|            SCN_UNREACHABLE;
  142|  6.59k|        }
  143|  6.59k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  6.59k|    {
  112|  6.59k|        SCN_TRY(it,
  ------------------
  |  |   71|  6.59k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.59k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.59k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.59k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.59k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  6.59k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  6.59k|                    .transform_error(make_eof_scan_error));
  115|  6.59k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  6.59k|                               loc);
  117|  6.59k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  6.59k|    {
  122|  6.59k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  6.59k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  6.59k|            auto rd = make_reader<T, char_type>();
  127|  6.59k|            return impl(rd, range, value);
  128|  6.59k|        }
  129|  6.59k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.59k|            auto rd = make_reader<T, char_type>();
  131|  6.59k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 6.59k, False: 0]
  ------------------
  132|  6.59k|                return impl(rd, range, value);
  133|  6.59k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  6.59k|        else {
  140|  6.59k|            SCN_EXPECT(false);
  141|  6.59k|            SCN_UNREACHABLE;
  142|  6.59k|        }
  143|  6.59k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  6.59k|    {
  112|  6.59k|        SCN_TRY(it,
  ------------------
  |  |   71|  6.59k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.59k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.59k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.59k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.59k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  6.59k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  6.59k|                    .transform_error(make_eof_scan_error));
  115|  6.59k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  6.59k|                               loc);
  117|  6.59k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  6.59k|    {
  122|  6.59k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  6.59k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  6.59k|            auto rd = make_reader<T, char_type>();
  127|  6.59k|            return impl(rd, range, value);
  128|  6.59k|        }
  129|  6.59k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.59k|            auto rd = make_reader<T, char_type>();
  131|  6.59k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 6.59k, False: 0]
  ------------------
  132|  6.59k|                return impl(rd, range, value);
  133|  6.59k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  6.59k|        else {
  140|  6.59k|            SCN_EXPECT(false);
  141|  6.59k|            SCN_UNREACHABLE;
  142|  6.59k|        }
  143|  6.59k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  6.59k|    {
  112|  6.59k|        SCN_TRY(it,
  ------------------
  |  |   71|  6.59k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.59k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.59k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.59k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.59k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  6.59k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  6.59k|                    .transform_error(make_eof_scan_error));
  115|  6.59k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  6.59k|                               loc);
  117|  6.59k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  6.59k|    {
  122|  6.59k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  6.59k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  6.59k|            auto rd = make_reader<T, char_type>();
  127|  6.59k|            return impl(rd, range, value);
  128|  6.59k|        }
  129|  6.59k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.59k|            auto rd = make_reader<T, char_type>();
  131|  6.59k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 6.59k, False: 0]
  ------------------
  132|  6.59k|                return impl(rd, range, value);
  133|  6.59k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  6.59k|        else {
  140|  6.59k|            SCN_EXPECT(false);
  141|  6.59k|            SCN_UNREACHABLE;
  142|  6.59k|        }
  143|  6.59k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  6.59k|    {
  112|  6.59k|        SCN_TRY(it,
  ------------------
  |  |   71|  6.59k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.59k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.59k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.59k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.59k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  6.59k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  6.59k|                    .transform_error(make_eof_scan_error));
  115|  6.59k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  6.59k|                               loc);
  117|  6.59k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  6.59k|    {
  122|  6.59k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  6.59k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  6.59k|            auto rd = make_reader<T, char_type>();
  127|  6.59k|            return impl(rd, range, value);
  128|  6.59k|        }
  129|  6.59k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.59k|            auto rd = make_reader<T, char_type>();
  131|  6.59k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 6.59k, False: 0]
  ------------------
  132|  6.59k|                return impl(rd, range, value);
  133|  6.59k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  6.59k|        else {
  140|  6.59k|            SCN_EXPECT(false);
  141|  6.59k|            SCN_UNREACHABLE;
  142|  6.59k|        }
  143|  6.59k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  6.59k|    {
  112|  6.59k|        SCN_TRY(it,
  ------------------
  |  |   71|  6.59k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.59k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.59k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.59k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.59k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  6.59k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  6.59k|                    .transform_error(make_eof_scan_error));
  115|  6.59k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  6.59k|                               loc);
  117|  6.59k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
  222|   367k|    {
  223|   367k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   367k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   367k|                          basic_contiguous_scan_context<char_type>>) {
  227|   367k|            auto rd = make_reader<T, char_type>();
  228|   367k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   367k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 367k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   367k|            return impl(rd, range, value);
  233|   367k|        }
  234|   367k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   367k|            auto rd = make_reader<T, char_type>();
  236|   367k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   367k|                return unexpected(e);
  238|   367k|            }
  239|       |
  240|   367k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   367k|                return impl(rd, range, value);
  242|   367k|            }
  243|       |
  244|   367k|            auto crange = get_as_contiguous(range);
  245|   367k|            SCN_TRY(it, impl(rd, crange, value));
  246|   367k|            return ranges_polyfill::batch_next(
  247|   367k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   367k|        }
  249|   367k|        else {
  250|   367k|            SCN_EXPECT(false);
  251|   367k|            SCN_UNREACHABLE;
  252|   367k|        }
  253|   367k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   367k|    {
  205|   367k|        SCN_TRY(it,
  ------------------
  |  |   71|   367k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   367k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   367k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   367k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.74k, False: 365k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.74k|    }                                                  \
  |  |  |  |   70|   367k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   365k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   365k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   365k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   365k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   365k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 365k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   365k|        return rd.read_specs(subr, specs, value, loc);
  218|   365k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
  222|   468k|    {
  223|   468k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   468k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   468k|                          basic_contiguous_scan_context<char_type>>) {
  227|   468k|            auto rd = make_reader<T, char_type>();
  228|   468k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   468k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 468k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   468k|            return impl(rd, range, value);
  233|   468k|        }
  234|   468k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   468k|            auto rd = make_reader<T, char_type>();
  236|   468k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   468k|                return unexpected(e);
  238|   468k|            }
  239|       |
  240|   468k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   468k|                return impl(rd, range, value);
  242|   468k|            }
  243|       |
  244|   468k|            auto crange = get_as_contiguous(range);
  245|   468k|            SCN_TRY(it, impl(rd, crange, value));
  246|   468k|            return ranges_polyfill::batch_next(
  247|   468k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   468k|        }
  249|   468k|        else {
  250|   468k|            SCN_EXPECT(false);
  251|   468k|            SCN_UNREACHABLE;
  252|   468k|        }
  253|   468k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   468k|    {
  205|   468k|        SCN_TRY(it,
  ------------------
  |  |   71|   468k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   468k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   468k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   468k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.28k, False: 464k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.28k|    }                                                  \
  |  |  |  |   70|   468k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   464k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   464k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   464k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   464k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   464k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 464k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   464k|        return rd.read_specs(subr, specs, value, loc);
  218|   464k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
  222|   477k|    {
  223|   477k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   477k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   477k|                          basic_contiguous_scan_context<char_type>>) {
  227|   477k|            auto rd = make_reader<T, char_type>();
  228|   477k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   477k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 477k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   477k|            return impl(rd, range, value);
  233|   477k|        }
  234|   477k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   477k|            auto rd = make_reader<T, char_type>();
  236|   477k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   477k|                return unexpected(e);
  238|   477k|            }
  239|       |
  240|   477k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   477k|                return impl(rd, range, value);
  242|   477k|            }
  243|       |
  244|   477k|            auto crange = get_as_contiguous(range);
  245|   477k|            SCN_TRY(it, impl(rd, crange, value));
  246|   477k|            return ranges_polyfill::batch_next(
  247|   477k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   477k|        }
  249|   477k|        else {
  250|   477k|            SCN_EXPECT(false);
  251|   477k|            SCN_UNREACHABLE;
  252|   477k|        }
  253|   477k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   477k|    {
  205|   477k|        SCN_TRY(it,
  ------------------
  |  |   71|   477k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   477k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   477k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   477k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.54k, False: 473k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.54k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.54k|    }                                                  \
  |  |  |  |   70|   477k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   473k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   473k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   473k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   473k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   473k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 473k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   473k|        return rd.read_specs(subr, specs, value, loc);
  218|   473k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
  222|   326k|    {
  223|   326k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   326k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   326k|                          basic_contiguous_scan_context<char_type>>) {
  227|   326k|            auto rd = make_reader<T, char_type>();
  228|   326k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   326k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 326k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   326k|            return impl(rd, range, value);
  233|   326k|        }
  234|   326k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   326k|            auto rd = make_reader<T, char_type>();
  236|   326k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   326k|                return unexpected(e);
  238|   326k|            }
  239|       |
  240|   326k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   326k|                return impl(rd, range, value);
  242|   326k|            }
  243|       |
  244|   326k|            auto crange = get_as_contiguous(range);
  245|   326k|            SCN_TRY(it, impl(rd, crange, value));
  246|   326k|            return ranges_polyfill::batch_next(
  247|   326k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   326k|        }
  249|   326k|        else {
  250|   326k|            SCN_EXPECT(false);
  251|   326k|            SCN_UNREACHABLE;
  252|   326k|        }
  253|   326k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   326k|    {
  205|   326k|        SCN_TRY(it,
  ------------------
  |  |   71|   326k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   326k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   326k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   326k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.09k, False: 324k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.09k|    }                                                  \
  |  |  |  |   70|   326k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   324k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   324k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   324k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   324k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   324k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 324k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   324k|        return rd.read_specs(subr, specs, value, loc);
  218|   324k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
  222|   374k|    {
  223|   374k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   374k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   374k|                          basic_contiguous_scan_context<char_type>>) {
  227|   374k|            auto rd = make_reader<T, char_type>();
  228|   374k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 374k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   374k|            return impl(rd, range, value);
  233|   374k|        }
  234|   374k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   374k|            auto rd = make_reader<T, char_type>();
  236|   374k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   374k|                return unexpected(e);
  238|   374k|            }
  239|       |
  240|   374k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   374k|                return impl(rd, range, value);
  242|   374k|            }
  243|       |
  244|   374k|            auto crange = get_as_contiguous(range);
  245|   374k|            SCN_TRY(it, impl(rd, crange, value));
  246|   374k|            return ranges_polyfill::batch_next(
  247|   374k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   374k|        }
  249|   374k|        else {
  250|   374k|            SCN_EXPECT(false);
  251|   374k|            SCN_UNREACHABLE;
  252|   374k|        }
  253|   374k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   374k|    {
  205|   374k|        SCN_TRY(it,
  ------------------
  |  |   71|   374k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   374k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   374k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.88k, False: 371k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.88k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.88k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.88k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.88k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.88k|    }                                                  \
  |  |  |  |   70|   374k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   371k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   371k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   371k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   371k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   371k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 371k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   371k|        return rd.read_specs(subr, specs, value, loc);
  218|   371k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
  222|   379k|    {
  223|   379k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   379k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   379k|                          basic_contiguous_scan_context<char_type>>) {
  227|   379k|            auto rd = make_reader<T, char_type>();
  228|   379k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   379k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 379k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   379k|            return impl(rd, range, value);
  233|   379k|        }
  234|   379k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   379k|            auto rd = make_reader<T, char_type>();
  236|   379k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   379k|                return unexpected(e);
  238|   379k|            }
  239|       |
  240|   379k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   379k|                return impl(rd, range, value);
  242|   379k|            }
  243|       |
  244|   379k|            auto crange = get_as_contiguous(range);
  245|   379k|            SCN_TRY(it, impl(rd, crange, value));
  246|   379k|            return ranges_polyfill::batch_next(
  247|   379k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   379k|        }
  249|   379k|        else {
  250|   379k|            SCN_EXPECT(false);
  251|   379k|            SCN_UNREACHABLE;
  252|   379k|        }
  253|   379k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   379k|    {
  205|   379k|        SCN_TRY(it,
  ------------------
  |  |   71|   379k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   379k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   379k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   379k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.04k, False: 376k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.04k|    }                                                  \
  |  |  |  |   70|   379k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   376k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   376k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   376k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   376k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   376k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 376k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   376k|        return rd.read_specs(subr, specs, value, loc);
  218|   376k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  35.1k|    {
  223|  35.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  35.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  35.1k|            auto rd = make_reader<T, char_type>();
  228|  35.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  35.1k|                return unexpected(e);
  230|  35.1k|            }
  231|       |
  232|  35.1k|            return impl(rd, range, value);
  233|  35.1k|        }
  234|  35.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  35.1k|            auto rd = make_reader<T, char_type>();
  236|  35.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  35.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 35.1k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  35.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 35.1k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  35.1k|                return impl(rd, range, value);
  242|  35.1k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  35.1k|        else {
  250|  35.1k|            SCN_EXPECT(false);
  251|  35.1k|            SCN_UNREACHABLE;
  252|  35.1k|        }
  253|  35.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  35.1k|    {
  205|  35.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  35.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  35.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  35.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  35.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4, False: 35.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      4|    }                                                  \
  |  |  |  |   70|  35.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  35.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  35.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  35.1k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  35.1k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  35.1k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 35.1k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  35.1k|        return rd.read_specs(subr, specs, value, loc);
  218|  35.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  35.1k|    {
  223|  35.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  35.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  35.1k|            auto rd = make_reader<T, char_type>();
  228|  35.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  35.1k|                return unexpected(e);
  230|  35.1k|            }
  231|       |
  232|  35.1k|            return impl(rd, range, value);
  233|  35.1k|        }
  234|  35.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  35.1k|            auto rd = make_reader<T, char_type>();
  236|  35.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  35.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 35.1k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  35.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 35.1k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  35.1k|                return impl(rd, range, value);
  242|  35.1k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  35.1k|        else {
  250|  35.1k|            SCN_EXPECT(false);
  251|  35.1k|            SCN_UNREACHABLE;
  252|  35.1k|        }
  253|  35.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  35.1k|    {
  205|  35.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  35.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  35.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  35.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  35.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4, False: 35.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      4|    }                                                  \
  |  |  |  |   70|  35.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  35.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  35.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  35.1k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  35.1k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  35.1k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 35.1k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  35.1k|        return rd.read_specs(subr, specs, value, loc);
  218|  35.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  35.1k|    {
  223|  35.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  35.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  35.1k|            auto rd = make_reader<T, char_type>();
  228|  35.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  35.1k|                return unexpected(e);
  230|  35.1k|            }
  231|       |
  232|  35.1k|            return impl(rd, range, value);
  233|  35.1k|        }
  234|  35.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  35.1k|            auto rd = make_reader<T, char_type>();
  236|  35.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  35.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 35.1k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  35.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 35.1k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  35.1k|                return impl(rd, range, value);
  242|  35.1k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  35.1k|        else {
  250|  35.1k|            SCN_EXPECT(false);
  251|  35.1k|            SCN_UNREACHABLE;
  252|  35.1k|        }
  253|  35.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  35.1k|    {
  205|  35.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  35.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  35.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  35.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  35.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4, False: 35.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      4|    }                                                  \
  |  |  |  |   70|  35.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  35.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  35.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  35.1k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  35.1k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  35.1k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 35.1k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  35.1k|        return rd.read_specs(subr, specs, value, loc);
  218|  35.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  30.7k|    {
  223|  30.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  30.7k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  30.7k|            auto rd = make_reader<T, char_type>();
  228|  30.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  30.7k|                return unexpected(e);
  230|  30.7k|            }
  231|       |
  232|  30.7k|            return impl(rd, range, value);
  233|  30.7k|        }
  234|  30.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  30.7k|            auto rd = make_reader<T, char_type>();
  236|  30.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 30.7k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  30.7k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 30.7k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  30.7k|                return impl(rd, range, value);
  242|  30.7k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  30.7k|        else {
  250|  30.7k|            SCN_EXPECT(false);
  251|  30.7k|            SCN_UNREACHABLE;
  252|  30.7k|        }
  253|  30.7k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  30.7k|    {
  205|  30.7k|        SCN_TRY(it,
  ------------------
  |  |   71|  30.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  30.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  30.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2, False: 30.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      2|    }                                                  \
  |  |  |  |   70|  30.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  30.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  30.7k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  30.7k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  30.7k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  30.7k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 30.7k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  30.7k|        return rd.read_specs(subr, specs, value, loc);
  218|  30.7k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  30.7k|    {
  223|  30.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  30.7k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  30.7k|            auto rd = make_reader<T, char_type>();
  228|  30.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  30.7k|                return unexpected(e);
  230|  30.7k|            }
  231|       |
  232|  30.7k|            return impl(rd, range, value);
  233|  30.7k|        }
  234|  30.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  30.7k|            auto rd = make_reader<T, char_type>();
  236|  30.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 30.7k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  30.7k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 30.7k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  30.7k|                return impl(rd, range, value);
  242|  30.7k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  30.7k|        else {
  250|  30.7k|            SCN_EXPECT(false);
  251|  30.7k|            SCN_UNREACHABLE;
  252|  30.7k|        }
  253|  30.7k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  30.7k|    {
  205|  30.7k|        SCN_TRY(it,
  ------------------
  |  |   71|  30.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  30.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  30.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2, False: 30.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      2|    }                                                  \
  |  |  |  |   70|  30.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  30.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  30.7k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  30.7k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  30.7k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  30.7k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 30.7k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  30.7k|        return rd.read_specs(subr, specs, value, loc);
  218|  30.7k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  30.7k|    {
  223|  30.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  30.7k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  30.7k|            auto rd = make_reader<T, char_type>();
  228|  30.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  30.7k|                return unexpected(e);
  230|  30.7k|            }
  231|       |
  232|  30.7k|            return impl(rd, range, value);
  233|  30.7k|        }
  234|  30.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  30.7k|            auto rd = make_reader<T, char_type>();
  236|  30.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 30.7k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  30.7k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 30.7k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  30.7k|                return impl(rd, range, value);
  242|  30.7k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  30.7k|        else {
  250|  30.7k|            SCN_EXPECT(false);
  251|  30.7k|            SCN_UNREACHABLE;
  252|  30.7k|        }
  253|  30.7k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  30.7k|    {
  205|  30.7k|        SCN_TRY(it,
  ------------------
  |  |   71|  30.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  30.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  30.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2, False: 30.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      2|    }                                                  \
  |  |  |  |   70|  30.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  30.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  30.7k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  30.7k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  30.7k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  30.7k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 30.7k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  30.7k|        return rd.read_specs(subr, specs, value, loc);
  218|  30.7k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
  121|   138k|    {
  122|   138k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   138k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   138k|                          basic_contiguous_scan_context<char_type>>) {
  126|   138k|            auto rd = make_reader<T, char_type>();
  127|   138k|            return impl(rd, range, value);
  128|   138k|        }
  129|   138k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   138k|            auto rd = make_reader<T, char_type>();
  131|   138k|            if (!is_segment_contiguous(range)) {
  132|   138k|                return impl(rd, range, value);
  133|   138k|            }
  134|   138k|            auto crange = get_as_contiguous(range);
  135|   138k|            SCN_TRY(it, impl(rd, crange, value));
  136|   138k|            return ranges_polyfill::batch_next(
  137|   138k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   138k|        }
  139|   138k|        else {
  140|   138k|            SCN_EXPECT(false);
  141|   138k|            SCN_UNREACHABLE;
  142|   138k|        }
  143|   138k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   138k|    {
  112|   138k|        SCN_TRY(it,
  ------------------
  |  |   71|   138k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   138k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   138k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.08k, False: 137k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.08k|    }                                                  \
  |  |  |  |   70|   138k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   137k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   137k|                    .transform_error(make_eof_scan_error));
  115|   137k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   137k|                               loc);
  117|   138k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  3.03M|{
   43|  3.03M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  3.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 21.9k, False: 3.01M]
  |  |  ------------------
  ------------------
   44|  21.9k|        return unexpected(e);
   45|  21.9k|    }
   46|       |
   47|  3.01M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 3.01M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  3.01M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  3.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  3.01M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
  121|   157k|    {
  122|   157k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   157k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   157k|                          basic_contiguous_scan_context<char_type>>) {
  126|   157k|            auto rd = make_reader<T, char_type>();
  127|   157k|            return impl(rd, range, value);
  128|   157k|        }
  129|   157k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   157k|            auto rd = make_reader<T, char_type>();
  131|   157k|            if (!is_segment_contiguous(range)) {
  132|   157k|                return impl(rd, range, value);
  133|   157k|            }
  134|   157k|            auto crange = get_as_contiguous(range);
  135|   157k|            SCN_TRY(it, impl(rd, crange, value));
  136|   157k|            return ranges_polyfill::batch_next(
  137|   157k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   157k|        }
  139|   157k|        else {
  140|   157k|            SCN_EXPECT(false);
  141|   157k|            SCN_UNREACHABLE;
  142|   157k|        }
  143|   157k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   157k|    {
  112|   157k|        SCN_TRY(it,
  ------------------
  |  |   71|   157k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   157k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   157k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.50k, False: 156k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.50k|    }                                                  \
  |  |  |  |   70|   157k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   156k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   156k|                    .transform_error(make_eof_scan_error));
  115|   156k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   156k|                               loc);
  117|   157k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
  121|   159k|    {
  122|   159k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   159k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   159k|                          basic_contiguous_scan_context<char_type>>) {
  126|   159k|            auto rd = make_reader<T, char_type>();
  127|   159k|            return impl(rd, range, value);
  128|   159k|        }
  129|   159k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   159k|            auto rd = make_reader<T, char_type>();
  131|   159k|            if (!is_segment_contiguous(range)) {
  132|   159k|                return impl(rd, range, value);
  133|   159k|            }
  134|   159k|            auto crange = get_as_contiguous(range);
  135|   159k|            SCN_TRY(it, impl(rd, crange, value));
  136|   159k|            return ranges_polyfill::batch_next(
  137|   159k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   159k|        }
  139|   159k|        else {
  140|   159k|            SCN_EXPECT(false);
  141|   159k|            SCN_UNREACHABLE;
  142|   159k|        }
  143|   159k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   159k|    {
  112|   159k|        SCN_TRY(it,
  ------------------
  |  |   71|   159k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   159k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   159k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.59k, False: 157k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.59k|    }                                                  \
  |  |  |  |   70|   159k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   157k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   157k|                    .transform_error(make_eof_scan_error));
  115|   157k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   157k|                               loc);
  117|   159k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
  121|   123k|    {
  122|   123k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   123k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   123k|                          basic_contiguous_scan_context<char_type>>) {
  126|   123k|            auto rd = make_reader<T, char_type>();
  127|   123k|            return impl(rd, range, value);
  128|   123k|        }
  129|   123k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   123k|            auto rd = make_reader<T, char_type>();
  131|   123k|            if (!is_segment_contiguous(range)) {
  132|   123k|                return impl(rd, range, value);
  133|   123k|            }
  134|   123k|            auto crange = get_as_contiguous(range);
  135|   123k|            SCN_TRY(it, impl(rd, crange, value));
  136|   123k|            return ranges_polyfill::batch_next(
  137|   123k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   123k|        }
  139|   123k|        else {
  140|   123k|            SCN_EXPECT(false);
  141|   123k|            SCN_UNREACHABLE;
  142|   123k|        }
  143|   123k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   123k|    {
  112|   123k|        SCN_TRY(it,
  ------------------
  |  |   71|   123k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   123k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   123k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 819, False: 122k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    819|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    819|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    819|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    819|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    819|    }                                                  \
  |  |  |  |   70|   123k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   122k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   122k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   122k|                    .transform_error(make_eof_scan_error));
  115|   122k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   122k|                               loc);
  117|   123k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
  121|   134k|    {
  122|   134k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   134k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   134k|                          basic_contiguous_scan_context<char_type>>) {
  126|   134k|            auto rd = make_reader<T, char_type>();
  127|   134k|            return impl(rd, range, value);
  128|   134k|        }
  129|   134k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   134k|            auto rd = make_reader<T, char_type>();
  131|   134k|            if (!is_segment_contiguous(range)) {
  132|   134k|                return impl(rd, range, value);
  133|   134k|            }
  134|   134k|            auto crange = get_as_contiguous(range);
  135|   134k|            SCN_TRY(it, impl(rd, crange, value));
  136|   134k|            return ranges_polyfill::batch_next(
  137|   134k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   134k|        }
  139|   134k|        else {
  140|   134k|            SCN_EXPECT(false);
  141|   134k|            SCN_UNREACHABLE;
  142|   134k|        }
  143|   134k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   134k|    {
  112|   134k|        SCN_TRY(it,
  ------------------
  |  |   71|   134k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   134k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   134k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.04k, False: 133k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.04k|    }                                                  \
  |  |  |  |   70|   134k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   133k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   133k|                    .transform_error(make_eof_scan_error));
  115|   133k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   133k|                               loc);
  117|   134k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
  121|   135k|    {
  122|   135k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   135k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   135k|                          basic_contiguous_scan_context<char_type>>) {
  126|   135k|            auto rd = make_reader<T, char_type>();
  127|   135k|            return impl(rd, range, value);
  128|   135k|        }
  129|   135k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   135k|            auto rd = make_reader<T, char_type>();
  131|   135k|            if (!is_segment_contiguous(range)) {
  132|   135k|                return impl(rd, range, value);
  133|   135k|            }
  134|   135k|            auto crange = get_as_contiguous(range);
  135|   135k|            SCN_TRY(it, impl(rd, crange, value));
  136|   135k|            return ranges_polyfill::batch_next(
  137|   135k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   135k|        }
  139|   135k|        else {
  140|   135k|            SCN_EXPECT(false);
  141|   135k|            SCN_UNREACHABLE;
  142|   135k|        }
  143|   135k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   135k|    {
  112|   135k|        SCN_TRY(it,
  ------------------
  |  |   71|   135k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   135k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   135k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.10k, False: 134k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.10k|    }                                                  \
  |  |  |  |   70|   135k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   134k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   134k|                    .transform_error(make_eof_scan_error));
  115|   134k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   134k|                               loc);
  117|   135k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
  222|   333k|    {
  223|   333k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   333k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   333k|                          basic_contiguous_scan_context<char_type>>) {
  227|   333k|            auto rd = make_reader<T, char_type>();
  228|   333k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 333k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   333k|            return impl(rd, range, value);
  233|   333k|        }
  234|   333k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   333k|            auto rd = make_reader<T, char_type>();
  236|   333k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   333k|                return unexpected(e);
  238|   333k|            }
  239|       |
  240|   333k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   333k|                return impl(rd, range, value);
  242|   333k|            }
  243|       |
  244|   333k|            auto crange = get_as_contiguous(range);
  245|   333k|            SCN_TRY(it, impl(rd, crange, value));
  246|   333k|            return ranges_polyfill::batch_next(
  247|   333k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   333k|        }
  249|   333k|        else {
  250|   333k|            SCN_EXPECT(false);
  251|   333k|            SCN_UNREACHABLE;
  252|   333k|        }
  253|   333k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   333k|    {
  205|   333k|        SCN_TRY(it,
  ------------------
  |  |   71|   333k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   333k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   333k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.04k, False: 330k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.04k|    }                                                  \
  |  |  |  |   70|   333k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   330k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   330k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   330k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   330k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 330k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   330k|        return rd.read_specs(subr, specs, value, loc);
  218|   330k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
  222|   416k|    {
  223|   416k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   416k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   416k|                          basic_contiguous_scan_context<char_type>>) {
  227|   416k|            auto rd = make_reader<T, char_type>();
  228|   416k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   416k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 416k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   416k|            return impl(rd, range, value);
  233|   416k|        }
  234|   416k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   416k|            auto rd = make_reader<T, char_type>();
  236|   416k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   416k|                return unexpected(e);
  238|   416k|            }
  239|       |
  240|   416k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   416k|                return impl(rd, range, value);
  242|   416k|            }
  243|       |
  244|   416k|            auto crange = get_as_contiguous(range);
  245|   416k|            SCN_TRY(it, impl(rd, crange, value));
  246|   416k|            return ranges_polyfill::batch_next(
  247|   416k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   416k|        }
  249|   416k|        else {
  250|   416k|            SCN_EXPECT(false);
  251|   416k|            SCN_UNREACHABLE;
  252|   416k|        }
  253|   416k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   416k|    {
  205|   416k|        SCN_TRY(it,
  ------------------
  |  |   71|   416k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   416k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   416k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   416k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.59k, False: 412k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.59k|    }                                                  \
  |  |  |  |   70|   416k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   412k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   412k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   412k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   412k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   412k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 412k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   412k|        return rd.read_specs(subr, specs, value, loc);
  218|   412k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
  222|   421k|    {
  223|   421k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   421k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   421k|                          basic_contiguous_scan_context<char_type>>) {
  227|   421k|            auto rd = make_reader<T, char_type>();
  228|   421k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   421k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 421k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   421k|            return impl(rd, range, value);
  233|   421k|        }
  234|   421k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   421k|            auto rd = make_reader<T, char_type>();
  236|   421k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   421k|                return unexpected(e);
  238|   421k|            }
  239|       |
  240|   421k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   421k|                return impl(rd, range, value);
  242|   421k|            }
  243|       |
  244|   421k|            auto crange = get_as_contiguous(range);
  245|   421k|            SCN_TRY(it, impl(rd, crange, value));
  246|   421k|            return ranges_polyfill::batch_next(
  247|   421k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   421k|        }
  249|   421k|        else {
  250|   421k|            SCN_EXPECT(false);
  251|   421k|            SCN_UNREACHABLE;
  252|   421k|        }
  253|   421k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   421k|    {
  205|   421k|        SCN_TRY(it,
  ------------------
  |  |   71|   421k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   421k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   421k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   421k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.86k, False: 416k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.86k|    }                                                  \
  |  |  |  |   70|   421k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   416k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   416k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   416k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   416k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   416k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 416k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   416k|        return rd.read_specs(subr, specs, value, loc);
  218|   416k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
  222|   309k|    {
  223|   309k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   309k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   309k|                          basic_contiguous_scan_context<char_type>>) {
  227|   309k|            auto rd = make_reader<T, char_type>();
  228|   309k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   309k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 309k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   309k|            return impl(rd, range, value);
  233|   309k|        }
  234|   309k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   309k|            auto rd = make_reader<T, char_type>();
  236|   309k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   309k|                return unexpected(e);
  238|   309k|            }
  239|       |
  240|   309k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   309k|                return impl(rd, range, value);
  242|   309k|            }
  243|       |
  244|   309k|            auto crange = get_as_contiguous(range);
  245|   309k|            SCN_TRY(it, impl(rd, crange, value));
  246|   309k|            return ranges_polyfill::batch_next(
  247|   309k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   309k|        }
  249|   309k|        else {
  250|   309k|            SCN_EXPECT(false);
  251|   309k|            SCN_UNREACHABLE;
  252|   309k|        }
  253|   309k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   309k|    {
  205|   309k|        SCN_TRY(it,
  ------------------
  |  |   71|   309k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   309k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   309k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   309k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.38k, False: 306k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.38k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.38k|    }                                                  \
  |  |  |  |   70|   309k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   306k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   306k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   306k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   306k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   306k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 306k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   306k|        return rd.read_specs(subr, specs, value, loc);
  218|   306k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
  222|   350k|    {
  223|   350k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   350k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   350k|                          basic_contiguous_scan_context<char_type>>) {
  227|   350k|            auto rd = make_reader<T, char_type>();
  228|   350k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   350k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 350k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   350k|            return impl(rd, range, value);
  233|   350k|        }
  234|   350k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   350k|            auto rd = make_reader<T, char_type>();
  236|   350k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   350k|                return unexpected(e);
  238|   350k|            }
  239|       |
  240|   350k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   350k|                return impl(rd, range, value);
  242|   350k|            }
  243|       |
  244|   350k|            auto crange = get_as_contiguous(range);
  245|   350k|            SCN_TRY(it, impl(rd, crange, value));
  246|   350k|            return ranges_polyfill::batch_next(
  247|   350k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   350k|        }
  249|   350k|        else {
  250|   350k|            SCN_EXPECT(false);
  251|   350k|            SCN_UNREACHABLE;
  252|   350k|        }
  253|   350k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   350k|    {
  205|   350k|        SCN_TRY(it,
  ------------------
  |  |   71|   350k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   350k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   350k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   350k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.16k, False: 347k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.16k|    }                                                  \
  |  |  |  |   70|   350k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   347k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   347k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   347k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   347k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   347k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 347k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   347k|        return rd.read_specs(subr, specs, value, loc);
  218|   347k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
  222|   354k|    {
  223|   354k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   354k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   354k|                          basic_contiguous_scan_context<char_type>>) {
  227|   354k|            auto rd = make_reader<T, char_type>();
  228|   354k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   354k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 354k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   354k|            return impl(rd, range, value);
  233|   354k|        }
  234|   354k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   354k|            auto rd = make_reader<T, char_type>();
  236|   354k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   354k|                return unexpected(e);
  238|   354k|            }
  239|       |
  240|   354k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   354k|                return impl(rd, range, value);
  242|   354k|            }
  243|       |
  244|   354k|            auto crange = get_as_contiguous(range);
  245|   354k|            SCN_TRY(it, impl(rd, crange, value));
  246|   354k|            return ranges_polyfill::batch_next(
  247|   354k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   354k|        }
  249|   354k|        else {
  250|   354k|            SCN_EXPECT(false);
  251|   354k|            SCN_UNREACHABLE;
  252|   354k|        }
  253|   354k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   354k|    {
  205|   354k|        SCN_TRY(it,
  ------------------
  |  |   71|   354k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   354k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   354k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   354k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.33k, False: 350k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.33k|    }                                                  \
  |  |  |  |   70|   354k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   350k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   350k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   350k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   350k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   350k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 350k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   350k|        return rd.read_specs(subr, specs, value, loc);
  218|   350k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  11.6k|    {
  122|  11.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  11.6k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  11.6k|            auto rd = make_reader<T, char_type>();
  127|  11.6k|            return impl(rd, range, value);
  128|  11.6k|        }
  129|  11.6k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  11.6k|            auto rd = make_reader<T, char_type>();
  131|  11.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 11.6k, False: 0]
  ------------------
  132|  11.6k|                return impl(rd, range, value);
  133|  11.6k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  11.6k|        else {
  140|  11.6k|            SCN_EXPECT(false);
  141|  11.6k|            SCN_UNREACHABLE;
  142|  11.6k|        }
  143|  11.6k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  11.6k|    {
  112|  11.6k|        SCN_TRY(it,
  ------------------
  |  |   71|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  11.6k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  11.6k|                    .transform_error(make_eof_scan_error));
  115|  11.6k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  11.6k|                               loc);
  117|  11.6k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|   387k|{
   43|   387k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   387k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 22, False: 387k]
  |  |  ------------------
  ------------------
   44|     22|        return unexpected(e);
   45|     22|    }
   46|       |
   47|   387k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 387k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|   387k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|   387k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   387k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  11.6k|    {
  122|  11.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  11.6k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  11.6k|            auto rd = make_reader<T, char_type>();
  127|  11.6k|            return impl(rd, range, value);
  128|  11.6k|        }
  129|  11.6k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  11.6k|            auto rd = make_reader<T, char_type>();
  131|  11.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 11.6k, False: 0]
  ------------------
  132|  11.6k|                return impl(rd, range, value);
  133|  11.6k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  11.6k|        else {
  140|  11.6k|            SCN_EXPECT(false);
  141|  11.6k|            SCN_UNREACHABLE;
  142|  11.6k|        }
  143|  11.6k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  11.6k|    {
  112|  11.6k|        SCN_TRY(it,
  ------------------
  |  |   71|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  11.6k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  11.6k|                    .transform_error(make_eof_scan_error));
  115|  11.6k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  11.6k|                               loc);
  117|  11.6k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  11.6k|    {
  122|  11.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  11.6k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  11.6k|            auto rd = make_reader<T, char_type>();
  127|  11.6k|            return impl(rd, range, value);
  128|  11.6k|        }
  129|  11.6k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  11.6k|            auto rd = make_reader<T, char_type>();
  131|  11.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 11.6k, False: 0]
  ------------------
  132|  11.6k|                return impl(rd, range, value);
  133|  11.6k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  11.6k|        else {
  140|  11.6k|            SCN_EXPECT(false);
  141|  11.6k|            SCN_UNREACHABLE;
  142|  11.6k|        }
  143|  11.6k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  11.6k|    {
  112|  11.6k|        SCN_TRY(it,
  ------------------
  |  |   71|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  11.6k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  11.6k|                    .transform_error(make_eof_scan_error));
  115|  11.6k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  11.6k|                               loc);
  117|  11.6k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  11.6k|    {
  122|  11.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  11.6k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  11.6k|            auto rd = make_reader<T, char_type>();
  127|  11.6k|            return impl(rd, range, value);
  128|  11.6k|        }
  129|  11.6k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  11.6k|            auto rd = make_reader<T, char_type>();
  131|  11.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 11.6k, False: 0]
  ------------------
  132|  11.6k|                return impl(rd, range, value);
  133|  11.6k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  11.6k|        else {
  140|  11.6k|            SCN_EXPECT(false);
  141|  11.6k|            SCN_UNREACHABLE;
  142|  11.6k|        }
  143|  11.6k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  11.6k|    {
  112|  11.6k|        SCN_TRY(it,
  ------------------
  |  |   71|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  11.6k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  11.6k|                    .transform_error(make_eof_scan_error));
  115|  11.6k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  11.6k|                               loc);
  117|  11.6k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  11.6k|    {
  122|  11.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  11.6k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  11.6k|            auto rd = make_reader<T, char_type>();
  127|  11.6k|            return impl(rd, range, value);
  128|  11.6k|        }
  129|  11.6k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  11.6k|            auto rd = make_reader<T, char_type>();
  131|  11.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 11.6k, False: 0]
  ------------------
  132|  11.6k|                return impl(rd, range, value);
  133|  11.6k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  11.6k|        else {
  140|  11.6k|            SCN_EXPECT(false);
  141|  11.6k|            SCN_UNREACHABLE;
  142|  11.6k|        }
  143|  11.6k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  11.6k|    {
  112|  11.6k|        SCN_TRY(it,
  ------------------
  |  |   71|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  11.6k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  11.6k|                    .transform_error(make_eof_scan_error));
  115|  11.6k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  11.6k|                               loc);
  117|  11.6k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  11.6k|    {
  122|  11.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  11.6k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  11.6k|            auto rd = make_reader<T, char_type>();
  127|  11.6k|            return impl(rd, range, value);
  128|  11.6k|        }
  129|  11.6k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  11.6k|            auto rd = make_reader<T, char_type>();
  131|  11.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 11.6k, False: 0]
  ------------------
  132|  11.6k|                return impl(rd, range, value);
  133|  11.6k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  11.6k|        else {
  140|  11.6k|            SCN_EXPECT(false);
  141|  11.6k|            SCN_UNREACHABLE;
  142|  11.6k|        }
  143|  11.6k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  11.6k|    {
  112|  11.6k|        SCN_TRY(it,
  ------------------
  |  |   71|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  11.6k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  11.6k|                    .transform_error(make_eof_scan_error));
  115|  11.6k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  11.6k|                               loc);
  117|  11.6k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  46.4k|    {
  223|  46.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  46.4k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  46.4k|            auto rd = make_reader<T, char_type>();
  228|  46.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  46.4k|                return unexpected(e);
  230|  46.4k|            }
  231|       |
  232|  46.4k|            return impl(rd, range, value);
  233|  46.4k|        }
  234|  46.4k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  46.4k|            auto rd = make_reader<T, char_type>();
  236|  46.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  46.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 46.4k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  46.4k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 46.4k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  46.4k|                return impl(rd, range, value);
  242|  46.4k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  46.4k|        else {
  250|  46.4k|            SCN_EXPECT(false);
  251|  46.4k|            SCN_UNREACHABLE;
  252|  46.4k|        }
  253|  46.4k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  46.4k|    {
  205|  46.4k|        SCN_TRY(it,
  ------------------
  |  |   71|  46.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  46.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  46.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  46.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2, False: 46.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      2|    }                                                  \
  |  |  |  |   70|  46.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  46.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  46.4k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  46.4k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  46.4k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  46.4k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 46.4k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  46.4k|        return rd.read_specs(subr, specs, value, loc);
  218|  46.4k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  54.1k|    {
  223|  54.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  54.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  54.1k|            auto rd = make_reader<T, char_type>();
  228|  54.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  54.1k|                return unexpected(e);
  230|  54.1k|            }
  231|       |
  232|  54.1k|            return impl(rd, range, value);
  233|  54.1k|        }
  234|  54.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  54.1k|            auto rd = make_reader<T, char_type>();
  236|  54.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  54.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 54.1k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  54.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 54.1k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  54.1k|                return impl(rd, range, value);
  242|  54.1k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  54.1k|        else {
  250|  54.1k|            SCN_EXPECT(false);
  251|  54.1k|            SCN_UNREACHABLE;
  252|  54.1k|        }
  253|  54.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  54.1k|    {
  205|  54.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  54.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  54.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  54.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  54.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4, False: 54.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      4|    }                                                  \
  |  |  |  |   70|  54.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  54.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  54.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  54.1k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  54.1k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  54.1k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 54.1k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  54.1k|        return rd.read_specs(subr, specs, value, loc);
  218|  54.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  54.1k|    {
  223|  54.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  54.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  54.1k|            auto rd = make_reader<T, char_type>();
  228|  54.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  54.1k|                return unexpected(e);
  230|  54.1k|            }
  231|       |
  232|  54.1k|            return impl(rd, range, value);
  233|  54.1k|        }
  234|  54.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  54.1k|            auto rd = make_reader<T, char_type>();
  236|  54.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  54.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 54.1k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  54.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 54.1k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  54.1k|                return impl(rd, range, value);
  242|  54.1k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  54.1k|        else {
  250|  54.1k|            SCN_EXPECT(false);
  251|  54.1k|            SCN_UNREACHABLE;
  252|  54.1k|        }
  253|  54.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  54.1k|    {
  205|  54.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  54.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  54.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  54.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  54.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4, False: 54.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      4|    }                                                  \
  |  |  |  |   70|  54.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  54.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  54.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  54.1k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  54.1k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  54.1k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 54.1k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  54.1k|        return rd.read_specs(subr, specs, value, loc);
  218|  54.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  54.1k|    {
  223|  54.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  54.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  54.1k|            auto rd = make_reader<T, char_type>();
  228|  54.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  54.1k|                return unexpected(e);
  230|  54.1k|            }
  231|       |
  232|  54.1k|            return impl(rd, range, value);
  233|  54.1k|        }
  234|  54.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  54.1k|            auto rd = make_reader<T, char_type>();
  236|  54.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  54.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 54.1k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  54.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 54.1k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  54.1k|                return impl(rd, range, value);
  242|  54.1k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  54.1k|        else {
  250|  54.1k|            SCN_EXPECT(false);
  251|  54.1k|            SCN_UNREACHABLE;
  252|  54.1k|        }
  253|  54.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  54.1k|    {
  205|  54.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  54.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  54.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  54.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  54.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4, False: 54.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      4|    }                                                  \
  |  |  |  |   70|  54.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  54.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  54.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  54.1k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  54.1k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  54.1k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 54.1k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  54.1k|        return rd.read_specs(subr, specs, value, loc);
  218|  54.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  54.1k|    {
  223|  54.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  54.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  54.1k|            auto rd = make_reader<T, char_type>();
  228|  54.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  54.1k|                return unexpected(e);
  230|  54.1k|            }
  231|       |
  232|  54.1k|            return impl(rd, range, value);
  233|  54.1k|        }
  234|  54.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  54.1k|            auto rd = make_reader<T, char_type>();
  236|  54.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  54.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 54.1k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  54.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 54.1k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  54.1k|                return impl(rd, range, value);
  242|  54.1k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  54.1k|        else {
  250|  54.1k|            SCN_EXPECT(false);
  251|  54.1k|            SCN_UNREACHABLE;
  252|  54.1k|        }
  253|  54.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  54.1k|    {
  205|  54.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  54.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  54.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  54.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  54.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4, False: 54.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      4|    }                                                  \
  |  |  |  |   70|  54.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  54.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  54.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  54.1k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  54.1k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  54.1k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 54.1k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  54.1k|        return rd.read_specs(subr, specs, value, loc);
  218|  54.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  54.1k|    {
  223|  54.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  54.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  54.1k|            auto rd = make_reader<T, char_type>();
  228|  54.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  54.1k|                return unexpected(e);
  230|  54.1k|            }
  231|       |
  232|  54.1k|            return impl(rd, range, value);
  233|  54.1k|        }
  234|  54.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  54.1k|            auto rd = make_reader<T, char_type>();
  236|  54.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  54.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 54.1k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  54.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 54.1k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  54.1k|                return impl(rd, range, value);
  242|  54.1k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  54.1k|        else {
  250|  54.1k|            SCN_EXPECT(false);
  251|  54.1k|            SCN_UNREACHABLE;
  252|  54.1k|        }
  253|  54.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  54.1k|    {
  205|  54.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  54.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  54.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  54.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  54.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4, False: 54.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      4|    }                                                  \
  |  |  |  |   70|  54.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  54.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  54.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  54.1k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  54.1k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  54.1k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 54.1k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  54.1k|        return rd.read_specs(subr, specs, value, loc);
  218|  54.1k|    }

_ZN3scn2v24impl39code_point_length_by_starting_code_unitIcEEmT_:
  109|   146k|{
  110|   146k|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|   146k|}
_ZN3scn2v24impl19get_next_code_pointIcEENS1_21iterator_value_resultIDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEEEEDiEESC_:
  262|   100k|{
  263|   100k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  264|       |
  265|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  266|   100k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.12k, False: 95.2k]
  |  |  ------------------
  ------------------
  267|  5.12k|        return {get_start_of_next_code_point(input),
  268|  5.12k|                detail::invalid_code_point};
  269|  5.12k|    }
  270|  95.2k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  153|  95.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.62k, False: 93.6k]
  |  |  ------------------
  ------------------
  271|  1.62k|        return {input.end(), detail::invalid_code_point};
  272|  1.62k|    }
  273|       |
  274|  93.6k|    constexpr auto enc = get_encoding<CharT>();
  275|  93.6k|    std::size_t result{1};
  276|  93.6k|    char32_t output{};
  277|  93.6k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (277:19): [Folded - Ignored]
  ------------------
  278|  93.6k|        result = simdutf::convert_utf8_to_utf32(
  279|  93.6k|            reinterpret_cast<const char*>(input.data()), len, &output);
  280|  93.6k|    }
  281|  93.6k|    else if constexpr (enc == encoding::utf16) {
  282|  93.6k|        result = simdutf::convert_utf16_to_utf32(
  283|  93.6k|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  284|  93.6k|    }
  285|  93.6k|    else if constexpr (enc == encoding::utf32) {
  286|  93.6k|        SCN_EXPECT(len == 1);
  287|  93.6k|        output = static_cast<char32_t>(input[0]);
  288|  93.6k|    }
  289|       |
  290|  93.6k|    if (SCN_UNLIKELY(result != 1)) {
  ------------------
  |  |  153|  93.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.58k, False: 89.0k]
  |  |  ------------------
  ------------------
  291|  4.58k|        return {get_start_of_next_code_point(input.substr(1)),
  292|  4.58k|                detail::invalid_code_point};
  293|  4.58k|    }
  294|       |
  295|  89.0k|    return {input.begin() + len, output};
  296|  93.6k|}
_ZN3scn2v24impl28get_start_of_next_code_pointIcEEDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEEESB_:
  247|  9.70k|{
  248|  9.70k|    auto it = input.begin();
  249|  48.6k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (249:12): [True: 46.3k, False: 2.30k]
  ------------------
  250|  46.3k|        if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (250:13): [True: 7.39k, False: 38.9k]
  ------------------
  251|  7.39k|            break;
  252|  7.39k|        }
  253|  46.3k|    }
  254|       |
  255|  9.70k|    return it;
  256|  9.70k|}
_ZN3scn2v24impl39code_point_length_by_starting_code_unitIwEEmT_:
  109|  45.1M|{
  110|  45.1M|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|  45.1M|}
_ZN3scn2v24impl26transcode_possibly_invalidIwDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EE:
  448|  3.40M|{
  449|  3.40M|    if (input.empty()) {
  ------------------
  |  Branch (449:9): [True: 0, False: 3.40M]
  ------------------
  450|      0|        return 0;
  451|      0|    }
  452|       |
  453|  3.40M|    if constexpr (get_encoding<SourceCharT>() == get_encoding<DestCharT>()) {
  ------------------
  |  Branch (453:19): [Folded - Ignored]
  ------------------
  454|  3.40M|        SCN_EXPECT(output.size() >= input.size());
  ------------------
  |  |  242|  3.40M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.40M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|        std::memcpy(output.data(), input.data(),
  456|  3.40M|                    input.size() * sizeof(SourceCharT));
  457|  3.40M|        return input.size();
  458|  3.40M|    }
  459|       |
  460|      0|    const auto result = [&]() {
  461|      0|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|      0|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|      0|        if constexpr (src_enc == encoding::utf8) {
  465|      0|            if constexpr (dest_enc == encoding::utf16) {
  466|      0|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|      0|                    input.data(), input.size(),
  468|      0|                    reinterpret_cast<char16_t*>(output.data()));
  469|      0|            }
  470|      0|            else {
  471|      0|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|      0|                    input.data(), input.size(),
  473|      0|                    reinterpret_cast<char32_t*>(output.data()));
  474|      0|            }
  475|      0|        }
  476|      0|        else if constexpr (src_enc == encoding::utf16) {
  477|      0|            if constexpr (dest_enc == encoding::utf8) {
  478|      0|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  480|      0|                    input.size(), output.data());
  481|      0|            }
  482|      0|            else {
  483|      0|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  485|      0|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|      0|            }
  487|      0|        }
  488|      0|        else if constexpr (src_enc == encoding::utf32) {
  489|      0|            if constexpr (dest_enc == encoding::utf8) {
  490|      0|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  492|      0|                    input.size(), output.data());
  493|      0|            }
  494|      0|            else {
  495|      0|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  497|      0|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|      0|            }
  499|      0|        }
  500|      0|    }();
  501|       |
  502|      0|    if (SCN_UNLIKELY(result.error != simdutf::SUCCESS)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  503|      0|        return std::nullopt;
  504|      0|    }
  505|      0|    SCN_ENSURE(result.count <= output.size());
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  506|      0|    return result.count;
  507|      0|}

_ZN3scn2v24impl11is_cp_spaceEDi:
   28|  6.38M|{
   29|       |    // Pattern_White_Space property
   30|  6.38M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (30:13): [True: 6.37M, False: 15.8k]
  |  Branch (30:27): [True: 2.87M, False: 3.49M]
  ------------------
   31|  6.38M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (31:12): [True: 42.6k, False: 3.46M]
  ------------------
   32|  6.38M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (32:12): [True: 4.57k, False: 3.46M]
  ------------------
   33|  6.38M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (33:12): [True: 1.42k, False: 3.46M]
  ------------------
   34|  6.38M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (34:12): [True: 1.34k, False: 3.46M]
  ------------------
   35|  6.38M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (35:12): [True: 2.21k, False: 3.45M]
  ------------------
   36|  6.38M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (36:12): [True: 0, False: 3.45M]
  ------------------
   37|  6.38M|}

_ZN3scn2v24impl14is_ascii_spaceEc:
   57|  6.75M|{
   58|  6.75M|    return is_ascii_space_lookup[static_cast<size_t>(
   59|  6.75M|        static_cast<unsigned char>(ch))];
   60|  6.75M|}

_ZN3scn2v24impl16has_byte_greaterEmh:
   91|  3.58M|{
   92|  3.58M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
   93|  3.58M|}

_ZN3scn2v24impl29basic_contiguous_scan_contextIcEC2IRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
   56|  2.47M|    {
   57|  2.47M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5beginEv:
   60|  7.10M|    {
   61|  7.10M|        return m_current;
   62|  7.10M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE3endEv:
   65|  4.63M|    {
   66|  4.63M|        return m_range.end();
   67|  4.63M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
   80|  2.23M|    {
   81|  2.23M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|  2.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  2.23M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  2.23M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 2.23M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  2.23M|        }
   87|  2.23M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  2.23M|    static_cast<    \
  |  |  247|  2.23M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  2.23M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5rangeEv:
   70|  2.39M|    {
   71|  2.39M|        return ranges::subrange{begin(), end()};
   72|  2.39M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwEC2IRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
   56|  2.32M|    {
   57|  2.32M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5beginEv:
   60|  6.41M|    {
   61|  6.41M|        return m_current;
   62|  6.41M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE3endEv:
   65|  4.09M|    {
   66|  4.09M|        return m_range.end();
   67|  4.09M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
   80|  1.90M|    {
   81|  1.90M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|  1.90M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.90M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  1.90M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  1.90M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 1.90M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  1.90M|        }
   87|  1.90M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  1.90M|    static_cast<    \
  |  |  247|  1.90M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  1.90M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5rangeEv:
   70|  2.18M|    {
   71|  2.18M|        return ranges::subrange{begin(), end()};
   72|  2.18M|    }

_ZNK3scn2v24impl12function_refIFbcES3_EclEc:
  204|   474k|    {
  205|   474k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|   474k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   474k|    }
_ZN3scn2v24impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|   197k|    {
  196|   197k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  185|   237k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   237k|              cvref<T> obj = *get<T>(fn);
  187|   237k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   237k|                  obj(static_cast<decltype(args)>(args)...);
  189|   237k|              }
  190|   237k|              else {
  191|   237k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   237k|              }
  193|   237k|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  125|   237k|    {
  126|   237k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   237k|            return static_cast<T*>(s.m_cp);
  128|   237k|        }
  129|   237k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   237k|            return static_cast<T*>(s.m_p);
  131|   237k|        }
  132|   237k|        else {
  133|   237k|            return reinterpret_cast<T*>(s.m_fp);
  134|   237k|        }
  135|   237k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  103|   197k|        {
  104|   197k|        }
_ZNK3scn2v24impl12function_refIFbDiES3_EclEDi:
  204|  12.5M|    {
  205|  12.5M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  12.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  12.5M|    }
_ZN3scn2v24impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|  3.40M|    {
  196|  3.40M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  185|  6.28M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  6.28M|              cvref<T> obj = *get<T>(fn);
  187|  6.28M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  6.28M|                  obj(static_cast<decltype(args)>(args)...);
  189|  6.28M|              }
  190|  6.28M|              else {
  191|  6.28M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  6.28M|              }
  193|  6.28M|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  125|  6.28M|    {
  126|  6.28M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  6.28M|            return static_cast<T*>(s.m_cp);
  128|  6.28M|        }
  129|  6.28M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.28M|            return static_cast<T*>(s.m_p);
  131|  6.28M|        }
  132|  6.28M|        else {
  133|  6.28M|            return reinterpret_cast<T*>(s.m_fp);
  134|  6.28M|        }
  135|  6.28M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  103|  3.40M|        {
  104|  3.40M|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_SO_LPv0EEEOSK_:
  195|   197k|    {
  196|   197k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_SO_LPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEcE_clEST_c:
  185|   237k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   237k|              cvref<T> obj = *get<T>(fn);
  187|   237k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   237k|                  obj(static_cast<decltype(args)>(args)...);
  189|   237k|              }
  190|   237k|              else {
  191|   237k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   237k|              }
  193|   237k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_iEUlcE_EEDaNS3_7storageE:
  125|   237k|    {
  126|   237k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   237k|            return static_cast<T*>(s.m_cp);
  128|   237k|        }
  129|   237k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   237k|            return static_cast<T*>(s.m_p);
  131|   237k|        }
  132|   237k|        else {
  133|   237k|            return reinterpret_cast<T*>(s.m_fp);
  134|   237k|        }
  135|   237k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_LPv0EEEPSK_:
  103|   197k|        {
  104|   197k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_:
  195|  3.01M|    {
  196|  3.01M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  185|  5.89M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  5.89M|              cvref<T> obj = *get<T>(fn);
  187|  5.89M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  5.89M|                  obj(static_cast<decltype(args)>(args)...);
  189|  5.89M|              }
  190|  5.89M|              else {
  191|  5.89M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  5.89M|              }
  193|  5.89M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_EUlDiE_EEDaNS3_7storageE:
  125|  5.89M|    {
  126|  5.89M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  5.89M|            return static_cast<T*>(s.m_cp);
  128|  5.89M|        }
  129|  5.89M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  5.89M|            return static_cast<T*>(s.m_p);
  131|  5.89M|        }
  132|  5.89M|        else {
  133|  5.89M|            return reinterpret_cast<T*>(s.m_fp);
  134|  5.89M|        }
  135|  5.89M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_LPv0EEEPSI_:
  103|  3.01M|        {
  104|  3.01M|        }
_ZNK3scn2v24impl12function_refIFbwES3_EclEw:
  204|   820k|    {
  205|   820k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|   820k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   820k|    }
_ZN3scn2v24impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|   317k|    {
  196|   317k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  185|   410k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   410k|              cvref<T> obj = *get<T>(fn);
  187|   410k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   410k|                  obj(static_cast<decltype(args)>(args)...);
  189|   410k|              }
  190|   410k|              else {
  191|   410k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   410k|              }
  193|   410k|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  125|   410k|    {
  126|   410k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   410k|            return static_cast<T*>(s.m_cp);
  128|   410k|        }
  129|   410k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   410k|            return static_cast<T*>(s.m_p);
  131|   410k|        }
  132|   410k|        else {
  133|   410k|            return reinterpret_cast<T*>(s.m_fp);
  134|   410k|        }
  135|   410k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  103|   317k|        {
  104|   317k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_:
  195|   387k|    {
  196|   387k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  185|   387k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   387k|              cvref<T> obj = *get<T>(fn);
  187|   387k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   387k|                  obj(static_cast<decltype(args)>(args)...);
  189|   387k|              }
  190|   387k|              else {
  191|   387k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   387k|              }
  193|   387k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_EUlDiE_EEDaNS3_7storageE:
  125|   387k|    {
  126|   387k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   387k|            return static_cast<T*>(s.m_cp);
  128|   387k|        }
  129|   387k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   387k|            return static_cast<T*>(s.m_p);
  131|   387k|        }
  132|   387k|        else {
  133|   387k|            return reinterpret_cast<T*>(s.m_fp);
  134|   387k|        }
  135|   387k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_LPv0EEEPSL_:
  103|   387k|        {
  104|   387k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_SO_LPv0EEEOSK_:
  195|   317k|    {
  196|   317k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_SO_LPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEwE_clEST_w:
  185|   410k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   410k|              cvref<T> obj = *get<T>(fn);
  187|   410k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   410k|                  obj(static_cast<decltype(args)>(args)...);
  189|   410k|              }
  190|   410k|              else {
  191|   410k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   410k|              }
  193|   410k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_iEUlwE_EEDaNS3_7storageE:
  125|   410k|    {
  126|   410k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   410k|            return static_cast<T*>(s.m_cp);
  128|   410k|        }
  129|   410k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   410k|            return static_cast<T*>(s.m_p);
  131|   410k|        }
  132|   410k|        else {
  133|   410k|            return reinterpret_cast<T*>(s.m_fp);
  134|   410k|        }
  135|   410k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_LPv0EEEPSK_:
  103|   317k|        {
  104|   317k|        }

_ZN3scn2v24impl19make_eof_scan_errorENS1_9eof_errorE:
   43|  54.8k|{
   44|  54.8k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  242|  54.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  54.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   45|      0|    return scan_error{scan_error::end_of_range, "EOF"};
   46|  54.8k|}
_ZN3scn2v24implntENS1_9eof_errorE:
   29|  30.0M|{
   30|  30.0M|    return e != eof_error::good;
   31|  30.0M|}
_ZN3scn2v24impl20make_eof_parse_errorENS1_9eof_errorE:
   90|   169k|{
   91|   169k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  242|   169k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   169k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   92|      0|    return parse_error::eof;
   93|   169k|}
_ZN3scn2v24impleqENS1_11parse_errorES2_:
   68|  7.16M|    {
   69|  7.16M|        return a.m_code == b.m_code;
   70|  7.16M|    }
_ZN3scn2v24impl11parse_errorC2ENS2_4codeE:
   54|  34.5M|    {
   55|  34.5M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|  34.5M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   56|  34.5M|    }
_ZZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  114|   429k|    return [code, msg](parse_error err) {
  115|   429k|        return make_scan_error_from_parse_error(err, code, msg);
  116|   429k|    };
_ZN3scn2v24impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
   99|   429k|{
  100|   429k|    if (err == parse_error::good) {
  ------------------
  |  Branch (100:9): [True: 0, False: 429k]
  ------------------
  101|      0|        return {};
  102|      0|    }
  103|       |
  104|   429k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (104:9): [True: 0, False: 429k]
  ------------------
  105|      0|        return scan_error{scan_error::end_of_range, "EOF"};
  106|      0|    }
  107|       |
  108|   429k|    return scan_error{code, msg};
  109|   429k|}
_ZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  113|   515k|{
  114|   515k|    return [code, msg](parse_error err) {
  115|   515k|        return make_scan_error_from_parse_error(err, code, msg);
  116|   515k|    };
  117|   515k|}

_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  586|  1.55M|{
  587|  1.55M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  588|  1.55M|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  594|   151k|{
  595|   151k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  596|   151k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   151k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 19.7k, False: 131k]
  |  |  ------------------
  ------------------
  597|  19.7k|        source.sync(*n);
  598|  19.7k|    }
  599|   131k|    else {
  600|   131k|        source.sync_all();
  601|   131k|    }
  602|   151k|    return n;
  603|   151k|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  610|  1.44M|{
  611|  1.44M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  612|  1.44M|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  618|   251k|{
  619|   251k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  620|   251k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   251k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 19.3k, False: 232k]
  |  |  ------------------
  ------------------
  621|  19.3k|        source.sync(*n);
  622|  19.3k|    }
  623|   232k|    else {
  624|   232k|        source.sync_all();
  625|   232k|    }
  626|   251k|    return n;
  627|   251k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  543|  1.55M|{
  544|  1.55M|    return vscan_internal(source, format, args);
  545|  1.55M|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  549|   151k|{
  550|   151k|    auto n = vscan_internal(source, format, args);
  551|   151k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   151k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 19.7k, False: 131k]
  |  |  ------------------
  ------------------
  552|  19.7k|        source.sync(*n);
  553|  19.7k|    }
  554|   131k|    else {
  555|   131k|        source.sync_all();
  556|   131k|    }
  557|   151k|    return n;
  558|   151k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  563|  1.44M|{
  564|  1.44M|    return vscan_internal(source, format, args);
  565|  1.44M|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  569|   251k|{
  570|   251k|    auto n = vscan_internal(source, format, args);
  571|   251k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   251k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 19.3k, False: 232k]
  |  |  ------------------
  ------------------
  572|  19.3k|        source.sync(*n);
  573|  19.3k|    }
  574|   232k|    else {
  575|   232k|        source.sync_all();
  576|   232k|    }
  577|   251k|    return n;
  578|   251k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  653|   314k|{
  654|   314k|    return vscan_value_internal(source, arg);
  655|   314k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  658|  13.1k|{
  659|  13.1k|    auto n = vscan_value_internal(source, arg);
  660|  13.1k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  13.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 13.1k]
  |  |  ------------------
  ------------------
  661|      0|        source.sync(*n);
  662|      0|    }
  663|  13.1k|    else {
  664|  13.1k|        source.sync_all();
  665|  13.1k|    }
  666|  13.1k|    return n;
  667|  13.1k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  672|   282k|{
  673|   282k|    return vscan_value_internal(source, arg);
  674|   282k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  678|  23.2k|{
  679|  23.2k|    auto n = vscan_value_internal(source, arg);
  680|  23.2k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  23.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 23.2k]
  |  |  ------------------
  ------------------
  681|      0|        source.sync(*n);
  682|      0|    }
  683|  23.2k|    else {
  684|  23.2k|        source.sync_all();
  685|  23.2k|    }
  686|  23.2k|    return n;
  687|  23.2k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|   303k|{
  476|   303k|    const auto argcount = args.size();
  477|   303k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 26.3k, False: 277k]
  |  Branch (477:60): [True: 26.3k, False: 0]
  ------------------
  478|  26.3k|        auto arg = args.get(0);
  479|  26.3k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  26.3k|    static_cast<    \
  |  |  247|  26.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  26.3k|    }
  481|       |
  482|   277k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 277k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|   277k|    SCN_UNLIKELY_ATTR
  490|   277k|    {
  491|   277k|        auto handler = format_handler<false, CharT>{
  492|   277k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   277k|    static_cast<    \
  |  |  247|   277k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   277k|    static_cast<    \
  |  |  247|   277k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|   277k|        return vscan_parse_format_string(format, handler);
  494|   277k|    }
  495|   277k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  3.40M|{
   36|  3.40M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 2.75M, False: 655k]
  ------------------
   37|  2.75M|        return false;
   38|  2.75M|    }
   39|   655k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 655k, False: 0]
  |  Branch (39:39): [True: 655k, False: 0]
  ------------------
   40|  3.40M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|  39.5k|{
   69|  39.5k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  39.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 39.5k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|  39.5k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  152|  39.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 39.5k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|  39.5k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|  39.5k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  246|  39.5k|    static_cast<    \
  |  |  247|  39.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|  39.5k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  39.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  39.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  39.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  39.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 39.5k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  39.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  39.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  39.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  39.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  39.5k|    }                                                  \
  |  |  |  |   70|  39.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|      0|    return it.position();
   86|  39.5k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIcNSF_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
  313|  2.47M|    {
  314|  2.47M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_baseC2Em:
  132|  5.53M|    {
  133|  5.53M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  153|  5.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.53M]
  |  |  ------------------
  ------------------
  134|      0|            visited_args_upper.resize((args_count - 64) / 8);
  135|      0|        }
  136|  5.53M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcEC2EN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
  263|  2.47M|    {
  264|  2.47M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  2.47M|{
  441|  2.47M|    const auto beg = handler.get_ctx().begin();
  442|  2.47M|    detail::parse_format_string<false>(format, handler);
  443|  2.47M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  2.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 237k, False: 2.23M]
  |  |  ------------------
  ------------------
  444|   237k|        return unexpected(handler.error);
  445|   237k|    }
  446|  2.23M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  2.47M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
  424|  16.6M|    {
  425|  16.6M|        return ctx.get();
  426|  16.6M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
  267|  16.6M|    {
  268|  16.6M|        return contiguous_ctx;
  269|  16.6M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
  317|  4.71M|    {
  318|  4.71M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 4.71M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  4.71M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
   91|  2.47M|{
   92|  2.47M|    auto arg = ctx.arg(id);
   93|  2.47M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  2.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.47M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  2.47M|    return arg;
   97|  2.47M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
  207|  5.53M|    {
  208|  5.53M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|  5.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.53M]
  |  |  ------------------
  ------------------
  209|      0|            on_error("Invalid out-of-range argument ID");
  210|      0|            return;
  211|      0|        }
  212|       |
  213|  5.53M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  153|  5.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.53M]
  |  |  ------------------
  ------------------
  214|      0|            return on_error("Argument with this ID has already been scanned");
  215|      0|        }
  216|       |
  217|  5.53M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|  5.53M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 5.53M, False: 0]
  |  |  ------------------
  ------------------
  218|  5.53M|            visited_args_lower64 |= (1ull << id);
  219|  5.53M|            return;
  220|  5.53M|        }
  221|       |
  222|      0|        id -= 64;
  223|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
  224|      0|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
  192|  5.53M|    {
  193|  5.53M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|  5.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.53M]
  |  |  ------------------
  ------------------
  194|      0|            on_error("Invalid out-of-range argument ID");
  195|      0|            return false;
  196|      0|        }
  197|       |
  198|  5.53M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|  5.53M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 5.53M, False: 0]
  |  |  ------------------
  ------------------
  199|  5.53M|            return (visited_args_lower64 >> id) & 1ull;
  200|  5.53M|        }
  201|       |
  202|      0|        id -= 64;
  203|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
  204|  5.53M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
  176|   874k|    {
  177|   874k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  153|   874k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 874k, False: 0]
  |  |  ------------------
  ------------------
  178|   874k|            error = err;
  179|   874k|        }
  180|   874k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
  346|  2.47M|    {
  347|  2.47M|        return parse_ctx.next_arg_id();
  348|  2.47M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
  387|  2.47M|    {
  388|  2.47M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  2.47M|        set_arg_as_visited(arg_id);
  390|       |
  391|  2.47M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 2.47M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  2.47M|        auto specs = detail::format_specs{};
  401|  2.47M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  2.47M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  2.47M|            arg.type()};
  404|       |
  405|  2.47M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  2.47M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 2.47M]
  |  Branch (406:29): [True: 52.7k, False: 2.42M]
  ------------------
  407|  52.7k|            SCN_UNLIKELY_ATTR
  408|  52.7k|            on_error("Missing '}' in format string");
  409|  52.7k|            return parse_ctx.begin();
  410|  52.7k|        }
  411|  2.42M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  2.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 26.3k, False: 2.39M]
  |  |  ------------------
  ------------------
  412|  26.3k|            return parse_ctx.begin();
  413|  26.3k|        }
  414|  2.39M|        parse_ctx.advance_to(begin);
  415|       |
  416|  2.39M|        on_visit_scan_arg(
  417|  2.39M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  2.39M|                                           get_ctx().locale()},
  419|  2.39M|            arg);
  420|  2.39M|        return parse_ctx.begin();
  421|  2.42M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
  111|  2.47M|    {
  112|  2.47M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  358|  2.39M|    {
  359|  2.39M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 2.39M]
  |  Branch (359:23): [True: 0, False: 2.39M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  2.39M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  2.39M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  2.39M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  2.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 158k, False: 2.23M]
  |  |  ------------------
  ------------------
  366|   158k|            on_error(r.error());
  367|   158k|        }
  368|  2.23M|        else {
  369|  2.23M|            get_ctx().advance_to(*r);
  370|  2.23M|        }
  371|  2.39M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorEPKc:
  171|   728k|    {
  172|   728k|        SCN_UNLIKELY_ATTR
  173|   728k|        error = scan_error{scan_error::invalid_format_string, msg};
  174|   728k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
  139|  5.53M|    {
  140|  5.53M|        {
  141|  5.53M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (141:45): [True: 0, False: 5.53M]
  ------------------
  142|  5.53M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (142:35): [True: 0, False: 5.53M]
  ------------------
  143|  5.53M|                                      ? std::numeric_limits<uint64_t>::max()
  144|  5.53M|                                      : (1ull << args_count_lower64) - 1;
  145|       |
  146|  5.53M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (146:17): [True: 0, False: 5.53M]
  ------------------
  147|      0|                return on_error("Argument list not exhausted");
  148|      0|            }
  149|  5.53M|        }
  150|       |
  151|  5.53M|        if (args_count < 64) {
  ------------------
  |  Branch (151:13): [True: 5.53M, False: 0]
  ------------------
  152|  5.53M|            return;
  153|  5.53M|        }
  154|       |
  155|      0|        auto last_args_count = args_count - 64;
  156|      0|        for (auto it = visited_args_upper.begin();
  157|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (157:14): [True: 0, False: 0]
  ------------------
  158|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (158:17): [True: 0, False: 0]
  ------------------
  159|      0|                return on_error("Argument list not exhausted");
  160|      0|            }
  161|      0|            last_args_count -= 8;
  162|      0|        }
  163|       |
  164|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
  165|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (165:13): [True: 0, False: 0]
  ------------------
  166|      0|            return on_error("Argument list not exhausted");
  167|      0|        }
  168|      0|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_base9get_errorEv:
  187|  5.53M|    {
  188|  5.53M|        return error;
  189|  5.53M|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_basecvbEv:
  183|  16.1M|    {
  184|  16.1M|        return static_cast<bool>(error);
  185|  16.1M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
  313|   277k|    {
  314|   277k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
  240|   277k|    {
  241|   277k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   277k|{
  441|   277k|    const auto beg = handler.get_ctx().begin();
  442|   277k|    detail::parse_format_string<false>(format, handler);
  443|   277k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 237k, False: 39.5k]
  |  |  ------------------
  ------------------
  444|   237k|        return unexpected(handler.error);
  445|   237k|    }
  446|  39.5k|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   277k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
  424|  1.30M|    {
  425|  1.30M|        return ctx.get();
  426|  1.30M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcE3getEv:
  244|  1.30M|    {
  245|  1.30M|        return ctx;
  246|  1.30M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
  317|   316k|    {
  318|   316k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 316k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|   316k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
   91|   277k|{
   92|   277k|    auto arg = ctx.arg(id);
   93|   277k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 277k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   277k|    return arg;
   97|   277k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
  346|   277k|    {
  347|   277k|        return parse_ctx.next_arg_id();
  348|   277k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
  387|   277k|    {
  388|   277k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   277k|        set_arg_as_visited(arg_id);
  390|       |
  391|   277k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 277k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   277k|        auto specs = detail::format_specs{};
  401|   277k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   277k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   277k|            arg.type()};
  404|       |
  405|   277k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   277k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 277k]
  |  Branch (406:29): [True: 52.7k, False: 224k]
  ------------------
  407|  52.7k|            SCN_UNLIKELY_ATTR
  408|  52.7k|            on_error("Missing '}' in format string");
  409|  52.7k|            return parse_ctx.begin();
  410|  52.7k|        }
  411|   224k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   224k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 26.3k, False: 197k]
  |  |  ------------------
  ------------------
  412|  26.3k|            return parse_ctx.begin();
  413|  26.3k|        }
  414|   197k|        parse_ctx.advance_to(begin);
  415|       |
  416|   197k|        on_visit_scan_arg(
  417|   197k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   197k|                                           get_ctx().locale()},
  419|   197k|            arg);
  420|   197k|        return parse_ctx.begin();
  421|   224k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
  111|   277k|    {
  112|   277k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|   197k|    {
  359|   197k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 197k]
  |  Branch (359:23): [True: 0, False: 197k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   197k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|   197k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   197k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   197k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 158k, False: 39.5k]
  |  |  ------------------
  ------------------
  366|   158k|            on_error(r.error());
  367|   158k|        }
  368|  39.5k|        else {
  369|  39.5k|            get_ctx().advance_to(*r);
  370|  39.5k|        }
  371|   197k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  3.10M|{
  456|  3.10M|    const auto argcount = args.size();
  457|  3.10M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 628k, False: 2.47M]
  |  Branch (457:60): [True: 628k, False: 0]
  ------------------
  458|   628k|        auto arg = args.get(0);
  459|   628k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|   628k|    static_cast<    \
  |  |  247|   628k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|   628k|    }
  461|       |
  462|  2.47M|    auto handler = format_handler<true, CharT>{
  463|  2.47M|        ranges::subrange<const CharT*>{source.data(),
  464|  2.47M|                                       source.data() + source.size()},
  465|  2.47M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  2.47M|    static_cast<    \
  |  |  247|  2.47M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  2.47M|    static_cast<    \
  |  |  247|  2.47M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  2.47M|    return vscan_parse_format_string(format, handler);
  467|  3.10M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|   943k|{
   49|   943k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   943k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 943k]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|   943k|    auto reader =
   55|   943k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|   943k|            ranges::subrange<const CharT*>{source.data(),
   57|   943k|                                           source.data() + source.size()},
   58|   943k|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|   943k|    static_cast<    \
  |  |  247|   943k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   943k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|   943k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   943k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   943k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   943k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 39.5k, False: 903k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  39.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  39.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  39.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  39.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  39.5k|    }                                                  \
  |  |  |  |   70|   943k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   903k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|   903k|    return ranges::distance(source.data(), it);
   61|   943k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  2.89M|{
  456|  2.89M|    const auto argcount = args.size();
  457|  2.89M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 565k, False: 2.32M]
  |  Branch (457:60): [True: 565k, False: 0]
  ------------------
  458|   565k|        auto arg = args.get(0);
  459|   565k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|   565k|    static_cast<    \
  |  |  247|   565k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|   565k|    }
  461|       |
  462|  2.32M|    auto handler = format_handler<true, CharT>{
  463|  2.32M|        ranges::subrange<const CharT*>{source.data(),
  464|  2.32M|                                       source.data() + source.size()},
  465|  2.32M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  2.32M|    static_cast<    \
  |  |  247|  2.32M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  2.32M|    static_cast<    \
  |  |  247|  2.32M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  2.32M|    return vscan_parse_format_string(format, handler);
  467|  2.89M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  3.39M|{
   36|  3.39M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 2.78M, False: 612k]
  ------------------
   37|  2.78M|        return false;
   38|  2.78M|    }
   39|   612k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 612k, False: 0]
  |  Branch (39:39): [True: 612k, False: 0]
  ------------------
   40|  3.39M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|   848k|{
   49|   848k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   848k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 848k]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|   848k|    auto reader =
   55|   848k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|   848k|            ranges::subrange<const CharT*>{source.data(),
   57|   848k|                                           source.data() + source.size()},
   58|   848k|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|   848k|    static_cast<    \
  |  |  247|   848k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   848k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|   848k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   848k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   848k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   848k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 69.6k, False: 779k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  69.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  69.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  69.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  69.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  69.6k|    }                                                  \
  |  |  |  |   70|   848k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   779k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|   779k|    return ranges::distance(source.data(), it);
   61|   848k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIwNSF_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
  313|  2.32M|    {
  314|  2.32M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwEC2EN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
  263|  2.32M|    {
  264|  2.32M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  2.32M|{
  441|  2.32M|    const auto beg = handler.get_ctx().begin();
  442|  2.32M|    detail::parse_format_string<false>(format, handler);
  443|  2.32M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  2.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 418k, False: 1.90M]
  |  |  ------------------
  ------------------
  444|   418k|        return unexpected(handler.error);
  445|   418k|    }
  446|  1.90M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  2.32M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
  424|  15.1M|    {
  425|  15.1M|        return ctx.get();
  426|  15.1M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
  267|  15.1M|    {
  268|  15.1M|        return contiguous_ctx;
  269|  15.1M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
  317|  4.23M|    {
  318|  4.23M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 4.23M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  4.23M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
   91|  2.32M|{
   92|  2.32M|    auto arg = ctx.arg(id);
   93|  2.32M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  2.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.32M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  2.32M|    return arg;
   97|  2.32M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
  346|  2.32M|    {
  347|  2.32M|        return parse_ctx.next_arg_id();
  348|  2.32M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
  387|  2.32M|    {
  388|  2.32M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  2.32M|        set_arg_as_visited(arg_id);
  390|       |
  391|  2.32M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 2.32M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  2.32M|        auto specs = detail::format_specs{};
  401|  2.32M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  2.32M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  2.32M|            arg.type()};
  404|       |
  405|  2.32M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  2.32M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 2.32M]
  |  Branch (406:29): [True: 92.9k, False: 2.23M]
  ------------------
  407|  92.9k|            SCN_UNLIKELY_ATTR
  408|  92.9k|            on_error("Missing '}' in format string");
  409|  92.9k|            return parse_ctx.begin();
  410|  92.9k|        }
  411|  2.23M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  2.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 46.4k, False: 2.18M]
  |  |  ------------------
  ------------------
  412|  46.4k|            return parse_ctx.begin();
  413|  46.4k|        }
  414|  2.18M|        parse_ctx.advance_to(begin);
  415|       |
  416|  2.18M|        on_visit_scan_arg(
  417|  2.18M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  2.18M|                                           get_ctx().locale()},
  419|  2.18M|            arg);
  420|  2.18M|        return parse_ctx.begin();
  421|  2.23M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
  111|  2.32M|    {
  112|  2.32M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  358|  2.18M|    {
  359|  2.18M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 2.18M]
  |  Branch (359:23): [True: 0, False: 2.18M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  2.18M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  2.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  2.18M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  2.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 278k, False: 1.90M]
  |  |  ------------------
  ------------------
  366|   278k|            on_error(r.error());
  367|   278k|        }
  368|  1.90M|        else {
  369|  1.90M|            get_ctx().advance_to(*r);
  370|  1.90M|        }
  371|  2.18M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|   503k|{
  476|   503k|    const auto argcount = args.size();
  477|   503k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 46.4k, False: 456k]
  |  Branch (477:60): [True: 46.4k, False: 0]
  ------------------
  478|  46.4k|        auto arg = args.get(0);
  479|  46.4k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  46.4k|    static_cast<    \
  |  |  247|  46.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  46.4k|    }
  481|       |
  482|   456k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 456k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|   456k|    SCN_UNLIKELY_ATTR
  490|   456k|    {
  491|   456k|        auto handler = format_handler<false, CharT>{
  492|   456k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   456k|    static_cast<    \
  |  |  247|   456k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   456k|    static_cast<    \
  |  |  247|   456k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|   456k|        return vscan_parse_format_string(format, handler);
  494|   456k|    }
  495|   456k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|  69.6k|{
   69|  69.6k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  69.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 69.6k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|  69.6k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  152|  69.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 69.6k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|  69.6k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|  69.6k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  246|  69.6k|    static_cast<    \
  |  |  247|  69.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|  69.6k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  69.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  69.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  69.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  69.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 69.6k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  69.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  69.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  69.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  69.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  69.6k|    }                                                  \
  |  |  |  |   70|  69.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|      0|    return it.position();
   86|  69.6k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
  313|   456k|    {
  314|   456k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
  240|   456k|    {
  241|   456k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   456k|{
  441|   456k|    const auto beg = handler.get_ctx().begin();
  442|   456k|    detail::parse_format_string<false>(format, handler);
  443|   456k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   456k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 418k, False: 38.7k]
  |  |  ------------------
  ------------------
  444|   418k|        return unexpected(handler.error);
  445|   418k|    }
  446|  38.7k|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   456k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
  424|  2.08M|    {
  425|  2.08M|        return ctx.get();
  426|  2.08M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwE3getEv:
  244|  2.08M|    {
  245|  2.08M|        return ctx;
  246|  2.08M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
  317|   495k|    {
  318|   495k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 495k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|   495k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
   91|   456k|{
   92|   456k|    auto arg = ctx.arg(id);
   93|   456k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   456k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 456k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   456k|    return arg;
   97|   456k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
  346|   456k|    {
  347|   456k|        return parse_ctx.next_arg_id();
  348|   456k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
  387|   456k|    {
  388|   456k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   456k|        set_arg_as_visited(arg_id);
  390|       |
  391|   456k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 456k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   456k|        auto specs = detail::format_specs{};
  401|   456k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   456k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   456k|            arg.type()};
  404|       |
  405|   456k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   456k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 456k]
  |  Branch (406:29): [True: 92.9k, False: 363k]
  ------------------
  407|  92.9k|            SCN_UNLIKELY_ATTR
  408|  92.9k|            on_error("Missing '}' in format string");
  409|  92.9k|            return parse_ctx.begin();
  410|  92.9k|        }
  411|   363k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   363k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 46.4k, False: 317k]
  |  |  ------------------
  ------------------
  412|  46.4k|            return parse_ctx.begin();
  413|  46.4k|        }
  414|   317k|        parse_ctx.advance_to(begin);
  415|       |
  416|   317k|        on_visit_scan_arg(
  417|   317k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   317k|                                           get_ctx().locale()},
  419|   317k|            arg);
  420|   317k|        return parse_ctx.begin();
  421|   363k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
  111|   456k|    {
  112|   456k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|   317k|    {
  359|   317k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 317k]
  |  Branch (359:23): [True: 0, False: 317k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   317k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|   317k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   317k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   317k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 278k, False: 38.7k]
  |  |  ------------------
  ------------------
  366|   278k|            on_error(r.error());
  367|   278k|        }
  368|  38.7k|        else {
  369|  38.7k|            get_ctx().advance_to(*r);
  370|  38.7k|        }
  371|   317k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   314k|{
  502|   314k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   314k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  13.1k|{
  502|  13.1k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  13.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  13.1k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   282k|{
  502|   282k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|   282k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   282k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  23.2k|{
  502|  23.2k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  23.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  23.2k|}

_ZN3scn4fuzz16make_input_viewsENS_2v24spanIKhEE:
   51|  2.19k|{
   52|  2.19k|    SCN_EXPECT(data.size() <= max_input_bytes);
  ------------------
  |  |  242|  2.19k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.19k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|      0|    string_buffer.resize(data.size());
   56|  2.19k|    std::copy(data.begin(), data.end(),
   57|  2.19k|              reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|  2.19k|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|  2.19k|    const auto wsv_reinterpret_size =
   62|  2.19k|        data.size() < sizeof(wchar_t) ? 1 : (data.size() / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 128, False: 2.07k]
  ------------------
   63|  2.19k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|  2.19k|    std::memcpy(wstring_buffer_reinterpreted.data(), data.data(), data.size());
   65|  2.19k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|  2.19k|    std::wstring_view wsv_transcoded;
   69|  2.19k|    if (simdutf::validate_utf8(sv.data(), sv.size())) {
  ------------------
  |  Branch (69:9): [True: 1.67k, False: 527]
  ------------------
   70|  1.67k|        if constexpr (sizeof(wchar_t) == 2) {
  ------------------
  |  Branch (70:23): [Folded - Ignored]
  ------------------
   71|      0|            auto size = simdutf::utf16_length_from_utf8(sv.data(), sv.size());
   72|      0|            wstring_buffer_transcoded_wide.resize(size);
   73|      0|            (void)simdutf::convert_valid_utf8_to_utf16(
   74|      0|                sv.data(), sv.size(),
   75|      0|                reinterpret_cast<char16_t*>(
   76|      0|                    wstring_buffer_transcoded_wide.data()));
   77|      0|        }
   78|  1.67k|        else {
   79|  1.67k|            auto size = simdutf::utf32_length_from_utf8(sv.data(), sv.size());
   80|  1.67k|            wstring_buffer_transcoded_wide.resize(size);
   81|  1.67k|            (void)simdutf::convert_valid_utf8_to_utf32(
   82|  1.67k|                sv.data(), sv.size(),
   83|  1.67k|                reinterpret_cast<char32_t*>(
   84|  1.67k|                    wstring_buffer_transcoded_wide.data()));
   85|  1.67k|        }
   86|  1.67k|        wsv_transcoded = {wstring_buffer_transcoded_wide};
   87|  1.67k|    }
   88|       |
   89|  2.19k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   90|  2.19k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  139|  2.19k|{
  140|  2.19k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  141|  2.19k|    auto& buf = get_format_string_view_buffer<CharT>();
  142|  2.19k|    buf.resize(sizeof...(Args));
  143|  2.19k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  144|  2.19k|    return {buf.data(), buf.size()};
  145|  2.19k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  125|  2.19k|{
  126|  2.19k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|  2.19k|        return format_string_view_buffer;
  128|  2.19k|    }
  129|  2.19k|    else {
  130|  2.19k|        return wformat_string_view_buffer;
  131|  2.19k|    }
  132|  2.19k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  199|  2.19k|{
  200|  2.19k|    do_basic_run_for_source<CharT>(data, format_strings);
  201|  2.19k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  202|  2.19k|                                   format_strings);
  203|  2.19k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.19k|{
  151|       |    // Regular scan
  152|  21.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 21.9k, False: 2.19k]
  ------------------
  153|  21.9k|        auto it = scn::ranges::begin(source);
  154|   242k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   242k|            auto result = scn::scan<T>(
  156|   242k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   242k|                scn::runtime_format(f));
  158|   242k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.9k, False: 220k]
  ------------------
  159|  21.9k|                break;
  160|  21.9k|            }
  161|   220k|            it = result->begin();
  162|   220k|        }
  163|  21.9k|    }
  164|       |
  165|       |    // scan localized
  166|  21.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 21.9k, False: 2.19k]
  ------------------
  167|  21.9k|        auto it = scn::ranges::begin(source);
  168|   242k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   242k|            auto result = scn::scan<T>(
  170|   242k|                global_locale,
  171|   242k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   242k|                scn::runtime_format(f));
  173|   242k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 21.9k, False: 220k]
  ------------------
  174|  21.9k|                break;
  175|  21.9k|            }
  176|   220k|            it = result->begin();
  177|   220k|        }
  178|  21.9k|    }
  179|       |
  180|       |    // scan_value
  181|  2.19k|    {
  182|  2.19k|        auto it = scn::ranges::begin(source);
  183|  51.6k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  51.6k|            auto result = scn::scan_value<T>(
  185|  51.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  51.6k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.19k, False: 49.4k]
  ------------------
  187|  2.19k|                break;
  188|  2.19k|            }
  189|  49.4k|            it = result->begin();
  190|  49.4k|        }
  191|  2.19k|    }
  192|  2.19k|}
_ZN3scn4fuzz21do_basic_run_for_typeIchNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.19k|{
  151|       |    // Regular scan
  152|  21.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 21.9k, False: 2.19k]
  ------------------
  153|  21.9k|        auto it = scn::ranges::begin(source);
  154|   214k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   214k|            auto result = scn::scan<T>(
  156|   214k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   214k|                scn::runtime_format(f));
  158|   214k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.9k, False: 192k]
  ------------------
  159|  21.9k|                break;
  160|  21.9k|            }
  161|   192k|            it = result->begin();
  162|   192k|        }
  163|  21.9k|    }
  164|       |
  165|       |    // scan localized
  166|  21.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 21.9k, False: 2.19k]
  ------------------
  167|  21.9k|        auto it = scn::ranges::begin(source);
  168|   214k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   214k|            auto result = scn::scan<T>(
  170|   214k|                global_locale,
  171|   214k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   214k|                scn::runtime_format(f));
  173|   214k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 21.9k, False: 192k]
  ------------------
  174|  21.9k|                break;
  175|  21.9k|            }
  176|   192k|            it = result->begin();
  177|   192k|        }
  178|  21.9k|    }
  179|       |
  180|       |    // scan_value
  181|  2.19k|    {
  182|  2.19k|        auto it = scn::ranges::begin(source);
  183|  44.3k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  44.3k|            auto result = scn::scan_value<T>(
  185|  44.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  44.3k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.19k, False: 42.1k]
  ------------------
  187|  2.19k|                break;
  188|  2.19k|            }
  189|  42.1k|            it = result->begin();
  190|  42.1k|        }
  191|  2.19k|    }
  192|  2.19k|}
_ZN3scn4fuzz21do_basic_run_for_typeIciNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.19k|{
  151|       |    // Regular scan
  152|  21.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 21.9k, False: 2.19k]
  ------------------
  153|  21.9k|        auto it = scn::ranges::begin(source);
  154|   300k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   300k|            auto result = scn::scan<T>(
  156|   300k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   300k|                scn::runtime_format(f));
  158|   300k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.9k, False: 278k]
  ------------------
  159|  21.9k|                break;
  160|  21.9k|            }
  161|   278k|            it = result->begin();
  162|   278k|        }
  163|  21.9k|    }
  164|       |
  165|       |    // scan localized
  166|  21.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 21.9k, False: 2.19k]
  ------------------
  167|  21.9k|        auto it = scn::ranges::begin(source);
  168|   300k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   300k|            auto result = scn::scan<T>(
  170|   300k|                global_locale,
  171|   300k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   300k|                scn::runtime_format(f));
  173|   300k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 21.9k, False: 278k]
  ------------------
  174|  21.9k|                break;
  175|  21.9k|            }
  176|   278k|            it = result->begin();
  177|   278k|        }
  178|  21.9k|    }
  179|       |
  180|       |    // scan_value
  181|  2.19k|    {
  182|  2.19k|        auto it = scn::ranges::begin(source);
  183|  59.6k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  59.6k|            auto result = scn::scan_value<T>(
  185|  59.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  59.6k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.19k, False: 57.4k]
  ------------------
  187|  2.19k|                break;
  188|  2.19k|            }
  189|  57.4k|            it = result->begin();
  190|  57.4k|        }
  191|  2.19k|    }
  192|  2.19k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.19k|{
  151|       |    // Regular scan
  152|  21.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 21.9k, False: 2.19k]
  ------------------
  153|  21.9k|        auto it = scn::ranges::begin(source);
  154|   242k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   242k|            auto result = scn::scan<T>(
  156|   242k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   242k|                scn::runtime_format(f));
  158|   242k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.9k, False: 220k]
  ------------------
  159|  21.9k|                break;
  160|  21.9k|            }
  161|   220k|            it = result->begin();
  162|   220k|        }
  163|  21.9k|    }
  164|       |
  165|       |    // scan localized
  166|  21.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 21.9k, False: 2.19k]
  ------------------
  167|  21.9k|        auto it = scn::ranges::begin(source);
  168|   242k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   242k|            auto result = scn::scan<T>(
  170|   242k|                global_locale,
  171|   242k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   242k|                scn::runtime_format(f));
  173|   242k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 21.9k, False: 220k]
  ------------------
  174|  21.9k|                break;
  175|  21.9k|            }
  176|   220k|            it = result->begin();
  177|   220k|        }
  178|  21.9k|    }
  179|       |
  180|       |    // scan_value
  181|  2.19k|    {
  182|  2.19k|        auto it = scn::ranges::begin(source);
  183|  48.8k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  48.8k|            auto result = scn::scan_value<T>(
  185|  48.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  48.8k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.19k, False: 46.6k]
  ------------------
  187|  2.19k|                break;
  188|  2.19k|            }
  189|  46.6k|            it = result->begin();
  190|  46.6k|        }
  191|  2.19k|    }
  192|  2.19k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.19k|{
  151|       |    // Regular scan
  152|  21.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 21.9k, False: 2.19k]
  ------------------
  153|  21.9k|        auto it = scn::ranges::begin(source);
  154|   306k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   306k|            auto result = scn::scan<T>(
  156|   306k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   306k|                scn::runtime_format(f));
  158|   306k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.9k, False: 284k]
  ------------------
  159|  21.9k|                break;
  160|  21.9k|            }
  161|   284k|            it = result->begin();
  162|   284k|        }
  163|  21.9k|    }
  164|       |
  165|       |    // scan localized
  166|  21.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 21.9k, False: 2.19k]
  ------------------
  167|  21.9k|        auto it = scn::ranges::begin(source);
  168|   306k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   306k|            auto result = scn::scan<T>(
  170|   306k|                global_locale,
  171|   306k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   306k|                scn::runtime_format(f));
  173|   306k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 21.9k, False: 284k]
  ------------------
  174|  21.9k|                break;
  175|  21.9k|            }
  176|   284k|            it = result->begin();
  177|   284k|        }
  178|  21.9k|    }
  179|       |
  180|       |    // scan_value
  181|  2.19k|    {
  182|  2.19k|        auto it = scn::ranges::begin(source);
  183|  60.6k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  60.6k|            auto result = scn::scan_value<T>(
  185|  60.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  60.6k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.19k, False: 58.4k]
  ------------------
  187|  2.19k|                break;
  188|  2.19k|            }
  189|  58.4k|            it = result->begin();
  190|  58.4k|        }
  191|  2.19k|    }
  192|  2.19k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.19k|{
  151|       |    // Regular scan
  152|  21.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 21.9k, False: 2.19k]
  ------------------
  153|  21.9k|        auto it = scn::ranges::begin(source);
  154|   245k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   245k|            auto result = scn::scan<T>(
  156|   245k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   245k|                scn::runtime_format(f));
  158|   245k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.9k, False: 223k]
  ------------------
  159|  21.9k|                break;
  160|  21.9k|            }
  161|   223k|            it = result->begin();
  162|   223k|        }
  163|  21.9k|    }
  164|       |
  165|       |    // scan localized
  166|  21.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 21.9k, False: 2.19k]
  ------------------
  167|  21.9k|        auto it = scn::ranges::begin(source);
  168|   245k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   245k|            auto result = scn::scan<T>(
  170|   245k|                global_locale,
  171|   245k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   245k|                scn::runtime_format(f));
  173|   245k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 21.9k, False: 223k]
  ------------------
  174|  21.9k|                break;
  175|  21.9k|            }
  176|   223k|            it = result->begin();
  177|   223k|        }
  178|  21.9k|    }
  179|       |
  180|       |    // scan_value
  181|  2.19k|    {
  182|  2.19k|        auto it = scn::ranges::begin(source);
  183|  49.2k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  49.2k|            auto result = scn::scan_value<T>(
  185|  49.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  49.2k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.19k, False: 47.0k]
  ------------------
  187|  2.19k|                break;
  188|  2.19k|            }
  189|  47.0k|            it = result->begin();
  190|  47.0k|        }
  191|  2.19k|    }
  192|  2.19k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.19k|{
  151|       |    // Regular scan
  152|  21.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 21.9k, False: 2.19k]
  ------------------
  153|  21.9k|        auto it = scn::ranges::begin(source);
  154|  26.3k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  26.3k|            auto result = scn::scan<T>(
  156|  26.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  26.3k|                scn::runtime_format(f));
  158|  26.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.9k, False: 4.39k]
  ------------------
  159|  21.9k|                break;
  160|  21.9k|            }
  161|  4.39k|            it = result->begin();
  162|  4.39k|        }
  163|  21.9k|    }
  164|       |
  165|       |    // scan localized
  166|  21.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 21.9k, False: 2.19k]
  ------------------
  167|  21.9k|        auto it = scn::ranges::begin(source);
  168|  26.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  26.3k|            auto result = scn::scan<T>(
  170|  26.3k|                global_locale,
  171|  26.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  26.3k|                scn::runtime_format(f));
  173|  26.3k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 21.9k, False: 4.39k]
  ------------------
  174|  21.9k|                break;
  175|  21.9k|            }
  176|  4.39k|            it = result->begin();
  177|  4.39k|        }
  178|  21.9k|    }
  179|       |
  180|       |    // scan_value
  181|  2.19k|    {
  182|  2.19k|        auto it = scn::ranges::begin(source);
  183|  2.19k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  2.19k|            auto result = scn::scan_value<T>(
  185|  2.19k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  2.19k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.19k, False: 0]
  ------------------
  187|  2.19k|                break;
  188|  2.19k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  2.19k|    }
  192|  2.19k|}
_ZN3scn4fuzz21do_basic_run_for_typeIchKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.19k|{
  151|       |    // Regular scan
  152|  21.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 21.9k, False: 2.19k]
  ------------------
  153|  21.9k|        auto it = scn::ranges::begin(source);
  154|  24.1k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  24.1k|            auto result = scn::scan<T>(
  156|  24.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  24.1k|                scn::runtime_format(f));
  158|  24.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.9k, False: 2.19k]
  ------------------
  159|  21.9k|                break;
  160|  21.9k|            }
  161|  2.19k|            it = result->begin();
  162|  2.19k|        }
  163|  21.9k|    }
  164|       |
  165|       |    // scan localized
  166|  21.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 21.9k, False: 2.19k]
  ------------------
  167|  21.9k|        auto it = scn::ranges::begin(source);
  168|  24.1k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  24.1k|            auto result = scn::scan<T>(
  170|  24.1k|                global_locale,
  171|  24.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  24.1k|                scn::runtime_format(f));
  173|  24.1k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 21.9k, False: 2.19k]
  ------------------
  174|  21.9k|                break;
  175|  21.9k|            }
  176|  2.19k|            it = result->begin();
  177|  2.19k|        }
  178|  21.9k|    }
  179|       |
  180|       |    // scan_value
  181|  2.19k|    {
  182|  2.19k|        auto it = scn::ranges::begin(source);
  183|  2.19k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  2.19k|            auto result = scn::scan_value<T>(
  185|  2.19k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  2.19k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.19k, False: 0]
  ------------------
  187|  2.19k|                break;
  188|  2.19k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  2.19k|    }
  192|  2.19k|}
_ZN3scn4fuzz21do_basic_run_for_typeIciKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.19k|{
  151|       |    // Regular scan
  152|  21.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 21.9k, False: 2.19k]
  ------------------
  153|  21.9k|        auto it = scn::ranges::begin(source);
  154|  26.3k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  26.3k|            auto result = scn::scan<T>(
  156|  26.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  26.3k|                scn::runtime_format(f));
  158|  26.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.9k, False: 4.39k]
  ------------------
  159|  21.9k|                break;
  160|  21.9k|            }
  161|  4.39k|            it = result->begin();
  162|  4.39k|        }
  163|  21.9k|    }
  164|       |
  165|       |    // scan localized
  166|  21.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 21.9k, False: 2.19k]
  ------------------
  167|  21.9k|        auto it = scn::ranges::begin(source);
  168|  26.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  26.3k|            auto result = scn::scan<T>(
  170|  26.3k|                global_locale,
  171|  26.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  26.3k|                scn::runtime_format(f));
  173|  26.3k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 21.9k, False: 4.39k]
  ------------------
  174|  21.9k|                break;
  175|  21.9k|            }
  176|  4.39k|            it = result->begin();
  177|  4.39k|        }
  178|  21.9k|    }
  179|       |
  180|       |    // scan_value
  181|  2.19k|    {
  182|  2.19k|        auto it = scn::ranges::begin(source);
  183|  2.19k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  2.19k|            auto result = scn::scan_value<T>(
  185|  2.19k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  2.19k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.19k, False: 0]
  ------------------
  187|  2.19k|                break;
  188|  2.19k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  2.19k|    }
  192|  2.19k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.19k|{
  151|       |    // Regular scan
  152|  21.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 21.9k, False: 2.19k]
  ------------------
  153|  21.9k|        auto it = scn::ranges::begin(source);
  154|  24.1k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  24.1k|            auto result = scn::scan<T>(
  156|  24.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  24.1k|                scn::runtime_format(f));
  158|  24.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.9k, False: 2.19k]
  ------------------
  159|  21.9k|                break;
  160|  21.9k|            }
  161|  2.19k|            it = result->begin();
  162|  2.19k|        }
  163|  21.9k|    }
  164|       |
  165|       |    // scan localized
  166|  21.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 21.9k, False: 2.19k]
  ------------------
  167|  21.9k|        auto it = scn::ranges::begin(source);
  168|  24.1k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  24.1k|            auto result = scn::scan<T>(
  170|  24.1k|                global_locale,
  171|  24.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  24.1k|                scn::runtime_format(f));
  173|  24.1k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 21.9k, False: 2.19k]
  ------------------
  174|  21.9k|                break;
  175|  21.9k|            }
  176|  2.19k|            it = result->begin();
  177|  2.19k|        }
  178|  21.9k|    }
  179|       |
  180|       |    // scan_value
  181|  2.19k|    {
  182|  2.19k|        auto it = scn::ranges::begin(source);
  183|  2.19k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  2.19k|            auto result = scn::scan_value<T>(
  185|  2.19k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  2.19k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.19k, False: 0]
  ------------------
  187|  2.19k|                break;
  188|  2.19k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  2.19k|    }
  192|  2.19k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.19k|{
  151|       |    // Regular scan
  152|  21.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 21.9k, False: 2.19k]
  ------------------
  153|  21.9k|        auto it = scn::ranges::begin(source);
  154|  26.3k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  26.3k|            auto result = scn::scan<T>(
  156|  26.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  26.3k|                scn::runtime_format(f));
  158|  26.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.9k, False: 4.39k]
  ------------------
  159|  21.9k|                break;
  160|  21.9k|            }
  161|  4.39k|            it = result->begin();
  162|  4.39k|        }
  163|  21.9k|    }
  164|       |
  165|       |    // scan localized
  166|  21.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 21.9k, False: 2.19k]
  ------------------
  167|  21.9k|        auto it = scn::ranges::begin(source);
  168|  26.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  26.3k|            auto result = scn::scan<T>(
  170|  26.3k|                global_locale,
  171|  26.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  26.3k|                scn::runtime_format(f));
  173|  26.3k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 21.9k, False: 4.39k]
  ------------------
  174|  21.9k|                break;
  175|  21.9k|            }
  176|  4.39k|            it = result->begin();
  177|  4.39k|        }
  178|  21.9k|    }
  179|       |
  180|       |    // scan_value
  181|  2.19k|    {
  182|  2.19k|        auto it = scn::ranges::begin(source);
  183|  2.19k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  2.19k|            auto result = scn::scan_value<T>(
  185|  2.19k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  2.19k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.19k, False: 0]
  ------------------
  187|  2.19k|                break;
  188|  2.19k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  2.19k|    }
  192|  2.19k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.19k|{
  151|       |    // Regular scan
  152|  21.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 21.9k, False: 2.19k]
  ------------------
  153|  21.9k|        auto it = scn::ranges::begin(source);
  154|  24.1k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  24.1k|            auto result = scn::scan<T>(
  156|  24.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  24.1k|                scn::runtime_format(f));
  158|  24.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.9k, False: 2.19k]
  ------------------
  159|  21.9k|                break;
  160|  21.9k|            }
  161|  2.19k|            it = result->begin();
  162|  2.19k|        }
  163|  21.9k|    }
  164|       |
  165|       |    // scan localized
  166|  21.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 21.9k, False: 2.19k]
  ------------------
  167|  21.9k|        auto it = scn::ranges::begin(source);
  168|  24.1k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  24.1k|            auto result = scn::scan<T>(
  170|  24.1k|                global_locale,
  171|  24.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  24.1k|                scn::runtime_format(f));
  173|  24.1k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 21.9k, False: 2.19k]
  ------------------
  174|  21.9k|                break;
  175|  21.9k|            }
  176|  2.19k|            it = result->begin();
  177|  2.19k|        }
  178|  21.9k|    }
  179|       |
  180|       |    // scan_value
  181|  2.19k|    {
  182|  2.19k|        auto it = scn::ranges::begin(source);
  183|  2.19k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  2.19k|            auto result = scn::scan_value<T>(
  185|  2.19k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  2.19k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.19k, False: 0]
  ------------------
  187|  2.19k|                break;
  188|  2.19k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  2.19k|    }
  192|  2.19k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
  108|  2.19k|{
  109|  2.19k|    using char_type = ranges::range_value_t<Source>;
  110|  2.19k|    auto& deque = get_noncontiguous_buffer<char_type>();
  111|  2.19k|    std::copy(ranges::begin(source), ranges::end(source),
  112|  2.19k|              std::back_inserter(deque));
  113|  2.19k|    return deque;
  114|  2.19k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   97|  2.19k|{
   98|  2.19k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (98:19): [Folded - Ignored]
  ------------------
   99|  2.19k|        return noncontiguous_buffer;
  100|  2.19k|    }
  101|  2.19k|    else {
  102|  2.19k|        return wnoncontiguous_buffer;
  103|  2.19k|    }
  104|  2.19k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  139|  2.19k|{
  140|  2.19k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  141|  2.19k|    auto& buf = get_format_string_view_buffer<CharT>();
  142|  2.19k|    buf.resize(sizeof...(Args));
  143|  2.19k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  144|  2.19k|    return {buf.data(), buf.size()};
  145|  2.19k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  125|  2.19k|{
  126|  2.19k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|  2.19k|        return format_string_view_buffer;
  128|  2.19k|    }
  129|  2.19k|    else {
  130|  2.19k|        return wformat_string_view_buffer;
  131|  2.19k|    }
  132|  2.19k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  199|  3.87k|{
  200|  3.87k|    do_basic_run_for_source<CharT>(data, format_strings);
  201|  3.87k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  202|  3.87k|                                   format_strings);
  203|  3.87k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.87k|{
  151|       |    // Regular scan
  152|  38.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 38.7k, False: 3.87k]
  ------------------
  153|  38.7k|        auto it = scn::ranges::begin(source);
  154|   224k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   224k|            auto result = scn::scan<T>(
  156|   224k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   224k|                scn::runtime_format(f));
  158|   224k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 38.7k, False: 185k]
  ------------------
  159|  38.7k|                break;
  160|  38.7k|            }
  161|   185k|            it = result->begin();
  162|   185k|        }
  163|  38.7k|    }
  164|       |
  165|       |    // scan localized
  166|  38.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 38.7k, False: 3.87k]
  ------------------
  167|  38.7k|        auto it = scn::ranges::begin(source);
  168|   224k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   224k|            auto result = scn::scan<T>(
  170|   224k|                global_locale,
  171|   224k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   224k|                scn::runtime_format(f));
  173|   224k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 38.7k, False: 185k]
  ------------------
  174|  38.7k|                break;
  175|  38.7k|            }
  176|   185k|            it = result->begin();
  177|   185k|        }
  178|  38.7k|    }
  179|       |
  180|       |    // scan_value
  181|  3.87k|    {
  182|  3.87k|        auto it = scn::ranges::begin(source);
  183|  46.2k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  46.2k|            auto result = scn::scan_value<T>(
  185|  46.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  46.2k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.87k, False: 42.3k]
  ------------------
  187|  3.87k|                break;
  188|  3.87k|            }
  189|  42.3k|            it = result->begin();
  190|  42.3k|        }
  191|  3.87k|    }
  192|  3.87k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.87k|{
  151|       |    // Regular scan
  152|  38.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 38.7k, False: 3.87k]
  ------------------
  153|  38.7k|        auto it = scn::ranges::begin(source);
  154|   207k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   207k|            auto result = scn::scan<T>(
  156|   207k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   207k|                scn::runtime_format(f));
  158|   207k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 38.7k, False: 168k]
  ------------------
  159|  38.7k|                break;
  160|  38.7k|            }
  161|   168k|            it = result->begin();
  162|   168k|        }
  163|  38.7k|    }
  164|       |
  165|       |    // scan localized
  166|  38.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 38.7k, False: 3.87k]
  ------------------
  167|  38.7k|        auto it = scn::ranges::begin(source);
  168|   207k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   207k|            auto result = scn::scan<T>(
  170|   207k|                global_locale,
  171|   207k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   207k|                scn::runtime_format(f));
  173|   207k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 38.7k, False: 168k]
  ------------------
  174|  38.7k|                break;
  175|  38.7k|            }
  176|   168k|            it = result->begin();
  177|   168k|        }
  178|  38.7k|    }
  179|       |
  180|       |    // scan_value
  181|  3.87k|    {
  182|  3.87k|        auto it = scn::ranges::begin(source);
  183|  41.0k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  41.0k|            auto result = scn::scan_value<T>(
  185|  41.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  41.0k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.87k, False: 37.1k]
  ------------------
  187|  3.87k|                break;
  188|  3.87k|            }
  189|  37.1k|            it = result->begin();
  190|  37.1k|        }
  191|  3.87k|    }
  192|  3.87k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.87k|{
  151|       |    // Regular scan
  152|  38.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 38.7k, False: 3.87k]
  ------------------
  153|  38.7k|        auto it = scn::ranges::begin(source);
  154|   272k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   272k|            auto result = scn::scan<T>(
  156|   272k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   272k|                scn::runtime_format(f));
  158|   272k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 38.7k, False: 233k]
  ------------------
  159|  38.7k|                break;
  160|  38.7k|            }
  161|   233k|            it = result->begin();
  162|   233k|        }
  163|  38.7k|    }
  164|       |
  165|       |    // scan localized
  166|  38.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 38.7k, False: 3.87k]
  ------------------
  167|  38.7k|        auto it = scn::ranges::begin(source);
  168|   272k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   272k|            auto result = scn::scan<T>(
  170|   272k|                global_locale,
  171|   272k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   272k|                scn::runtime_format(f));
  173|   272k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 38.7k, False: 233k]
  ------------------
  174|  38.7k|                break;
  175|  38.7k|            }
  176|   233k|            it = result->begin();
  177|   233k|        }
  178|  38.7k|    }
  179|       |
  180|       |    // scan_value
  181|  3.87k|    {
  182|  3.87k|        auto it = scn::ranges::begin(source);
  183|  52.6k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  52.6k|            auto result = scn::scan_value<T>(
  185|  52.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  52.6k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.87k, False: 48.7k]
  ------------------
  187|  3.87k|                break;
  188|  3.87k|            }
  189|  48.7k|            it = result->begin();
  190|  48.7k|        }
  191|  3.87k|    }
  192|  3.87k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.87k|{
  151|       |    // Regular scan
  152|  38.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 38.7k, False: 3.87k]
  ------------------
  153|  38.7k|        auto it = scn::ranges::begin(source);
  154|   231k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   231k|            auto result = scn::scan<T>(
  156|   231k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   231k|                scn::runtime_format(f));
  158|   231k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 38.7k, False: 193k]
  ------------------
  159|  38.7k|                break;
  160|  38.7k|            }
  161|   193k|            it = result->begin();
  162|   193k|        }
  163|  38.7k|    }
  164|       |
  165|       |    // scan localized
  166|  38.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 38.7k, False: 3.87k]
  ------------------
  167|  38.7k|        auto it = scn::ranges::begin(source);
  168|   231k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   231k|            auto result = scn::scan<T>(
  170|   231k|                global_locale,
  171|   231k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   231k|                scn::runtime_format(f));
  173|   231k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 38.7k, False: 193k]
  ------------------
  174|  38.7k|                break;
  175|  38.7k|            }
  176|   193k|            it = result->begin();
  177|   193k|        }
  178|  38.7k|    }
  179|       |
  180|       |    // scan_value
  181|  3.87k|    {
  182|  3.87k|        auto it = scn::ranges::begin(source);
  183|  44.8k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  44.8k|            auto result = scn::scan_value<T>(
  185|  44.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  44.8k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.87k, False: 40.9k]
  ------------------
  187|  3.87k|                break;
  188|  3.87k|            }
  189|  40.9k|            it = result->begin();
  190|  40.9k|        }
  191|  3.87k|    }
  192|  3.87k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.87k|{
  151|       |    // Regular scan
  152|  38.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 38.7k, False: 3.87k]
  ------------------
  153|  38.7k|        auto it = scn::ranges::begin(source);
  154|   275k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   275k|            auto result = scn::scan<T>(
  156|   275k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   275k|                scn::runtime_format(f));
  158|   275k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 38.7k, False: 236k]
  ------------------
  159|  38.7k|                break;
  160|  38.7k|            }
  161|   236k|            it = result->begin();
  162|   236k|        }
  163|  38.7k|    }
  164|       |
  165|       |    // scan localized
  166|  38.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 38.7k, False: 3.87k]
  ------------------
  167|  38.7k|        auto it = scn::ranges::begin(source);
  168|   275k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   275k|            auto result = scn::scan<T>(
  170|   275k|                global_locale,
  171|   275k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   275k|                scn::runtime_format(f));
  173|   275k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 38.7k, False: 236k]
  ------------------
  174|  38.7k|                break;
  175|  38.7k|            }
  176|   236k|            it = result->begin();
  177|   236k|        }
  178|  38.7k|    }
  179|       |
  180|       |    // scan_value
  181|  3.87k|    {
  182|  3.87k|        auto it = scn::ranges::begin(source);
  183|  53.1k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  53.1k|            auto result = scn::scan_value<T>(
  185|  53.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  53.1k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.87k, False: 49.2k]
  ------------------
  187|  3.87k|                break;
  188|  3.87k|            }
  189|  49.2k|            it = result->begin();
  190|  49.2k|        }
  191|  3.87k|    }
  192|  3.87k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.87k|{
  151|       |    // Regular scan
  152|  38.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 38.7k, False: 3.87k]
  ------------------
  153|  38.7k|        auto it = scn::ranges::begin(source);
  154|   233k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   233k|            auto result = scn::scan<T>(
  156|   233k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   233k|                scn::runtime_format(f));
  158|   233k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 38.7k, False: 195k]
  ------------------
  159|  38.7k|                break;
  160|  38.7k|            }
  161|   195k|            it = result->begin();
  162|   195k|        }
  163|  38.7k|    }
  164|       |
  165|       |    // scan localized
  166|  38.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 38.7k, False: 3.87k]
  ------------------
  167|  38.7k|        auto it = scn::ranges::begin(source);
  168|   233k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   233k|            auto result = scn::scan<T>(
  170|   233k|                global_locale,
  171|   233k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   233k|                scn::runtime_format(f));
  173|   233k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 38.7k, False: 195k]
  ------------------
  174|  38.7k|                break;
  175|  38.7k|            }
  176|   195k|            it = result->begin();
  177|   195k|        }
  178|  38.7k|    }
  179|       |
  180|       |    // scan_value
  181|  3.87k|    {
  182|  3.87k|        auto it = scn::ranges::begin(source);
  183|  45.1k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  45.1k|            auto result = scn::scan_value<T>(
  185|  45.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  45.1k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.87k, False: 41.2k]
  ------------------
  187|  3.87k|                break;
  188|  3.87k|            }
  189|  41.2k|            it = result->begin();
  190|  41.2k|        }
  191|  3.87k|    }
  192|  3.87k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.87k|{
  151|       |    // Regular scan
  152|  38.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 38.7k, False: 3.87k]
  ------------------
  153|  38.7k|        auto it = scn::ranges::begin(source);
  154|  38.7k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  38.7k|            auto result = scn::scan<T>(
  156|  38.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  38.7k|                scn::runtime_format(f));
  158|  38.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 38.7k, False: 1]
  ------------------
  159|  38.7k|                break;
  160|  38.7k|            }
  161|      1|            it = result->begin();
  162|      1|        }
  163|  38.7k|    }
  164|       |
  165|       |    // scan localized
  166|  38.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 38.7k, False: 3.87k]
  ------------------
  167|  38.7k|        auto it = scn::ranges::begin(source);
  168|  38.7k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  38.7k|            auto result = scn::scan<T>(
  170|  38.7k|                global_locale,
  171|  38.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  38.7k|                scn::runtime_format(f));
  173|  38.7k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 38.7k, False: 1]
  ------------------
  174|  38.7k|                break;
  175|  38.7k|            }
  176|      1|            it = result->begin();
  177|      1|        }
  178|  38.7k|    }
  179|       |
  180|       |    // scan_value
  181|  3.87k|    {
  182|  3.87k|        auto it = scn::ranges::begin(source);
  183|  3.87k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  3.87k|            auto result = scn::scan_value<T>(
  185|  3.87k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  3.87k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.87k, False: 0]
  ------------------
  187|  3.87k|                break;
  188|  3.87k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  3.87k|    }
  192|  3.87k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.87k|{
  151|       |    // Regular scan
  152|  38.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 38.7k, False: 3.87k]
  ------------------
  153|  38.7k|        auto it = scn::ranges::begin(source);
  154|  42.5k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  42.5k|            auto result = scn::scan<T>(
  156|  42.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  42.5k|                scn::runtime_format(f));
  158|  42.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 38.7k, False: 3.87k]
  ------------------
  159|  38.7k|                break;
  160|  38.7k|            }
  161|  3.87k|            it = result->begin();
  162|  3.87k|        }
  163|  38.7k|    }
  164|       |
  165|       |    // scan localized
  166|  38.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 38.7k, False: 3.87k]
  ------------------
  167|  38.7k|        auto it = scn::ranges::begin(source);
  168|  42.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  42.5k|            auto result = scn::scan<T>(
  170|  42.5k|                global_locale,
  171|  42.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  42.5k|                scn::runtime_format(f));
  173|  42.5k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 38.7k, False: 3.87k]
  ------------------
  174|  38.7k|                break;
  175|  38.7k|            }
  176|  3.87k|            it = result->begin();
  177|  3.87k|        }
  178|  38.7k|    }
  179|       |
  180|       |    // scan_value
  181|  3.87k|    {
  182|  3.87k|        auto it = scn::ranges::begin(source);
  183|  3.87k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  3.87k|            auto result = scn::scan_value<T>(
  185|  3.87k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  3.87k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.87k, False: 0]
  ------------------
  187|  3.87k|                break;
  188|  3.87k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  3.87k|    }
  192|  3.87k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.87k|{
  151|       |    // Regular scan
  152|  38.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 38.7k, False: 3.87k]
  ------------------
  153|  38.7k|        auto it = scn::ranges::begin(source);
  154|  42.5k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  42.5k|            auto result = scn::scan<T>(
  156|  42.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  42.5k|                scn::runtime_format(f));
  158|  42.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 38.7k, False: 3.87k]
  ------------------
  159|  38.7k|                break;
  160|  38.7k|            }
  161|  3.87k|            it = result->begin();
  162|  3.87k|        }
  163|  38.7k|    }
  164|       |
  165|       |    // scan localized
  166|  38.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 38.7k, False: 3.87k]
  ------------------
  167|  38.7k|        auto it = scn::ranges::begin(source);
  168|  42.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  42.5k|            auto result = scn::scan<T>(
  170|  42.5k|                global_locale,
  171|  42.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  42.5k|                scn::runtime_format(f));
  173|  42.5k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 38.7k, False: 3.87k]
  ------------------
  174|  38.7k|                break;
  175|  38.7k|            }
  176|  3.87k|            it = result->begin();
  177|  3.87k|        }
  178|  38.7k|    }
  179|       |
  180|       |    // scan_value
  181|  3.87k|    {
  182|  3.87k|        auto it = scn::ranges::begin(source);
  183|  3.87k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  3.87k|            auto result = scn::scan_value<T>(
  185|  3.87k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  3.87k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.87k, False: 0]
  ------------------
  187|  3.87k|                break;
  188|  3.87k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  3.87k|    }
  192|  3.87k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.87k|{
  151|       |    // Regular scan
  152|  38.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 38.7k, False: 3.87k]
  ------------------
  153|  38.7k|        auto it = scn::ranges::begin(source);
  154|  42.5k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  42.5k|            auto result = scn::scan<T>(
  156|  42.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  42.5k|                scn::runtime_format(f));
  158|  42.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 38.7k, False: 3.87k]
  ------------------
  159|  38.7k|                break;
  160|  38.7k|            }
  161|  3.87k|            it = result->begin();
  162|  3.87k|        }
  163|  38.7k|    }
  164|       |
  165|       |    // scan localized
  166|  38.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 38.7k, False: 3.87k]
  ------------------
  167|  38.7k|        auto it = scn::ranges::begin(source);
  168|  42.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  42.5k|            auto result = scn::scan<T>(
  170|  42.5k|                global_locale,
  171|  42.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  42.5k|                scn::runtime_format(f));
  173|  42.5k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 38.7k, False: 3.87k]
  ------------------
  174|  38.7k|                break;
  175|  38.7k|            }
  176|  3.87k|            it = result->begin();
  177|  3.87k|        }
  178|  38.7k|    }
  179|       |
  180|       |    // scan_value
  181|  3.87k|    {
  182|  3.87k|        auto it = scn::ranges::begin(source);
  183|  3.87k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  3.87k|            auto result = scn::scan_value<T>(
  185|  3.87k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  3.87k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.87k, False: 0]
  ------------------
  187|  3.87k|                break;
  188|  3.87k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  3.87k|    }
  192|  3.87k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.87k|{
  151|       |    // Regular scan
  152|  38.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 38.7k, False: 3.87k]
  ------------------
  153|  38.7k|        auto it = scn::ranges::begin(source);
  154|  42.5k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  42.5k|            auto result = scn::scan<T>(
  156|  42.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  42.5k|                scn::runtime_format(f));
  158|  42.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 38.7k, False: 3.87k]
  ------------------
  159|  38.7k|                break;
  160|  38.7k|            }
  161|  3.87k|            it = result->begin();
  162|  3.87k|        }
  163|  38.7k|    }
  164|       |
  165|       |    // scan localized
  166|  38.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 38.7k, False: 3.87k]
  ------------------
  167|  38.7k|        auto it = scn::ranges::begin(source);
  168|  42.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  42.5k|            auto result = scn::scan<T>(
  170|  42.5k|                global_locale,
  171|  42.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  42.5k|                scn::runtime_format(f));
  173|  42.5k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 38.7k, False: 3.87k]
  ------------------
  174|  38.7k|                break;
  175|  38.7k|            }
  176|  3.87k|            it = result->begin();
  177|  3.87k|        }
  178|  38.7k|    }
  179|       |
  180|       |    // scan_value
  181|  3.87k|    {
  182|  3.87k|        auto it = scn::ranges::begin(source);
  183|  3.87k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  3.87k|            auto result = scn::scan_value<T>(
  185|  3.87k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  3.87k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.87k, False: 0]
  ------------------
  187|  3.87k|                break;
  188|  3.87k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  3.87k|    }
  192|  3.87k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.87k|{
  151|       |    // Regular scan
  152|  38.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 38.7k, False: 3.87k]
  ------------------
  153|  38.7k|        auto it = scn::ranges::begin(source);
  154|  42.5k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  42.5k|            auto result = scn::scan<T>(
  156|  42.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  42.5k|                scn::runtime_format(f));
  158|  42.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 38.7k, False: 3.87k]
  ------------------
  159|  38.7k|                break;
  160|  38.7k|            }
  161|  3.87k|            it = result->begin();
  162|  3.87k|        }
  163|  38.7k|    }
  164|       |
  165|       |    // scan localized
  166|  38.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 38.7k, False: 3.87k]
  ------------------
  167|  38.7k|        auto it = scn::ranges::begin(source);
  168|  42.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  42.5k|            auto result = scn::scan<T>(
  170|  42.5k|                global_locale,
  171|  42.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  42.5k|                scn::runtime_format(f));
  173|  42.5k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 38.7k, False: 3.87k]
  ------------------
  174|  38.7k|                break;
  175|  38.7k|            }
  176|  3.87k|            it = result->begin();
  177|  3.87k|        }
  178|  38.7k|    }
  179|       |
  180|       |    // scan_value
  181|  3.87k|    {
  182|  3.87k|        auto it = scn::ranges::begin(source);
  183|  3.87k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  3.87k|            auto result = scn::scan_value<T>(
  185|  3.87k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  3.87k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.87k, False: 0]
  ------------------
  187|  3.87k|                break;
  188|  3.87k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  3.87k|    }
  192|  3.87k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
  108|  3.87k|{
  109|  3.87k|    using char_type = ranges::range_value_t<Source>;
  110|  3.87k|    auto& deque = get_noncontiguous_buffer<char_type>();
  111|  3.87k|    std::copy(ranges::begin(source), ranges::end(source),
  112|  3.87k|              std::back_inserter(deque));
  113|  3.87k|    return deque;
  114|  3.87k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   97|  3.87k|{
   98|  3.87k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (98:19): [Folded - Ignored]
  ------------------
   99|  3.87k|        return noncontiguous_buffer;
  100|  3.87k|    }
  101|  3.87k|    else {
  102|  3.87k|        return wnoncontiguous_buffer;
  103|  3.87k|    }
  104|  3.87k|}

LLVMFuzzerTestOneInput:
   59|  2.19k|{
   60|  2.19k|    scn::fuzz::run({data, size});
   61|  2.19k|    return 0;
   62|  2.19k|}
int_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runENS_2v24spanIKhEE:
   35|  2.19k|{
   36|  2.19k|    if (data.size() > max_input_bytes || data.size() == 0) {
  ------------------
  |  Branch (36:9): [True: 0, False: 2.19k]
  |  Branch (36:42): [True: 0, False: 2.19k]
  ------------------
   37|      0|        return;
   38|      0|    }
   39|       |
   40|  2.19k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data);
   41|       |
   42|  2.19k|    auto f =
   43|  2.19k|        get_format_strings<char>("{}", "{:i}", "{:d}", "{:L}", "{:x}", "{:b}",
   44|  2.19k|                                 "{:o}", "{:B36}", "{:'}", "{:'L}");
   45|  2.19k|    do_basic_run(sv, f);
   46|       |
   47|  2.19k|    auto wf = get_format_strings<wchar_t>(L"{}", L"{:i}", L"{:d}", L"{:L}",
   48|  2.19k|                                          L"{:x}", L"{:b}", L"{:o}", L"{:B36}",
   49|  2.19k|                                          L"{:'}", L"{:'L}");
   50|  2.19k|    do_basic_run(wsv_reinterpret, wf);
   51|  2.19k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (51:9): [True: 1.67k, False: 527]
  ------------------
   52|  1.67k|        do_basic_run(wsv_transcode, wf);
   53|  1.67k|    }
   54|  2.19k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  2.19k|{
   25|  2.19k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  2.19k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  2.19k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  2.19k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  2.19k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  2.19k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  2.19k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  2.19k|{
   25|  2.19k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  2.19k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  2.19k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  2.19k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  2.19k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  2.19k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  2.19k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  3.87k|{
   25|  3.87k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  3.87k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  3.87k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  3.87k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  3.87k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  3.87k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  3.87k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  3.87k|{
   25|  3.87k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  3.87k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  3.87k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  3.87k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  3.87k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  3.87k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  3.87k|}

