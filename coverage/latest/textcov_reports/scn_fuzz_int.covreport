_ZNK7simdutf14implementation25required_instruction_setsEv:
 1445|      2|  virtual uint32_t required_instruction_sets() const { return _required_instruction_sets; }
_ZN7simdutf14implementationC2ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_j:
 2455|      7|  {
 2456|      7|  }
_ZN7simdutf8internal29available_implementation_listC2Ev:
 2485|      1|  simdutf_really_inline available_implementation_list() {}
_ZN7simdutf14implementationD2Ev:
 2457|      5|  virtual ~implementation()=default;
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEaSEPS3_:
 2551|      1|  atomic_ptr& operator=(T *_ptr) { ptr = _ptr; return *this; }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEcvPS3_Ev:
 2548|      1|  operator T*() { return ptr.load(); }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEC2EPS3_:
 2531|      1|  atomic_ptr(T *_ptr) : ptr{_ptr} {}
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEptEv:
 2550|  2.11M|  T* operator->() { return ptr.load(); }

simdutf.cpp:_ZN7simdutf8internalL30detect_supported_architecturesEv:
  170|      1|static inline uint32_t detect_supported_architectures() {
  171|      1|  uint32_t eax;
  172|      1|  uint32_t ebx = 0;
  173|      1|  uint32_t ecx = 0;
  174|      1|  uint32_t edx = 0;
  175|      1|  uint32_t host_isa = 0x0;
  176|       |
  177|       |  // EBX for EAX=0x1
  178|      1|  eax = 0x1;
  179|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  180|       |
  181|      1|  if (ecx & cpuid_bit::sse42) {
  ------------------
  |  Branch (181:7): [True: 1, False: 0]
  ------------------
  182|      1|    host_isa |= instruction_set::SSE42;
  183|      1|  }
  184|       |
  185|      1|  if (ecx & cpuid_bit::pclmulqdq) {
  ------------------
  |  Branch (185:7): [True: 1, False: 0]
  ------------------
  186|      1|    host_isa |= instruction_set::PCLMULQDQ;
  187|      1|  }
  188|       |
  189|      1|  if ((ecx & cpuid_bit::osxsave) != cpuid_bit::osxsave) {
  ------------------
  |  Branch (189:7): [True: 0, False: 1]
  ------------------
  190|      0|    return host_isa;
  191|      0|  }
  192|       |
  193|       |  // xgetbv for checking if the OS saves registers
  194|      1|  uint64_t xcr0 = xgetbv();
  195|       |
  196|      1|  if ((xcr0 & cpuid_bit::xcr0_bit::avx256_saved) == 0) {
  ------------------
  |  Branch (196:7): [True: 0, False: 1]
  ------------------
  197|      0|    return host_isa;
  198|      0|  }
  199|       |  // ECX for EAX=0x7
  200|      1|  eax = 0x7;
  201|      1|  ecx = 0x0; // Sub-leaf = 0
  202|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  203|      1|  if (ebx & cpuid_bit::ebx::avx2) {
  ------------------
  |  Branch (203:7): [True: 1, False: 0]
  ------------------
  204|      1|    host_isa |= instruction_set::AVX2;
  205|      1|  }
  206|      1|  if (ebx & cpuid_bit::ebx::bmi1) {
  ------------------
  |  Branch (206:7): [True: 1, False: 0]
  ------------------
  207|      1|    host_isa |= instruction_set::BMI1;
  208|      1|  }
  209|      1|  if (ebx & cpuid_bit::ebx::bmi2) {
  ------------------
  |  Branch (209:7): [True: 1, False: 0]
  ------------------
  210|      1|    host_isa |= instruction_set::BMI2;
  211|      1|  }
  212|      1|  if (!((xcr0 & cpuid_bit::xcr0_bit::avx512_saved) == cpuid_bit::xcr0_bit::avx512_saved)) {
  ------------------
  |  Branch (212:7): [True: 1, False: 0]
  ------------------
  213|      1|    return host_isa;
  214|      1|  }
  215|      0|  if (ebx & cpuid_bit::ebx::avx512f) {
  ------------------
  |  Branch (215:7): [True: 0, False: 0]
  ------------------
  216|      0|    host_isa |= instruction_set::AVX512F;
  217|      0|  }
  218|      0|  if (ebx & cpuid_bit::ebx::avx512bw) {
  ------------------
  |  Branch (218:7): [True: 0, False: 0]
  ------------------
  219|      0|    host_isa |= instruction_set::AVX512BW;
  220|      0|  }
  221|      0|  if (ebx & cpuid_bit::ebx::avx512cd) {
  ------------------
  |  Branch (221:7): [True: 0, False: 0]
  ------------------
  222|      0|    host_isa |= instruction_set::AVX512CD;
  223|      0|  }
  224|      0|  if (ebx & cpuid_bit::ebx::avx512dq) {
  ------------------
  |  Branch (224:7): [True: 0, False: 0]
  ------------------
  225|      0|    host_isa |= instruction_set::AVX512DQ;
  226|      0|  }
  227|      0|  if (ebx & cpuid_bit::ebx::avx512vl) {
  ------------------
  |  Branch (227:7): [True: 0, False: 0]
  ------------------
  228|      0|    host_isa |= instruction_set::AVX512VL;
  229|      0|  }
  230|      0|  if (ecx & cpuid_bit::ecx::avx512vbmi2) {
  ------------------
  |  Branch (230:7): [True: 0, False: 0]
  ------------------
  231|      0|    host_isa |= instruction_set::AVX512VBMI2;
  232|      0|  }
  233|      0|  if (ecx & cpuid_bit::ecx::avx512vpopcnt) {
  ------------------
  |  Branch (233:7): [True: 0, False: 0]
  ------------------
  234|      0|    host_isa |= instruction_set::AVX512VPOPCNTDQ;
  235|      0|  }
  236|      0|  return host_isa;
  237|      1|}
simdutf.cpp:_ZN7simdutf8internalL5cpuidEPjS1_S1_S1_:
  139|      2|                         uint32_t *edx) {
  140|       |#if defined(_MSC_VER)
  141|       |  int cpu_info[4];
  142|       |  __cpuidex(cpu_info, *eax, *ecx);
  143|       |  *eax = cpu_info[0];
  144|       |  *ebx = cpu_info[1];
  145|       |  *ecx = cpu_info[2];
  146|       |  *edx = cpu_info[3];
  147|       |#elif defined(HAVE_GCC_GET_CPUID) && defined(USE_GCC_GET_CPUID)
  148|       |  uint32_t level = *eax;
  149|       |  __get_cpuid(level, eax, ebx, ecx, edx);
  150|       |#else
  151|      2|  uint32_t a = *eax, b, c = *ecx, d;
  152|      2|  asm volatile("cpuid\n\t" : "+a"(a), "=b"(b), "+c"(c), "=d"(d));
  153|      2|  *eax = a;
  154|      2|  *ebx = b;
  155|      2|  *ecx = c;
  156|      2|  *edx = d;
  157|      2|#endif
  158|      2|}
simdutf.cpp:_ZN7simdutf8internalL6xgetbvEv:
  160|      1|static inline uint64_t xgetbv() {
  161|       | #if defined(_MSC_VER)
  162|       |   return _xgetbv(0);
  163|       | #else
  164|      1|   uint32_t xcr0_lo, xcr0_hi;
  165|      1|   asm volatile("xgetbv\n\t" : "=a" (xcr0_lo), "=d" (xcr0_hi) : "c" (0));
  166|      1|   return xcr0_lo | ((uint64_t)xcr0_hi << 32);
  167|      1| #endif
  168|      1| }

_ZN7simdutf6resultC2ENS_10error_codeEm:
    5|   579k|  simdutf_really_inline result::result(error_code _err, size_t _pos) : error{_err}, count{_pos} {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EEC2EPKhm:
   62|   581k|simdutf_really_inline buf_block_reader<STEP_SIZE>::buf_block_reader(const uint8_t *_buf, size_t _len) : buf{_buf}, len{_len}, lenminusstep{len < STEP_SIZE ? 0 : len - STEP_SIZE}, idx{0} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE14has_full_blockEv:
   68|   588k|simdutf_really_inline bool buf_block_reader<STEP_SIZE>::has_full_block() const {
   69|   588k|  return idx < lenminusstep;
   70|   588k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE10full_blockEv:
   73|  6.75k|simdutf_really_inline const uint8_t *buf_block_reader<STEP_SIZE>::full_block() const {
   74|  6.75k|  return &buf[idx];
   75|  6.75k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE7advanceEv:
   86|   588k|simdutf_really_inline void buf_block_reader<STEP_SIZE>::advance() {
   87|   588k|  idx += STEP_SIZE;
   88|   588k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE13get_remainderEPh:
   78|   581k|simdutf_really_inline size_t buf_block_reader<STEP_SIZE>::get_remainder(uint8_t *dst) const {
   79|   581k|  if(len == idx) { return 0; } // memcpy(dst, null, 0) will trigger an error with some sanitizers
  ------------------
  |  Branch (79:6): [True: 0, False: 581k]
  ------------------
   80|   581k|  std::memset(dst, 0x20, STEP_SIZE); // std::memset STEP_SIZE because it's more efficient to write out 8 or 16 bytes at once.
   81|   581k|  std::memcpy(dst, buf + idx, len - idx);
   82|   581k|  return len - idx;
   83|   581k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14utf817count_code_pointsEPKcm:
   10|   580k|simdutf_really_inline size_t count_code_points(const char* in, size_t size) {
   11|   580k|    size_t pos = 0;
   12|   580k|    size_t count = 0;
   13|   586k|    for(;pos + 64 <= size; pos += 64) {
  ------------------
  |  Branch (13:10): [True: 5.51k, False: 580k]
  ------------------
   14|  5.51k|      simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
   15|  5.51k|      uint64_t utf8_continuation_mask = input.gt(-65);
   16|  5.51k|      count += count_ones(utf8_continuation_mask);
   17|  5.51k|    }
   18|   580k|    return count + scalar::utf8::count_code_points(in + pos, size - pos);
   19|   580k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoderC2Ev:
  115|   950k|    validating_transcoder() : error(uint8_t(0)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder7convertEPKcmPDi:
  129|   660k|    simdutf_really_inline size_t convert(const char* in, size_t size, char32_t* utf32_output) {
  130|   660k|      size_t pos = 0;
  131|   660k|      char32_t* start{utf32_output};
  132|       |      // In the worst case, we have the haswell kernel which can cause an overflow of
  133|       |      // 8 bytes when calling convert_masked_utf8_to_utf32. If you skip the last 16 bytes,
  134|       |      // and if the data is valid, then it is entirely safe because 16 UTF-8 bytes generate
  135|       |      // much more than 8 bytes. However, you cannot generally assume that you have valid
  136|       |      // UTF-8 input, so we are going to go back from the end counting 4 leading bytes,
  137|       |      // to give us a good margin.
  138|   660k|      size_t leading_byte = 0;
  139|   660k|      size_t margin = size;
  140|  1.33M|      for(; margin > 0 && leading_byte < 4; margin--) {
  ------------------
  |  Branch (140:13): [True: 677k, False: 660k]
  |  Branch (140:27): [True: 677k, False: 0]
  ------------------
  141|   677k|        leading_byte += (int8_t(in[margin-1]) > -65);
  142|   677k|      }
  143|       |      // If the input is long enough, then we have that margin-1 is the fourth last leading byte.
  144|   660k|      const size_t safety_margin = size - margin + 1; // to avoid overruns!
  145|   660k|      while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (145:13): [True: 0, False: 660k]
  ------------------
  146|      0|        simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
  147|      0|        if(input.is_ascii()) {
  ------------------
  |  Branch (147:12): [True: 0, False: 0]
  ------------------
  148|      0|          input.store_ascii_as_utf32(utf32_output);
  149|      0|          utf32_output += 64;
  150|      0|          pos += 64;
  151|      0|        } else {
  152|       |          // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  153|      0|          static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  154|      0|              "We support either two or four chunks per 64-byte block.");
  155|      0|          auto zero = simd8<uint8_t>{uint8_t(0)};
  156|      0|          if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (156:14): [Folded - Ignored]
  ------------------
  157|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  158|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  159|      0|          } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (159:21): [Folded - Ignored]
  ------------------
  160|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  161|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|      0|            this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  163|      0|            this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  164|      0|          }
  165|      0|          uint64_t utf8_continuation_mask = input.lt(-65 + 1);
  166|      0|          uint64_t utf8_leading_mask = ~utf8_continuation_mask;
  167|      0|          uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
  168|       |          // We process in blocks of up to 12 bytes except possibly
  169|       |          // for fast paths which may process up to 16 bytes. For the
  170|       |          // slow path to work, we should have at least 12 input bytes left.
  171|      0|          size_t max_starting_point = (pos + 64) - 12;
  172|       |          // Next loop is going to run at least five times.
  173|      0|          while(pos < max_starting_point) {
  ------------------
  |  Branch (173:17): [True: 0, False: 0]
  ------------------
  174|       |            // Performance note: our ability to compute 'consumed' and
  175|       |            // then shift and recompute is critical. If there is a
  176|       |            // latency of, say, 4 cycles on getting 'consumed', then
  177|       |            // the inner loop might have a total latency of about 6 cycles.
  178|       |            // Yet we process between 6 to 12 inputs bytes, thus we get
  179|       |            // a speed limit between 1 cycle/byte and 0.5 cycle/byte
  180|       |            // for this section of the code. Hence, there is a limit
  181|       |            // to how much we can further increase this latency before
  182|       |            // it seriously harms performance.
  183|      0|            size_t consumed = convert_masked_utf8_to_utf32(in + pos,
  184|      0|                            utf8_end_of_code_point_mask, utf32_output);
  185|      0|            pos += consumed;
  186|      0|            utf8_end_of_code_point_mask >>= consumed;
  187|      0|          }
  188|       |          // At this point there may remain between 0 and 12 bytes in the
  189|       |          // 64-byte block. These bytes will be processed again. So we have an
  190|       |          // 80% efficiency (in the worst case). In practice we expect an
  191|       |          // 85% to 90% efficiency.
  192|      0|        }
  193|      0|      }
  194|   660k|      if(errors()) { return 0; }
  ------------------
  |  Branch (194:10): [True: 0, False: 660k]
  ------------------
  195|   660k|      if(pos < size) {
  ------------------
  |  Branch (195:10): [True: 660k, False: 0]
  ------------------
  196|   660k|        size_t howmany  = scalar::utf8_to_utf32::convert(in + pos, size - pos, utf32_output);
  197|   660k|        if(howmany == 0) { return 0; }
  ------------------
  |  Branch (197:12): [True: 4.76k, False: 656k]
  ------------------
  198|   656k|        utf32_output += howmany;
  199|   656k|      }
  200|   656k|      return utf32_output - start;
  201|   660k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder6errorsEv:
  290|   950k|    simdutf_really_inline bool errors() const {
  291|   950k|      return this->error.any_bits_set_anywhere();
  292|   950k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder19convert_with_errorsEPKcmPDi:
  203|   289k|    simdutf_really_inline result convert_with_errors(const char* in, size_t size, char32_t* utf32_output) {
  204|   289k|      size_t pos = 0;
  205|   289k|      char32_t* start{utf32_output};
  206|       |      // In the worst case, we have the haswell kernel which can cause an overflow of
  207|       |      // 8 bytes when calling convert_masked_utf8_to_utf32. If you skip the last 16 bytes,
  208|       |      // and if the data is valid, then it is entirely safe because 16 UTF-8 bytes generate
  209|       |      // much more than 8 bytes. However, you cannot generally assume that you have valid
  210|       |      // UTF-8 input, so we are going to go back from the end counting 4 leading bytes,
  211|       |      // to give us a good margin.
  212|   289k|      size_t leading_byte = 0;
  213|   289k|      size_t margin = size;
  214|   579k|      for(; margin > 0 && leading_byte < 4; margin--) {
  ------------------
  |  Branch (214:13): [True: 289k, False: 289k]
  |  Branch (214:27): [True: 289k, False: 0]
  ------------------
  215|   289k|        leading_byte += (int8_t(in[margin-1]) > -65);
  216|   289k|      }
  217|       |      // If the input is long enough, then we have that margin-1 is the fourth last leading byte.
  218|   289k|      const size_t safety_margin = size - margin + 1; // to avoid overruns!
  219|   289k|      while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (219:13): [True: 0, False: 289k]
  ------------------
  220|      0|        simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
  221|      0|        if(input.is_ascii()) {
  ------------------
  |  Branch (221:12): [True: 0, False: 0]
  ------------------
  222|      0|          input.store_ascii_as_utf32(utf32_output);
  223|      0|          utf32_output += 64;
  224|      0|          pos += 64;
  225|      0|        } else {
  226|       |          // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  227|      0|          static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  228|      0|              "We support either two or four chunks per 64-byte block.");
  229|      0|          auto zero = simd8<uint8_t>{uint8_t(0)};
  230|      0|          if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (230:14): [Folded - Ignored]
  ------------------
  231|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  232|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  233|      0|          } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (233:21): [Folded - Ignored]
  ------------------
  234|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  235|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  236|      0|            this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  237|      0|            this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  238|      0|          }
  239|      0|          if (errors()) {
  ------------------
  |  Branch (239:15): [True: 0, False: 0]
  ------------------
  240|      0|            result res = scalar::utf8_to_utf32::rewind_and_convert_with_errors(pos, in + pos, size - pos, utf32_output);
  241|      0|            res.count += pos;
  242|      0|            return res;
  243|      0|          }
  244|      0|          uint64_t utf8_continuation_mask = input.lt(-65 + 1);
  245|      0|          uint64_t utf8_leading_mask = ~utf8_continuation_mask;
  246|      0|          uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
  247|       |          // We process in blocks of up to 12 bytes except possibly
  248|       |          // for fast paths which may process up to 16 bytes. For the
  249|       |          // slow path to work, we should have at least 12 input bytes left.
  250|      0|          size_t max_starting_point = (pos + 64) - 12;
  251|       |          // Next loop is going to run at least five times.
  252|      0|          while(pos < max_starting_point) {
  ------------------
  |  Branch (252:17): [True: 0, False: 0]
  ------------------
  253|       |            // Performance note: our ability to compute 'consumed' and
  254|       |            // then shift and recompute is critical. If there is a
  255|       |            // latency of, say, 4 cycles on getting 'consumed', then
  256|       |            // the inner loop might have a total latency of about 6 cycles.
  257|       |            // Yet we process between 6 to 12 inputs bytes, thus we get
  258|       |            // a speed limit between 1 cycle/byte and 0.5 cycle/byte
  259|       |            // for this section of the code. Hence, there is a limit
  260|       |            // to how much we can further increase this latency before
  261|       |            // it seriously harms performance.
  262|      0|            size_t consumed = convert_masked_utf8_to_utf32(in + pos,
  263|      0|                            utf8_end_of_code_point_mask, utf32_output);
  264|      0|            pos += consumed;
  265|      0|            utf8_end_of_code_point_mask >>= consumed;
  266|      0|          }
  267|       |          // At this point there may remain between 0 and 12 bytes in the
  268|       |          // 64-byte block. These bytes will be processed again. So we have an
  269|       |          // 80% efficiency (in the worst case). In practice we expect an
  270|       |          // 85% to 90% efficiency.
  271|      0|        }
  272|      0|      }
  273|   289k|      if(errors()) {
  ------------------
  |  Branch (273:10): [True: 0, False: 289k]
  ------------------
  274|      0|        result res = scalar::utf8_to_utf32::rewind_and_convert_with_errors(pos, in + pos, size - pos, utf32_output);
  275|      0|        res.count += pos;
  276|      0|        return res;
  277|      0|      }
  278|   289k|      if(pos < size) {
  ------------------
  |  Branch (278:10): [True: 289k, False: 0]
  ------------------
  279|   289k|        result res = scalar::utf8_to_utf32::rewind_and_convert_with_errors(pos, in + pos, size - pos, utf32_output);
  280|   289k|        if (res.error) {    // In case of error, we want the error position
  ------------------
  |  Branch (280:13): [True: 0, False: 289k]
  ------------------
  281|      0|          res.count += pos;
  282|      0|          return res;
  283|   289k|        } else {    // In case of success, we want the number of word written
  284|   289k|          utf32_output += res.count;
  285|   289k|        }
  286|   289k|      }
  287|   289k|      return result(error_code::SUCCESS, utf32_output - start);
  288|   289k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
   12|  1.80k|    char32_t* utf32_output) noexcept {
   13|  1.80k|  size_t pos = 0;
   14|  1.80k|  char32_t* start{utf32_output};
   15|  1.80k|  const size_t safety_margin = 16; // to avoid overruns!
   16|  7.19k|  while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (16:9): [True: 5.38k, False: 1.80k]
  ------------------
   17|  5.38k|    simd8x64<int8_t> in(reinterpret_cast<const int8_t *>(input + pos));
   18|  5.38k|    if(in.is_ascii()) {
  ------------------
  |  Branch (18:8): [True: 4.41k, False: 963]
  ------------------
   19|  4.41k|      in.store_ascii_as_utf32(utf32_output);
   20|  4.41k|      utf32_output += 64;
   21|  4.41k|      pos += 64;
   22|  4.41k|    } else {
   23|       |    // -65 is 0b10111111 in two-complement's, so largest possible continuation byte
   24|    963|    uint64_t utf8_continuation_mask = in.lt(-65 + 1);
   25|    963|    uint64_t utf8_leading_mask = ~utf8_continuation_mask;
   26|    963|    uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
   27|    963|    size_t max_starting_point = (pos + 64) - 12;
   28|  6.45k|    while(pos < max_starting_point) {
  ------------------
  |  Branch (28:11): [True: 5.49k, False: 963]
  ------------------
   29|  5.49k|      size_t consumed = convert_masked_utf8_to_utf32(input + pos,
   30|  5.49k|                          utf8_end_of_code_point_mask, utf32_output);
   31|  5.49k|      pos += consumed;
   32|  5.49k|      utf8_end_of_code_point_mask >>= consumed;
   33|  5.49k|      }
   34|    963|    }
   35|  5.38k|  }
   36|  1.80k|  utf32_output += scalar::utf8_to_utf32::convert_valid(input + pos, size - pos, utf32_output);
   37|  1.80k|  return utf32_output - start;
   38|  1.80k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_next_inputERKNS1_4simd8simd8x64IhEE:
  152|   588k|    simdutf_really_inline void check_next_input(const simd8x64<uint8_t>& input) {
  153|   588k|      if(simdutf_likely(is_ascii(input))) {
  ------------------
  |  |   70|   588k|  #define simdutf_likely(x) __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (70:29): [True: 586k, False: 1.81k]
  |  |  ------------------
  ------------------
  154|   586k|        this->error |= this->prev_incomplete;
  155|   586k|      } else {
  156|       |        // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  157|  1.81k|        static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  158|  1.81k|            "We support either two or four chunks per 64-byte block.");
  159|  1.81k|        if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (159:12): [Folded - Ignored]
  ------------------
  160|  1.81k|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  161|  1.81k|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|  1.81k|        } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (162:19): [Folded - Ignored]
  ------------------
  163|      0|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  164|      0|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  165|      0|          this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  166|      0|          this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  167|      0|        }
  168|  1.81k|        this->prev_incomplete = is_incomplete(input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1]);
  169|  1.81k|        this->prev_input_block = input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1];
  170|       |
  171|  1.81k|      }
  172|   588k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_utf8_bytesENS1_4simd5simd8IhEES6_:
  135|  3.62k|    simdutf_really_inline void check_utf8_bytes(const simd8<uint8_t> input, const simd8<uint8_t> prev_input) {
  136|       |      // Flip prev1...prev3 so we can easily determine if they are 2+, 3+ or 4+ lead bytes
  137|       |      // (2, 3, 4-byte leads become large positive numbers instead of small negative numbers)
  138|  3.62k|      simd8<uint8_t> prev1 = input.prev<1>(prev_input);
  139|  3.62k|      simd8<uint8_t> sc = check_special_cases(input, prev1);
  140|  3.62k|      this->error |= check_multibyte_lengths(input, prev_input, sc);
  141|  3.62k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation19check_special_casesENS1_4simd5simd8IhEES5_:
    8|  3.62k|  simdutf_really_inline simd8<uint8_t> check_special_cases(const simd8<uint8_t> input, const simd8<uint8_t> prev1) {
    9|       |// Bit 0 = Too Short (lead byte/ASCII followed by lead byte/ASCII)
   10|       |// Bit 1 = Too Long (ASCII followed by continuation)
   11|       |// Bit 2 = Overlong 3-byte
   12|       |// Bit 4 = Surrogate
   13|       |// Bit 5 = Overlong 2-byte
   14|       |// Bit 7 = Two Continuations
   15|  3.62k|    constexpr const uint8_t TOO_SHORT   = 1<<0; // 11______ 0_______
   16|       |                                                // 11______ 11______
   17|  3.62k|    constexpr const uint8_t TOO_LONG    = 1<<1; // 0_______ 10______
   18|  3.62k|    constexpr const uint8_t OVERLONG_3  = 1<<2; // 11100000 100_____
   19|  3.62k|    constexpr const uint8_t SURROGATE   = 1<<4; // 11101101 101_____
   20|  3.62k|    constexpr const uint8_t OVERLONG_2  = 1<<5; // 1100000_ 10______
   21|  3.62k|    constexpr const uint8_t TWO_CONTS   = 1<<7; // 10______ 10______
   22|  3.62k|    constexpr const uint8_t TOO_LARGE   = 1<<3; // 11110100 1001____
   23|       |                                                // 11110100 101_____
   24|       |                                                // 11110101 1001____
   25|       |                                                // 11110101 101_____
   26|       |                                                // 1111011_ 1001____
   27|       |                                                // 1111011_ 101_____
   28|       |                                                // 11111___ 1001____
   29|       |                                                // 11111___ 101_____
   30|  3.62k|    constexpr const uint8_t TOO_LARGE_1000 = 1<<6;
   31|       |                                                // 11110101 1000____
   32|       |                                                // 1111011_ 1000____
   33|       |                                                // 11111___ 1000____
   34|  3.62k|    constexpr const uint8_t OVERLONG_4  = 1<<6; // 11110000 1000____
   35|       |
   36|  3.62k|    const simd8<uint8_t> byte_1_high = prev1.shr<4>().lookup_16<uint8_t>(
   37|       |      // 0_______ ________ <ASCII in byte 1>
   38|  3.62k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   39|  3.62k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   40|       |      // 10______ ________ <continuation in byte 1>
   41|  3.62k|      TWO_CONTS, TWO_CONTS, TWO_CONTS, TWO_CONTS,
   42|       |      // 1100____ ________ <two byte lead in byte 1>
   43|  3.62k|      TOO_SHORT | OVERLONG_2,
   44|       |      // 1101____ ________ <two byte lead in byte 1>
   45|  3.62k|      TOO_SHORT,
   46|       |      // 1110____ ________ <three byte lead in byte 1>
   47|  3.62k|      TOO_SHORT | OVERLONG_3 | SURROGATE,
   48|       |      // 1111____ ________ <four+ byte lead in byte 1>
   49|  3.62k|      TOO_SHORT | TOO_LARGE | TOO_LARGE_1000 | OVERLONG_4
   50|  3.62k|    );
   51|  3.62k|    constexpr const uint8_t CARRY = TOO_SHORT | TOO_LONG | TWO_CONTS; // These all have ____ in byte 1 .
   52|  3.62k|    const simd8<uint8_t> byte_1_low = (prev1 & 0x0F).lookup_16<uint8_t>(
   53|       |      // ____0000 ________
   54|  3.62k|      CARRY | OVERLONG_3 | OVERLONG_2 | OVERLONG_4,
   55|       |      // ____0001 ________
   56|  3.62k|      CARRY | OVERLONG_2,
   57|       |      // ____001_ ________
   58|  3.62k|      CARRY,
   59|  3.62k|      CARRY,
   60|       |
   61|       |      // ____0100 ________
   62|  3.62k|      CARRY | TOO_LARGE,
   63|       |      // ____0101 ________
   64|  3.62k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   65|       |      // ____011_ ________
   66|  3.62k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   67|  3.62k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   68|       |
   69|       |      // ____1___ ________
   70|  3.62k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   71|  3.62k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   72|  3.62k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   73|  3.62k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   74|  3.62k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   75|       |      // ____1101 ________
   76|  3.62k|      CARRY | TOO_LARGE | TOO_LARGE_1000 | SURROGATE,
   77|  3.62k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   78|  3.62k|      CARRY | TOO_LARGE | TOO_LARGE_1000
   79|  3.62k|    );
   80|  3.62k|    const simd8<uint8_t> byte_2_high = input.shr<4>().lookup_16<uint8_t>(
   81|       |      // ________ 0_______ <ASCII in byte 2>
   82|  3.62k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   83|  3.62k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   84|       |
   85|       |      // ________ 1000____
   86|  3.62k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE_1000 | OVERLONG_4,
   87|       |      // ________ 1001____
   88|  3.62k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE,
   89|       |      // ________ 101_____
   90|  3.62k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   91|  3.62k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   92|       |
   93|       |      // ________ 11______
   94|  3.62k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT
   95|  3.62k|    );
   96|  3.62k|    return (byte_1_high & byte_1_low & byte_2_high);
   97|  3.62k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation23check_multibyte_lengthsENS1_4simd5simd8IhEES5_S5_:
   99|  3.62k|      const simd8<uint8_t> prev_input, const simd8<uint8_t> sc) {
  100|  3.62k|    simd8<uint8_t> prev2 = input.prev<2>(prev_input);
  101|  3.62k|    simd8<uint8_t> prev3 = input.prev<3>(prev_input);
  102|  3.62k|    simd8<uint8_t> must23 = simd8<uint8_t>(must_be_2_3_continuation(prev2, prev3));
  103|  3.62k|    simd8<uint8_t> must23_80 = must23 & uint8_t(0x80);
  104|  3.62k|    return must23_80 ^ sc;
  105|  3.62k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation13is_incompleteENS1_4simd5simd8IhEE:
  111|  1.81k|  simdutf_really_inline simd8<uint8_t> is_incomplete(const simd8<uint8_t> input) {
  112|       |    // If the previous input's last 3 bytes match this, they're too short (they ended at EOF):
  113|       |    // ... 1111____ 111_____ 11______
  114|  1.81k|    static const uint8_t max_array[32] = {
  115|  1.81k|      255, 255, 255, 255, 255, 255, 255, 255,
  116|  1.81k|      255, 255, 255, 255, 255, 255, 255, 255,
  117|  1.81k|      255, 255, 255, 255, 255, 255, 255, 255,
  118|  1.81k|      255, 255, 255, 255, 255, 0b11110000u-1, 0b11100000u-1, 0b11000000u-1
  119|  1.81k|    };
  120|  1.81k|    const simd8<uint8_t> max_value(&max_array[sizeof(max_array)-sizeof(simd8<uint8_t>)]);
  121|  1.81k|    return input.gt_bits(max_value);
  122|  1.81k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker9check_eofEv:
  146|   581k|    simdutf_really_inline void check_eof() {
  147|       |      // If the previous block had incomplete UTF-8 characters at the end, an ASCII block can't
  148|       |      // possibly finish them.
  149|   581k|      this->error |= this->prev_incomplete;
  150|   581k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker6errorsEv:
  175|   581k|    simdutf_really_inline bool errors() const {
  176|   581k|      return this->error.any_bits_set_anywhere();
  177|   581k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8EPKcm:
   27|   581k|bool generic_validate_utf8(const char * input, size_t length) {
   28|   581k|  return generic_validate_utf8<utf8_checker>(reinterpret_cast<const uint8_t *>(input),length);
   29|   581k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8INS2_12utf8_checkerEEEbPKhm:
   10|   581k|bool generic_validate_utf8(const uint8_t * input, size_t length) {
   11|   581k|    checker c{};
   12|   581k|    buf_block_reader<64> reader(input, length);
   13|   588k|    while (reader.has_full_block()) {
  ------------------
  |  Branch (13:12): [True: 6.75k, False: 581k]
  ------------------
   14|  6.75k|      simd::simd8x64<uint8_t> in(reader.full_block());
   15|  6.75k|      c.check_next_input(in);
   16|  6.75k|      reader.advance();
   17|  6.75k|    }
   18|   581k|    uint8_t block[64]{};
   19|   581k|    reader.get_remainder(block);
   20|   581k|    simd::simd8x64<uint8_t> in(block);
   21|   581k|    c.check_next_input(in);
   22|   581k|    reader.advance();
   23|   581k|    c.check_eof();
   24|   581k|    return !c.errors();
   25|   581k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_128convert_masked_utf8_to_utf32EPKcmRPDi:
   10|  5.49k|                           char32_t *&utf32_output) {
   11|       |  // we use an approach where we try to process up to 12 input bytes.
   12|       |  // Why 12 input bytes and not 16? Because we are concerned with the size of
   13|       |  // the lookup tables. Also 12 is nicely divisible by two and three.
   14|       |  //
   15|       |  //
   16|       |  // Optimization note: our main path below is load-latency dependent. Thus it is maybe
   17|       |  // beneficial to have fast paths that depend on branch prediction but have less latency.
   18|       |  // This results in more instructions but, potentially, also higher speeds.
   19|       |  //
   20|       |  // We first try a few fast paths.
   21|  5.49k|  const __m128i in = _mm_loadu_si128((__m128i *)input);
   22|  5.49k|  const uint16_t input_utf8_end_of_code_point_mask =
   23|  5.49k|      utf8_end_of_code_point_mask & 0xfff;
   24|  5.49k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xffff)) {
  ------------------
  |  Branch (24:6): [True: 1.89k, False: 3.59k]
  ------------------
   25|       |    // We process the data in chunks of 16 bytes.
   26|  1.89k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output), _mm256_cvtepu8_epi32(in));
   27|  1.89k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output+8), _mm256_cvtepu8_epi32(_mm_srli_si128(in,8)));
   28|  1.89k|    utf32_output += 16; // We wrote 16 32-bit characters.
   29|  1.89k|    return 16; // We consumed 16 bytes.
   30|  1.89k|  }
   31|  3.59k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xaaaa)) {
  ------------------
  |  Branch (31:6): [True: 34, False: 3.55k]
  ------------------
   32|       |    // We want to take 8 2-byte UTF-8 code units and turn them into 8 4-byte UTF-32 code units.
   33|       |    // There is probably a more efficient sequence, but the following might do.
   34|     34|    const __m128i sh = _mm_setr_epi8(1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14);
   35|     34|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   36|     34|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   37|     34|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   38|     34|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   39|     34|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   40|     34|    utf32_output += 8; // We wrote 16 bytes, 8 code points.
   41|     34|    return 16;
   42|     34|  }
   43|  3.55k|  if(input_utf8_end_of_code_point_mask == 0x924) {
  ------------------
  |  Branch (43:6): [True: 138, False: 3.41k]
  ------------------
   44|       |    // We want to take 4 3-byte UTF-8 code units and turn them into 4 4-byte UTF-32 code units.
   45|       |    // There is probably a more efficient sequence, but the following might do.
   46|    138|    const __m128i sh = _mm_setr_epi8(2, 1, 0, -1, 5, 4, 3, -1, 8, 7, 6, -1, 11, 10, 9, -1);
   47|    138|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   48|    138|    const __m128i ascii =
   49|    138|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   50|    138|    const __m128i middlebyte =
   51|    138|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   52|    138|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   53|    138|    const __m128i highbyte =
   54|    138|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   55|    138|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   56|    138|    const __m128i composed =
   57|    138|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   58|    138|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   59|    138|    utf32_output += 4;
   60|    138|    return 12;
   61|    138|  }
   62|       |  /// We do not have a fast path available, so we fallback.
   63|       |
   64|  3.41k|  const uint8_t idx =
   65|  3.41k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][0];
   66|  3.41k|  const uint8_t consumed =
   67|  3.41k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][1];
   68|  3.41k|  if (idx < 64) {
  ------------------
  |  Branch (68:7): [True: 2.45k, False: 966]
  ------------------
   69|       |    // SIX (6) input code-code units
   70|       |    // this is a relatively easy scenario
   71|       |    // we process SIX (6) input code-code units. The max length in bytes of six code
   72|       |    // code units spanning between 1 and 2 bytes each is 12 bytes. On processors
   73|       |    // where pdep/pext is fast, we might be able to use a small lookup table.
   74|  2.45k|    const __m128i sh =
   75|  2.45k|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   76|  2.45k|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   77|  2.45k|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   78|  2.45k|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   79|  2.45k|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   80|  2.45k|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   81|  2.45k|    utf32_output += 6; // We wrote 24 bytes, 6 code points. There is a potential
   82|       |    // overflow of 32 - 24 = 8 bytes.
   83|  2.45k|  } else if (idx < 145) {
  ------------------
  |  Branch (83:14): [True: 835, False: 131]
  ------------------
   84|       |    // FOUR (4) input code-code units
   85|    835|    const __m128i sh =
   86|    835|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   87|    835|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   88|    835|    const __m128i ascii =
   89|    835|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   90|    835|    const __m128i middlebyte =
   91|    835|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   92|    835|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   93|    835|    const __m128i highbyte =
   94|    835|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   95|    835|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   96|    835|    const __m128i composed =
   97|    835|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   98|    835|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   99|    835|    utf32_output += 4;
  100|    835|  } else if (idx < 209) {
  ------------------
  |  Branch (100:14): [True: 131, False: 0]
  ------------------
  101|       |    // TWO (2) input code-code units
  102|    131|    const __m128i sh =
  103|    131|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
  104|    131|    const __m128i perm = _mm_shuffle_epi8(in, sh);
  105|    131|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi32(0x7f));
  106|    131|    const __m128i middlebyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f00));
  107|    131|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
  108|    131|    __m128i middlehighbyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f0000));
  109|       |    // correct for spurious high bit
  110|    131|    const __m128i correct =
  111|    131|        _mm_srli_epi32(_mm_and_si128(perm, _mm_set1_epi32(0x400000)), 1);
  112|    131|    middlehighbyte = _mm_xor_si128(correct, middlehighbyte);
  113|    131|    const __m128i middlehighbyte_shifted = _mm_srli_epi32(middlehighbyte, 4);
  114|    131|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi32(0x07000000));
  115|    131|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 6);
  116|    131|    const __m128i composed =
  117|    131|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted),
  118|    131|                     _mm_or_si128(highbyte_shifted, middlehighbyte_shifted));
  119|    131|    _mm_storeu_si128((__m128i *)utf32_output, composed);
  120|    131|    utf32_output += 3; // We wrote 3 * 4 bytes, there is a potential overflow of 4 bytes.
  121|    131|  } else {
  122|       |    // here we know that there is an error but we do not handle errors
  123|      0|  }
  124|  3.41k|  return consumed;
  125|  3.55k|}

_ZNK7simdutf7haswell14implementation13validate_utf8EPKcm:
  104|   581k|simdutf_warn_unused bool implementation::validate_utf8(const char *buf, size_t len) const noexcept {
  105|   581k|  return haswell::utf8_validation::generic_validate_utf8(buf,len);
  106|   581k|}
_ZNK7simdutf7haswell14implementation21convert_utf8_to_utf32EPKcmPDi:
  274|   660k|simdutf_warn_unused size_t implementation::convert_utf8_to_utf32(const char* buf, size_t len, char32_t* utf32_output) const noexcept {
  275|   660k|  utf8_to_utf32::validating_transcoder converter;
  276|   660k|  return converter.convert(buf, len, utf32_output);
  277|   660k|}
_ZNK7simdutf7haswell14implementation33convert_utf8_to_utf32_with_errorsEPKcmPDi:
  279|   289k|simdutf_warn_unused result implementation::convert_utf8_to_utf32_with_errors(const char* buf, size_t len, char32_t* utf32_output) const noexcept {
  280|   289k|  utf8_to_utf32::validating_transcoder converter;
  281|   289k|  return converter.convert_with_errors(buf, len, utf32_output);
  282|   289k|}
_ZNK7simdutf7haswell14implementation27convert_valid_utf8_to_utf32EPKcmPDi:
  285|  1.80k|    char32_t* utf32_output) const noexcept {
  286|  1.80k|  return utf8_to_utf32::convert_valid(input, size,  utf32_output);
  287|  1.80k|}
_ZNK7simdutf7haswell14implementation22utf32_length_from_utf8EPKcm:
  776|   580k|simdutf_warn_unused size_t implementation::utf32_length_from_utf8(const char * input, size_t length) const noexcept {
  777|   580k|  return utf8::count_code_points(input, length);
  778|   580k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_18is_asciiERKNS1_4simd8simd8x64IhEE:
   23|   588k|simdutf_really_inline bool is_ascii(const simd8x64<uint8_t>& input) {
   24|   588k|  return input.reduce_or().is_ascii();
   25|   588k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_124must_be_2_3_continuationENS1_4simd5simd8IhEES4_:
   35|  3.62k|simdutf_really_inline simd8<bool> must_be_2_3_continuation(const simd8<uint8_t> prev2, const simd8<uint8_t> prev3) {
   36|  3.62k|  simd8<uint8_t> is_third_byte  = prev2.saturating_sub(0b11100000u-1); // Only 111_____ will be > 0
   37|  3.62k|  simd8<uint8_t> is_fourth_byte = prev3.saturating_sub(0b11110000u-1); // Only 1111____ will be > 0
   38|       |  // Caller requires a bool (all 1's). All values resulting from the subtraction will be <= 64, so signed comparison is fine.
   39|  3.62k|  return simd8<int8_t>(is_third_byte | is_fourth_byte) > int8_t(0);
   40|  3.62k|}

_ZNK7simdutf8internal29available_implementation_list21detect_best_supportedEv:
  768|      1|const implementation *available_implementation_list::detect_best_supported() const noexcept {
  769|       |  // They are prelisted in priority order, so we just go down the list
  770|      1|  uint32_t supported_instruction_sets = internal::detect_supported_architectures();
  771|      2|  for (const implementation *impl : internal::get_available_implementation_pointers()) {
  ------------------
  |  Branch (771:35): [True: 2, False: 0]
  ------------------
  772|      2|    uint32_t required_instruction_sets = impl->required_instruction_sets();
  773|      2|    if ((supported_instruction_sets & required_instruction_sets) == required_instruction_sets) { return impl; }
  ------------------
  |  Branch (773:9): [True: 1, False: 1]
  ------------------
  774|      2|  }
  775|      0|  return &unsupported_singleton; // this should never happen?
  776|      1|}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use8set_bestEv:
  778|      1|const implementation *detect_best_supported_implementation_on_first_use::set_best() const noexcept {
  779|      1|  SIMDUTF_PUSH_DISABLE_WARNINGS
  780|       |  SIMDUTF_DISABLE_DEPRECATED_WARNING // Disable CRT_SECURE warning on MSVC: manually verified this is safe
  781|      1|  char *force_implementation_name = getenv("SIMDUTF_FORCE_IMPLEMENTATION");
  782|      1|  SIMDUTF_POP_DISABLE_WARNINGS
  783|       |
  784|      1|  if (force_implementation_name) {
  ------------------
  |  Branch (784:7): [True: 0, False: 1]
  ------------------
  785|      0|    auto force_implementation = get_available_implementations()[force_implementation_name];
  786|      0|    if (force_implementation) {
  ------------------
  |  Branch (786:9): [True: 0, False: 0]
  ------------------
  787|      0|      return get_active_implementation() = force_implementation;
  788|      0|    } else {
  789|       |      // Note: abort() and stderr usage within the library is forbidden.
  790|      0|      return get_active_implementation() = &unsupported_singleton;
  791|      0|    }
  792|      0|  }
  793|      1|  return get_active_implementation() = get_available_implementations().detect_best_supported();
  794|      1|}
_ZN7simdutf29get_available_implementationsEv:
  803|      1|SIMDUTF_DLLIMPORTEXPORT const internal::available_implementation_list& get_available_implementations() {
  804|      1|  static const internal::available_implementation_list available_implementations{};
  805|      1|  return available_implementations;
  806|      1|}
_ZN7simdutf25get_active_implementationEv:
  811|  2.11M|SIMDUTF_DLLIMPORTEXPORT internal::atomic_ptr<const implementation>& get_active_implementation() {
  812|  2.11M|    static const internal::detect_best_supported_implementation_on_first_use detect_best_supported_implementation_on_first_use_singleton;
  813|  2.11M|    static internal::atomic_ptr<const implementation> active_implementation{&detect_best_supported_implementation_on_first_use_singleton};
  814|  2.11M|    return active_implementation;
  815|  2.11M|}
_ZN7simdutf13validate_utf8EPKcm:
  817|   581k|simdutf_warn_unused bool validate_utf8(const char *buf, size_t len) noexcept {
  818|   581k|  return get_active_implementation()->validate_utf8(buf, len);
  819|   581k|}
_ZN7simdutf21convert_utf8_to_utf32EPKcmPDi:
  876|   660k|simdutf_warn_unused size_t convert_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_output) noexcept {
  877|   660k|  return get_active_implementation()->convert_utf8_to_utf32(input, length, utf32_output);
  878|   660k|}
_ZN7simdutf33convert_utf8_to_utf32_with_errorsEPKcmPDi:
  879|   289k|simdutf_warn_unused result convert_utf8_to_utf32_with_errors(const char * input, size_t length, char32_t* utf32_output) noexcept {
  880|   289k|  return get_active_implementation()->convert_utf8_to_utf32_with_errors(input, length, utf32_output);
  881|   289k|}
_ZN7simdutf27convert_valid_utf8_to_utf32EPKcmPDi:
  927|  1.80k|simdutf_warn_unused size_t convert_valid_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_buffer) noexcept {
  928|  1.80k|  return get_active_implementation()->convert_valid_utf8_to_utf32(input, length, utf32_buffer);
  929|  1.80k|}
_ZN7simdutf22utf32_length_from_utf8EPKcm:
 1174|   580k|simdutf_warn_unused size_t utf32_length_from_utf8(const char * input, size_t length) noexcept {
 1175|   580k|  return get_active_implementation()->utf32_length_from_utf8(input, length);
 1176|   580k|}
_ZN7simdutf8internal26unsupported_implementationC2Ev:
  754|      2|  unsupported_implementation() : implementation("unsupported", "Unsupported CPU (no detected SIMD instructions)", 0) {}
simdutf.cpp:_ZN7simdutf8internalL37get_available_implementation_pointersEv:
  423|      1|static const std::initializer_list<const implementation *>& get_available_implementation_pointers() {
  424|      1|  static const std::initializer_list<const implementation *> available_implementation_pointers {
  425|      1|#if SIMDUTF_IMPLEMENTATION_ICELAKE
  426|      1|    get_icelake_singleton(),
  427|      1|#endif
  428|      1|#if SIMDUTF_IMPLEMENTATION_HASWELL
  429|      1|    get_haswell_singleton(),
  430|      1|#endif
  431|      1|#if SIMDUTF_IMPLEMENTATION_WESTMERE
  432|      1|    get_westmere_singleton(),
  433|      1|#endif
  434|       |#if SIMDUTF_IMPLEMENTATION_ARM64
  435|       |    get_arm64_singleton(),
  436|       |#endif
  437|       |#if SIMDUTF_IMPLEMENTATION_PPC64
  438|       |    get_ppc64_singleton(),
  439|       |#endif
  440|      1|#if SIMDUTF_IMPLEMENTATION_FALLBACK
  441|      1|    get_fallback_singleton(),
  442|      1|#endif
  443|      1|  }; // available_implementation_pointers
  444|      1|  return available_implementation_pointers;
  445|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_icelake_singletonEv:
   72|      1|static const icelake::implementation* get_icelake_singleton() {
   73|      1|  static const icelake::implementation icelake_singleton{};
   74|      1|  return &icelake_singleton;
   75|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_haswell_singletonEv:
   78|      1|static const haswell::implementation* get_haswell_singleton() {
   79|      1|  static const haswell::implementation haswell_singleton{};
   80|      1|  return &haswell_singleton;
   81|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_westmere_singletonEv:
   84|      1|static const westmere::implementation* get_westmere_singleton() {
   85|      1|  static const westmere::implementation westmere_singleton{};
   86|      1|  return &westmere_singleton;
   87|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_fallback_singletonEv:
  102|      1|static const fallback::implementation* get_fallback_singleton() {
  103|      1|  static const fallback::implementation fallback_singleton{};
  104|      1|  return &fallback_singleton;
  105|      1|}
_ZN7simdutf8internal49detect_best_supported_implementation_on_first_useC2Ev:
  417|      1|  simdutf_really_inline detect_best_supported_implementation_on_first_use() noexcept : implementation("best_supported_detector", "Detects the best supported implementation and sets it", 0) {}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use13validate_utf8EPKcm:
  121|      1|  simdutf_warn_unused bool validate_utf8(const char * buf, size_t len) const noexcept final override {
  122|      1|    return set_best()->validate_utf8(buf, len);
  123|      1|  }

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_14utf817count_code_pointsEPKcm:
  168|   580k|inline size_t count_code_points(const char* buf, size_t len) {
  169|   580k|    const int8_t * p = reinterpret_cast<const int8_t *>(buf);
  170|   580k|    size_t counter{0};
  171|  1.20M|    for(size_t i = 0; i < len; i++) {
  ------------------
  |  Branch (171:23): [True: 622k, False: 580k]
  ------------------
  172|       |        // -65 is 0b10111111, anything larger in two-complement's should start a new code point.
  173|   622k|        if(p[i] > -65) { counter++; }
  ------------------
  |  Branch (173:12): [True: 622k, False: 484]
  ------------------
  174|   622k|    }
  175|   580k|    return counter;
  176|   580k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf327convertEPKcmPDi:
    9|   660k|inline size_t convert(const char* buf, size_t len, char32_t* utf32_output) {
   10|   660k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|   660k|  size_t pos = 0;
   12|   660k|  char32_t* start{utf32_output};
   13|  1.31M|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 660k, False: 656k]
  ------------------
   14|       |    // try to convert the next block of 16 ASCII bytes
   15|   660k|    if (pos + 16 <= len) { // if it is safe to read 16 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 0, False: 660k]
  ------------------
   16|      0|      uint64_t v1;
   17|      0|      ::memcpy(&v1, data + pos, sizeof(uint64_t));
   18|      0|      uint64_t v2;
   19|      0|      ::memcpy(&v2, data + pos + sizeof(uint64_t), sizeof(uint64_t));
   20|      0|      uint64_t v{v1 | v2};
   21|      0|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (21:11): [True: 0, False: 0]
  ------------------
   22|      0|        size_t final_pos = pos + 16;
   23|      0|        while(pos < final_pos) {
  ------------------
  |  Branch (23:15): [True: 0, False: 0]
  ------------------
   24|      0|          *utf32_output++ = char32_t(buf[pos]);
   25|      0|          pos++;
   26|      0|        }
   27|      0|        continue;
   28|      0|      }
   29|      0|    }
   30|   660k|    uint8_t leading_byte = data[pos]; // leading byte
   31|   660k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (31:9): [True: 651k, False: 9.78k]
  ------------------
   32|       |      // converting one ASCII byte !!!
   33|   651k|      *utf32_output++ = char32_t(leading_byte);
   34|   651k|      pos++;
   35|   651k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (35:16): [True: 4.90k, False: 4.88k]
  ------------------
   36|       |      // We have a two-byte UTF-8
   37|  4.90k|      if(pos + 1 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (37:10): [True: 0, False: 4.90k]
  ------------------
   38|  4.90k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (38:11): [True: 2.07k, False: 2.82k]
  ------------------
   39|       |      // range check
   40|  2.82k|      uint32_t code_point = (leading_byte & 0b00011111) << 6 | (data[pos + 1] & 0b00111111);
   41|  2.82k|      if (code_point < 0x80 || 0x7ff < code_point) { return 0; }
  ------------------
  |  Branch (41:11): [True: 141, False: 2.68k]
  |  Branch (41:32): [True: 0, False: 2.68k]
  ------------------
   42|  2.68k|      *utf32_output++ = char32_t(code_point);
   43|  2.68k|      pos += 2;
   44|  4.88k|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (44:16): [True: 2.70k, False: 2.18k]
  ------------------
   45|       |      // We have a three-byte UTF-8
   46|  2.70k|      if(pos + 2 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (46:10): [True: 0, False: 2.70k]
  ------------------
   47|       |
   48|  2.70k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (48:11): [True: 964, False: 1.73k]
  ------------------
   49|  1.73k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (49:11): [True: 141, False: 1.59k]
  ------------------
   50|       |      // range check
   51|  1.59k|      uint32_t code_point = (leading_byte & 0b00001111) << 12 |
   52|  1.59k|                   (data[pos + 1] & 0b00111111) << 6 |
   53|  1.59k|                   (data[pos + 2] & 0b00111111);
   54|  1.59k|      if (code_point < 0x800 || 0xffff < code_point ||
  ------------------
  |  Branch (54:11): [True: 205, False: 1.39k]
  |  Branch (54:33): [True: 0, False: 1.39k]
  ------------------
   55|  1.59k|          (0xd7ff < code_point && code_point < 0xe000)) {
  ------------------
  |  Branch (55:12): [True: 277, False: 1.11k]
  |  Branch (55:35): [True: 136, False: 141]
  ------------------
   56|    341|        return 0;
   57|    341|      }
   58|  1.25k|      *utf32_output++ = char32_t(code_point);
   59|  1.25k|      pos += 3;
   60|  2.18k|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (60:16): [True: 2.18k, False: 0]
  ------------------
   61|       |      // we have a 4-byte UTF-8 word.
   62|  2.18k|      if(pos + 3 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (62:10): [True: 0, False: 2.18k]
  ------------------
   63|  2.18k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (63:11): [True: 360, False: 1.82k]
  ------------------
   64|  1.82k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (64:11): [True: 163, False: 1.65k]
  ------------------
   65|  1.65k|      if ((data[pos + 3] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (65:11): [True: 141, False: 1.51k]
  ------------------
   66|       |
   67|       |      // range check
   68|  1.51k|      uint32_t code_point =
   69|  1.51k|          (leading_byte & 0b00000111) << 18 | (data[pos + 1] & 0b00111111) << 12 |
   70|  1.51k|          (data[pos + 2] & 0b00111111) << 6 | (data[pos + 3] & 0b00111111);
   71|  1.51k|      if (code_point <= 0xffff || 0x10ffff < code_point) { return 0; }
  ------------------
  |  Branch (71:11): [True: 301, False: 1.21k]
  |  Branch (71:35): [True: 141, False: 1.07k]
  ------------------
   72|  1.07k|      *utf32_output++ = char32_t(code_point);
   73|  1.07k|      pos += 4;
   74|  1.07k|    } else {
   75|      0|      return 0;
   76|      0|    }
   77|   660k|  }
   78|   656k|  return utf32_output - start;
   79|   660k|}
simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3219convert_with_errorsEPKcmPDi:
   81|   289k|inline result convert_with_errors(const char* buf, size_t len, char32_t* utf32_output) {
   82|   289k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   83|   289k|  size_t pos = 0;
   84|   289k|  char32_t* start{utf32_output};
   85|   579k|  while (pos < len) {
  ------------------
  |  Branch (85:10): [True: 289k, False: 289k]
  ------------------
   86|       |    // try to convert the next block of 16 ASCII bytes
   87|   289k|    if (pos + 16 <= len) { // if it is safe to read 16 more bytes, check that they are ascii
  ------------------
  |  Branch (87:9): [True: 0, False: 289k]
  ------------------
   88|      0|      uint64_t v1;
   89|      0|      ::memcpy(&v1, data + pos, sizeof(uint64_t));
   90|      0|      uint64_t v2;
   91|      0|      ::memcpy(&v2, data + pos + sizeof(uint64_t), sizeof(uint64_t));
   92|      0|      uint64_t v{v1 | v2};
   93|      0|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (93:11): [True: 0, False: 0]
  ------------------
   94|      0|        size_t final_pos = pos + 16;
   95|      0|        while(pos < final_pos) {
  ------------------
  |  Branch (95:15): [True: 0, False: 0]
  ------------------
   96|      0|          *utf32_output++ = char32_t(buf[pos]);
   97|      0|          pos++;
   98|      0|        }
   99|      0|        continue;
  100|      0|      }
  101|      0|    }
  102|   289k|    uint8_t leading_byte = data[pos]; // leading byte
  103|   289k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (103:9): [True: 289k, False: 0]
  ------------------
  104|       |      // converting one ASCII byte !!!
  105|   289k|      *utf32_output++ = char32_t(leading_byte);
  106|   289k|      pos++;
  107|   289k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (107:16): [True: 0, False: 0]
  ------------------
  108|       |      // We have a two-byte UTF-8
  109|      0|      if(pos + 1 >= len) { return result(error_code::TOO_SHORT, pos); } // minimal bound checking
  ------------------
  |  Branch (109:10): [True: 0, False: 0]
  ------------------
  110|      0|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (110:11): [True: 0, False: 0]
  ------------------
  111|       |      // range check
  112|      0|      uint32_t code_point = (leading_byte & 0b00011111) << 6 | (data[pos + 1] & 0b00111111);
  113|      0|      if (code_point < 0x80 || 0x7ff < code_point) { return result(error_code::OVERLONG, pos); }
  ------------------
  |  Branch (113:11): [True: 0, False: 0]
  |  Branch (113:32): [True: 0, False: 0]
  ------------------
  114|      0|      *utf32_output++ = char32_t(code_point);
  115|      0|      pos += 2;
  116|      0|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (116:16): [True: 0, False: 0]
  ------------------
  117|       |      // We have a three-byte UTF-8
  118|      0|      if(pos + 2 >= len) { return result(error_code::TOO_SHORT, pos); } // minimal bound checking
  ------------------
  |  Branch (118:10): [True: 0, False: 0]
  ------------------
  119|       |
  120|      0|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (120:11): [True: 0, False: 0]
  ------------------
  121|      0|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (121:11): [True: 0, False: 0]
  ------------------
  122|       |      // range check
  123|      0|      uint32_t code_point = (leading_byte & 0b00001111) << 12 |
  124|      0|                   (data[pos + 1] & 0b00111111) << 6 |
  125|      0|                   (data[pos + 2] & 0b00111111);
  126|      0|      if (code_point < 0x800 || 0xffff < code_point) { return result(error_code::OVERLONG, pos); }
  ------------------
  |  Branch (126:11): [True: 0, False: 0]
  |  Branch (126:33): [True: 0, False: 0]
  ------------------
  127|      0|      if (0xd7ff < code_point && code_point < 0xe000) { return result(error_code::SURROGATE, pos); }
  ------------------
  |  Branch (127:11): [True: 0, False: 0]
  |  Branch (127:34): [True: 0, False: 0]
  ------------------
  128|      0|      *utf32_output++ = char32_t(code_point);
  129|      0|      pos += 3;
  130|      0|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (130:16): [True: 0, False: 0]
  ------------------
  131|       |      // we have a 4-byte UTF-8 word.
  132|      0|      if(pos + 3 >= len) { return result(error_code::TOO_SHORT, pos); } // minimal bound checking
  ------------------
  |  Branch (132:10): [True: 0, False: 0]
  ------------------
  133|      0|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos);}
  ------------------
  |  Branch (133:11): [True: 0, False: 0]
  ------------------
  134|      0|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (134:11): [True: 0, False: 0]
  ------------------
  135|      0|      if ((data[pos + 3] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (135:11): [True: 0, False: 0]
  ------------------
  136|       |
  137|       |      // range check
  138|      0|      uint32_t code_point =
  139|      0|          (leading_byte & 0b00000111) << 18 | (data[pos + 1] & 0b00111111) << 12 |
  140|      0|          (data[pos + 2] & 0b00111111) << 6 | (data[pos + 3] & 0b00111111);
  141|      0|      if (code_point <= 0xffff) { return result(error_code::OVERLONG, pos); }
  ------------------
  |  Branch (141:11): [True: 0, False: 0]
  ------------------
  142|      0|      if (0x10ffff < code_point) { return result(error_code::TOO_LARGE, pos); }
  ------------------
  |  Branch (142:11): [True: 0, False: 0]
  ------------------
  143|      0|      *utf32_output++ = char32_t(code_point);
  144|      0|      pos += 4;
  145|      0|    } else {
  146|       |      // we either have too many continuation bytes or an invalid leading byte
  147|      0|      if ((leading_byte & 0b11000000) == 0b10000000) { return result(error_code::TOO_LONG, pos); }
  ------------------
  |  Branch (147:11): [True: 0, False: 0]
  ------------------
  148|      0|      else { return result(error_code::HEADER_BITS, pos); }
  149|      0|    }
  150|   289k|  }
  151|   289k|  return result(error_code::SUCCESS, utf32_output - start);
  152|   289k|}
simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3230rewind_and_convert_with_errorsEmPKcmPDi:
  167|   289k|inline result rewind_and_convert_with_errors(size_t prior_bytes, const char* buf, size_t len, char32_t* utf32_output) {
  168|   289k|  size_t extra_len{0};
  169|       |  // We potentially need to go back in time and find a leading byte.
  170|   289k|  size_t how_far_back = 3; // 3 bytes in the past + current position
  171|   289k|  if(how_far_back > prior_bytes) { how_far_back = prior_bytes; }
  ------------------
  |  Branch (171:6): [True: 289k, False: 0]
  ------------------
  172|   289k|  bool found_leading_bytes{false};
  173|       |  // important: it is i <= how_far_back and not 'i < how_far_back'.
  174|   289k|  for(size_t i = 0; i <= how_far_back; i++) {
  ------------------
  |  Branch (174:21): [True: 289k, False: 0]
  ------------------
  175|   289k|    unsigned char byte = buf[0-i];
  176|   289k|    found_leading_bytes = ((byte & 0b11000000) != 0b10000000);
  177|   289k|    if(found_leading_bytes) {
  ------------------
  |  Branch (177:8): [True: 289k, False: 0]
  ------------------
  178|   289k|      buf -= i;
  179|   289k|      extra_len = i;
  180|   289k|      break;
  181|   289k|    }
  182|   289k|  }
  183|       |  //
  184|       |  // It is possible for this function to return a negative count in its result.
  185|       |  // C++ Standard Section 18.1 defines size_t is in <cstddef> which is described in C Standard as <stddef.h>.
  186|       |  // C Standard Section 4.1.5 defines size_t as an unsigned integral type of the result of the sizeof operator
  187|       |  //
  188|       |  // An unsigned type will simply wrap round arithmetically (well defined).
  189|       |  //
  190|   289k|  if(!found_leading_bytes) {
  ------------------
  |  Branch (190:6): [True: 0, False: 289k]
  ------------------
  191|       |    // If how_far_back == 3, we may have four consecutive continuation bytes!!!
  192|       |    // [....] [continuation] [continuation] [continuation] | [buf is continuation]
  193|       |    // Or we possibly have a stream that does not start with a leading byte.
  194|      0|    return result(error_code::TOO_LONG, 0-how_far_back);
  195|      0|  }
  196|       |
  197|   289k|  result res = convert_with_errors(buf, len + extra_len, utf32_output);
  198|   289k|  if (res.error) {
  ------------------
  |  Branch (198:7): [True: 0, False: 289k]
  ------------------
  199|      0|    res.count -= extra_len;
  200|      0|  }
  201|   289k|  return res;
  202|   289k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
    9|  1.80k|inline size_t convert_valid(const char* buf, size_t len, char32_t* utf32_output) {
   10|  1.80k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|  1.80k|  size_t pos = 0;
   12|  1.80k|  char32_t* start{utf32_output};
   13|  14.9k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 13.1k, False: 1.80k]
  ------------------
   14|       |    // try to convert the next block of 8 ASCII bytes
   15|  13.1k|    if (pos + 8 <= len) { // if it is safe to read 8 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 7.17k, False: 5.98k]
  ------------------
   16|  7.17k|      uint64_t v;
   17|  7.17k|      ::memcpy(&v, data + pos, sizeof(uint64_t));
   18|  7.17k|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (18:11): [True: 6.63k, False: 538]
  ------------------
   19|  6.63k|        size_t final_pos = pos + 8;
   20|  59.6k|        while(pos < final_pos) {
  ------------------
  |  Branch (20:15): [True: 53.0k, False: 6.63k]
  ------------------
   21|  53.0k|          *utf32_output++ = char32_t(buf[pos]);
   22|  53.0k|          pos++;
   23|  53.0k|        }
   24|  6.63k|        continue;
   25|  6.63k|      }
   26|  7.17k|    }
   27|  6.52k|    uint8_t leading_byte = data[pos]; // leading byte
   28|  6.52k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (28:9): [True: 6.20k, False: 311]
  ------------------
   29|       |      // converting one ASCII byte !!!
   30|  6.20k|      *utf32_output++ = char32_t(leading_byte);
   31|  6.20k|      pos++;
   32|  6.20k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (32:16): [True: 154, False: 157]
  ------------------
   33|       |      // We have a two-byte UTF-8
   34|    154|      if(pos + 1 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (34:10): [True: 0, False: 154]
  ------------------
   35|    154|      *utf32_output++ = char32_t(((leading_byte &0b00011111) << 6) | (data[pos + 1] &0b00111111));
   36|    154|      pos += 2;
   37|    157|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (37:16): [True: 88, False: 69]
  ------------------
   38|       |      // We have a three-byte UTF-8
   39|     88|      if(pos + 2 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (39:10): [True: 0, False: 88]
  ------------------
   40|     88|      *utf32_output++ = char32_t(((leading_byte &0b00001111) << 12) | ((data[pos + 1] &0b00111111) << 6) | (data[pos + 2] &0b00111111));
   41|     88|      pos += 3;
   42|     88|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (42:16): [True: 69, False: 0]
  ------------------
   43|       |      // we have a 4-byte UTF-8 word.
   44|     69|      if(pos + 3 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (44:10): [True: 0, False: 69]
  ------------------
   45|     69|      uint32_t code_word = ((leading_byte & 0b00000111) << 18 )| ((data[pos + 1] &0b00111111) << 12)
   46|     69|                           | ((data[pos + 2] &0b00111111) << 6) | (data[pos + 3] &0b00111111);
   47|     69|      *utf32_output++ = char32_t(code_word);
   48|     69|      pos += 4;
   49|     69|    } else {
   50|       |      // we may have a continuation but we do not do error checking
   51|      0|      return 0;
   52|      0|    }
   53|  6.52k|  }
   54|  1.80k|  return utf32_output - start;
   55|  1.80k|}

_ZN7simdutf8fallback14implementationC2Ev:
   19|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_110count_onesEm:
   14|  5.51k|simdutf_really_inline long long int count_ones(uint64_t input_num) {
   15|  5.51k|  return _popcnt64(input_num);
   16|  5.51k|}

_ZN7simdutf7haswell14implementationC2Ev:
   18|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ev:
  195|  1.74M|    simdutf_really_inline simd8() : base8_numeric<uint8_t>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2Ev:
  112|  1.74M|    simdutf_really_inline base8_numeric() : base8<T>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2Ev:
   61|  1.74M|    simdutf_really_inline base8() : base<simd8<T>>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2Ev:
   16|  1.74M|    simdutf_really_inline base() : value{__m256i()} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhEC2EPKh:
  276|   588k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE4loadEPKh:
   96|  1.17M|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  1.17M|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  1.17M|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EDv4_x:
  196|  3.99M|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<uint8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2EDv4_x:
  113|  3.99M|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2EDv4_x:
   62|  3.99M|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2EDv4_x:
   19|  3.99M|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhE9reduce_orEv:
  295|   588k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|   588k|      return this->chunks[0] | this->chunks[1];
  297|   588k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEorES5_:
   43|  1.76M|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRKDv4_xEv:
   21|  7.29M|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE8is_asciiEv:
  248|   588k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEoRES5_:
   47|  1.17M|    simdutf_really_inline Child& operator|=(const Child other) { auto this_cast = static_cast<Child*>(this); *this_cast = *this_cast | other; return *this_cast; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi1EEENS4_IhEES8_:
   70|  3.62k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  3.62k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  3.62k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE3shrILi4EEES4_v:
  254|  7.24k|    simdutf_really_inline simd8<uint8_t> shr() const { return simd8<uint8_t>(_mm256_srli_epi16(*this, N)) & uint8_t(0xFFu >> N); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_:
  138|  10.8k|        L replace12, L replace13, L replace14, L replace15) const {
  139|  10.8k|      return lookup_16(simd8<L>::repeat_16(
  140|  10.8k|        replace0,  replace1,  replace2,  replace3,
  141|  10.8k|        replace4,  replace5,  replace6,  replace7,
  142|  10.8k|        replace8,  replace9,  replace10, replace11,
  143|  10.8k|        replace12, replace13, replace14, replace15
  144|  10.8k|      ));
  145|  10.8k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES8_:
  129|  10.8k|    simdutf_really_inline simd8<L> lookup_16(simd8<L> lookup_table) const {
  130|  10.8k|      return _mm256_shuffle_epi8(lookup_table, *this);
  131|  10.8k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRDv4_xEv:
   22|  14.4k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE9repeat_16Ehhhhhhhhhhhhhhhh:
  217|  10.8k|    ) {
  218|  10.8k|      return simd8<uint8_t>(
  219|  10.8k|        v0, v1, v2, v3, v4, v5, v6, v7,
  220|  10.8k|        v8, v9, v10,v11,v12,v13,v14,v15,
  221|  10.8k|        v0, v1, v2, v3, v4, v5, v6, v7,
  222|  10.8k|        v8, v9, v10,v11,v12,v13,v14,v15
  223|  10.8k|      );
  224|  10.8k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ehhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh:
  212|  10.8k|    )) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEanES5_:
   44|  21.7k|    simdutf_really_inline Child operator&(const Child other) const { return _mm256_and_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Eh:
  198|   972k|    simdutf_really_inline simd8(uint8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE5splatEh:
   94|   972k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi2EEENS4_IhEES8_:
   70|  3.62k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  3.62k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  3.62k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi3EEENS4_IhEES8_:
   70|  3.62k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  3.62k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  3.62k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE14saturating_subES4_:
  229|  9.05k|    simdutf_really_inline simd8<uint8_t> saturating_sub(const simd8<uint8_t> other) const { return _mm256_subs_epu8(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2EDv4_x:
  153|  40.9k|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<int8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaEC2EDv4_x:
  113|  40.9k|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IaNS2_5simd8IbEEEC2EDv4_x:
   62|  40.9k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEC2EDv4_x:
   19|  40.9k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEgtES4_:
  188|  14.6k|    simdutf_really_inline simd8<bool> operator>(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEcvRKDv4_xEv:
   21|  84.6k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IbEC2EDv4_x:
   81|  16.5k|    simdutf_really_inline simd8<bool>(const __m256i _value) : base8<bool>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IbNS2_5simd8IbEEEC2EDv4_x:
   62|  16.5k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEC2EDv4_x:
   19|  16.5k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2Ea:
  156|  3.62k|    simdutf_really_inline simd8(int8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE5splatEa:
   94|  10.1k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRDv4_xEv:
   22|  3.62k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEeoES5_:
   45|  3.62k|    simdutf_really_inline Child operator^(const Child other) const { return _mm256_xor_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EPKh:
  200|  1.81k|    simdutf_really_inline simd8(const uint8_t values[32]) : simd8(load(values)) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE7gt_bitsES4_:
  235|  1.81k|    simdutf_really_inline simd8<uint8_t> gt_bits(const simd8<uint8_t> other) const { return this->saturating_sub(other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21any_bits_set_anywhereEv:
  250|  1.53M|    simdutf_really_inline bool any_bits_set_anywhere() const { return !bits_not_set_anywhere(); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21bits_not_set_anywhereEv:
  249|  1.53M|    simdutf_really_inline bool bits_not_set_anywhere() const { return _mm256_testz_si256(*this, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaEC2EPKa:
  276|  10.9k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE4loadEPKa:
   96|  21.8k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  21.8k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  21.8k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE8is_asciiEv:
  299|  5.38k|    simdutf_really_inline bool is_ascii() const {
  300|  5.38k|      return this->reduce_or().is_ascii();
  301|  5.38k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE9reduce_orEv:
  295|  5.38k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|  5.38k|      return this->chunks[0] | this->chunks[1];
  297|  5.38k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEorES5_:
   43|  5.38k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaE8is_asciiEv:
  184|  5.38k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2ltEa:
  362|    963|    simdutf_really_inline uint64_t lt(const T m) const {
  363|    963|      const simd8<T> mask = simd8<T>::splat(m);
  364|    963|      return  simd8x64<bool>(
  365|    963|        this->chunks[0] < mask,
  366|    963|        this->chunks[1] < mask
  367|    963|      ).to_bitmask();
  368|    963|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEltES4_:
  189|  1.92k|    simdutf_really_inline simd8<bool> operator<(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(other, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbEC2ENS2_5simd8IbEES6_:
  275|  6.48k|    simdutf_really_inline simd8x64(const simd8<T> chunk0, const simd8<T> chunk1) : chunks{chunk0, chunk1} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbE10to_bitmaskEv:
  283|  6.48k|    simdutf_really_inline uint64_t to_bitmask() const {
  284|  6.48k|      uint64_t r_lo = uint32_t(this->chunks[0].to_bitmask());
  285|  6.48k|      uint64_t r_hi =                       this->chunks[1].to_bitmask();
  286|  6.48k|      return r_lo | (r_hi << 32);
  287|  6.48k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IbE10to_bitmaskEv:
   85|  12.9k|    simdutf_really_inline uint32_t to_bitmask() const { return uint32_t(_mm256_movemask_epi8(*this)); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRKDv4_xEv:
   21|  12.9k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE20store_ascii_as_utf32EPDi:
  309|  4.41k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
  310|  4.41k|      this->chunks[0].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*0);
  311|  4.41k|      this->chunks[1].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*1);
  312|  4.41k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEE20store_ascii_as_utf32EPDi:
   36|  8.83k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
   37|  8.83k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(*this)));
   38|  8.83k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr+8), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(_mm256_srli_si256(*this,8))));
   39|  8.83k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 16), _mm256_cvtepu8_epi32(_mm256_extractf128_si256(*this,1)));
   40|  8.83k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 24), _mm256_cvtepu8_epi32(_mm_srli_si128(_mm256_extractf128_si256(*this,1),8)));
   41|  8.83k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2gtEa:
  370|  5.51k|    simdutf_really_inline uint64_t gt(const T m) const {
  371|  5.51k|      const simd8<T> mask = simd8<T>::splat(m);
  372|  5.51k|      return  simd8x64<bool>(
  373|  5.51k|        this->chunks[0] > mask,
  374|  5.51k|        this->chunks[1] > mask
  375|  5.51k|      ).to_bitmask();
  376|  5.51k|    }

_ZN7simdutf7icelake14implementationC2Ev:
   18|      1|      internal::instruction_set::AVX2 | internal::instruction_set::BMI1 | internal::instruction_set::BMI2 | internal::instruction_set::AVX512BW | internal::instruction_set::AVX512CD | internal::instruction_set::AVX512VL | internal::instruction_set::AVX512VBMI2 | internal::instruction_set::AVX512VPOPCNTDQ ) {}

_ZN7simdutf8westmere14implementationC2Ev:
   16|      1|  simdutf_really_inline implementation() : simdutf::implementation("westmere", "Intel/AMD SSE4.2", internal::instruction_set::SSE42) {}

_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJaEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   732k|{
  619|   732k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   732k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   732k|    static_cast<    \
  |  |  247|   732k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   732k|}
_ZN3scn2v26detail20check_scan_arg_typesIJaEEEvv:
  386|  1.79M|{
  387|  1.79M|    static_assert(
  388|  1.79M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.79M|        "Scan argument types must be default constructible");
  390|  1.79M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.79M|                  "Scan argument types must be Destructible");
  392|  1.79M|    static_assert(
  393|  1.79M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.79M|        "Scan argument types must not be references");
  395|  1.79M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEEC2EONSt3__15tupleIJaEEE:
  563|   732k|    {
  564|   732k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEE15make_data_arrayIJaEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   732k|    {
  574|   732k|        return {
  575|   732k|            detail::make_arg<base::is_packed, Context,
  576|   732k|                             detail::mapped_type_constant<
  577|   732k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   732k|                args)...};
  579|   732k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE1EavEENS1_9arg_valueERT2_:
  414|   732k|{
  415|   732k|    return make_value<Context>(value);
  416|   732k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEaEEDaRT0_:
  371|   809k|{
  372|   809k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   809k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   809k|                                  needs_context_tag>) {
  376|   809k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   809k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   809k|    }
  378|   809k|    else {
  379|   809k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   809k|            value, context_tag<Context>{}));
  381|   809k|    }
  382|   809k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERa:
  216|   809k|    {                                                                        \
  217|   809k|        return val;                                                          \
  218|   809k|    }
_ZN3scn2v26detail15make_value_implIRaEEDaOT_:
  340|  1.79M|{
  341|  1.79M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.79M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.79M|    constexpr bool scannable_char =
  345|  1.79M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.79M|    static_assert(scannable_char,
  347|  1.79M|                  "Cannot scan an argument of an unsupported character "
  348|  1.79M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.79M|    constexpr bool scannable_const =
  351|  1.79M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.79M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.79M|    constexpr bool scannable_disabled =
  355|  1.79M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.79M|    static_assert(scannable_disabled,
  357|  1.79M|                  "Cannot scan an argument that has been disabled by "
  358|  1.79M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.79M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.79M|    static_assert(
  362|  1.79M|        scannable,
  363|  1.79M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.79M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.79M|    return arg_value{arg};
  367|  1.79M|}
_ZN3scn2v26detail9arg_valueC2IaEERT_:
  159|  1.79M|    {
  160|  1.79M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJaEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   732k|    {
  647|   732k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPNS0_6detail9arg_valueE:
  693|  5.27M|    {
  694|  5.27M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEE4argsEv:
  553|   640k|    {
  554|   640k|        return m_args;
  555|   640k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEaEENS0_14basic_scan_argIT_EERT0_:
  399|  77.2k|{
  400|  77.2k|    check_scan_arg_types<T>();
  401|       |
  402|  77.2k|    basic_scan_arg<Context> arg;
  403|  77.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  77.2k|    arg.m_value = make_value<Context>(value);
  405|  77.2k|    return arg;
  406|  77.2k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
  476|  5.79M|    constexpr basic_scan_arg() = default;
_ZN3scn2v26detail9arg_valueC2Ev:
  155|  12.6M|        arg_value() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJhEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   714k|{
  619|   714k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   714k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   714k|    static_cast<    \
  |  |  247|   714k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   714k|}
_ZN3scn2v26detail20check_scan_arg_typesIJhEEEvv:
  386|  1.76M|{
  387|  1.76M|    static_assert(
  388|  1.76M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.76M|        "Scan argument types must be default constructible");
  390|  1.76M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.76M|                  "Scan argument types must be Destructible");
  392|  1.76M|    static_assert(
  393|  1.76M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.76M|        "Scan argument types must not be references");
  395|  1.76M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEEC2EONSt3__15tupleIJhEEE:
  563|   714k|    {
  564|   714k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEE15make_data_arrayIJhEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   714k|    {
  574|   714k|        return {
  575|   714k|            detail::make_arg<base::is_packed, Context,
  576|   714k|                             detail::mapped_type_constant<
  577|   714k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   714k|                args)...};
  579|   714k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE6EhvEENS1_9arg_valueERT2_:
  414|   714k|{
  415|   714k|    return make_value<Context>(value);
  416|   714k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEhEEDaRT0_:
  371|   786k|{
  372|   786k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   786k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   786k|                                  needs_context_tag>) {
  376|   786k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   786k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   786k|    }
  378|   786k|    else {
  379|   786k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   786k|            value, context_tag<Context>{}));
  381|   786k|    }
  382|   786k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERh:
  216|   786k|    {                                                                        \
  217|   786k|        return val;                                                          \
  218|   786k|    }
_ZN3scn2v26detail15make_value_implIRhEEDaOT_:
  340|  1.76M|{
  341|  1.76M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.76M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.76M|    constexpr bool scannable_char =
  345|  1.76M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.76M|    static_assert(scannable_char,
  347|  1.76M|                  "Cannot scan an argument of an unsupported character "
  348|  1.76M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.76M|    constexpr bool scannable_const =
  351|  1.76M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.76M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.76M|    constexpr bool scannable_disabled =
  355|  1.76M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.76M|    static_assert(scannable_disabled,
  357|  1.76M|                  "Cannot scan an argument that has been disabled by "
  358|  1.76M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.76M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.76M|    static_assert(
  362|  1.76M|        scannable,
  363|  1.76M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.76M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.76M|    return arg_value{arg};
  367|  1.76M|}
_ZN3scn2v26detail9arg_valueC2IhEERT_:
  159|  1.76M|    {
  160|  1.76M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJhEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   714k|    {
  647|   714k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEE4argsEv:
  553|   622k|    {
  554|   622k|        return m_args;
  555|   622k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEhEENS0_14basic_scan_argIT_EERT0_:
  399|  72.5k|{
  400|  72.5k|    check_scan_arg_types<T>();
  401|       |
  402|  72.5k|    basic_scan_arg<Context> arg;
  403|  72.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  72.5k|    arg.m_value = make_value<Context>(value);
  405|  72.5k|    return arg;
  406|  72.5k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.01M|{
  619|  1.01M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.01M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.01M|    static_cast<    \
  |  |  247|  1.01M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.01M|}
_ZN3scn2v26detail20check_scan_arg_typesIJiEEEvv:
  386|  2.38M|{
  387|  2.38M|    static_assert(
  388|  2.38M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  2.38M|        "Scan argument types must be default constructible");
  390|  2.38M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  2.38M|                  "Scan argument types must be Destructible");
  392|  2.38M|    static_assert(
  393|  2.38M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  2.38M|        "Scan argument types must not be references");
  395|  2.38M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2EONSt3__15tupleIJiEEE:
  563|  1.01M|    {
  564|  1.01M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEE15make_data_arrayIJiEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.01M|    {
  574|  1.01M|        return {
  575|  1.01M|            detail::make_arg<base::is_packed, Context,
  576|  1.01M|                             detail::mapped_type_constant<
  577|  1.01M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.01M|                args)...};
  579|  1.01M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEENS1_9arg_valueERT2_:
  414|  1.01M|{
  415|  1.01M|    return make_value<Context>(value);
  416|  1.01M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
  371|  1.11M|{
  372|  1.11M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.11M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.11M|                                  needs_context_tag>) {
  376|  1.11M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.11M|    }
  378|  1.11M|    else {
  379|  1.11M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.11M|            value, context_tag<Context>{}));
  381|  1.11M|    }
  382|  1.11M|}
_ZN3scn2v26detail10arg_mapperIcE3mapERi:
  216|  1.11M|    {                                                                        \
  217|  1.11M|        return val;                                                          \
  218|  1.11M|    }
_ZN3scn2v26detail15make_value_implIRiEEDaOT_:
  340|  2.38M|{
  341|  2.38M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  2.38M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  2.38M|    constexpr bool scannable_char =
  345|  2.38M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  2.38M|    static_assert(scannable_char,
  347|  2.38M|                  "Cannot scan an argument of an unsupported character "
  348|  2.38M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  2.38M|    constexpr bool scannable_const =
  351|  2.38M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  2.38M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  2.38M|    constexpr bool scannable_disabled =
  355|  2.38M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  2.38M|    static_assert(scannable_disabled,
  357|  2.38M|                  "Cannot scan an argument that has been disabled by "
  358|  2.38M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  2.38M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  2.38M|    static_assert(
  362|  2.38M|        scannable,
  363|  2.38M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  2.38M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  2.38M|    return arg_value{arg};
  367|  2.38M|}
_ZN3scn2v26detail9arg_valueC2IiEERT_:
  159|  2.38M|    {
  160|  2.38M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.01M|    {
  647|  1.01M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
  553|   923k|    {
  554|   923k|        return m_args;
  555|   923k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEiEENS0_14basic_scan_argIT_EERT0_:
  399|  97.6k|{
  400|  97.6k|    check_scan_arg_types<T>();
  401|       |
  402|  97.6k|    basic_scan_arg<Context> arg;
  403|  97.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  97.6k|    arg.m_value = make_value<Context>(value);
  405|  97.6k|    return arg;
  406|  97.6k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   854k|{
  619|   854k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   854k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   854k|    static_cast<    \
  |  |  247|   854k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   854k|}
_ZN3scn2v26detail20check_scan_arg_typesIJjEEEvv:
  386|  2.06M|{
  387|  2.06M|    static_assert(
  388|  2.06M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  2.06M|        "Scan argument types must be default constructible");
  390|  2.06M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  2.06M|                  "Scan argument types must be Destructible");
  392|  2.06M|    static_assert(
  393|  2.06M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  2.06M|        "Scan argument types must not be references");
  395|  2.06M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2EONSt3__15tupleIJjEEE:
  563|   854k|    {
  564|   854k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEE15make_data_arrayIJjEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   854k|    {
  574|   854k|        return {
  575|   854k|            detail::make_arg<base::is_packed, Context,
  576|   854k|                             detail::mapped_type_constant<
  577|   854k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   854k|                args)...};
  579|   854k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEENS1_9arg_valueERT2_:
  414|   854k|{
  415|   854k|    return make_value<Context>(value);
  416|   854k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
  371|   937k|{
  372|   937k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   937k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   937k|                                  needs_context_tag>) {
  376|   937k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   937k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   937k|    }
  378|   937k|    else {
  379|   937k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   937k|            value, context_tag<Context>{}));
  381|   937k|    }
  382|   937k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERj:
  216|   937k|    {                                                                        \
  217|   937k|        return val;                                                          \
  218|   937k|    }
_ZN3scn2v26detail15make_value_implIRjEEDaOT_:
  340|  2.06M|{
  341|  2.06M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  2.06M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  2.06M|    constexpr bool scannable_char =
  345|  2.06M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  2.06M|    static_assert(scannable_char,
  347|  2.06M|                  "Cannot scan an argument of an unsupported character "
  348|  2.06M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  2.06M|    constexpr bool scannable_const =
  351|  2.06M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  2.06M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  2.06M|    constexpr bool scannable_disabled =
  355|  2.06M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  2.06M|    static_assert(scannable_disabled,
  357|  2.06M|                  "Cannot scan an argument that has been disabled by "
  358|  2.06M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  2.06M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  2.06M|    static_assert(
  362|  2.06M|        scannable,
  363|  2.06M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  2.06M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  2.06M|    return arg_value{arg};
  367|  2.06M|}
_ZN3scn2v26detail9arg_valueC2IjEERT_:
  159|  2.06M|    {
  160|  2.06M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   854k|    {
  647|   854k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
  553|   762k|    {
  554|   762k|        return m_args;
  555|   762k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEjEENS0_14basic_scan_argIT_EERT0_:
  399|  83.0k|{
  400|  83.0k|    check_scan_arg_types<T>();
  401|       |
  402|  83.0k|    basic_scan_arg<Context> arg;
  403|  83.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  83.0k|    arg.m_value = make_value<Context>(value);
  405|  83.0k|    return arg;
  406|  83.0k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJxEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.07M|{
  619|  1.07M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.07M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.07M|    static_cast<    \
  |  |  247|  1.07M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.07M|}
_ZN3scn2v26detail20check_scan_arg_typesIJxEEEvv:
  386|  2.50M|{
  387|  2.50M|    static_assert(
  388|  2.50M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  2.50M|        "Scan argument types must be default constructible");
  390|  2.50M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  2.50M|                  "Scan argument types must be Destructible");
  392|  2.50M|    static_assert(
  393|  2.50M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  2.50M|        "Scan argument types must not be references");
  395|  2.50M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEEC2EONSt3__15tupleIJxEEE:
  563|  1.07M|    {
  564|  1.07M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEE15make_data_arrayIJxEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.07M|    {
  574|  1.07M|        return {
  575|  1.07M|            detail::make_arg<base::is_packed, Context,
  576|  1.07M|                             detail::mapped_type_constant<
  577|  1.07M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.07M|                args)...};
  579|  1.07M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE5ExvEENS1_9arg_valueERT2_:
  414|  1.07M|{
  415|  1.07M|    return make_value<Context>(value);
  416|  1.07M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEExEEDaRT0_:
  371|  1.17M|{
  372|  1.17M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.17M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.17M|                                  needs_context_tag>) {
  376|  1.17M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.17M|    }
  378|  1.17M|    else {
  379|  1.17M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.17M|            value, context_tag<Context>{}));
  381|  1.17M|    }
  382|  1.17M|}
_ZN3scn2v26detail10arg_mapperIcE3mapERx:
  216|  1.17M|    {                                                                        \
  217|  1.17M|        return val;                                                          \
  218|  1.17M|    }
_ZN3scn2v26detail15make_value_implIRxEEDaOT_:
  340|  2.50M|{
  341|  2.50M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  2.50M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  2.50M|    constexpr bool scannable_char =
  345|  2.50M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  2.50M|    static_assert(scannable_char,
  347|  2.50M|                  "Cannot scan an argument of an unsupported character "
  348|  2.50M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  2.50M|    constexpr bool scannable_const =
  351|  2.50M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  2.50M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  2.50M|    constexpr bool scannable_disabled =
  355|  2.50M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  2.50M|    static_assert(scannable_disabled,
  357|  2.50M|                  "Cannot scan an argument that has been disabled by "
  358|  2.50M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  2.50M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  2.50M|    static_assert(
  362|  2.50M|        scannable,
  363|  2.50M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  2.50M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  2.50M|    return arg_value{arg};
  367|  2.50M|}
_ZN3scn2v26detail9arg_valueC2IxEERT_:
  159|  2.50M|    {
  160|  2.50M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJxEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.07M|    {
  647|  1.07M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEE4argsEv:
  553|   982k|    {
  554|   982k|        return m_args;
  555|   982k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEExEENS0_14basic_scan_argIT_EERT0_:
  399|   103k|{
  400|   103k|    check_scan_arg_types<T>();
  401|       |
  402|   103k|    basic_scan_arg<Context> arg;
  403|   103k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|   103k|    arg.m_value = make_value<Context>(value);
  405|   103k|    return arg;
  406|   103k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJyEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   883k|{
  619|   883k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   883k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   883k|    static_cast<    \
  |  |  247|   883k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   883k|}
_ZN3scn2v26detail20check_scan_arg_typesIJyEEEvv:
  386|  2.12M|{
  387|  2.12M|    static_assert(
  388|  2.12M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  2.12M|        "Scan argument types must be default constructible");
  390|  2.12M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  2.12M|                  "Scan argument types must be Destructible");
  392|  2.12M|    static_assert(
  393|  2.12M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  2.12M|        "Scan argument types must not be references");
  395|  2.12M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEEC2EONSt3__15tupleIJyEEE:
  563|   883k|    {
  564|   883k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEE15make_data_arrayIJyEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   883k|    {
  574|   883k|        return {
  575|   883k|            detail::make_arg<base::is_packed, Context,
  576|   883k|                             detail::mapped_type_constant<
  577|   883k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   883k|                args)...};
  579|   883k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE10EyvEENS1_9arg_valueERT2_:
  414|   883k|{
  415|   883k|    return make_value<Context>(value);
  416|   883k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEyEEDaRT0_:
  371|   968k|{
  372|   968k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   968k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   968k|                                  needs_context_tag>) {
  376|   968k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   968k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   968k|    }
  378|   968k|    else {
  379|   968k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   968k|            value, context_tag<Context>{}));
  381|   968k|    }
  382|   968k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERy:
  216|   968k|    {                                                                        \
  217|   968k|        return val;                                                          \
  218|   968k|    }
_ZN3scn2v26detail15make_value_implIRyEEDaOT_:
  340|  2.12M|{
  341|  2.12M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  2.12M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  2.12M|    constexpr bool scannable_char =
  345|  2.12M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  2.12M|    static_assert(scannable_char,
  347|  2.12M|                  "Cannot scan an argument of an unsupported character "
  348|  2.12M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  2.12M|    constexpr bool scannable_const =
  351|  2.12M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  2.12M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  2.12M|    constexpr bool scannable_disabled =
  355|  2.12M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  2.12M|    static_assert(scannable_disabled,
  357|  2.12M|                  "Cannot scan an argument that has been disabled by "
  358|  2.12M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  2.12M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  2.12M|    static_assert(
  362|  2.12M|        scannable,
  363|  2.12M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  2.12M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  2.12M|    return arg_value{arg};
  367|  2.12M|}
_ZN3scn2v26detail9arg_valueC2IyEERT_:
  159|  2.12M|    {
  160|  2.12M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJyEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   883k|    {
  647|   883k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEE4argsEv:
  553|   791k|    {
  554|   791k|        return m_args;
  555|   791k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEyEENS0_14basic_scan_argIT_EERT0_:
  399|  85.3k|{
  400|  85.3k|    check_scan_arg_types<T>();
  401|       |
  402|  85.3k|    basic_scan_arg<Context> arg;
  403|  85.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  85.3k|    arg.m_value = make_value<Context>(value);
  405|  85.3k|    return arg;
  406|  85.3k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJaEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   907k|{
  619|   907k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   907k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   907k|    static_cast<    \
  |  |  247|   907k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   907k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEEC2EONSt3__15tupleIJaEEE:
  563|   907k|    {
  564|   907k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEE15make_data_arrayIJaEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   907k|    {
  574|   907k|        return {
  575|   907k|            detail::make_arg<base::is_packed, Context,
  576|   907k|                             detail::mapped_type_constant<
  577|   907k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   907k|                args)...};
  579|   907k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE1EavEENS1_9arg_valueERT2_:
  414|   907k|{
  415|   907k|    return make_value<Context>(value);
  416|   907k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEaEEDaRT0_:
  371|   990k|{
  372|   990k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   990k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   990k|                                  needs_context_tag>) {
  376|   990k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   990k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   990k|    }
  378|   990k|    else {
  379|   990k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   990k|            value, context_tag<Context>{}));
  381|   990k|    }
  382|   990k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERa:
  216|   990k|    {                                                                        \
  217|   990k|        return val;                                                          \
  218|   990k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJaEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   907k|    {
  647|   907k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPNS0_6detail9arg_valueE:
  693|  6.31M|    {
  694|  6.31M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEE4argsEv:
  553|   631k|    {
  554|   631k|        return m_args;
  555|   631k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEaEENS0_14basic_scan_argIT_EERT0_:
  399|  83.0k|{
  400|  83.0k|    check_scan_arg_types<T>();
  401|       |
  402|  83.0k|    basic_scan_arg<Context> arg;
  403|  83.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  83.0k|    arg.m_value = make_value<Context>(value);
  405|  83.0k|    return arg;
  406|  83.0k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
  476|  6.86M|    constexpr basic_scan_arg() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJhEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   901k|{
  619|   901k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   901k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   901k|    static_cast<    \
  |  |  247|   901k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   901k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEEC2EONSt3__15tupleIJhEEE:
  563|   901k|    {
  564|   901k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEE15make_data_arrayIJhEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   901k|    {
  574|   901k|        return {
  575|   901k|            detail::make_arg<base::is_packed, Context,
  576|   901k|                             detail::mapped_type_constant<
  577|   901k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   901k|                args)...};
  579|   901k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE6EhvEENS1_9arg_valueERT2_:
  414|   901k|{
  415|   901k|    return make_value<Context>(value);
  416|   901k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEhEEDaRT0_:
  371|   982k|{
  372|   982k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   982k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   982k|                                  needs_context_tag>) {
  376|   982k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   982k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   982k|    }
  378|   982k|    else {
  379|   982k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   982k|            value, context_tag<Context>{}));
  381|   982k|    }
  382|   982k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERh:
  216|   982k|    {                                                                        \
  217|   982k|        return val;                                                          \
  218|   982k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJhEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   901k|    {
  647|   901k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEE4argsEv:
  553|   626k|    {
  554|   626k|        return m_args;
  555|   626k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEhEENS0_14basic_scan_argIT_EERT0_:
  399|  80.0k|{
  400|  80.0k|    check_scan_arg_types<T>();
  401|       |
  402|  80.0k|    basic_scan_arg<Context> arg;
  403|  80.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  80.0k|    arg.m_value = make_value<Context>(value);
  405|  80.0k|    return arg;
  406|  80.0k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.17M|{
  619|  1.17M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.17M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.17M|    static_cast<    \
  |  |  247|  1.17M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.17M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2EONSt3__15tupleIJiEEE:
  563|  1.17M|    {
  564|  1.17M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEE15make_data_arrayIJiEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.17M|    {
  574|  1.17M|        return {
  575|  1.17M|            detail::make_arg<base::is_packed, Context,
  576|  1.17M|                             detail::mapped_type_constant<
  577|  1.17M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.17M|                args)...};
  579|  1.17M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEENS1_9arg_valueERT2_:
  414|  1.17M|{
  415|  1.17M|    return make_value<Context>(value);
  416|  1.17M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
  371|  1.27M|{
  372|  1.27M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.27M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.27M|                                  needs_context_tag>) {
  376|  1.27M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.27M|    }
  378|  1.27M|    else {
  379|  1.27M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.27M|            value, context_tag<Context>{}));
  381|  1.27M|    }
  382|  1.27M|}
_ZN3scn2v26detail10arg_mapperIwE3mapERi:
  216|  1.27M|    {                                                                        \
  217|  1.27M|        return val;                                                          \
  218|  1.27M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.17M|    {
  647|  1.17M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
  553|   895k|    {
  554|   895k|        return m_args;
  555|   895k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEiEENS0_14basic_scan_argIT_EERT0_:
  399|   101k|{
  400|   101k|    check_scan_arg_types<T>();
  401|       |
  402|   101k|    basic_scan_arg<Context> arg;
  403|   101k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|   101k|    arg.m_value = make_value<Context>(value);
  405|   101k|    return arg;
  406|   101k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.04M|{
  619|  1.04M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.04M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.04M|    static_cast<    \
  |  |  247|  1.04M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.04M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2EONSt3__15tupleIJjEEE:
  563|  1.04M|    {
  564|  1.04M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEE15make_data_arrayIJjEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.04M|    {
  574|  1.04M|        return {
  575|  1.04M|            detail::make_arg<base::is_packed, Context,
  576|  1.04M|                             detail::mapped_type_constant<
  577|  1.04M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.04M|                args)...};
  579|  1.04M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEENS1_9arg_valueERT2_:
  414|  1.04M|{
  415|  1.04M|    return make_value<Context>(value);
  416|  1.04M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
  371|  1.13M|{
  372|  1.13M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.13M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.13M|                                  needs_context_tag>) {
  376|  1.13M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.13M|    }
  378|  1.13M|    else {
  379|  1.13M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.13M|            value, context_tag<Context>{}));
  381|  1.13M|    }
  382|  1.13M|}
_ZN3scn2v26detail10arg_mapperIwE3mapERj:
  216|  1.13M|    {                                                                        \
  217|  1.13M|        return val;                                                          \
  218|  1.13M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.04M|    {
  647|  1.04M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
  553|   765k|    {
  554|   765k|        return m_args;
  555|   765k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEjEENS0_14basic_scan_argIT_EERT0_:
  399|  89.3k|{
  400|  89.3k|    check_scan_arg_types<T>();
  401|       |
  402|  89.3k|    basic_scan_arg<Context> arg;
  403|  89.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  89.3k|    arg.m_value = make_value<Context>(value);
  405|  89.3k|    return arg;
  406|  89.3k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJxEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.22M|{
  619|  1.22M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.22M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.22M|    static_cast<    \
  |  |  247|  1.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.22M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEEC2EONSt3__15tupleIJxEEE:
  563|  1.22M|    {
  564|  1.22M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEE15make_data_arrayIJxEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.22M|    {
  574|  1.22M|        return {
  575|  1.22M|            detail::make_arg<base::is_packed, Context,
  576|  1.22M|                             detail::mapped_type_constant<
  577|  1.22M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.22M|                args)...};
  579|  1.22M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE5ExvEENS1_9arg_valueERT2_:
  414|  1.22M|{
  415|  1.22M|    return make_value<Context>(value);
  416|  1.22M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEExEEDaRT0_:
  371|  1.33M|{
  372|  1.33M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.33M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.33M|                                  needs_context_tag>) {
  376|  1.33M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.33M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.33M|    }
  378|  1.33M|    else {
  379|  1.33M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.33M|            value, context_tag<Context>{}));
  381|  1.33M|    }
  382|  1.33M|}
_ZN3scn2v26detail10arg_mapperIwE3mapERx:
  216|  1.33M|    {                                                                        \
  217|  1.33M|        return val;                                                          \
  218|  1.33M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJxEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.22M|    {
  647|  1.22M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEE4argsEv:
  553|   948k|    {
  554|   948k|        return m_args;
  555|   948k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEExEENS0_14basic_scan_argIT_EERT0_:
  399|   106k|{
  400|   106k|    check_scan_arg_types<T>();
  401|       |
  402|   106k|    basic_scan_arg<Context> arg;
  403|   106k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|   106k|    arg.m_value = make_value<Context>(value);
  405|   106k|    return arg;
  406|   106k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJyEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.06M|{
  619|  1.06M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.06M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.06M|    static_cast<    \
  |  |  247|  1.06M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.06M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEEC2EONSt3__15tupleIJyEEE:
  563|  1.06M|    {
  564|  1.06M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEE15make_data_arrayIJyEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.06M|    {
  574|  1.06M|        return {
  575|  1.06M|            detail::make_arg<base::is_packed, Context,
  576|  1.06M|                             detail::mapped_type_constant<
  577|  1.06M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.06M|                args)...};
  579|  1.06M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE10EyvEENS1_9arg_valueERT2_:
  414|  1.06M|{
  415|  1.06M|    return make_value<Context>(value);
  416|  1.06M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEyEEDaRT0_:
  371|  1.15M|{
  372|  1.15M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.15M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.15M|                                  needs_context_tag>) {
  376|  1.15M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.15M|    }
  378|  1.15M|    else {
  379|  1.15M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.15M|            value, context_tag<Context>{}));
  381|  1.15M|    }
  382|  1.15M|}
_ZN3scn2v26detail10arg_mapperIwE3mapERy:
  216|  1.15M|    {                                                                        \
  217|  1.15M|        return val;                                                          \
  218|  1.15M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJyEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.06M|    {
  647|  1.06M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEE4argsEv:
  553|   791k|    {
  554|   791k|        return m_args;
  555|   791k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEyEENS0_14basic_scan_argIT_EERT0_:
  399|  91.6k|{
  400|  91.6k|    check_scan_arg_types<T>();
  401|       |
  402|  91.6k|    basic_scan_arg<Context> arg;
  403|  91.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  91.6k|    arg.m_value = make_value<Context>(value);
  405|  91.6k|    return arg;
  406|  91.6k|}
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
  681|  5.27M|    {
  682|  5.27M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  5.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.27M]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|  5.27M|        return static_cast<std::size_t>(m_desc &
  687|  5.27M|                                        ((1 << detail::packed_arg_bits) - 1));
  688|  5.27M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
  701|  10.5M|    {
  702|  10.5M|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|  10.5M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
  654|  5.27M|    {
  655|  5.27M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  5.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.27M]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  5.27M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  5.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.27M]
  |  |  ------------------
  ------------------
  663|      0|            return {};
  664|      0|        }
  665|       |
  666|  5.27M|        const auto t = type(id);
  667|  5.27M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  5.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.27M]
  |  |  ------------------
  ------------------
  668|      0|            return {};
  669|      0|        }
  670|       |
  671|  5.27M|        basic_scan_arg<Context> arg;
  672|  5.27M|        arg.m_type = t;
  673|  5.27M|        arg.m_value = m_values[id];
  674|  5.27M|        return arg;
  675|  5.27M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
  706|  5.27M|    {
  707|       |        // First (0th) index is size, types start after that
  708|  5.27M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  5.27M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  5.27M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  5.27M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
  482|  9.86M|    {
  483|  9.86M|        return m_type != detail::arg_type::none_type;
  484|  9.86M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
  487|  8.46M|    {
  488|  8.46M|        return m_type;
  489|  8.46M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
  681|  6.31M|    {
  682|  6.31M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  6.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 6.31M]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|  6.31M|        return static_cast<std::size_t>(m_desc &
  687|  6.31M|                                        ((1 << detail::packed_arg_bits) - 1));
  688|  6.31M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
  701|  12.6M|    {
  702|  12.6M|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|  12.6M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
  654|  6.31M|    {
  655|  6.31M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  6.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 6.31M]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  6.31M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  6.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 6.31M]
  |  |  ------------------
  ------------------
  663|      0|            return {};
  664|      0|        }
  665|       |
  666|  6.31M|        const auto t = type(id);
  667|  6.31M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  6.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 6.31M]
  |  |  ------------------
  ------------------
  668|      0|            return {};
  669|      0|        }
  670|       |
  671|  6.31M|        basic_scan_arg<Context> arg;
  672|  6.31M|        arg.m_type = t;
  673|  6.31M|        arg.m_value = m_values[id];
  674|  6.31M|        return arg;
  675|  6.31M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
  706|  6.31M|    {
  707|       |        // First (0th) index is size, types start after that
  708|  6.31M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  6.31M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  6.31M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  6.31M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
  482|  11.5M|    {
  483|  11.5M|        return m_type != detail::arg_type::none_type;
  484|  11.5M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
  487|  10.4M|    {
  488|  10.4M|        return m_type;
  489|  10.4M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
  634|   519k|    constexpr basic_scan_args() = default;
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
  634|   552k|    constexpr basic_scan_args() = default;

_ZN3scn2v218basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|   441k|    {
  109|   441k|    }
_ZN3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
   59|  4.23M|    {
   60|  4.23M|    }
_ZNK3scn2v218basic_scan_contextIcE5beginEv:
  123|   992k|    {
  124|   992k|        return m_current;
  125|   992k|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
   42|  4.23M|    {
   43|  4.23M|        return m_args.get(id);
   44|  4.23M|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
   52|  4.06M|    {
   53|  4.06M|        return m_locale;
   54|  4.06M|    }
_ZNK3scn2v218basic_scan_contextIcE3endEv:
  131|   358k|    {
  132|   358k|        return ranges_std::default_sentinel;
  133|   358k|    }
_ZN3scn2v218basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
  145|   193k|    {
  146|   193k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|   193k|    static_cast<    \
  |  |  247|   193k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  147|   193k|    }
_ZNK3scn2v218basic_scan_contextIcE5rangeEv:
  139|   358k|    {
  140|   358k|        return ranges::subrange{begin(), end()};
  141|   358k|    }
_ZN3scn2v218basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|  1.29M|    {
  109|  1.29M|    }
_ZN3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
   59|  5.21M|    {
   60|  5.21M|    }
_ZNK3scn2v218basic_scan_contextIwE5beginEv:
  123|  2.89M|    {
  124|  2.89M|        return m_current;
  125|  2.89M|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
   42|  5.21M|    {
   43|  5.21M|        return m_args.get(id);
   44|  5.21M|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
   52|  4.71M|    {
   53|  4.71M|        return m_locale;
   54|  4.71M|    }
_ZNK3scn2v218basic_scan_contextIwE3endEv:
  131|  1.04M|    {
  132|  1.04M|        return ranges_std::default_sentinel;
  133|  1.04M|    }
_ZN3scn2v218basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
  145|   551k|    {
  146|   551k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|   551k|    static_cast<    \
  |  |  247|   551k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  147|   551k|    }
_ZNK3scn2v218basic_scan_contextIwE5rangeEv:
  139|  1.04M|    {
  140|  1.04M|        return ranges::subrange{begin(), end()};
  141|  1.04M|    }

_ZN3scn2v210scan_errorC2ENS1_4codeEPKc:
   68|  3.20M|    {
   69|  3.20M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|  3.20M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   70|  3.20M|    }
_ZNK3scn2v210scan_errorcvbEv:
   74|  45.4M|    {
   75|  45.4M|        return m_code == good;
   76|  45.4M|    }
_ZNK3scn2v210scan_error4codeEv:
   85|  1.32M|    {
   86|  1.32M|        return m_code;
   87|  1.32M|    }
_ZN3scn2v2eqENS0_10scan_errorENS1_4codeE:
  110|  1.32M|{
  111|  1.32M|    return a.code() == b;
  112|  1.32M|}
_ZN3scn2v2neENS0_10scan_errorENS1_4codeE:
  115|  1.32M|{
  116|  1.32M|    return !(a == b);
  117|  1.32M|}
_ZN3scn2v210scan_errorC2Ev:
   62|  27.6M|    constexpr scan_error() SCN_NOEXCEPT = default;

_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   649k|    {
  675|   649k|        return m_str;
  676|   649k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  384|  5.27M|{
  385|  5.27M|    return s;
  386|  5.27M|}
_ZN3scn2v26detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
  361|  5.27M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   649k|    {
  671|   649k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   631k|    {
  675|   631k|        return m_str;
  676|   631k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   631k|    {
  671|   631k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   932k|    {
  675|   932k|        return m_str;
  676|   932k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   932k|    {
  671|   932k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   772k|    {
  675|   772k|        return m_str;
  676|   772k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   772k|    {
  671|   772k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   992k|    {
  675|   992k|        return m_str;
  676|   992k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   992k|    {
  671|   992k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   800k|    {
  675|   800k|        return m_str;
  676|   800k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   800k|    {
  671|   800k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  82.7k|    {
  675|  82.7k|        return m_str;
  676|  82.7k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  82.7k|    {
  671|  82.7k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  82.7k|    {
  675|  82.7k|        return m_str;
  676|  82.7k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  82.7k|    {
  671|  82.7k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  82.7k|    {
  675|  82.7k|        return m_str;
  676|  82.7k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  82.7k|    {
  671|  82.7k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  82.7k|    {
  675|  82.7k|        return m_str;
  676|  82.7k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  82.7k|    {
  671|  82.7k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  82.7k|    {
  675|  82.7k|        return m_str;
  676|  82.7k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  82.7k|    {
  671|  82.7k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  82.7k|    {
  675|  82.7k|        return m_str;
  676|  82.7k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  82.7k|    {
  671|  82.7k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   673k|    {
  675|   673k|        return m_str;
  676|   673k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
  389|  6.31M|{
  390|  6.31M|    return s;
  391|  6.31M|}
_ZN3scn2v26detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
  361|  6.31M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   673k|    {
  671|   673k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   667k|    {
  675|   667k|        return m_str;
  676|   667k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   667k|    {
  671|   667k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   923k|    {
  675|   923k|        return m_str;
  676|   923k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   923k|    {
  671|   923k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   793k|    {
  675|   793k|        return m_str;
  676|   793k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   793k|    {
  671|   793k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   975k|    {
  675|   975k|        return m_str;
  676|   975k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   975k|    {
  671|   975k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   819k|    {
  675|   819k|        return m_str;
  676|   819k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   819k|    {
  671|   819k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   234k|    {
  675|   234k|        return m_str;
  676|   234k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   234k|    {
  671|   234k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   234k|    {
  675|   234k|        return m_str;
  676|   234k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   234k|    {
  671|   234k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   248k|    {
  675|   248k|        return m_str;
  676|   248k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   248k|    {
  671|   248k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   248k|    {
  675|   248k|        return m_str;
  676|   248k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   248k|    {
  671|   248k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   248k|    {
  675|   248k|        return m_str;
  676|   248k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   248k|    {
  671|   248k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   248k|    {
  675|   248k|        return m_str;
  676|   248k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   248k|    {
  671|   248k|    }

_ZNK3scn2v26detail12format_specs8get_baseEi:
  195|  8.73M|    {
  196|  8.73M|        SCN_GCC_COMPAT_PUSH
  197|  8.73M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
  198|  8.73M|        switch (type) {
  199|  2.12M|            case presentation_type::none:
  ------------------
  |  Branch (199:13): [True: 2.12M, False: 6.60M]
  ------------------
  200|  4.26M|            case presentation_type::int_generic:
  ------------------
  |  Branch (200:13): [True: 2.13M, False: 6.60M]
  ------------------
  201|  4.26M|                return default_base;
  202|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (202:13): [True: 0, False: 8.73M]
  ------------------
  203|      0|                return arbitrary_base;
  204|       |
  205|   475k|            case presentation_type::int_binary:
  ------------------
  |  Branch (205:13): [True: 475k, False: 8.25M]
  ------------------
  206|   475k|                return 2;
  207|   701k|            case presentation_type::int_octal:
  ------------------
  |  Branch (207:13): [True: 701k, False: 8.03M]
  ------------------
  208|   701k|                return 8;
  209|  1.58M|            case presentation_type::int_decimal:
  ------------------
  |  Branch (209:13): [True: 1.58M, False: 7.14M]
  ------------------
  210|  1.58M|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (210:13): [True: 0, False: 8.73M]
  ------------------
  211|  1.58M|                return 10;
  212|  1.70M|            case presentation_type::int_hex:
  ------------------
  |  Branch (212:13): [True: 1.70M, False: 7.03M]
  ------------------
  213|  1.70M|                return 16;
  214|       |
  215|      0|            default:
  ------------------
  |  Branch (215:13): [True: 0, False: 8.73M]
  ------------------
  216|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  217|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  218|  8.73M|        }
  219|  8.73M|        SCN_GCC_COMPAT_POP
  220|  8.73M|    }
_ZN3scn2v26detail12specs_setterC2ERNS1_12format_specsE:
  232|  9.44M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v26detail12specs_setter12on_localizedEv:
  244|  2.14M|    {
  245|  2.14M|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  126|  2.14M|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (245:23): [Folded - Ignored]
  ------------------
  246|  2.14M|            m_specs.localized = true;
  247|  2.14M|        }
  248|      0|        else {
  249|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
  250|      0|        }
  251|  2.14M|    }
_ZN3scn2v26detail12specs_setter7on_typeENS1_17presentation_typeE:
  259|  6.86M|    {
  260|  6.86M|        m_specs.type = type;
  261|  6.86M|    }
_ZN3scn2v26detail12specs_setter8on_errorEPKc:
  321|   441k|    {
  322|   441k|        SCN_UNLIKELY_ATTR
  323|   441k|        m_error = scan_error{scan_error::invalid_format_string, msg};
  324|   441k|    }
_ZNK3scn2v26detail12specs_settercvbEv:
  332|  9.00M|    {
  333|  9.00M|        return static_cast<bool>(m_error);
  334|  9.00M|    }
_ZN3scn2v26detail25get_category_for_arg_typeENS1_8arg_typeE:
  980|  2.14M|{
  981|  2.14M|    switch (type) {
  982|      0|        case arg_type::none_type:
  ------------------
  |  Branch (982:9): [True: 0, False: 2.14M]
  ------------------
  983|      0|            return arg_type_category::none;
  984|       |
  985|   320k|        case arg_type::schar_type:
  ------------------
  |  Branch (985:9): [True: 320k, False: 1.82M]
  ------------------
  986|   320k|        case arg_type::short_type:
  ------------------
  |  Branch (986:9): [True: 0, False: 2.14M]
  ------------------
  987|   717k|        case arg_type::int_type:
  ------------------
  |  Branch (987:9): [True: 397k, False: 1.74M]
  ------------------
  988|   717k|        case arg_type::long_type:
  ------------------
  |  Branch (988:9): [True: 0, False: 2.14M]
  ------------------
  989|  1.13M|        case arg_type::llong_type:
  ------------------
  |  Branch (989:9): [True: 420k, False: 1.71M]
  ------------------
  990|  1.13M|            return arg_type_category::integer;
  991|       |
  992|   304k|        case arg_type::uchar_type:
  ------------------
  |  Branch (992:9): [True: 304k, False: 1.83M]
  ------------------
  993|   304k|        case arg_type::ushort_type:
  ------------------
  |  Branch (993:9): [True: 0, False: 2.14M]
  ------------------
  994|   648k|        case arg_type::uint_type:
  ------------------
  |  Branch (994:9): [True: 344k, False: 1.79M]
  ------------------
  995|   648k|        case arg_type::ulong_type:
  ------------------
  |  Branch (995:9): [True: 0, False: 2.14M]
  ------------------
  996|  1.00M|        case arg_type::ullong_type:
  ------------------
  |  Branch (996:9): [True: 353k, False: 1.78M]
  ------------------
  997|  1.00M|            return arg_type_category::unsigned_integer;
  998|       |
  999|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (999:9): [True: 0, False: 2.14M]
  ------------------
 1000|      0|            return arg_type_category::pointer;
 1001|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (1001:9): [True: 0, False: 2.14M]
  ------------------
 1002|      0|            return arg_type_category::boolean;
 1003|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (1003:9): [True: 0, False: 2.14M]
  ------------------
 1004|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (1004:9): [True: 0, False: 2.14M]
  ------------------
 1005|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (1005:9): [True: 0, False: 2.14M]
  ------------------
 1006|      0|            return arg_type_category::character;
 1007|       |
 1008|      0|        case arg_type::float_type:
  ------------------
  |  Branch (1008:9): [True: 0, False: 2.14M]
  ------------------
 1009|      0|        case arg_type::double_type:
  ------------------
  |  Branch (1009:9): [True: 0, False: 2.14M]
  ------------------
 1010|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (1010:9): [True: 0, False: 2.14M]
  ------------------
 1011|      0|            return arg_type_category::floating;
 1012|       |
 1013|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (1013:9): [True: 0, False: 2.14M]
  ------------------
 1014|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (1014:9): [True: 0, False: 2.14M]
  ------------------
 1015|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (1015:9): [True: 0, False: 2.14M]
  ------------------
 1016|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (1016:9): [True: 0, False: 2.14M]
  ------------------
 1017|      0|            return arg_type_category::string;
 1018|       |
 1019|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (1019:9): [True: 0, False: 2.14M]
  ------------------
 1020|      0|            return arg_type_category::custom;
 1021|       |
 1022|      0|            SCN_CLANG_PUSH
 1023|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 1024|      0|        default:
  ------------------
  |  Branch (1024:9): [True: 0, False: 2.14M]
  ------------------
 1025|      0|            SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1026|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1027|  2.14M|            SCN_CLANG_POP
 1028|  2.14M|    }
 1029|       |
 1030|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1031|  2.14M|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  961|  3.79M|{
  962|  3.79M|    parse_format_string_impl<IsConstexpr>(format, handler);
  963|  3.79M|    handler.check_args_exhausted();
  964|  3.79M|    return handler.get_error();
  965|  3.79M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  927|  3.79M|{
  928|       |    // TODO: memchr fast path with a larger (> 32) format string
  929|       |
  930|  3.79M|    auto begin = format.data();
  931|  3.79M|    auto it = begin;
  932|  3.79M|    const auto end = format.data() + format.size();
  933|       |
  934|  7.33M|    while (it != end) {
  ------------------
  |  Branch (934:12): [True: 3.79M, False: 3.54M]
  ------------------
  935|  3.79M|        const auto ch = *it++;
  936|  3.79M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (936:13): [True: 3.79M, False: 0]
  ------------------
  937|  3.79M|            handler.on_literal_text(begin, it - 1);
  938|       |
  939|  3.79M|            begin = it = parse_replacement_field(it - 1, end, handler);
  940|  3.79M|            if (!handler) {
  ------------------
  |  Branch (940:17): [True: 248k, False: 3.54M]
  ------------------
  941|   248k|                return;
  942|   248k|            }
  943|  3.79M|        }
  944|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (944:18): [True: 0, False: 0]
  ------------------
  945|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  946|      0|                handler.on_error("Unmatched '}' in format string");
  947|      0|                return;
  948|      0|            }
  949|       |
  950|      0|            handler.on_literal_text(begin, it);
  951|      0|            begin = ++it;
  952|      0|        }
  953|  3.79M|    }
  954|       |
  955|  3.54M|    handler.on_literal_text(begin, end);
  956|  3.54M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
  859|  3.79M|{
  860|  3.79M|    struct id_adapter {
  861|  3.79M|        constexpr void operator()()
  862|  3.79M|        {
  863|  3.79M|            arg_id = handler.on_arg_id();
  864|  3.79M|        }
  865|  3.79M|        constexpr void operator()(std::size_t id)
  866|  3.79M|        {
  867|  3.79M|            arg_id = handler.on_arg_id(id);
  868|  3.79M|        }
  869|       |
  870|  3.79M|        constexpr void on_error(const char* msg)
  871|  3.79M|        {
  872|  3.79M|            SCN_UNLIKELY_ATTR
  873|  3.79M|            handler.on_error(msg);
  874|  3.79M|        }
  875|       |
  876|  3.79M|        Handler& handler;
  877|  3.79M|        std::size_t arg_id;
  878|  3.79M|    };
  879|       |
  880|  3.79M|    ++begin;
  881|  3.79M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  3.79M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.79M]
  |  |  ------------------
  ------------------
  882|      0|        handler.on_error("Unexpected end of replacement field");
  883|      0|        return begin;
  884|      0|    }
  885|       |
  886|  3.79M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (886:9): [True: 0, False: 3.79M]
  ------------------
  887|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  888|      0|    }
  889|  3.79M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (889:14): [True: 0, False: 3.79M]
  ------------------
  890|      0|        handler.on_literal_text(begin, begin + 1);
  891|      0|    }
  892|  3.79M|    else {
  893|  3.79M|        auto adapter = id_adapter{handler, 0};
  894|  3.79M|        begin = parse_arg_id(begin, end, adapter);
  895|       |
  896|  3.79M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  3.79M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.79M]
  |  |  ------------------
  ------------------
  897|      0|            handler.on_error("Missing '}' in format string");
  898|      0|            return begin;
  899|      0|        }
  900|       |
  901|  3.79M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (901:13): [True: 0, False: 3.79M]
  ------------------
  902|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  903|      0|        }
  904|  3.79M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (904:18): [True: 3.79M, False: 0]
  ------------------
  905|  3.79M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  3.79M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.79M]
  |  |  ------------------
  ------------------
  906|      0|                handler.on_error("Unexpected end of replacement field");
  907|      0|                return begin;
  908|      0|            }
  909|  3.79M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  910|  3.79M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  7.58M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 82.7k, False: 3.71M]
  |  |  |  Branch (153:45): [True: 0, False: 3.79M]
  |  |  |  Branch (153:45): [True: 82.7k, False: 3.71M]
  |  |  ------------------
  ------------------
  911|  82.7k|                handler.on_error("Unknown format specifier");
  912|  82.7k|                return begin;
  913|  82.7k|            }
  914|  3.79M|        }
  915|      0|        else {
  916|      0|            SCN_UNLIKELY_ATTR
  917|      0|            handler.on_error("Missing '}' in format string");
  918|      0|            return begin;
  919|      0|        }
  920|  3.79M|    }
  921|  3.71M|    return begin + 1;
  922|  3.79M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  3.79M|{
  400|  3.79M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  3.79M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.79M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  3.79M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 3.79M, False: 0]
  |  Branch (401:26): [True: 0, False: 3.79M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  3.79M|    handler();
  406|  3.79M|    return begin;
  407|  3.79M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  862|  3.79M|        {
  863|  3.79M|            arg_id = handler.on_arg_id();
  864|  3.79M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1039|  3.79M|    {
 1040|  3.79M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  3.79M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.79M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1041|  3.79M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  788|  3.79M|{
  789|  3.79M|    auto do_presentation = [&]() -> const CharT* {
  790|  3.79M|        if (*begin == CharT{'['}) {
  791|  3.79M|            auto set = parse_presentation_set(begin, end, handler);
  792|  3.79M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  793|       |                // clang-format off
  794|  3.79M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|  3.79M|                return begin;
  797|  3.79M|            }
  798|  3.79M|            handler.on_character_set_string(set);
  799|  3.79M|            return begin;
  800|  3.79M|        }
  801|  3.79M|        if (*begin == CharT{'/'}) {
  802|  3.79M|            return parse_presentation_regex(begin, end, handler);
  803|  3.79M|        }
  804|  3.79M|        presentation_type type = parse_presentation_type(*begin++);
  805|  3.79M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  806|  3.79M|            handler.on_error("Invalid type specifier in format string");
  807|  3.79M|            return begin;
  808|  3.79M|        }
  809|  3.79M|        handler.on_type(type);
  810|  3.79M|        return begin;
  811|  3.79M|    };
  812|       |
  813|  3.79M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (813:9): [True: 3.79M, False: 0]
  |  Branch (813:28): [True: 3.73M, False: 55.1k]
  ------------------
  814|  3.79M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (814:9): [True: 3.71M, False: 27.5k]
  |  Branch (814:36): [True: 2.72M, False: 982k]
  ------------------
  815|  2.72M|        return do_presentation();
  816|  2.72M|    }
  817|       |
  818|  1.06M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.06M]
  |  |  ------------------
  ------------------
  819|      0|        handler.on_error("Unexpected end of format string");
  820|      0|        return begin;
  821|      0|    }
  822|       |
  823|  1.06M|    begin = parse_align(begin, end, handler);
  824|  1.06M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.06M]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|  1.06M|    begin = parse_width(begin, end, handler);
  830|  1.06M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.06M]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|  1.06M|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (835:9): [True: 982k, False: 82.7k]
  ------------------
  836|   982k|        handler.on_localized();
  837|   982k|        ++begin;
  838|   982k|    }
  839|  1.06M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.06M]
  |  |  ------------------
  ------------------
  840|      0|        handler.on_error("Unexpected end of format string");
  841|      0|        return begin;
  842|      0|    }
  843|       |
  844|  1.06M|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (844:9): [True: 1.06M, False: 0]
  |  Branch (844:25): [True: 82.7k, False: 982k]
  ------------------
  845|  82.7k|        do_presentation();
  846|  82.7k|    }
  847|  1.06M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.06M]
  |  |  ------------------
  ------------------
  848|      0|        handler.on_error("Unexpected end of format string");
  849|      0|        return begin;
  850|      0|    }
  851|       |
  852|  1.06M|    return begin;
  853|  1.06M|}
_ZN3scn2v26detail15is_ascii_letterIcEEbT_:
  463|  4.12M|{
  464|  4.12M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 3.03M, False: 1.09M]
  |  Branch (464:33): [True: 3.03M, False: 0]
  ------------------
  465|  4.12M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 1.03M, False: 55.1k]
  |  Branch (465:33): [True: 1.03M, False: 0]
  ------------------
  466|  4.12M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  789|  2.81M|    auto do_presentation = [&]() -> const CharT* {
  790|  2.81M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (790:13): [True: 0, False: 2.81M]
  ------------------
  791|      0|            auto set = parse_presentation_set(begin, end, handler);
  792|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  793|       |                // clang-format off
  794|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|      0|                return begin;
  797|      0|            }
  798|      0|            handler.on_character_set_string(set);
  799|      0|            return begin;
  800|      0|        }
  801|  2.81M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (801:13): [True: 0, False: 2.81M]
  ------------------
  802|      0|            return parse_presentation_regex(begin, end, handler);
  803|      0|        }
  804|  2.81M|        presentation_type type = parse_presentation_type(*begin++);
  805|  2.81M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  2.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 55.1k, False: 2.75M]
  |  |  ------------------
  ------------------
  806|  55.1k|            handler.on_error("Invalid type specifier in format string");
  807|  55.1k|            return begin;
  808|  55.1k|        }
  809|  2.75M|        handler.on_type(type);
  810|  2.75M|        return begin;
  811|  2.81M|    };
_ZN3scn2v26detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
  411|  3.19M|{
  412|  3.19M|    switch (type) {
  413|   159k|        case 'b':
  ------------------
  |  Branch (413:9): [True: 159k, False: 3.03M]
  ------------------
  414|   215k|        case 'B':
  ------------------
  |  Branch (414:9): [True: 55.1k, False: 3.14M]
  ------------------
  415|   215k|            return presentation_type::int_binary;
  416|   752k|        case 'd':
  ------------------
  |  Branch (416:9): [True: 752k, False: 2.44M]
  ------------------
  417|   752k|            return presentation_type::int_decimal;
  418|  1.03M|        case 'i':
  ------------------
  |  Branch (418:9): [True: 1.03M, False: 2.15M]
  ------------------
  419|  1.03M|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 3.19M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|   282k|        case 'o':
  ------------------
  |  Branch (422:9): [True: 282k, False: 2.91M]
  ------------------
  423|   282k|            return presentation_type::int_octal;
  424|   796k|        case 'x':
  ------------------
  |  Branch (424:9): [True: 796k, False: 2.40M]
  ------------------
  425|   796k|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 3.19M]
  ------------------
  426|   796k|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 3.19M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 3.19M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|      0|        case 'a':
  ------------------
  |  Branch (430:9): [True: 0, False: 3.19M]
  ------------------
  431|      0|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 3.19M]
  ------------------
  432|      0|            return presentation_type::float_hex;
  433|      0|        case 'e':
  ------------------
  |  Branch (433:9): [True: 0, False: 3.19M]
  ------------------
  434|      0|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 3.19M]
  ------------------
  435|      0|            return presentation_type::float_scientific;
  436|      0|        case 'f':
  ------------------
  |  Branch (436:9): [True: 0, False: 3.19M]
  ------------------
  437|      0|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 3.19M]
  ------------------
  438|      0|            return presentation_type::float_fixed;
  439|      0|        case 'g':
  ------------------
  |  Branch (439:9): [True: 0, False: 3.19M]
  ------------------
  440|      0|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 3.19M]
  ------------------
  441|      0|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 3.19M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 3.19M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 3.19M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 3.19M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 3.19M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 3.19M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|   110k|        default:
  ------------------
  |  Branch (456:9): [True: 110k, False: 3.08M]
  ------------------
  457|   110k|            return presentation_type::none;
  458|  3.19M|    }
  459|  3.19M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  488|  1.06M|{
  489|  1.06M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|  1.06M|        switch (ch) {
  493|  1.06M|            case L'<':
  494|  1.06M|                return align_type::left;
  495|  1.06M|            case L'>':
  496|  1.06M|                return align_type::right;
  497|  1.06M|            case L'^':
  498|  1.06M|                return align_type::center;
  499|  1.06M|            default:
  500|  1.06M|                return align_type::none;
  501|  1.06M|        }
  502|  1.06M|    };
  503|       |
  504|  1.06M|    auto potential_fill_len = code_point_length(begin, end);
  505|  1.06M|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|  2.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.06M]
  |  |  |  Branch (153:45): [True: 0, False: 1.06M]
  |  |  |  Branch (153:45): [True: 0, False: 1.06M]
  |  |  ------------------
  ------------------
  506|  1.06M|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|  1.06M|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|  1.06M|    auto potential_fill = std::basic_string_view<CharT>{
  514|  1.06M|        begin, static_cast<size_t>(potential_fill_len)};
  515|  1.06M|    const auto begin_before_fill = begin;
  516|  1.06M|    begin += potential_fill_len;
  517|       |
  518|  1.06M|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 1.06M]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|  1.06M|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|  1.06M|    const auto begin_after_fill = begin;
  524|  1.06M|    ++begin;
  525|       |
  526|  1.06M|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 1.06M, False: 0]
  ------------------
  527|  1.06M|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.06M]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|  1.06M|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 1.06M]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|  1.06M|    }
  535|       |
  536|  1.06M|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 1.06M, False: 0]
  ------------------
  537|  1.06M|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 1.06M]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|  1.06M|        return begin_before_fill;
  542|  1.06M|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|  1.06M|}
_ZN3scn2v26detail17code_point_lengthIcEEiPKT_S5_:
  470|  1.20M|{
  471|  1.20M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|  1.20M|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|  1.20M|        return 1;
  474|  1.20M|    }
  475|  1.20M|    else {
  476|  1.20M|        const auto lengths =
  477|  1.20M|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|  1.20M|            "\3\4";
  479|  1.20M|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|  1.20M|        return len;
  481|  1.20M|    }
  482|  1.20M|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|  2.13M|    auto check_align = [](wchar_t ch) {
  492|  2.13M|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 2.13M]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 2.13M]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 2.13M]
  ------------------
  498|      0|                return align_type::center;
  499|  2.13M|            default:
  ------------------
  |  Branch (499:13): [True: 2.13M, False: 0]
  ------------------
  500|  2.13M|                return align_type::none;
  501|  2.13M|        }
  502|  2.13M|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  553|  1.06M|{
  554|  1.06M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|  1.06M|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 1.01M, False: 55.1k]
  |  Branch (556:33): [True: 0, False: 1.01M]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|  1.06M|    return begin;
  567|  1.06M|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 1044|   982k|    {
 1045|   982k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1046|   982k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1046:13): [True: 453k, False: 529k]
  ------------------
 1047|   982k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1047:13): [True: 0, False: 453k]
  ------------------
 1048|   982k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1048:13): [True: 0, False: 0]
  ------------------
 1049|   982k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1049:13): [True: 0, False: 0]
  ------------------
 1050|      0|            SCN_UNLIKELY_ATTR
 1051|       |            // clang-format off
 1052|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1053|       |            // clang-format on
 1054|      0|        }
 1055|       |
 1056|   982k|        Handler::on_localized();
 1057|   982k|    }
_ZN3scn2v26detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 1066|  8.78M|{
 1067|  8.78M|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  153|  8.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 8.78M]
  |  |  ------------------
  ------------------
 1068|      0|        return handler.on_error("Invalid type specifier for integer type");
 1069|      0|    }
 1070|  8.78M|    if (specs.localized) {
  ------------------
  |  Branch (1070:9): [True: 2.14M, False: 6.64M]
  ------------------
 1071|  2.14M|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  153|  2.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.14M]
  |  |  ------------------
  ------------------
 1072|       |            // clang-format off
 1073|      0|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 1074|       |            // clang-format on
 1075|      0|            return;
 1076|      0|        }
 1077|  2.14M|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  153|  2.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.14M]
  |  |  ------------------
  ------------------
 1078|       |            // clang-format off
 1079|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 1080|       |            // clang-format on
 1081|      0|        }
 1082|  2.14M|    }
 1083|  8.78M|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  961|   441k|{
  962|   441k|    parse_format_string_impl<IsConstexpr>(format, handler);
  963|   441k|    handler.check_args_exhausted();
  964|   441k|    return handler.get_error();
  965|   441k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  927|   441k|{
  928|       |    // TODO: memchr fast path with a larger (> 32) format string
  929|       |
  930|   441k|    auto begin = format.data();
  931|   441k|    auto it = begin;
  932|   441k|    const auto end = format.data() + format.size();
  933|       |
  934|   634k|    while (it != end) {
  ------------------
  |  Branch (934:12): [True: 441k, False: 193k]
  ------------------
  935|   441k|        const auto ch = *it++;
  936|   441k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (936:13): [True: 441k, False: 0]
  ------------------
  937|   441k|            handler.on_literal_text(begin, it - 1);
  938|       |
  939|   441k|            begin = it = parse_replacement_field(it - 1, end, handler);
  940|   441k|            if (!handler) {
  ------------------
  |  Branch (940:17): [True: 248k, False: 193k]
  ------------------
  941|   248k|                return;
  942|   248k|            }
  943|   441k|        }
  944|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (944:18): [True: 0, False: 0]
  ------------------
  945|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  946|      0|                handler.on_error("Unmatched '}' in format string");
  947|      0|                return;
  948|      0|            }
  949|       |
  950|      0|            handler.on_literal_text(begin, it);
  951|      0|            begin = ++it;
  952|      0|        }
  953|   441k|    }
  954|       |
  955|   193k|    handler.on_literal_text(begin, end);
  956|   193k|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
  859|   441k|{
  860|   441k|    struct id_adapter {
  861|   441k|        constexpr void operator()()
  862|   441k|        {
  863|   441k|            arg_id = handler.on_arg_id();
  864|   441k|        }
  865|   441k|        constexpr void operator()(std::size_t id)
  866|   441k|        {
  867|   441k|            arg_id = handler.on_arg_id(id);
  868|   441k|        }
  869|       |
  870|   441k|        constexpr void on_error(const char* msg)
  871|   441k|        {
  872|   441k|            SCN_UNLIKELY_ATTR
  873|   441k|            handler.on_error(msg);
  874|   441k|        }
  875|       |
  876|   441k|        Handler& handler;
  877|   441k|        std::size_t arg_id;
  878|   441k|    };
  879|       |
  880|   441k|    ++begin;
  881|   441k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   441k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 441k]
  |  |  ------------------
  ------------------
  882|      0|        handler.on_error("Unexpected end of replacement field");
  883|      0|        return begin;
  884|      0|    }
  885|       |
  886|   441k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (886:9): [True: 0, False: 441k]
  ------------------
  887|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  888|      0|    }
  889|   441k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (889:14): [True: 0, False: 441k]
  ------------------
  890|      0|        handler.on_literal_text(begin, begin + 1);
  891|      0|    }
  892|   441k|    else {
  893|   441k|        auto adapter = id_adapter{handler, 0};
  894|   441k|        begin = parse_arg_id(begin, end, adapter);
  895|       |
  896|   441k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   441k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 441k]
  |  |  ------------------
  ------------------
  897|      0|            handler.on_error("Missing '}' in format string");
  898|      0|            return begin;
  899|      0|        }
  900|       |
  901|   441k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (901:13): [True: 0, False: 441k]
  ------------------
  902|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  903|      0|        }
  904|   441k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (904:18): [True: 441k, False: 0]
  ------------------
  905|   441k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|   441k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 441k]
  |  |  ------------------
  ------------------
  906|      0|                handler.on_error("Unexpected end of replacement field");
  907|      0|                return begin;
  908|      0|            }
  909|   441k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  910|   441k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|   882k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 82.7k, False: 358k]
  |  |  |  Branch (153:45): [True: 0, False: 441k]
  |  |  |  Branch (153:45): [True: 82.7k, False: 358k]
  |  |  ------------------
  ------------------
  911|  82.7k|                handler.on_error("Unknown format specifier");
  912|  82.7k|                return begin;
  913|  82.7k|            }
  914|   441k|        }
  915|      0|        else {
  916|      0|            SCN_UNLIKELY_ATTR
  917|      0|            handler.on_error("Missing '}' in format string");
  918|      0|            return begin;
  919|      0|        }
  920|   441k|    }
  921|   358k|    return begin + 1;
  922|   441k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   441k|{
  400|   441k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   441k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   441k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   441k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 441k, False: 0]
  |  Branch (401:26): [True: 0, False: 441k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   441k|    handler();
  406|   441k|    return begin;
  407|   441k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  862|   441k|        {
  863|   441k|            arg_id = handler.on_arg_id();
  864|   441k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1039|   441k|    {
 1040|   441k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|   441k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   441k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1041|   441k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  788|   441k|{
  789|   441k|    auto do_presentation = [&]() -> const CharT* {
  790|   441k|        if (*begin == CharT{'['}) {
  791|   441k|            auto set = parse_presentation_set(begin, end, handler);
  792|   441k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  793|       |                // clang-format off
  794|   441k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|   441k|                return begin;
  797|   441k|            }
  798|   441k|            handler.on_character_set_string(set);
  799|   441k|            return begin;
  800|   441k|        }
  801|   441k|        if (*begin == CharT{'/'}) {
  802|   441k|            return parse_presentation_regex(begin, end, handler);
  803|   441k|        }
  804|   441k|        presentation_type type = parse_presentation_type(*begin++);
  805|   441k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  806|   441k|            handler.on_error("Invalid type specifier in format string");
  807|   441k|            return begin;
  808|   441k|        }
  809|   441k|        handler.on_type(type);
  810|   441k|        return begin;
  811|   441k|    };
  812|       |
  813|   441k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (813:9): [True: 441k, False: 0]
  |  Branch (813:28): [True: 386k, False: 55.1k]
  ------------------
  814|   441k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (814:9): [True: 358k, False: 27.5k]
  |  Branch (814:36): [True: 303k, False: 55.1k]
  ------------------
  815|   303k|        return do_presentation();
  816|   303k|    }
  817|       |
  818|   137k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 137k]
  |  |  ------------------
  ------------------
  819|      0|        handler.on_error("Unexpected end of format string");
  820|      0|        return begin;
  821|      0|    }
  822|       |
  823|   137k|    begin = parse_align(begin, end, handler);
  824|   137k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 137k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   137k|    begin = parse_width(begin, end, handler);
  830|   137k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 137k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   137k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (835:9): [True: 55.1k, False: 82.7k]
  ------------------
  836|  55.1k|        handler.on_localized();
  837|  55.1k|        ++begin;
  838|  55.1k|    }
  839|   137k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 137k]
  |  |  ------------------
  ------------------
  840|      0|        handler.on_error("Unexpected end of format string");
  841|      0|        return begin;
  842|      0|    }
  843|       |
  844|   137k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (844:9): [True: 137k, False: 0]
  |  Branch (844:25): [True: 82.7k, False: 55.1k]
  ------------------
  845|  82.7k|        do_presentation();
  846|  82.7k|    }
  847|   137k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 137k]
  |  |  ------------------
  ------------------
  848|      0|        handler.on_error("Unexpected end of format string");
  849|      0|        return begin;
  850|      0|    }
  851|       |
  852|   137k|    return begin;
  853|   137k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  789|   386k|    auto do_presentation = [&]() -> const CharT* {
  790|   386k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (790:13): [True: 0, False: 386k]
  ------------------
  791|      0|            auto set = parse_presentation_set(begin, end, handler);
  792|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  793|       |                // clang-format off
  794|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|      0|                return begin;
  797|      0|            }
  798|      0|            handler.on_character_set_string(set);
  799|      0|            return begin;
  800|      0|        }
  801|   386k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (801:13): [True: 0, False: 386k]
  ------------------
  802|      0|            return parse_presentation_regex(begin, end, handler);
  803|      0|        }
  804|   386k|        presentation_type type = parse_presentation_type(*begin++);
  805|   386k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|   386k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 55.1k, False: 330k]
  |  |  ------------------
  ------------------
  806|  55.1k|            handler.on_error("Invalid type specifier in format string");
  807|  55.1k|            return begin;
  808|  55.1k|        }
  809|   330k|        handler.on_type(type);
  810|   330k|        return begin;
  811|   386k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  488|   137k|{
  489|   137k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   137k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   137k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   137k|        switch (ch) {
  493|   137k|            case L'<':
  494|   137k|                return align_type::left;
  495|   137k|            case L'>':
  496|   137k|                return align_type::right;
  497|   137k|            case L'^':
  498|   137k|                return align_type::center;
  499|   137k|            default:
  500|   137k|                return align_type::none;
  501|   137k|        }
  502|   137k|    };
  503|       |
  504|   137k|    auto potential_fill_len = code_point_length(begin, end);
  505|   137k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   275k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 137k]
  |  |  |  Branch (153:45): [True: 0, False: 137k]
  |  |  |  Branch (153:45): [True: 0, False: 137k]
  |  |  ------------------
  ------------------
  506|   137k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   137k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   137k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   137k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   137k|    const auto begin_before_fill = begin;
  516|   137k|    begin += potential_fill_len;
  517|       |
  518|   137k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 137k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   137k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   137k|    const auto begin_after_fill = begin;
  524|   137k|    ++begin;
  525|       |
  526|   137k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 137k, False: 0]
  ------------------
  527|   137k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 137k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   137k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 137k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   137k|    }
  535|       |
  536|   137k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 137k, False: 0]
  ------------------
  537|   137k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 137k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   137k|        return begin_before_fill;
  542|   137k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   137k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|   275k|    auto check_align = [](wchar_t ch) {
  492|   275k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 275k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 275k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 275k]
  ------------------
  498|      0|                return align_type::center;
  499|   275k|            default:
  ------------------
  |  Branch (499:13): [True: 275k, False: 0]
  ------------------
  500|   275k|                return align_type::none;
  501|   275k|        }
  502|   275k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  553|   137k|{
  554|   137k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   137k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   137k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   137k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 82.7k, False: 55.1k]
  |  Branch (556:33): [True: 0, False: 82.7k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   137k|    return begin;
  567|   137k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 1044|  55.1k|    {
 1045|  55.1k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1046|  55.1k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1046:13): [True: 27.5k, False: 27.5k]
  ------------------
 1047|  55.1k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1047:13): [True: 0, False: 27.5k]
  ------------------
 1048|  55.1k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1048:13): [True: 0, False: 0]
  ------------------
 1049|  55.1k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1049:13): [True: 0, False: 0]
  ------------------
 1050|      0|            SCN_UNLIKELY_ATTR
 1051|       |            // clang-format off
 1052|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1053|       |            // clang-format on
 1054|      0|        }
 1055|       |
 1056|  55.1k|        Handler::on_localized();
 1057|  55.1k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  961|  3.91M|{
  962|  3.91M|    parse_format_string_impl<IsConstexpr>(format, handler);
  963|  3.91M|    handler.check_args_exhausted();
  964|  3.91M|    return handler.get_error();
  965|  3.91M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  927|  3.91M|{
  928|       |    // TODO: memchr fast path with a larger (> 32) format string
  929|       |
  930|  3.91M|    auto begin = format.data();
  931|  3.91M|    auto it = begin;
  932|  3.91M|    const auto end = format.data() + format.size();
  933|       |
  934|  7.08M|    while (it != end) {
  ------------------
  |  Branch (934:12): [True: 3.91M, False: 3.16M]
  ------------------
  935|  3.91M|        const auto ch = *it++;
  936|  3.91M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (936:13): [True: 3.91M, False: 0]
  ------------------
  937|  3.91M|            handler.on_literal_text(begin, it - 1);
  938|       |
  939|  3.91M|            begin = it = parse_replacement_field(it - 1, end, handler);
  940|  3.91M|            if (!handler) {
  ------------------
  |  Branch (940:17): [True: 744k, False: 3.16M]
  ------------------
  941|   744k|                return;
  942|   744k|            }
  943|  3.91M|        }
  944|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (944:18): [True: 0, False: 0]
  ------------------
  945|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  946|      0|                handler.on_error("Unmatched '}' in format string");
  947|      0|                return;
  948|      0|            }
  949|       |
  950|      0|            handler.on_literal_text(begin, it);
  951|      0|            begin = ++it;
  952|      0|        }
  953|  3.91M|    }
  954|       |
  955|  3.16M|    handler.on_literal_text(begin, end);
  956|  3.16M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
  859|  3.91M|{
  860|  3.91M|    struct id_adapter {
  861|  3.91M|        constexpr void operator()()
  862|  3.91M|        {
  863|  3.91M|            arg_id = handler.on_arg_id();
  864|  3.91M|        }
  865|  3.91M|        constexpr void operator()(std::size_t id)
  866|  3.91M|        {
  867|  3.91M|            arg_id = handler.on_arg_id(id);
  868|  3.91M|        }
  869|       |
  870|  3.91M|        constexpr void on_error(const char* msg)
  871|  3.91M|        {
  872|  3.91M|            SCN_UNLIKELY_ATTR
  873|  3.91M|            handler.on_error(msg);
  874|  3.91M|        }
  875|       |
  876|  3.91M|        Handler& handler;
  877|  3.91M|        std::size_t arg_id;
  878|  3.91M|    };
  879|       |
  880|  3.91M|    ++begin;
  881|  3.91M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  3.91M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.91M]
  |  |  ------------------
  ------------------
  882|      0|        handler.on_error("Unexpected end of replacement field");
  883|      0|        return begin;
  884|      0|    }
  885|       |
  886|  3.91M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (886:9): [True: 0, False: 3.91M]
  ------------------
  887|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  888|      0|    }
  889|  3.91M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (889:14): [True: 0, False: 3.91M]
  ------------------
  890|      0|        handler.on_literal_text(begin, begin + 1);
  891|      0|    }
  892|  3.91M|    else {
  893|  3.91M|        auto adapter = id_adapter{handler, 0};
  894|  3.91M|        begin = parse_arg_id(begin, end, adapter);
  895|       |
  896|  3.91M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  3.91M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.91M]
  |  |  ------------------
  ------------------
  897|      0|            handler.on_error("Missing '}' in format string");
  898|      0|            return begin;
  899|      0|        }
  900|       |
  901|  3.91M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (901:13): [True: 0, False: 3.91M]
  ------------------
  902|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  903|      0|        }
  904|  3.91M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (904:18): [True: 3.91M, False: 0]
  ------------------
  905|  3.91M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  3.91M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.91M]
  |  |  ------------------
  ------------------
  906|      0|                handler.on_error("Unexpected end of replacement field");
  907|      0|                return begin;
  908|      0|            }
  909|  3.91M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  910|  3.91M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  7.82M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 248k, False: 3.66M]
  |  |  |  Branch (153:45): [True: 0, False: 3.91M]
  |  |  |  Branch (153:45): [True: 248k, False: 3.66M]
  |  |  ------------------
  ------------------
  911|   248k|                handler.on_error("Unknown format specifier");
  912|   248k|                return begin;
  913|   248k|            }
  914|  3.91M|        }
  915|      0|        else {
  916|      0|            SCN_UNLIKELY_ATTR
  917|      0|            handler.on_error("Missing '}' in format string");
  918|      0|            return begin;
  919|      0|        }
  920|  3.91M|    }
  921|  3.66M|    return begin + 1;
  922|  3.91M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  3.91M|{
  400|  3.91M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  3.91M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.91M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  3.91M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 3.91M, False: 0]
  |  Branch (401:26): [True: 0, False: 3.91M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  3.91M|    handler();
  406|  3.91M|    return begin;
  407|  3.91M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  862|  3.91M|        {
  863|  3.91M|            arg_id = handler.on_arg_id();
  864|  3.91M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1039|  3.91M|    {
 1040|  3.91M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  3.91M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.91M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1041|  3.91M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  788|  3.91M|{
  789|  3.91M|    auto do_presentation = [&]() -> const CharT* {
  790|  3.91M|        if (*begin == CharT{'['}) {
  791|  3.91M|            auto set = parse_presentation_set(begin, end, handler);
  792|  3.91M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  793|       |                // clang-format off
  794|  3.91M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|  3.91M|                return begin;
  797|  3.91M|            }
  798|  3.91M|            handler.on_character_set_string(set);
  799|  3.91M|            return begin;
  800|  3.91M|        }
  801|  3.91M|        if (*begin == CharT{'/'}) {
  802|  3.91M|            return parse_presentation_regex(begin, end, handler);
  803|  3.91M|        }
  804|  3.91M|        presentation_type type = parse_presentation_type(*begin++);
  805|  3.91M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  806|  3.91M|            handler.on_error("Invalid type specifier in format string");
  807|  3.91M|            return begin;
  808|  3.91M|        }
  809|  3.91M|        handler.on_type(type);
  810|  3.91M|        return begin;
  811|  3.91M|    };
  812|       |
  813|  3.91M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (813:9): [True: 3.91M, False: 0]
  |  Branch (813:28): [True: 3.74M, False: 165k]
  ------------------
  814|  3.91M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (814:9): [True: 3.66M, False: 82.7k]
  |  Branch (814:36): [True: 2.72M, False: 936k]
  ------------------
  815|  2.72M|        return do_presentation();
  816|  2.72M|    }
  817|       |
  818|  1.18M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.18M]
  |  |  ------------------
  ------------------
  819|      0|        handler.on_error("Unexpected end of format string");
  820|      0|        return begin;
  821|      0|    }
  822|       |
  823|  1.18M|    begin = parse_align(begin, end, handler);
  824|  1.18M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.18M]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|  1.18M|    begin = parse_width(begin, end, handler);
  830|  1.18M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.18M]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|  1.18M|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (835:9): [True: 936k, False: 248k]
  ------------------
  836|   936k|        handler.on_localized();
  837|   936k|        ++begin;
  838|   936k|    }
  839|  1.18M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.18M]
  |  |  ------------------
  ------------------
  840|      0|        handler.on_error("Unexpected end of format string");
  841|      0|        return begin;
  842|      0|    }
  843|       |
  844|  1.18M|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (844:9): [True: 1.18M, False: 0]
  |  Branch (844:25): [True: 248k, False: 936k]
  ------------------
  845|   248k|        do_presentation();
  846|   248k|    }
  847|  1.18M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.18M]
  |  |  ------------------
  ------------------
  848|      0|        handler.on_error("Unexpected end of format string");
  849|      0|        return begin;
  850|      0|    }
  851|       |
  852|  1.18M|    return begin;
  853|  1.18M|}
_ZN3scn2v26detail15is_ascii_letterIwEEbT_:
  463|  4.87M|{
  464|  4.87M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 3.61M, False: 1.26M]
  |  Branch (464:33): [True: 3.61M, False: 0]
  ------------------
  465|  4.87M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 1.10M, False: 165k]
  |  Branch (465:33): [True: 1.10M, False: 0]
  ------------------
  466|  4.87M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  789|  2.97M|    auto do_presentation = [&]() -> const CharT* {
  790|  2.97M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (790:13): [True: 0, False: 2.97M]
  ------------------
  791|      0|            auto set = parse_presentation_set(begin, end, handler);
  792|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  793|       |                // clang-format off
  794|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|      0|                return begin;
  797|      0|            }
  798|      0|            handler.on_character_set_string(set);
  799|      0|            return begin;
  800|      0|        }
  801|  2.97M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (801:13): [True: 0, False: 2.97M]
  ------------------
  802|      0|            return parse_presentation_regex(begin, end, handler);
  803|      0|        }
  804|  2.97M|        presentation_type type = parse_presentation_type(*begin++);
  805|  2.97M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  2.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 165k, False: 2.81M]
  |  |  ------------------
  ------------------
  806|   165k|            handler.on_error("Invalid type specifier in format string");
  807|   165k|            return begin;
  808|   165k|        }
  809|  2.81M|        handler.on_type(type);
  810|  2.81M|        return begin;
  811|  2.97M|    };
_ZN3scn2v26detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
  411|  4.10M|{
  412|  4.10M|    switch (type) {
  413|   318k|        case 'b':
  ------------------
  |  Branch (413:9): [True: 318k, False: 3.78M]
  ------------------
  414|   483k|        case 'B':
  ------------------
  |  Branch (414:9): [True: 165k, False: 3.94M]
  ------------------
  415|   483k|            return presentation_type::int_binary;
  416|   845k|        case 'd':
  ------------------
  |  Branch (416:9): [True: 845k, False: 3.26M]
  ------------------
  417|   845k|            return presentation_type::int_decimal;
  418|  1.10M|        case 'i':
  ------------------
  |  Branch (418:9): [True: 1.10M, False: 3.00M]
  ------------------
  419|  1.10M|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 4.10M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|   422k|        case 'o':
  ------------------
  |  Branch (422:9): [True: 422k, False: 3.68M]
  ------------------
  423|   422k|            return presentation_type::int_octal;
  424|   920k|        case 'x':
  ------------------
  |  Branch (424:9): [True: 920k, False: 3.18M]
  ------------------
  425|   920k|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 4.10M]
  ------------------
  426|   920k|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 4.10M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 4.10M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|      0|        case 'a':
  ------------------
  |  Branch (430:9): [True: 0, False: 4.10M]
  ------------------
  431|      0|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 4.10M]
  ------------------
  432|      0|            return presentation_type::float_hex;
  433|      0|        case 'e':
  ------------------
  |  Branch (433:9): [True: 0, False: 4.10M]
  ------------------
  434|      0|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 4.10M]
  ------------------
  435|      0|            return presentation_type::float_scientific;
  436|      0|        case 'f':
  ------------------
  |  Branch (436:9): [True: 0, False: 4.10M]
  ------------------
  437|      0|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 4.10M]
  ------------------
  438|      0|            return presentation_type::float_fixed;
  439|      0|        case 'g':
  ------------------
  |  Branch (439:9): [True: 0, False: 4.10M]
  ------------------
  440|      0|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 4.10M]
  ------------------
  441|      0|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 4.10M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 4.10M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 4.10M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 4.10M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 4.10M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 4.10M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|   331k|        default:
  ------------------
  |  Branch (456:9): [True: 331k, False: 3.77M]
  ------------------
  457|   331k|            return presentation_type::none;
  458|  4.10M|    }
  459|  4.10M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  488|  1.18M|{
  489|  1.18M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|  1.18M|        switch (ch) {
  493|  1.18M|            case L'<':
  494|  1.18M|                return align_type::left;
  495|  1.18M|            case L'>':
  496|  1.18M|                return align_type::right;
  497|  1.18M|            case L'^':
  498|  1.18M|                return align_type::center;
  499|  1.18M|            default:
  500|  1.18M|                return align_type::none;
  501|  1.18M|        }
  502|  1.18M|    };
  503|       |
  504|  1.18M|    auto potential_fill_len = code_point_length(begin, end);
  505|  1.18M|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|  2.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.18M]
  |  |  |  Branch (153:45): [True: 0, False: 1.18M]
  |  |  |  Branch (153:45): [True: 0, False: 1.18M]
  |  |  ------------------
  ------------------
  506|  1.18M|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|  1.18M|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|  1.18M|    auto potential_fill = std::basic_string_view<CharT>{
  514|  1.18M|        begin, static_cast<size_t>(potential_fill_len)};
  515|  1.18M|    const auto begin_before_fill = begin;
  516|  1.18M|    begin += potential_fill_len;
  517|       |
  518|  1.18M|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 1.18M]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|  1.18M|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|  1.18M|    const auto begin_after_fill = begin;
  524|  1.18M|    ++begin;
  525|       |
  526|  1.18M|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 1.18M, False: 0]
  ------------------
  527|  1.18M|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|  1.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.18M]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|  1.18M|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 1.18M]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|  1.18M|    }
  535|       |
  536|  1.18M|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 1.18M, False: 0]
  ------------------
  537|  1.18M|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 1.18M]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|  1.18M|        return begin_before_fill;
  542|  1.18M|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|  1.18M|}
_ZN3scn2v26detail17code_point_lengthIwEEiPKT_S5_:
  470|  1.59M|{
  471|  1.59M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.59M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.59M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|  1.59M|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|  1.59M|        return 1;
  474|  1.59M|    }
  475|  1.59M|    else {
  476|  1.59M|        const auto lengths =
  477|  1.59M|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|  1.59M|            "\3\4";
  479|  1.59M|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|  1.59M|        return len;
  481|  1.59M|    }
  482|  1.59M|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|  2.36M|    auto check_align = [](wchar_t ch) {
  492|  2.36M|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 2.36M]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 2.36M]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 2.36M]
  ------------------
  498|      0|                return align_type::center;
  499|  2.36M|            default:
  ------------------
  |  Branch (499:13): [True: 2.36M, False: 0]
  ------------------
  500|  2.36M|                return align_type::none;
  501|  2.36M|        }
  502|  2.36M|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  553|  1.18M|{
  554|  1.18M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|  1.18M|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 1.01M, False: 165k]
  |  Branch (556:33): [True: 0, False: 1.01M]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|  1.18M|    return begin;
  567|  1.18M|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 1044|   936k|    {
 1045|   936k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1046|   936k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1046:13): [True: 438k, False: 498k]
  ------------------
 1047|   936k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1047:13): [True: 0, False: 438k]
  ------------------
 1048|   936k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1048:13): [True: 0, False: 0]
  ------------------
 1049|   936k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1049:13): [True: 0, False: 0]
  ------------------
 1050|      0|            SCN_UNLIKELY_ATTR
 1051|       |            // clang-format off
 1052|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1053|       |            // clang-format on
 1054|      0|        }
 1055|       |
 1056|   936k|        Handler::on_localized();
 1057|   936k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  961|  1.29M|{
  962|  1.29M|    parse_format_string_impl<IsConstexpr>(format, handler);
  963|  1.29M|    handler.check_args_exhausted();
  964|  1.29M|    return handler.get_error();
  965|  1.29M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  927|  1.29M|{
  928|       |    // TODO: memchr fast path with a larger (> 32) format string
  929|       |
  930|  1.29M|    auto begin = format.data();
  931|  1.29M|    auto it = begin;
  932|  1.29M|    const auto end = format.data() + format.size();
  933|       |
  934|  1.84M|    while (it != end) {
  ------------------
  |  Branch (934:12): [True: 1.29M, False: 551k]
  ------------------
  935|  1.29M|        const auto ch = *it++;
  936|  1.29M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (936:13): [True: 1.29M, False: 0]
  ------------------
  937|  1.29M|            handler.on_literal_text(begin, it - 1);
  938|       |
  939|  1.29M|            begin = it = parse_replacement_field(it - 1, end, handler);
  940|  1.29M|            if (!handler) {
  ------------------
  |  Branch (940:17): [True: 744k, False: 551k]
  ------------------
  941|   744k|                return;
  942|   744k|            }
  943|  1.29M|        }
  944|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (944:18): [True: 0, False: 0]
  ------------------
  945|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  946|      0|                handler.on_error("Unmatched '}' in format string");
  947|      0|                return;
  948|      0|            }
  949|       |
  950|      0|            handler.on_literal_text(begin, it);
  951|      0|            begin = ++it;
  952|      0|        }
  953|  1.29M|    }
  954|       |
  955|   551k|    handler.on_literal_text(begin, end);
  956|   551k|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
  859|  1.29M|{
  860|  1.29M|    struct id_adapter {
  861|  1.29M|        constexpr void operator()()
  862|  1.29M|        {
  863|  1.29M|            arg_id = handler.on_arg_id();
  864|  1.29M|        }
  865|  1.29M|        constexpr void operator()(std::size_t id)
  866|  1.29M|        {
  867|  1.29M|            arg_id = handler.on_arg_id(id);
  868|  1.29M|        }
  869|       |
  870|  1.29M|        constexpr void on_error(const char* msg)
  871|  1.29M|        {
  872|  1.29M|            SCN_UNLIKELY_ATTR
  873|  1.29M|            handler.on_error(msg);
  874|  1.29M|        }
  875|       |
  876|  1.29M|        Handler& handler;
  877|  1.29M|        std::size_t arg_id;
  878|  1.29M|    };
  879|       |
  880|  1.29M|    ++begin;
  881|  1.29M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.29M]
  |  |  ------------------
  ------------------
  882|      0|        handler.on_error("Unexpected end of replacement field");
  883|      0|        return begin;
  884|      0|    }
  885|       |
  886|  1.29M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (886:9): [True: 0, False: 1.29M]
  ------------------
  887|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  888|      0|    }
  889|  1.29M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (889:14): [True: 0, False: 1.29M]
  ------------------
  890|      0|        handler.on_literal_text(begin, begin + 1);
  891|      0|    }
  892|  1.29M|    else {
  893|  1.29M|        auto adapter = id_adapter{handler, 0};
  894|  1.29M|        begin = parse_arg_id(begin, end, adapter);
  895|       |
  896|  1.29M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.29M]
  |  |  ------------------
  ------------------
  897|      0|            handler.on_error("Missing '}' in format string");
  898|      0|            return begin;
  899|      0|        }
  900|       |
  901|  1.29M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (901:13): [True: 0, False: 1.29M]
  ------------------
  902|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  903|      0|        }
  904|  1.29M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (904:18): [True: 1.29M, False: 0]
  ------------------
  905|  1.29M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  1.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.29M]
  |  |  ------------------
  ------------------
  906|      0|                handler.on_error("Unexpected end of replacement field");
  907|      0|                return begin;
  908|      0|            }
  909|  1.29M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  910|  1.29M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  2.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 248k, False: 1.04M]
  |  |  |  Branch (153:45): [True: 0, False: 1.29M]
  |  |  |  Branch (153:45): [True: 248k, False: 1.04M]
  |  |  ------------------
  ------------------
  911|   248k|                handler.on_error("Unknown format specifier");
  912|   248k|                return begin;
  913|   248k|            }
  914|  1.29M|        }
  915|      0|        else {
  916|      0|            SCN_UNLIKELY_ATTR
  917|      0|            handler.on_error("Missing '}' in format string");
  918|      0|            return begin;
  919|      0|        }
  920|  1.29M|    }
  921|  1.04M|    return begin + 1;
  922|  1.29M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  1.29M|{
  400|  1.29M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  1.29M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 1.29M, False: 0]
  |  Branch (401:26): [True: 0, False: 1.29M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  1.29M|    handler();
  406|  1.29M|    return begin;
  407|  1.29M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  862|  1.29M|        {
  863|  1.29M|            arg_id = handler.on_arg_id();
  864|  1.29M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1039|  1.29M|    {
 1040|  1.29M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  1.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1041|  1.29M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  788|  1.29M|{
  789|  1.29M|    auto do_presentation = [&]() -> const CharT* {
  790|  1.29M|        if (*begin == CharT{'['}) {
  791|  1.29M|            auto set = parse_presentation_set(begin, end, handler);
  792|  1.29M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  793|       |                // clang-format off
  794|  1.29M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|  1.29M|                return begin;
  797|  1.29M|            }
  798|  1.29M|            handler.on_character_set_string(set);
  799|  1.29M|            return begin;
  800|  1.29M|        }
  801|  1.29M|        if (*begin == CharT{'/'}) {
  802|  1.29M|            return parse_presentation_regex(begin, end, handler);
  803|  1.29M|        }
  804|  1.29M|        presentation_type type = parse_presentation_type(*begin++);
  805|  1.29M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  806|  1.29M|            handler.on_error("Invalid type specifier in format string");
  807|  1.29M|            return begin;
  808|  1.29M|        }
  809|  1.29M|        handler.on_type(type);
  810|  1.29M|        return begin;
  811|  1.29M|    };
  812|       |
  813|  1.29M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (813:9): [True: 1.29M, False: 0]
  |  Branch (813:28): [True: 1.13M, False: 165k]
  ------------------
  814|  1.29M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (814:9): [True: 1.04M, False: 82.7k]
  |  Branch (814:36): [True: 882k, False: 165k]
  ------------------
  815|   882k|        return do_presentation();
  816|   882k|    }
  817|       |
  818|   413k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   413k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 413k]
  |  |  ------------------
  ------------------
  819|      0|        handler.on_error("Unexpected end of format string");
  820|      0|        return begin;
  821|      0|    }
  822|       |
  823|   413k|    begin = parse_align(begin, end, handler);
  824|   413k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   413k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 413k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   413k|    begin = parse_width(begin, end, handler);
  830|   413k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   413k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 413k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   413k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (835:9): [True: 165k, False: 248k]
  ------------------
  836|   165k|        handler.on_localized();
  837|   165k|        ++begin;
  838|   165k|    }
  839|   413k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   413k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 413k]
  |  |  ------------------
  ------------------
  840|      0|        handler.on_error("Unexpected end of format string");
  841|      0|        return begin;
  842|      0|    }
  843|       |
  844|   413k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (844:9): [True: 413k, False: 0]
  |  Branch (844:25): [True: 248k, False: 165k]
  ------------------
  845|   248k|        do_presentation();
  846|   248k|    }
  847|   413k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   413k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 413k]
  |  |  ------------------
  ------------------
  848|      0|        handler.on_error("Unexpected end of format string");
  849|      0|        return begin;
  850|      0|    }
  851|       |
  852|   413k|    return begin;
  853|   413k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  789|  1.13M|    auto do_presentation = [&]() -> const CharT* {
  790|  1.13M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (790:13): [True: 0, False: 1.13M]
  ------------------
  791|      0|            auto set = parse_presentation_set(begin, end, handler);
  792|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  793|       |                // clang-format off
  794|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|      0|                return begin;
  797|      0|            }
  798|      0|            handler.on_character_set_string(set);
  799|      0|            return begin;
  800|      0|        }
  801|  1.13M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (801:13): [True: 0, False: 1.13M]
  ------------------
  802|      0|            return parse_presentation_regex(begin, end, handler);
  803|      0|        }
  804|  1.13M|        presentation_type type = parse_presentation_type(*begin++);
  805|  1.13M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 165k, False: 965k]
  |  |  ------------------
  ------------------
  806|   165k|            handler.on_error("Invalid type specifier in format string");
  807|   165k|            return begin;
  808|   165k|        }
  809|   965k|        handler.on_type(type);
  810|   965k|        return begin;
  811|  1.13M|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  488|   413k|{
  489|   413k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   413k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   413k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   413k|        switch (ch) {
  493|   413k|            case L'<':
  494|   413k|                return align_type::left;
  495|   413k|            case L'>':
  496|   413k|                return align_type::right;
  497|   413k|            case L'^':
  498|   413k|                return align_type::center;
  499|   413k|            default:
  500|   413k|                return align_type::none;
  501|   413k|        }
  502|   413k|    };
  503|       |
  504|   413k|    auto potential_fill_len = code_point_length(begin, end);
  505|   413k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   827k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 413k]
  |  |  |  Branch (153:45): [True: 0, False: 413k]
  |  |  |  Branch (153:45): [True: 0, False: 413k]
  |  |  ------------------
  ------------------
  506|   413k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   413k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   413k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   413k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   413k|    const auto begin_before_fill = begin;
  516|   413k|    begin += potential_fill_len;
  517|       |
  518|   413k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 413k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   413k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   413k|    const auto begin_after_fill = begin;
  524|   413k|    ++begin;
  525|       |
  526|   413k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 413k, False: 0]
  ------------------
  527|   413k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   413k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 413k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   413k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 413k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   413k|    }
  535|       |
  536|   413k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 413k, False: 0]
  ------------------
  537|   413k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 413k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   413k|        return begin_before_fill;
  542|   413k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   413k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|   827k|    auto check_align = [](wchar_t ch) {
  492|   827k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 827k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 827k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 827k]
  ------------------
  498|      0|                return align_type::center;
  499|   827k|            default:
  ------------------
  |  Branch (499:13): [True: 827k, False: 0]
  ------------------
  500|   827k|                return align_type::none;
  501|   827k|        }
  502|   827k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  553|   413k|{
  554|   413k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   413k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   413k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   413k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 248k, False: 165k]
  |  Branch (556:33): [True: 0, False: 248k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   413k|    return begin;
  567|   413k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 1044|   165k|    {
 1045|   165k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1046|   165k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1046:13): [True: 82.7k, False: 82.7k]
  ------------------
 1047|   165k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1047:13): [True: 0, False: 82.7k]
  ------------------
 1048|   165k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1048:13): [True: 0, False: 0]
  ------------------
 1049|   165k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1049:13): [True: 0, False: 0]
  ------------------
 1050|      0|            SCN_UNLIKELY_ATTR
 1051|       |            // clang-format off
 1052|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1053|       |            // clang-format on
 1054|      0|        }
 1055|       |
 1056|   165k|        Handler::on_localized();
 1057|   165k|    }

_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  5.27M|{
  226|  5.27M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  5.27M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  5.27M|                  "\n"
  230|  5.27M|                  "Unsupported range type given as input to a scanning "
  231|  5.27M|                  "function.\n"
  232|  5.27M|                  "A range needs to have a character type (value type) "
  233|  5.27M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  5.27M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  5.27M|                  "to be included.\n"
  236|  5.27M|                  "See the scnlib documentation for more details.");
  237|  5.27M|    static_assert(
  238|  5.27M|        !std::is_same_v<T, custom_char_traits>,
  239|  5.27M|        "\n"
  240|  5.27M|        "Unsupported range type given as input to a scanning "
  241|  5.27M|        "function.\n"
  242|  5.27M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  5.27M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  5.27M|        "not supported.");
  245|  5.27M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  5.27M|                  "\n"
  247|  5.27M|                  "Unsupported range type given as input to a scanning "
  248|  5.27M|                  "function.\n"
  249|  5.27M|                  "file_marker_found cannot be used as an "
  250|  5.27M|                  "source range type to scn::scan.\n"
  251|  5.27M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  5.27M|                  "and do not provide an explicit source range, "
  253|  5.27M|                  "or use scn::scan with a FILE* directly.");
  254|  5.27M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  5.27M|                  "\n"
  256|  5.27M|                  "Unsupported range type given as input to a scanning "
  257|  5.27M|                  "function.\n"
  258|  5.27M|                  "In order to be scannable, a range needs to satisfy "
  259|  5.27M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  5.27M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  5.27M|                  "\n"
  262|  5.27M|                  "Unsupported range type given as input to a scanning "
  263|  5.27M|                  "function.\n"
  264|  5.27M|                  "A range needs to model forward_range and have a valid "
  265|  5.27M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  5.27M|                  "Examples of scannable ranges are std::string, "
  267|  5.27M|                  "std::string_view, "
  268|  5.27M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  5.27M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  5.27M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  5.27M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  5.27M|{
  153|  5.27M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  5.27M|        return std::basic_string_view{ranges::data(r),
  155|  5.27M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  5.27M|    }
  162|  5.27M|    else {
  163|  5.27M|        return invalid_char_type{};
  164|  5.27M|    }
  165|  5.27M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|   524k|{
  226|   524k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   524k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   524k|                  "\n"
  230|   524k|                  "Unsupported range type given as input to a scanning "
  231|   524k|                  "function.\n"
  232|   524k|                  "A range needs to have a character type (value type) "
  233|   524k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   524k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   524k|                  "to be included.\n"
  236|   524k|                  "See the scnlib documentation for more details.");
  237|   524k|    static_assert(
  238|   524k|        !std::is_same_v<T, custom_char_traits>,
  239|   524k|        "\n"
  240|   524k|        "Unsupported range type given as input to a scanning "
  241|   524k|        "function.\n"
  242|   524k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   524k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   524k|        "not supported.");
  245|   524k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   524k|                  "\n"
  247|   524k|                  "Unsupported range type given as input to a scanning "
  248|   524k|                  "function.\n"
  249|   524k|                  "file_marker_found cannot be used as an "
  250|   524k|                  "source range type to scn::scan.\n"
  251|   524k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   524k|                  "and do not provide an explicit source range, "
  253|   524k|                  "or use scn::scan with a FILE* directly.");
  254|   524k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   524k|                  "\n"
  256|   524k|                  "Unsupported range type given as input to a scanning "
  257|   524k|                  "function.\n"
  258|   524k|                  "In order to be scannable, a range needs to satisfy "
  259|   524k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   524k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   524k|                  "\n"
  262|   524k|                  "Unsupported range type given as input to a scanning "
  263|   524k|                  "function.\n"
  264|   524k|                  "A range needs to model forward_range and have a valid "
  265|   524k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   524k|                  "Examples of scannable ranges are std::string, "
  267|   524k|                  "std::string_view, "
  268|   524k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   524k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   524k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   524k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|   524k|{
  196|   524k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|   524k|        return file_marker_found{};
  198|   524k|    }
  199|   524k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|   524k|        if constexpr (ranges::input_range<Range>) {
  201|   524k|            return insufficient_range{};
  202|   524k|        }
  203|   524k|        else {
  204|   524k|            return invalid_input_range{};
  205|   524k|        }
  206|   524k|    }
  207|   524k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|   524k|        return invalid_char_type{};
  209|   524k|    }
  210|   524k|    else {
  211|   524k|        return make_forward_scan_buffer(r);
  212|   524k|    }
  213|   524k|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  5.32M|{
  226|  5.32M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  5.32M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  5.32M|                  "\n"
  230|  5.32M|                  "Unsupported range type given as input to a scanning "
  231|  5.32M|                  "function.\n"
  232|  5.32M|                  "A range needs to have a character type (value type) "
  233|  5.32M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  5.32M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  5.32M|                  "to be included.\n"
  236|  5.32M|                  "See the scnlib documentation for more details.");
  237|  5.32M|    static_assert(
  238|  5.32M|        !std::is_same_v<T, custom_char_traits>,
  239|  5.32M|        "\n"
  240|  5.32M|        "Unsupported range type given as input to a scanning "
  241|  5.32M|        "function.\n"
  242|  5.32M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  5.32M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  5.32M|        "not supported.");
  245|  5.32M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  5.32M|                  "\n"
  247|  5.32M|                  "Unsupported range type given as input to a scanning "
  248|  5.32M|                  "function.\n"
  249|  5.32M|                  "file_marker_found cannot be used as an "
  250|  5.32M|                  "source range type to scn::scan.\n"
  251|  5.32M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  5.32M|                  "and do not provide an explicit source range, "
  253|  5.32M|                  "or use scn::scan with a FILE* directly.");
  254|  5.32M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  5.32M|                  "\n"
  256|  5.32M|                  "Unsupported range type given as input to a scanning "
  257|  5.32M|                  "function.\n"
  258|  5.32M|                  "In order to be scannable, a range needs to satisfy "
  259|  5.32M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  5.32M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  5.32M|                  "\n"
  262|  5.32M|                  "Unsupported range type given as input to a scanning "
  263|  5.32M|                  "function.\n"
  264|  5.32M|                  "A range needs to model forward_range and have a valid "
  265|  5.32M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  5.32M|                  "Examples of scannable ranges are std::string, "
  267|  5.32M|                  "std::string_view, "
  268|  5.32M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  5.32M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  5.32M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  5.32M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  5.32M|{
  153|  5.32M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  5.32M|        return std::basic_string_view{ranges::data(r),
  155|  5.32M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  5.32M|    }
  162|  5.32M|    else {
  163|  5.32M|        return invalid_char_type{};
  164|  5.32M|    }
  165|  5.32M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  1.54M|{
  226|  1.54M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  1.54M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  1.54M|                  "\n"
  230|  1.54M|                  "Unsupported range type given as input to a scanning "
  231|  1.54M|                  "function.\n"
  232|  1.54M|                  "A range needs to have a character type (value type) "
  233|  1.54M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  1.54M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  1.54M|                  "to be included.\n"
  236|  1.54M|                  "See the scnlib documentation for more details.");
  237|  1.54M|    static_assert(
  238|  1.54M|        !std::is_same_v<T, custom_char_traits>,
  239|  1.54M|        "\n"
  240|  1.54M|        "Unsupported range type given as input to a scanning "
  241|  1.54M|        "function.\n"
  242|  1.54M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  1.54M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  1.54M|        "not supported.");
  245|  1.54M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  1.54M|                  "\n"
  247|  1.54M|                  "Unsupported range type given as input to a scanning "
  248|  1.54M|                  "function.\n"
  249|  1.54M|                  "file_marker_found cannot be used as an "
  250|  1.54M|                  "source range type to scn::scan.\n"
  251|  1.54M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  1.54M|                  "and do not provide an explicit source range, "
  253|  1.54M|                  "or use scn::scan with a FILE* directly.");
  254|  1.54M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  1.54M|                  "\n"
  256|  1.54M|                  "Unsupported range type given as input to a scanning "
  257|  1.54M|                  "function.\n"
  258|  1.54M|                  "In order to be scannable, a range needs to satisfy "
  259|  1.54M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  1.54M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  1.54M|                  "\n"
  262|  1.54M|                  "Unsupported range type given as input to a scanning "
  263|  1.54M|                  "function.\n"
  264|  1.54M|                  "A range needs to model forward_range and have a valid "
  265|  1.54M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  1.54M|                  "Examples of scannable ranges are std::string, "
  267|  1.54M|                  "std::string_view, "
  268|  1.54M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  1.54M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  1.54M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  1.54M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|  1.54M|{
  196|  1.54M|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|  1.54M|        return file_marker_found{};
  198|  1.54M|    }
  199|  1.54M|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|  1.54M|        if constexpr (ranges::input_range<Range>) {
  201|  1.54M|            return insufficient_range{};
  202|  1.54M|        }
  203|  1.54M|        else {
  204|  1.54M|            return invalid_input_range{};
  205|  1.54M|        }
  206|  1.54M|    }
  207|  1.54M|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|  1.54M|        return invalid_char_type{};
  209|  1.54M|    }
  210|  1.54M|    else {
  211|  1.54M|        return make_forward_scan_buffer(r);
  212|  1.54M|    }
  213|  1.54M|}

_ZN3scn2v26detail10locale_refC2Ev:
   29|  9.01M|    constexpr locale_ref() = default;

_ZN3scn2v224basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
   44|  4.23M|    {
   45|  4.23M|    }
_ZN3scn2v224basic_scan_parse_contextIcE11next_arg_idEv:
   65|  4.23M|    {
   66|  4.23M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  4.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.23M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  4.23M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  4.23M|        do_check_arg_id(id);
   74|  4.23M|        return id;
   75|  4.23M|    }
_ZN3scn2v224basic_scan_parse_contextIcE15do_check_arg_idEm:
  209|  4.23M|{
  210|  4.23M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  4.23M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  4.23M|}
_ZN3scn2v224basic_scan_parse_contextIcE10advance_toEPKc:
   60|  4.06M|    {
   61|  4.06M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  4.06M|    }
_ZNK3scn2v224basic_scan_parse_contextIcE5beginEv:
   49|  8.30M|    {
   50|  8.30M|        return m_format.data();
   51|  8.30M|    }
_ZN3scn2v224basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
   44|  5.21M|    {
   45|  5.21M|    }
_ZN3scn2v224basic_scan_parse_contextIwE11next_arg_idEv:
   65|  5.21M|    {
   66|  5.21M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  5.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.21M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  5.21M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  5.21M|        do_check_arg_id(id);
   74|  5.21M|        return id;
   75|  5.21M|    }
_ZN3scn2v224basic_scan_parse_contextIwE15do_check_arg_idEm:
  209|  5.21M|{
  210|  5.21M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  5.21M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  5.21M|}
_ZN3scn2v224basic_scan_parse_contextIwE10advance_toEPKw:
   60|  4.71M|    {
   61|  4.71M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  4.71M|    }
_ZNK3scn2v224basic_scan_parse_contextIwE5beginEv:
   49|  9.92M|    {
   50|  9.92M|        return m_format.data();
   51|  9.92M|    }

_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIccEEDaSH_SR_:
  153|  1.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSE_T0_E_clIwcEEDaSE_SO_:
  153|  16.5M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIwcEEDaSH_SR_:
  153|  3.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  10.4M|    {
  482|  10.4M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  10.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  10.4M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmNSH_13make_unsignedISR_E4typeEE4typeE_EEOSK_:
  472|  10.4M|    {
  473|  10.4M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  10.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  10.4M|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  5.32M|    {
  482|  5.32M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  5.32M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  5.32M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmNSH_13make_unsignedISR_E4typeEE4typeE_EEOSK_:
  472|  5.32M|    {
  473|  5.32M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  5.32M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  5.32M|    }
_ZNK3scn2v24r_pf19prev_backtrack_impl2fnclIPKcEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm2EEEEEET_SB_:
  593|  1.37M|    {
  594|  1.37M|        return fn::impl(it, beg, detail::priority_tag<2>{});
  595|  1.37M|    }
_ZN3scn2v24r_pf19prev_backtrack_impl2fn4implIPKcEENSt3__19enable_ifIXsr10ranges_stdE22bidirectional_iteratorIT_EES9_E4typeES9_S9_NS0_6detail12priority_tagILm2EEE:
  563|  1.37M|    {
  564|  1.37M|        return ranges::prev(it);
  565|  1.37M|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  3.14M|    {
  482|  3.14M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  3.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  3.14M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|  3.14M|    {
  473|  3.14M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  3.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  3.14M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclIPKcEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_l:
  512|  3.60M|    {
  513|  3.60M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  3.60M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implIPKcEEDaT_lNS0_6detail12priority_tagILm0EEE:
  504|  3.60M|    {
  505|  3.60M|        return ranges::next(it, n);
  506|  3.60M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKcS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  3.57M|    {
  549|  3.57M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  3.57M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKcS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  3.57M|    {
  541|  3.57M|        return ranges::distance(lhs, rhs);
  542|  3.57M|    }
_ZNK3scn2v24r_pf19prev_backtrack_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm2EEEEEET_SC_:
  593|   124k|    {
  594|   124k|        return fn::impl(it, beg, detail::priority_tag<2>{});
  595|   124k|    }
_ZN3scn2v24r_pf19prev_backtrack_impl2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcvvcldtfp0_13batch_advanceLi42EEfp_EE4typeEE4typeET_SH_NS5_12priority_tagILm1EEE:
  570|   124k|    {
  571|   124k|        return beg.batch_advance(it.position() - 1);
  572|   124k|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|  1.32M|    {
  513|  1.32M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  1.32M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcldtfp_13batch_advancefp0_Efp_EE4typeEE4typeET_lNS5_12priority_tagILm1EEE:
  497|  1.32M|    {
  498|  1.32M|        it.batch_advance(n);
  499|  1.32M|        return it;
  500|  1.32M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_T0_:
  548|   242k|    {
  549|   242k|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|   242k|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTmicldtfp0_8positionEcldtfp_8positionEEE4typeEE4typeET_SH_NS5_12priority_tagILm1EEE:
  533|   242k|    {
  534|   242k|        return rhs.position() - lhs.position();
  535|   242k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  3.17M|    {
  482|  3.17M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  3.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  3.17M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|  3.17M|    {
  473|  3.17M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  3.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  3.17M|    }
_ZNK3scn2v24r_pf19prev_backtrack_impl2fnclIPKwEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm2EEEEEET_SB_:
  593|  1.23M|    {
  594|  1.23M|        return fn::impl(it, beg, detail::priority_tag<2>{});
  595|  1.23M|    }
_ZN3scn2v24r_pf19prev_backtrack_impl2fn4implIPKwEENSt3__19enable_ifIXsr10ranges_stdE22bidirectional_iteratorIT_EES9_E4typeES9_S9_NS0_6detail12priority_tagILm2EEE:
  563|  1.23M|    {
  564|  1.23M|        return ranges::prev(it);
  565|  1.23M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclIPKwEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_l:
  512|  3.21M|    {
  513|  3.21M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  3.21M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implIPKwEEDaT_lNS0_6detail12priority_tagILm0EEE:
  504|  3.21M|    {
  505|  3.21M|        return ranges::next(it, n);
  506|  3.21M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKwS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  3.20M|    {
  549|  3.20M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  3.20M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKwS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  3.20M|    {
  541|  3.20M|        return ranges::distance(lhs, rhs);
  542|  3.20M|    }
_ZNK3scn2v24r_pf19prev_backtrack_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm2EEEEEET_SC_:
  593|     54|    {
  594|     54|        return fn::impl(it, beg, detail::priority_tag<2>{});
  595|     54|    }
_ZN3scn2v24r_pf19prev_backtrack_impl2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcvvcldtfp0_13batch_advanceLi42EEfp_EE4typeEE4typeET_SH_NS5_12priority_tagILm1EEE:
  570|     54|    {
  571|     54|        return beg.batch_advance(it.position() - 1);
  572|     54|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|  2.90M|    {
  513|  2.90M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  2.90M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcldtfp_13batch_advancefp0_Efp_EE4typeEE4typeET_lNS5_12priority_tagILm1EEE:
  497|  2.90M|    {
  498|  2.90M|        it.batch_advance(n);
  499|  2.90M|        return it;
  500|  2.90M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_T0_:
  548|   563k|    {
  549|   563k|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|   563k|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTmicldtfp0_8positionEcldtfp_8positionEEE4typeEE4typeET_SH_NS5_12priority_tagILm1EEE:
  533|   563k|    {
  534|   563k|        return rhs.position() - lhs.position();
  535|   563k|    }

_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  4.98M|{
  343|  4.98M|    return {ranges::next(ranges::begin(source), n),
  344|  4.98M|            make_vscan_result_range_end(source)};
  345|  4.98M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  4.98M|{
  330|  4.98M|    return ranges::end(source);
  331|  4.98M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEC2ES9_ONSt3__15tupleIJaEEE:
  252|   673k|    {
  253|   673k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  4.98M|    {
  104|  4.98M|    }
_ZN3scn2v26detail25scan_result_value_storageIJaEEC2EONSt3__15tupleIJaEEE:
   38|  1.41M|    {
   39|  1.41M|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  4.98M|    {
  121|  4.98M|        return ranges::begin(m_range);
  122|  4.98M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEC2ES9_ONSt3__15tupleIJhEEE:
  252|   651k|    {
  253|   651k|    }
_ZN3scn2v26detail25scan_result_value_storageIJhEEC2EONSt3__15tupleIJhEEE:
   38|  1.38M|    {
   39|  1.38M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEC2ES9_ONSt3__15tupleIJiEEE:
  252|   977k|    {
  253|   977k|    }
_ZN3scn2v26detail25scan_result_value_storageIJiEEC2EONSt3__15tupleIJiEEE:
   38|  1.99M|    {
   39|  1.99M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEC2ES9_ONSt3__15tupleIJjEEE:
  252|   802k|    {
  253|   802k|    }
_ZN3scn2v26detail25scan_result_value_storageIJjEEC2EONSt3__15tupleIJjEEE:
   38|  1.68M|    {
   39|  1.68M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEC2ES9_ONSt3__15tupleIJxEEE:
  252|  1.04M|    {
  253|  1.04M|    }
_ZN3scn2v26detail25scan_result_value_storageIJxEEC2EONSt3__15tupleIJxEEE:
   38|  2.12M|    {
   39|  2.12M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEC2ES9_ONSt3__15tupleIJyEEE:
  252|   832k|    {
  253|   832k|    }
_ZN3scn2v26detail25scan_result_value_storageIJyEEC2EONSt3__15tupleIJyEEE:
   38|  1.74M|    {
   39|  1.74M|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_l:
  342|   234k|{
  343|   234k|    return {ranges::next(ranges::begin(source), n),
  344|   234k|            make_vscan_result_range_end(source)};
  345|   234k|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|   234k|{
  330|   234k|    return ranges::end(source);
  331|   234k|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEC2ESF_ONS6_5tupleIJaEEE:
  252|  39.0k|    {
  253|  39.0k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEC2EOSG_:
  103|   234k|    {
  104|   234k|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEE5beginEv:
  120|   234k|    {
  121|   234k|        return ranges::begin(m_range);
  122|   234k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEC2ESF_ONS6_5tupleIJhEEE:
  252|  39.0k|    {
  253|  39.0k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEC2ESF_ONS6_5tupleIJiEEE:
  252|  39.0k|    {
  253|  39.0k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEC2ESF_ONS6_5tupleIJjEEE:
  252|  39.0k|    {
  253|  39.0k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEC2ESF_ONS6_5tupleIJxEEE:
  252|  39.0k|    {
  253|  39.0k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEC2ESF_ONS6_5tupleIJyEEE:
  252|  39.0k|    {
  253|  39.0k|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  4.45M|{
  343|  4.45M|    return {ranges::next(ranges::begin(source), n),
  344|  4.45M|            make_vscan_result_range_end(source)};
  345|  4.45M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  4.45M|{
  330|  4.45M|    return ranges::end(source);
  331|  4.45M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEC2ES9_ONSt3__15tupleIJaEEE:
  252|   597k|    {
  253|   597k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  4.45M|    {
  104|  4.45M|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  4.45M|    {
  121|  4.45M|        return ranges::begin(m_range);
  122|  4.45M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEC2ES9_ONSt3__15tupleIJhEEE:
  252|   588k|    {
  253|   588k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEC2ES9_ONSt3__15tupleIJiEEE:
  252|   865k|    {
  253|   865k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEC2ES9_ONSt3__15tupleIJjEEE:
  252|   724k|    {
  253|   724k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEC2ES9_ONSt3__15tupleIJxEEE:
  252|   923k|    {
  253|   923k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEC2ES9_ONSt3__15tupleIJyEEE:
  252|   752k|    {
  253|   752k|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_l:
  342|   675k|{
  343|   675k|    return {ranges::next(ranges::begin(source), n),
  344|   675k|            make_vscan_result_range_end(source)};
  345|   675k|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|   675k|{
  330|   675k|    return ranges::end(source);
  331|   675k|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEC2ESF_ONS6_5tupleIJaEEE:
  252|   103k|    {
  253|   103k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEC2EOSG_:
  103|   675k|    {
  104|   675k|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEE5beginEv:
  120|   675k|    {
  121|   675k|        return ranges::begin(m_range);
  122|   675k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEC2ESF_ONS6_5tupleIJhEEE:
  252|   103k|    {
  253|   103k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEC2ESF_ONS6_5tupleIJiEEE:
  252|   117k|    {
  253|   117k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEC2ESF_ONS6_5tupleIJjEEE:
  252|   117k|    {
  253|   117k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEC2ESF_ONS6_5tupleIJxEEE:
  252|   117k|    {
  253|   117k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEC2ESF_ONS6_5tupleIJyEEE:
  252|   117k|    {
  253|   117k|    }

_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   324k|{
  117|   324k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   324k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   324k|}
_ZN3scn2v26detail9scan_implIcJaEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JaEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   324k|{
   77|   324k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   324k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   324k|    static_cast<    \
  |  |  247|   324k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   324k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   324k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   324k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   324k|    static_cast<    \
  |  |  247|   324k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   324k|    static_cast<    \
  |  |  247|   324k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   324k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   649k|{
   55|   649k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   649k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 45.9k, False: 603k]
  |  |  ------------------
  ------------------
   56|  45.9k|        return unexpected(result.error());
   57|  45.9k|    }
   58|   603k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   603k|    static_cast<    \
  |  |  247|   603k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   603k|    static_cast<    \
  |  |  247|   603k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   649k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   324k|{
  201|   324k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   324k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   324k|                                                      format, {});
  203|   324k|}
_ZN3scn2v26detail19scan_localized_implIcJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   324k|{
  163|   324k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   324k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   324k|    static_cast<    \
  |  |  247|   324k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   324k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   324k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   324k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   324k|    static_cast<    \
  |  |  247|   324k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   324k|    static_cast<    \
  |  |  247|   324k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   324k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  72.6k|{
  248|  72.6k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  72.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  72.6k|}
_ZN3scn2v26detail15scan_value_implIcaN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  72.6k|{
  229|  72.6k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  72.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  72.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  72.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  72.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  72.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.29k, False: 70.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.29k|    }                                                  \
  |  |  |  |   70|  72.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  70.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  70.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  70.3k|    static_cast<    \
  |  |  247|  70.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  70.3k|    static_cast<    \
  |  |  247|  70.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  72.6k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   315k|{
  117|   315k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   315k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   315k|}
_ZN3scn2v26detail9scan_implIcJhEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JhEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   315k|{
   77|   315k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   315k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   315k|    static_cast<    \
  |  |  247|   315k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   315k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   315k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   315k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   315k|    static_cast<    \
  |  |  247|   315k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   315k|    static_cast<    \
  |  |  247|   315k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   315k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   631k|{
   55|   631k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   631k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 45.9k, False: 585k]
  |  |  ------------------
  ------------------
   56|  45.9k|        return unexpected(result.error());
   57|  45.9k|    }
   58|   585k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   585k|    static_cast<    \
  |  |  247|   585k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   585k|    static_cast<    \
  |  |  247|   585k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   631k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   315k|{
  201|   315k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   315k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   315k|                                                      format, {});
  203|   315k|}
_ZN3scn2v26detail19scan_localized_implIcJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   315k|{
  163|   315k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   315k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   315k|    static_cast<    \
  |  |  247|   315k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   315k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   315k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   315k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   315k|    static_cast<    \
  |  |  247|   315k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   315k|    static_cast<    \
  |  |  247|   315k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   315k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  67.9k|{
  248|  67.9k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  67.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  67.9k|}
_ZN3scn2v26detail15scan_value_implIchN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  67.9k|{
  229|  67.9k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  67.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  67.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  67.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  67.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  67.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.29k, False: 65.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.29k|    }                                                  \
  |  |  |  |   70|  67.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  65.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  65.6k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  65.6k|    static_cast<    \
  |  |  247|  65.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  65.6k|    static_cast<    \
  |  |  247|  65.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  67.9k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   466k|{
  117|   466k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   466k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   466k|}
_ZN3scn2v26detail9scan_implIcJiEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JiEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   466k|{
   77|   466k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   466k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   466k|    static_cast<    \
  |  |  247|   466k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   466k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   466k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   466k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   466k|    static_cast<    \
  |  |  247|   466k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   466k|    static_cast<    \
  |  |  247|   466k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   466k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   932k|{
   55|   932k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   932k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 45.9k, False: 886k]
  |  |  ------------------
  ------------------
   56|  45.9k|        return unexpected(result.error());
   57|  45.9k|    }
   58|   886k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   886k|    static_cast<    \
  |  |  247|   886k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   886k|    static_cast<    \
  |  |  247|   886k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   932k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   466k|{
  201|   466k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   466k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   466k|                                                      format, {});
  203|   466k|}
_ZN3scn2v26detail19scan_localized_implIcJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   466k|{
  163|   466k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   466k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   466k|    static_cast<    \
  |  |  247|   466k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   466k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   466k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   466k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   466k|    static_cast<    \
  |  |  247|   466k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   466k|    static_cast<    \
  |  |  247|   466k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   466k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  93.0k|{
  248|  93.0k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  93.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  93.0k|}
_ZN3scn2v26detail15scan_value_implIciN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  93.0k|{
  229|  93.0k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  93.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  93.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  93.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  93.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  93.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.29k, False: 90.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.29k|    }                                                  \
  |  |  |  |   70|  93.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  90.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  90.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  90.7k|    static_cast<    \
  |  |  247|  90.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  90.7k|    static_cast<    \
  |  |  247|  90.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  93.0k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   386k|{
  117|   386k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   386k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   386k|}
_ZN3scn2v26detail9scan_implIcJjEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JjEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   386k|{
   77|   386k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   386k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   386k|    static_cast<    \
  |  |  247|   386k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   386k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   386k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   386k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   386k|    static_cast<    \
  |  |  247|   386k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   386k|    static_cast<    \
  |  |  247|   386k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   386k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   772k|{
   55|   772k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   772k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 45.9k, False: 726k]
  |  |  ------------------
  ------------------
   56|  45.9k|        return unexpected(result.error());
   57|  45.9k|    }
   58|   726k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   726k|    static_cast<    \
  |  |  247|   726k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   726k|    static_cast<    \
  |  |  247|   726k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   772k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   386k|{
  201|   386k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   386k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   386k|                                                      format, {});
  203|   386k|}
_ZN3scn2v26detail19scan_localized_implIcJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   386k|{
  163|   386k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   386k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   386k|    static_cast<    \
  |  |  247|   386k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   386k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   386k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   386k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   386k|    static_cast<    \
  |  |  247|   386k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   386k|    static_cast<    \
  |  |  247|   386k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   386k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  78.4k|{
  248|  78.4k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  78.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  78.4k|}
_ZN3scn2v26detail15scan_value_implIcjN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  78.4k|{
  229|  78.4k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  78.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  78.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  78.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  78.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  78.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.29k, False: 76.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.29k|    }                                                  \
  |  |  |  |   70|  78.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  76.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  76.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  76.1k|    static_cast<    \
  |  |  247|  76.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  76.1k|    static_cast<    \
  |  |  247|  76.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  78.4k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   496k|{
  117|   496k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   496k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   496k|}
_ZN3scn2v26detail9scan_implIcJxEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JxEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   496k|{
   77|   496k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   496k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   496k|    static_cast<    \
  |  |  247|   496k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   496k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   496k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   496k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   496k|    static_cast<    \
  |  |  247|   496k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   496k|    static_cast<    \
  |  |  247|   496k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   496k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   992k|{
   55|   992k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   992k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 45.9k, False: 946k]
  |  |  ------------------
  ------------------
   56|  45.9k|        return unexpected(result.error());
   57|  45.9k|    }
   58|   946k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   946k|    static_cast<    \
  |  |  247|   946k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   946k|    static_cast<    \
  |  |  247|   946k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   992k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   496k|{
  201|   496k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   496k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   496k|                                                      format, {});
  203|   496k|}
_ZN3scn2v26detail19scan_localized_implIcJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   496k|{
  163|   496k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   496k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   496k|    static_cast<    \
  |  |  247|   496k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   496k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   496k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   496k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   496k|    static_cast<    \
  |  |  247|   496k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   496k|    static_cast<    \
  |  |  247|   496k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   496k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  99.3k|{
  248|  99.3k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  99.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  99.3k|}
_ZN3scn2v26detail15scan_value_implIcxN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  99.3k|{
  229|  99.3k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  99.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  99.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  99.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  99.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  99.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.29k, False: 97.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.29k|    }                                                  \
  |  |  |  |   70|  99.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  97.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  97.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  97.0k|    static_cast<    \
  |  |  247|  97.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  97.0k|    static_cast<    \
  |  |  247|  97.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  99.3k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   400k|{
  117|   400k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   400k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   400k|}
_ZN3scn2v26detail9scan_implIcJyEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JyEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   400k|{
   77|   400k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   400k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   400k|    static_cast<    \
  |  |  247|   400k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   400k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   400k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   400k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   400k|    static_cast<    \
  |  |  247|   400k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   400k|    static_cast<    \
  |  |  247|   400k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   400k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   800k|{
   55|   800k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   800k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 45.9k, False: 754k]
  |  |  ------------------
  ------------------
   56|  45.9k|        return unexpected(result.error());
   57|  45.9k|    }
   58|   754k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   754k|    static_cast<    \
  |  |  247|   754k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   754k|    static_cast<    \
  |  |  247|   754k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   800k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   400k|{
  201|   400k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   400k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   400k|                                                      format, {});
  203|   400k|}
_ZN3scn2v26detail19scan_localized_implIcJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   400k|{
  163|   400k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   400k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   400k|    static_cast<    \
  |  |  247|   400k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   400k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   400k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   400k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   400k|    static_cast<    \
  |  |  247|   400k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   400k|    static_cast<    \
  |  |  247|   400k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   400k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  80.7k|{
  248|  80.7k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  80.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  80.7k|}
_ZN3scn2v26detail15scan_value_implIcyN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  80.7k|{
  229|  80.7k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  80.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  80.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  80.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  80.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  80.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.29k, False: 78.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.29k|    }                                                  \
  |  |  |  |   70|  80.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  78.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  78.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  78.4k|    static_cast<    \
  |  |  247|  78.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  78.4k|    static_cast<    \
  |  |  247|  78.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  80.7k|}
_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  41.3k|{
  117|  41.3k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  41.3k|}
_ZN3scn2v26detail9scan_implIcJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  41.3k|{
   77|  41.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  41.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  41.3k|    static_cast<    \
  |  |  247|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  41.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  41.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  41.3k|    static_cast<    \
  |  |  247|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  41.3k|    static_cast<    \
  |  |  247|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  41.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  82.7k|{
   55|  82.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  82.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 45.9k, False: 36.7k]
  |  |  ------------------
  ------------------
   56|  45.9k|        return unexpected(result.error());
   57|  45.9k|    }
   58|  36.7k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  36.7k|    static_cast<    \
  |  |  247|  36.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  36.7k|    static_cast<    \
  |  |  247|  36.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  82.7k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  41.3k|{
  201|  41.3k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  41.3k|                                                      format, {});
  203|  41.3k|}
_ZN3scn2v26detail19scan_localized_implIcJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  41.3k|{
  163|  41.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  41.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  41.3k|    static_cast<    \
  |  |  247|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  41.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  41.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  41.3k|    static_cast<    \
  |  |  247|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  41.3k|    static_cast<    \
  |  |  247|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  41.3k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  4.59k|{
  248|  4.59k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  4.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  4.59k|}
_ZN3scn2v26detail15scan_value_implIcaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  4.59k|{
  229|  4.59k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  4.59k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  4.59k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.59k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.59k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.29k, False: 2.29k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.29k|    }                                                  \
  |  |  |  |   70|  4.59k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  2.29k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.29k|    static_cast<    \
  |  |  247|  2.29k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.29k|    static_cast<    \
  |  |  247|  2.29k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  4.59k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  41.3k|{
  117|  41.3k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  41.3k|}
_ZN3scn2v26detail9scan_implIcJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  41.3k|{
   77|  41.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  41.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  41.3k|    static_cast<    \
  |  |  247|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  41.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  41.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  41.3k|    static_cast<    \
  |  |  247|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  41.3k|    static_cast<    \
  |  |  247|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  41.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  82.7k|{
   55|  82.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  82.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 45.9k, False: 36.7k]
  |  |  ------------------
  ------------------
   56|  45.9k|        return unexpected(result.error());
   57|  45.9k|    }
   58|  36.7k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  36.7k|    static_cast<    \
  |  |  247|  36.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  36.7k|    static_cast<    \
  |  |  247|  36.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  82.7k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  41.3k|{
  201|  41.3k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  41.3k|                                                      format, {});
  203|  41.3k|}
_ZN3scn2v26detail19scan_localized_implIcJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  41.3k|{
  163|  41.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  41.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  41.3k|    static_cast<    \
  |  |  247|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  41.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  41.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  41.3k|    static_cast<    \
  |  |  247|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  41.3k|    static_cast<    \
  |  |  247|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  41.3k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  4.59k|{
  248|  4.59k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  4.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  4.59k|}
_ZN3scn2v26detail15scan_value_implIchN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  4.59k|{
  229|  4.59k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  4.59k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  4.59k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.59k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.59k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.29k, False: 2.29k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.29k|    }                                                  \
  |  |  |  |   70|  4.59k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  2.29k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.29k|    static_cast<    \
  |  |  247|  2.29k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.29k|    static_cast<    \
  |  |  247|  2.29k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  4.59k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  41.3k|{
  117|  41.3k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  41.3k|}
_ZN3scn2v26detail9scan_implIcJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  41.3k|{
   77|  41.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  41.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  41.3k|    static_cast<    \
  |  |  247|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  41.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  41.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  41.3k|    static_cast<    \
  |  |  247|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  41.3k|    static_cast<    \
  |  |  247|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  41.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  82.7k|{
   55|  82.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  82.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 45.9k, False: 36.7k]
  |  |  ------------------
  ------------------
   56|  45.9k|        return unexpected(result.error());
   57|  45.9k|    }
   58|  36.7k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  36.7k|    static_cast<    \
  |  |  247|  36.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  36.7k|    static_cast<    \
  |  |  247|  36.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  82.7k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  41.3k|{
  201|  41.3k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  41.3k|                                                      format, {});
  203|  41.3k|}
_ZN3scn2v26detail19scan_localized_implIcJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  41.3k|{
  163|  41.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  41.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  41.3k|    static_cast<    \
  |  |  247|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  41.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  41.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  41.3k|    static_cast<    \
  |  |  247|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  41.3k|    static_cast<    \
  |  |  247|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  41.3k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  4.59k|{
  248|  4.59k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  4.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  4.59k|}
_ZN3scn2v26detail15scan_value_implIciN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  4.59k|{
  229|  4.59k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  4.59k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  4.59k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.59k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.59k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.29k, False: 2.29k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.29k|    }                                                  \
  |  |  |  |   70|  4.59k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  2.29k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.29k|    static_cast<    \
  |  |  247|  2.29k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.29k|    static_cast<    \
  |  |  247|  2.29k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  4.59k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  41.3k|{
  117|  41.3k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  41.3k|}
_ZN3scn2v26detail9scan_implIcJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  41.3k|{
   77|  41.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  41.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  41.3k|    static_cast<    \
  |  |  247|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  41.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  41.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  41.3k|    static_cast<    \
  |  |  247|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  41.3k|    static_cast<    \
  |  |  247|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  41.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  82.7k|{
   55|  82.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  82.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 45.9k, False: 36.7k]
  |  |  ------------------
  ------------------
   56|  45.9k|        return unexpected(result.error());
   57|  45.9k|    }
   58|  36.7k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  36.7k|    static_cast<    \
  |  |  247|  36.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  36.7k|    static_cast<    \
  |  |  247|  36.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  82.7k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  41.3k|{
  201|  41.3k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  41.3k|                                                      format, {});
  203|  41.3k|}
_ZN3scn2v26detail19scan_localized_implIcJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  41.3k|{
  163|  41.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  41.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  41.3k|    static_cast<    \
  |  |  247|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  41.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  41.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  41.3k|    static_cast<    \
  |  |  247|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  41.3k|    static_cast<    \
  |  |  247|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  41.3k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  4.59k|{
  248|  4.59k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  4.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  4.59k|}
_ZN3scn2v26detail15scan_value_implIcjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  4.59k|{
  229|  4.59k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  4.59k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  4.59k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.59k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.59k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.29k, False: 2.29k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.29k|    }                                                  \
  |  |  |  |   70|  4.59k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  2.29k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.29k|    static_cast<    \
  |  |  247|  2.29k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.29k|    static_cast<    \
  |  |  247|  2.29k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  4.59k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  41.3k|{
  117|  41.3k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  41.3k|}
_ZN3scn2v26detail9scan_implIcJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  41.3k|{
   77|  41.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  41.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  41.3k|    static_cast<    \
  |  |  247|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  41.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  41.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  41.3k|    static_cast<    \
  |  |  247|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  41.3k|    static_cast<    \
  |  |  247|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  41.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  82.7k|{
   55|  82.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  82.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 45.9k, False: 36.7k]
  |  |  ------------------
  ------------------
   56|  45.9k|        return unexpected(result.error());
   57|  45.9k|    }
   58|  36.7k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  36.7k|    static_cast<    \
  |  |  247|  36.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  36.7k|    static_cast<    \
  |  |  247|  36.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  82.7k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  41.3k|{
  201|  41.3k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  41.3k|                                                      format, {});
  203|  41.3k|}
_ZN3scn2v26detail19scan_localized_implIcJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  41.3k|{
  163|  41.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  41.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  41.3k|    static_cast<    \
  |  |  247|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  41.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  41.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  41.3k|    static_cast<    \
  |  |  247|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  41.3k|    static_cast<    \
  |  |  247|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  41.3k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  4.59k|{
  248|  4.59k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  4.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  4.59k|}
_ZN3scn2v26detail15scan_value_implIcxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  4.59k|{
  229|  4.59k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  4.59k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  4.59k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.59k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.59k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.29k, False: 2.29k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.29k|    }                                                  \
  |  |  |  |   70|  4.59k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  2.29k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.29k|    static_cast<    \
  |  |  247|  2.29k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.29k|    static_cast<    \
  |  |  247|  2.29k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  4.59k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  41.3k|{
  117|  41.3k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  41.3k|}
_ZN3scn2v26detail9scan_implIcJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  41.3k|{
   77|  41.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  41.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  41.3k|    static_cast<    \
  |  |  247|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  41.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  41.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  41.3k|    static_cast<    \
  |  |  247|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  41.3k|    static_cast<    \
  |  |  247|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  41.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  82.7k|{
   55|  82.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  82.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 45.9k, False: 36.7k]
  |  |  ------------------
  ------------------
   56|  45.9k|        return unexpected(result.error());
   57|  45.9k|    }
   58|  36.7k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  36.7k|    static_cast<    \
  |  |  247|  36.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  36.7k|    static_cast<    \
  |  |  247|  36.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  82.7k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  41.3k|{
  201|  41.3k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  41.3k|                                                      format, {});
  203|  41.3k|}
_ZN3scn2v26detail19scan_localized_implIcJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  41.3k|{
  163|  41.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  41.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  41.3k|    static_cast<    \
  |  |  247|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  41.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  41.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  41.3k|    static_cast<    \
  |  |  247|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  41.3k|    static_cast<    \
  |  |  247|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  41.3k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  4.59k|{
  248|  4.59k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  4.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  4.59k|}
_ZN3scn2v26detail15scan_value_implIcyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  4.59k|{
  229|  4.59k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  4.59k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  4.59k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.59k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.59k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.29k, False: 2.29k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.29k|    }                                                  \
  |  |  |  |   70|  4.59k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  2.29k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.29k|    static_cast<    \
  |  |  247|  2.29k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.29k|    static_cast<    \
  |  |  247|  2.29k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  4.59k|}
_ZN3scn2v26detail9scan_implIwJaEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JaEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   336k|{
   77|   336k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   336k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   336k|    static_cast<    \
  |  |  247|   336k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   336k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   336k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   336k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   336k|    static_cast<    \
  |  |  247|   336k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   336k|    static_cast<    \
  |  |  247|   336k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   336k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   673k|{
   55|   673k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   673k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 137k, False: 535k]
  |  |  ------------------
  ------------------
   56|   137k|        return unexpected(result.error());
   57|   137k|    }
   58|   535k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   535k|    static_cast<    \
  |  |  247|   535k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   535k|    static_cast<    \
  |  |  247|   535k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   673k|}
_ZN3scn2v26detail19scan_localized_implIwJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   336k|{
  163|   336k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   336k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   336k|    static_cast<    \
  |  |  247|   336k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   336k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   336k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   336k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   336k|    static_cast<    \
  |  |  247|   336k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   336k|    static_cast<    \
  |  |  247|   336k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   336k|}
_ZN3scn2v26detail15scan_value_implIwaN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  69.3k|{
  229|  69.3k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  69.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  69.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  69.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  69.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  69.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.89k, False: 62.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.89k|    }                                                  \
  |  |  |  |   70|  69.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  62.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  62.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  62.4k|    static_cast<    \
  |  |  247|  62.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  62.4k|    static_cast<    \
  |  |  247|  62.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  69.3k|}
_ZN3scn2v26detail9scan_implIwJhEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JhEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   333k|{
   77|   333k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   333k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   333k|    static_cast<    \
  |  |  247|   333k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   333k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   333k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   333k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   333k|    static_cast<    \
  |  |  247|   333k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   333k|    static_cast<    \
  |  |  247|   333k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   333k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   667k|{
   55|   667k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   667k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 137k, False: 529k]
  |  |  ------------------
  ------------------
   56|   137k|        return unexpected(result.error());
   57|   137k|    }
   58|   529k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   529k|    static_cast<    \
  |  |  247|   529k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   529k|    static_cast<    \
  |  |  247|   529k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   667k|}
_ZN3scn2v26detail19scan_localized_implIwJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   333k|{
  163|   333k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   333k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   333k|    static_cast<    \
  |  |  247|   333k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   333k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   333k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   333k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   333k|    static_cast<    \
  |  |  247|   333k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   333k|    static_cast<    \
  |  |  247|   333k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   333k|}
_ZN3scn2v26detail15scan_value_implIwhN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  66.2k|{
  229|  66.2k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  66.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  66.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  66.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  66.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  66.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.89k, False: 59.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.89k|    }                                                  \
  |  |  |  |   70|  66.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  59.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  59.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  59.3k|    static_cast<    \
  |  |  247|  59.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  59.3k|    static_cast<    \
  |  |  247|  59.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  66.2k|}
_ZN3scn2v26detail9scan_implIwJiEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JiEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   461k|{
   77|   461k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   461k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   461k|    static_cast<    \
  |  |  247|   461k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   461k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   461k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   461k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   461k|    static_cast<    \
  |  |  247|   461k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   461k|    static_cast<    \
  |  |  247|   461k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   461k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   923k|{
   55|   923k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   923k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 137k, False: 785k]
  |  |  ------------------
  ------------------
   56|   137k|        return unexpected(result.error());
   57|   137k|    }
   58|   785k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   785k|    static_cast<    \
  |  |  247|   785k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   785k|    static_cast<    \
  |  |  247|   785k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   923k|}
_ZN3scn2v26detail19scan_localized_implIwJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   461k|{
  163|   461k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   461k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   461k|    static_cast<    \
  |  |  247|   461k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   461k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   461k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   461k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   461k|    static_cast<    \
  |  |  247|   461k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   461k|    static_cast<    \
  |  |  247|   461k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   461k|}
_ZN3scn2v26detail15scan_value_implIwiN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  87.4k|{
  229|  87.4k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  87.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  87.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  87.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  87.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  87.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.89k, False: 80.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.89k|    }                                                  \
  |  |  |  |   70|  87.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  80.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  80.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  80.5k|    static_cast<    \
  |  |  247|  80.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  80.5k|    static_cast<    \
  |  |  247|  80.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  87.4k|}
_ZN3scn2v26detail9scan_implIwJjEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JjEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   396k|{
   77|   396k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   396k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   396k|    static_cast<    \
  |  |  247|   396k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   396k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   396k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   396k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   396k|    static_cast<    \
  |  |  247|   396k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   396k|    static_cast<    \
  |  |  247|   396k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   396k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   793k|{
   55|   793k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   793k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 137k, False: 655k]
  |  |  ------------------
  ------------------
   56|   137k|        return unexpected(result.error());
   57|   137k|    }
   58|   655k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   655k|    static_cast<    \
  |  |  247|   655k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   655k|    static_cast<    \
  |  |  247|   655k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   793k|}
_ZN3scn2v26detail19scan_localized_implIwJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   396k|{
  163|   396k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   396k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   396k|    static_cast<    \
  |  |  247|   396k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   396k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   396k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   396k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   396k|    static_cast<    \
  |  |  247|   396k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   396k|    static_cast<    \
  |  |  247|   396k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   396k|}
_ZN3scn2v26detail15scan_value_implIwjN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  75.5k|{
  229|  75.5k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  75.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  75.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  75.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  75.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  75.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.89k, False: 68.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.89k|    }                                                  \
  |  |  |  |   70|  75.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  68.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  68.6k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  68.6k|    static_cast<    \
  |  |  247|  68.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  68.6k|    static_cast<    \
  |  |  247|  68.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  75.5k|}
_ZN3scn2v26detail9scan_implIwJxEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JxEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   487k|{
   77|   487k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   487k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   487k|    static_cast<    \
  |  |  247|   487k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   487k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   487k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   487k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   487k|    static_cast<    \
  |  |  247|   487k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   487k|    static_cast<    \
  |  |  247|   487k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   487k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   975k|{
   55|   975k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   975k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 137k, False: 837k]
  |  |  ------------------
  ------------------
   56|   137k|        return unexpected(result.error());
   57|   137k|    }
   58|   837k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   837k|    static_cast<    \
  |  |  247|   837k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   837k|    static_cast<    \
  |  |  247|   837k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   975k|}
_ZN3scn2v26detail19scan_localized_implIwJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   487k|{
  163|   487k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   487k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   487k|    static_cast<    \
  |  |  247|   487k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   487k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   487k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   487k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   487k|    static_cast<    \
  |  |  247|   487k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   487k|    static_cast<    \
  |  |  247|   487k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   487k|}
_ZN3scn2v26detail15scan_value_implIwxN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  93.0k|{
  229|  93.0k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  93.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  93.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  93.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  93.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  93.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.89k, False: 86.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.89k|    }                                                  \
  |  |  |  |   70|  93.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  86.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  86.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  86.1k|    static_cast<    \
  |  |  247|  86.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  86.1k|    static_cast<    \
  |  |  247|  86.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  93.0k|}
_ZN3scn2v26detail9scan_implIwJyEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JyEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   409k|{
   77|   409k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   409k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   409k|    static_cast<    \
  |  |  247|   409k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   409k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   409k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   409k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   409k|    static_cast<    \
  |  |  247|   409k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   409k|    static_cast<    \
  |  |  247|   409k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   409k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   819k|{
   55|   819k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   819k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 137k, False: 681k]
  |  |  ------------------
  ------------------
   56|   137k|        return unexpected(result.error());
   57|   137k|    }
   58|   681k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   681k|    static_cast<    \
  |  |  247|   681k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   681k|    static_cast<    \
  |  |  247|   681k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   819k|}
_ZN3scn2v26detail19scan_localized_implIwJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   409k|{
  163|   409k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   409k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   409k|    static_cast<    \
  |  |  247|   409k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   409k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   409k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   409k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   409k|    static_cast<    \
  |  |  247|   409k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   409k|    static_cast<    \
  |  |  247|   409k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   409k|}
_ZN3scn2v26detail15scan_value_implIwyN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  77.8k|{
  229|  77.8k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  77.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  77.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  77.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  77.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  77.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.89k, False: 70.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.89k|    }                                                  \
  |  |  |  |   70|  77.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  70.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  70.9k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  70.9k|    static_cast<    \
  |  |  247|  70.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  70.9k|    static_cast<    \
  |  |  247|  70.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  77.8k|}
_ZN3scn2v26detail9scan_implIwJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|   117k|{
   77|   117k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   117k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   117k|    static_cast<    \
  |  |  247|   117k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   117k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   117k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   117k|    static_cast<    \
  |  |  247|   117k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   117k|    static_cast<    \
  |  |  247|   117k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   117k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   234k|{
   55|   234k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   234k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 137k, False: 96.5k]
  |  |  ------------------
  ------------------
   56|   137k|        return unexpected(result.error());
   57|   137k|    }
   58|  96.5k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  96.5k|    static_cast<    \
  |  |  247|  96.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  96.5k|    static_cast<    \
  |  |  247|  96.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   234k|}
_ZN3scn2v26detail19scan_localized_implIwJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|   117k|{
  163|   117k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   117k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   117k|    static_cast<    \
  |  |  247|   117k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   117k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   117k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   117k|    static_cast<    \
  |  |  247|   117k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   117k|    static_cast<    \
  |  |  247|   117k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   117k|}
_ZN3scn2v26detail15scan_value_implIwaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  13.7k|{
  229|  13.7k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  13.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.89k, False: 6.89k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.89k|    }                                                  \
  |  |  |  |   70|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  6.89k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  6.89k|    static_cast<    \
  |  |  247|  6.89k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  6.89k|    static_cast<    \
  |  |  247|  6.89k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  13.7k|}
_ZN3scn2v26detail9scan_implIwJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|   117k|{
   77|   117k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   117k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   117k|    static_cast<    \
  |  |  247|   117k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   117k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   117k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   117k|    static_cast<    \
  |  |  247|   117k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   117k|    static_cast<    \
  |  |  247|   117k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   117k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   234k|{
   55|   234k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   234k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 137k, False: 96.5k]
  |  |  ------------------
  ------------------
   56|   137k|        return unexpected(result.error());
   57|   137k|    }
   58|  96.5k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  96.5k|    static_cast<    \
  |  |  247|  96.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  96.5k|    static_cast<    \
  |  |  247|  96.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   234k|}
_ZN3scn2v26detail19scan_localized_implIwJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|   117k|{
  163|   117k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   117k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   117k|    static_cast<    \
  |  |  247|   117k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   117k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   117k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   117k|    static_cast<    \
  |  |  247|   117k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   117k|    static_cast<    \
  |  |  247|   117k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   117k|}
_ZN3scn2v26detail15scan_value_implIwhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  13.7k|{
  229|  13.7k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  13.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.89k, False: 6.89k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.89k|    }                                                  \
  |  |  |  |   70|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  6.89k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  6.89k|    static_cast<    \
  |  |  247|  6.89k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  6.89k|    static_cast<    \
  |  |  247|  6.89k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  13.7k|}
_ZN3scn2v26detail9scan_implIwJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|   124k|{
   77|   124k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   124k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   124k|    static_cast<    \
  |  |  247|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   124k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   124k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   124k|    static_cast<    \
  |  |  247|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   124k|    static_cast<    \
  |  |  247|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   124k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   248k|{
   55|   248k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 137k, False: 110k]
  |  |  ------------------
  ------------------
   56|   137k|        return unexpected(result.error());
   57|   137k|    }
   58|   110k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   110k|    static_cast<    \
  |  |  247|   110k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   110k|    static_cast<    \
  |  |  247|   110k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   248k|}
_ZN3scn2v26detail19scan_localized_implIwJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|   124k|{
  163|   124k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   124k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   124k|    static_cast<    \
  |  |  247|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   124k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   124k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   124k|    static_cast<    \
  |  |  247|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   124k|    static_cast<    \
  |  |  247|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   124k|}
_ZN3scn2v26detail15scan_value_implIwiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  13.7k|{
  229|  13.7k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  13.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.89k, False: 6.89k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.89k|    }                                                  \
  |  |  |  |   70|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  6.89k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  6.89k|    static_cast<    \
  |  |  247|  6.89k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  6.89k|    static_cast<    \
  |  |  247|  6.89k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  13.7k|}
_ZN3scn2v26detail9scan_implIwJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|   124k|{
   77|   124k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   124k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   124k|    static_cast<    \
  |  |  247|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   124k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   124k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   124k|    static_cast<    \
  |  |  247|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   124k|    static_cast<    \
  |  |  247|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   124k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   248k|{
   55|   248k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 137k, False: 110k]
  |  |  ------------------
  ------------------
   56|   137k|        return unexpected(result.error());
   57|   137k|    }
   58|   110k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   110k|    static_cast<    \
  |  |  247|   110k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   110k|    static_cast<    \
  |  |  247|   110k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   248k|}
_ZN3scn2v26detail19scan_localized_implIwJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|   124k|{
  163|   124k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   124k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   124k|    static_cast<    \
  |  |  247|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   124k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   124k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   124k|    static_cast<    \
  |  |  247|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   124k|    static_cast<    \
  |  |  247|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   124k|}
_ZN3scn2v26detail15scan_value_implIwjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  13.7k|{
  229|  13.7k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  13.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.89k, False: 6.89k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.89k|    }                                                  \
  |  |  |  |   70|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  6.89k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  6.89k|    static_cast<    \
  |  |  247|  6.89k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  6.89k|    static_cast<    \
  |  |  247|  6.89k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  13.7k|}
_ZN3scn2v26detail9scan_implIwJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|   124k|{
   77|   124k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   124k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   124k|    static_cast<    \
  |  |  247|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   124k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   124k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   124k|    static_cast<    \
  |  |  247|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   124k|    static_cast<    \
  |  |  247|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   124k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   248k|{
   55|   248k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 137k, False: 110k]
  |  |  ------------------
  ------------------
   56|   137k|        return unexpected(result.error());
   57|   137k|    }
   58|   110k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   110k|    static_cast<    \
  |  |  247|   110k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   110k|    static_cast<    \
  |  |  247|   110k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   248k|}
_ZN3scn2v26detail19scan_localized_implIwJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|   124k|{
  163|   124k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   124k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   124k|    static_cast<    \
  |  |  247|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   124k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   124k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   124k|    static_cast<    \
  |  |  247|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   124k|    static_cast<    \
  |  |  247|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   124k|}
_ZN3scn2v26detail15scan_value_implIwxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  13.7k|{
  229|  13.7k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  13.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.89k, False: 6.89k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.89k|    }                                                  \
  |  |  |  |   70|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  6.89k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  6.89k|    static_cast<    \
  |  |  247|  6.89k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  6.89k|    static_cast<    \
  |  |  247|  6.89k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  13.7k|}
_ZN3scn2v26detail9scan_implIwJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|   124k|{
   77|   124k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   124k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   124k|    static_cast<    \
  |  |  247|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   124k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   124k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   124k|    static_cast<    \
  |  |  247|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   124k|    static_cast<    \
  |  |  247|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   124k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   248k|{
   55|   248k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 137k, False: 110k]
  |  |  ------------------
  ------------------
   56|   137k|        return unexpected(result.error());
   57|   137k|    }
   58|   110k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   110k|    static_cast<    \
  |  |  247|   110k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   110k|    static_cast<    \
  |  |  247|   110k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   248k|}
_ZN3scn2v26detail19scan_localized_implIwJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|   124k|{
  163|   124k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   124k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   124k|    static_cast<    \
  |  |  247|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   124k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   124k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   124k|    static_cast<    \
  |  |  247|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   124k|    static_cast<    \
  |  |  247|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   124k|}
_ZN3scn2v26detail15scan_value_implIwyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  13.7k|{
  229|  13.7k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  13.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.89k, False: 6.89k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.89k|    }                                                  \
  |  |  |  |   70|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  6.89k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  6.89k|    static_cast<    \
  |  |  247|  6.89k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  6.89k|    static_cast<    \
  |  |  247|  6.89k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  13.7k|}

_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|   524k|{
  486|   524k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  248|   524k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|   524k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|   524k|    {
  378|   524k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIcEC2Ev:
  359|   524k|    {
  360|   524k|    }
_ZN3scn2v26detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
  128|   524k|    {
  129|   524k|    }
_ZN3scn2v26detail17basic_scan_bufferIcED2Ev:
   43|   524k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|  1.34M|    {
  382|  1.34M|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 1.83k, False: 1.34M]
  ------------------
  383|  1.83k|            return false;
  384|  1.83k|        }
  385|  1.34M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 903k, False: 441k]
  ------------------
  386|   903k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|   903k|                                          this->m_current_view.begin(),
  388|   903k|                                          this->m_current_view.end());
  389|   903k|        }
  390|  1.34M|        m_latest = *m_cursor;
  391|  1.34M|        ++m_cursor;
  392|  1.34M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|  1.34M|        return true;
  394|  1.34M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE4syncEl:
   48|   524k|    {
   49|   524k|        SCN_UNUSED(position);
  ------------------
  |  |  227|   524k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|   524k|    }
_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|  1.54M|{
  486|  1.54M|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  248|  1.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|  1.54M|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|  1.54M|    {
  378|  1.54M|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIwEC2Ev:
  359|  1.54M|    {
  360|  1.54M|    }
_ZN3scn2v26detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
  128|  1.54M|    {
  129|  1.54M|    }
_ZN3scn2v26detail17basic_scan_bufferIwED2Ev:
   43|  1.54M|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|  8.01M|    {
  382|  8.01M|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 3.86k, False: 8.00M]
  ------------------
  383|  3.86k|            return false;
  384|  3.86k|        }
  385|  8.00M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 6.71M, False: 1.29M]
  ------------------
  386|  6.71M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|  6.71M|                                          this->m_current_view.begin(),
  388|  6.71M|                                          this->m_current_view.end());
  389|  6.71M|        }
  390|  8.00M|        m_latest = *m_cursor;
  391|  8.00M|        ++m_cursor;
  392|  8.00M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|  8.00M|        return true;
  394|  8.01M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE4syncEl:
   48|  1.54M|    {
   49|  1.54M|        SCN_UNUSED(position);
  ------------------
  |  |  227|  1.54M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|  1.54M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
  172|  41.1M|    {
  173|  41.1M|        return m_end == nullptr;
  174|  41.1M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
  188|  2.55M|    {
  189|  2.55M|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 2.55M]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|  2.55M|        return parent()->get_segment_starting_at(position());
  195|  2.55M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  182|  21.8M|    {
  183|  21.8M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  21.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  21.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|      0|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  21.8M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE23get_segment_starting_atEl:
   78|  2.55M|    {
   79|  2.55M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  2.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 689k, False: 1.86M]
  |  |  ------------------
  ------------------
   80|  2.55M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|   689k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|   689k|        }
   83|  1.86M|        const auto start = pos - m_putback_buffer.size();
   84|  1.86M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  242|  1.86M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.86M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|      0|        return m_current_view.substr(start);
   86|  2.55M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  177|   771k|    {
  178|   771k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|   771k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   771k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|      0|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|   771k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator8positionEv:
  167|  5.35M|    {
  168|  5.35M|        return m_position;
  169|  5.35M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE13is_contiguousEv:
  100|  1.57M|    {
  101|  1.57M|        return m_is_contiguous;
  102|  1.57M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
  172|   223M|    {
  173|   223M|        return m_end == nullptr;
  174|   223M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
  188|  14.1M|    {
  189|  14.1M|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 14.1M]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|  14.1M|        return parent()->get_segment_starting_at(position());
  195|  14.1M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  182|   121M|    {
  183|   121M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|   121M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   121M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|      0|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|   121M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE23get_segment_starting_atEl:
   78|  14.1M|    {
   79|  14.1M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  14.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.80M, False: 8.39M]
  |  |  ------------------
  ------------------
   80|  14.1M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|  5.80M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|  5.80M|        }
   83|  8.39M|        const auto start = pos - m_putback_buffer.size();
   84|  8.39M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  242|  8.39M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  8.39M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|      0|        return m_current_view.substr(start);
   86|  14.1M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  177|  2.28M|    {
  178|  2.28M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  2.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|      0|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|  2.28M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator8positionEv:
  167|  29.3M|    {
  168|  29.3M|        return m_position;
  169|  29.3M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE13is_contiguousEv:
  100|  4.63M|    {
  101|  4.63M|        return m_is_contiguous;
  102|  4.63M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE3getEv:
  321|   524k|{
  322|   524k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 524k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|   524k|    return ranges::subrange{forward_iterator{this, 0},
  327|   524k|                            ranges_std::default_sentinel};
  328|   524k|}
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
  154|   524k|    {
  155|   524k|        SCN_EXPECT(parent);
  ------------------
  |  |  242|   524k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   524k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   524k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  242|   524k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   524k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   524k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|  2.01M|    {
  258|  2.01M|        return x.is_at_end();
  259|  2.01M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
  301|  3.64M|    {
  302|  3.64M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 3.64M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  3.64M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 3.64M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  3.64M|        return !read_at_position();
  309|  3.64M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
  281|  10.7M|    {
  282|  10.7M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  10.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  10.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  10.7M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 10.7M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  10.7M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  152|  10.7M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 9.40M, False: 1.34M]
  |  |  ------------------
  ------------------
  289|  9.40M|            return true;
  290|  9.40M|        }
  291|       |
  292|  2.69M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 1.34M, False: 1.34M]
  ------------------
  293|  1.34M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 1.83k, False: 1.34M]
  ------------------
  294|  1.83k|                return false;
  295|  1.83k|            }
  296|  1.34M|        }
  297|  1.34M|        return true;
  298|  1.34M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE15chars_availableEv:
   58|  14.2M|    {
   59|  14.2M|        return m_putback_buffer.size() + m_current_view.size();
   60|  14.2M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|  1.63M|    {
  269|  1.63M|        return !x.is_at_end();
  270|  1.63M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iteratordeEv:
  216|  4.48M|    {
  217|  4.48M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  4.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  4.48M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 4.48M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  4.48M|        auto res = read_at_position();
  226|  4.48M|        SCN_EXPECT(res);
  ------------------
  |  |  242|  4.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|      0|        return parent()->get_character_at(m_position);
  228|  4.48M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16get_character_atEl:
   89|  4.48M|    {
   90|  4.48M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  4.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.25M, False: 1.23M]
  |  |  ------------------
  ------------------
   91|  4.48M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  3.25M|            return m_putback_buffer[pos];
   93|  3.25M|        }
   94|  1.23M|        const auto start = pos - m_putback_buffer.size();
   95|  1.23M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  242|  1.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|      0|        return m_current_view[start];
   97|  4.48M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorppEv:
  202|  2.61M|    {
  203|  2.61M|        ++m_position;
  204|  2.61M|        std::ignore = read_at_position();
  205|  2.61M|        return *this;
  206|  2.61M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  251|  2.52M|    {
  252|  2.52M|        return !(lhs == rhs);
  253|  2.52M|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  246|  2.81M|    {
  247|  2.81M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 2.81M, False: 0]
  |  Branch (247:46): [True: 868k, False: 1.94M]
  ------------------
  248|  2.81M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator13batch_advanceEl:
  231|  1.44M|    {
  232|  1.44M|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  242|  1.44M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.44M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|      0|        m_position += n;
  234|  1.44M|        return *this;
  235|  1.44M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE8sync_allEv:
   53|   289k|    {
   54|   289k|        sync(0);
   55|   289k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE3getEv:
  321|  1.54M|{
  322|  1.54M|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 1.54M]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|  1.54M|    return ranges::subrange{forward_iterator{this, 0},
  327|  1.54M|                            ranges_std::default_sentinel};
  328|  1.54M|}
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
  154|  1.54M|    {
  155|  1.54M|        SCN_EXPECT(parent);
  ------------------
  |  |  242|  1.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|  1.54M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  242|  1.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  1.54M|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|  6.03M|    {
  258|  6.03M|        return x.is_at_end();
  259|  6.03M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
  301|  19.4M|    {
  302|  19.4M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 19.4M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  19.4M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 19.4M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  19.4M|        return !read_at_position();
  309|  19.4M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
  281|  59.9M|    {
  282|  59.9M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  59.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  59.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  59.9M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 59.9M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  59.9M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  152|  59.9M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 51.9M, False: 8.01M]
  |  |  ------------------
  ------------------
  289|  51.9M|            return true;
  290|  51.9M|        }
  291|       |
  292|  16.0M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 8.01M, False: 8.00M]
  ------------------
  293|  8.01M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 3.86k, False: 8.00M]
  ------------------
  294|  3.86k|                return false;
  295|  3.86k|            }
  296|  8.01M|        }
  297|  8.00M|        return true;
  298|  8.01M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE15chars_availableEv:
   58|  78.2M|    {
   59|  78.2M|        return m_putback_buffer.size() + m_current_view.size();
   60|  78.2M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|  13.3M|    {
  269|  13.3M|        return !x.is_at_end();
  270|  13.3M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iteratordeEv:
  216|  23.5M|    {
  217|  23.5M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  23.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  23.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  23.5M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 23.5M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  23.5M|        auto res = read_at_position();
  226|  23.5M|        SCN_EXPECT(res);
  ------------------
  |  |  242|  23.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  23.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|      0|        return parent()->get_character_at(m_position);
  228|  23.5M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16get_character_atEl:
   89|  23.5M|    {
   90|  23.5M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  23.5M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 14.3M, False: 9.20M]
  |  |  ------------------
  ------------------
   91|  23.5M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  14.3M|            return m_putback_buffer[pos];
   93|  14.3M|        }
   94|  9.20M|        const auto start = pos - m_putback_buffer.size();
   95|  9.20M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  242|  9.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  9.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|      0|        return m_current_view[start];
   97|  23.5M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorppEv:
  202|  16.9M|    {
  203|  16.9M|        ++m_position;
  204|  16.9M|        std::ignore = read_at_position();
  205|  16.9M|        return *this;
  206|  16.9M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  251|  15.9M|    {
  252|  15.9M|        return !(lhs == rhs);
  253|  15.9M|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  246|  17.0M|    {
  247|  17.0M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 17.0M, False: 0]
  |  Branch (247:46): [True: 6.28M, False: 10.7M]
  ------------------
  248|  17.0M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator13batch_advanceEl:
  231|  2.90M|    {
  232|  2.90M|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  242|  2.90M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.90M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|      0|        m_position += n;
  234|  2.90M|        return *this;
  235|  2.90M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE8sync_allEv:
   53|   869k|    {
   54|   869k|        sync(0);
   55|   869k|    }

_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIcEEmT_:
   71|  1.67M|{
   72|  1.67M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|  1.67M|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|  1.67M|    }
   75|  1.67M|    else if constexpr (sizeof(U) == 2) {
   76|  1.67M|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|  1.67M|    }
   78|  1.67M|    else {
   79|       |        // utf-32
   80|  1.67M|        static_assert(sizeof(U) == 4);
   81|  1.67M|        SCN_UNUSED(ch);
   82|  1.67M|        return 1;
   83|  1.67M|    }
   84|  1.67M|}
_ZN3scn2v26detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
   35|  1.67M|{
   36|  1.67M|    static_assert(sizeof(U8) == 1);
   37|       |
   38|  1.67M|    SCN_GCC_COMPAT_PUSH
   39|  1.67M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
   40|  1.67M|    constexpr char lengths[] =
   41|  1.67M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
   42|  1.67M|        "\1\1\1\1\1\1\1\1"
   43|  1.67M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
   44|       |                            // byte
   45|  1.67M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
   46|  1.67M|        "\3\3"              // highest bits 1110 -> 3-byte cp
   47|  1.67M|        "\4";               // highest bits 11110 -> 4-byte cp
   48|  1.67M|    return lengths[static_cast<unsigned char>(ch) >> 3];
   49|  1.67M|    SCN_GCC_COMPAT_POP
   50|  1.67M|}
_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIwEEmT_:
   71|  88.2M|{
   72|  88.2M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|  88.2M|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|  88.2M|    }
   75|  88.2M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (75:24): [Folded - Ignored]
  ------------------
   76|  88.2M|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|  88.2M|    }
   78|  88.2M|    else {
   79|       |        // utf-32
   80|  88.2M|        static_assert(sizeof(U) == 4);
   81|  88.2M|        SCN_UNUSED(ch);
  ------------------
  |  |  227|  88.2M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   82|  88.2M|        return 1;
   83|  88.2M|    }
   84|  88.2M|}

_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  1.47M|{
   36|  1.47M|#define SCN_VISIT(Type)                                         \
   37|  1.47M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  1.47M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  1.47M|    }                                                           \
   40|  1.47M|    else {                                                      \
   41|  1.47M|        return vis(monostate_val);                              \
   42|  1.47M|    }
   43|       |
   44|  1.47M|    monostate monostate_val{};
   45|       |
   46|  1.47M|    switch (arg.m_type) {
   47|   217k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 217k, False: 1.25M]
  ------------------
   48|   217k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   217k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   217k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   217k|    }                                                           \
  |  |   40|   217k|    else {                                                      \
  |  |   41|   217k|        return vis(monostate_val);                              \
  |  |   42|   217k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 1.47M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   279k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 279k, False: 1.19M]
  ------------------
   52|   279k|            SCN_VISIT(int);
  ------------------
  |  |   37|   279k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   279k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   279k|    }                                                           \
  |  |   40|   279k|    else {                                                      \
  |  |   41|   279k|        return vis(monostate_val);                              \
  |  |   42|   279k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 1.47M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   297k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 297k, False: 1.17M]
  ------------------
   56|   297k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   297k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   297k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   297k|    }                                                           \
  |  |   40|   297k|    else {                                                      \
  |  |   41|   297k|        return vis(monostate_val);                              \
  |  |   42|   297k|    }
  ------------------
   57|   203k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 203k, False: 1.27M]
  ------------------
   58|   203k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   203k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   203k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   203k|    }                                                           \
  |  |   40|   203k|    else {                                                      \
  |  |   41|   203k|        return vis(monostate_val);                              \
  |  |   42|   203k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 1.47M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   235k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 235k, False: 1.24M]
  ------------------
   62|   235k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   235k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   235k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   235k|    }                                                           \
  |  |   40|   235k|    else {                                                      \
  |  |   41|   235k|        return vis(monostate_val);                              \
  |  |   42|   235k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 1.47M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   242k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 242k, False: 1.23M]
  ------------------
   66|   242k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   242k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   242k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   242k|    }                                                           \
  |  |   40|   242k|    else {                                                      \
  |  |   41|   242k|        return vis(monostate_val);                              \
  |  |   42|   242k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 1.47M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 1.47M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 1.47M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 1.47M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 1.47M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 1.47M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 1.47M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 1.47M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 1.47M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 1.47M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 1.47M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 1.47M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 1.47M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 1.47M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 1.47M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 1.47M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 1.47M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  1.47M|            SCN_CLANG_POP
  114|  1.47M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  1.47M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  82.7k|{
   36|  82.7k|#define SCN_VISIT(Type)                                         \
   37|  82.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  82.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  82.7k|    }                                                           \
   40|  82.7k|    else {                                                      \
   41|  82.7k|        return vis(monostate_val);                              \
   42|  82.7k|    }
   43|       |
   44|  82.7k|    monostate monostate_val{};
   45|       |
   46|  82.7k|    switch (arg.m_type) {
   47|  13.7k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 13.7k, False: 68.9k]
  ------------------
   48|  13.7k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  13.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  13.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  13.7k|    }                                                           \
  |  |   40|  13.7k|    else {                                                      \
  |  |   41|  13.7k|        return vis(monostate_val);                              \
  |  |   42|  13.7k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 82.7k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  13.7k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 13.7k, False: 68.9k]
  ------------------
   52|  13.7k|            SCN_VISIT(int);
  ------------------
  |  |   37|  13.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  13.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  13.7k|    }                                                           \
  |  |   40|  13.7k|    else {                                                      \
  |  |   41|  13.7k|        return vis(monostate_val);                              \
  |  |   42|  13.7k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 82.7k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  13.7k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 13.7k, False: 68.9k]
  ------------------
   56|  13.7k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  13.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  13.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  13.7k|    }                                                           \
  |  |   40|  13.7k|    else {                                                      \
  |  |   41|  13.7k|        return vis(monostate_val);                              \
  |  |   42|  13.7k|    }
  ------------------
   57|  13.7k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 13.7k, False: 68.9k]
  ------------------
   58|  13.7k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  13.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  13.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  13.7k|    }                                                           \
  |  |   40|  13.7k|    else {                                                      \
  |  |   41|  13.7k|        return vis(monostate_val);                              \
  |  |   42|  13.7k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 82.7k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  13.7k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 13.7k, False: 68.9k]
  ------------------
   62|  13.7k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  13.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  13.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  13.7k|    }                                                           \
  |  |   40|  13.7k|    else {                                                      \
  |  |   41|  13.7k|        return vis(monostate_val);                              \
  |  |   42|  13.7k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 82.7k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  13.7k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 13.7k, False: 68.9k]
  ------------------
   66|  13.7k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  13.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  13.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  13.7k|    }                                                           \
  |  |   40|  13.7k|    else {                                                      \
  |  |   41|  13.7k|        return vis(monostate_val);                              \
  |  |   42|  13.7k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 82.7k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 82.7k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 82.7k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 82.7k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 82.7k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 82.7k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 82.7k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 82.7k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 82.7k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 82.7k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 82.7k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 82.7k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 82.7k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 82.7k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 82.7k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 82.7k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 82.7k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  82.7k|            SCN_CLANG_POP
  114|  82.7k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  82.7k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  3.71M|{
   36|  3.71M|#define SCN_VISIT(Type)                                         \
   37|  3.71M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  3.71M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  3.71M|    }                                                           \
   40|  3.71M|    else {                                                      \
   41|  3.71M|        return vis(monostate_val);                              \
   42|  3.71M|    }
   43|       |
   44|  3.71M|    monostate monostate_val{};
   45|       |
   46|  3.71M|    switch (arg.m_type) {
   47|   490k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 490k, False: 3.22M]
  ------------------
   48|   490k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   490k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   490k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   490k|    }                                                           \
  |  |   40|   490k|    else {                                                      \
  |  |   41|   490k|        return vis(monostate_val);                              \
  |  |   42|   490k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 3.71M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   732k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 732k, False: 2.97M]
  ------------------
   52|   732k|            SCN_VISIT(int);
  ------------------
  |  |   37|   732k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   732k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   732k|    }                                                           \
  |  |   40|   732k|    else {                                                      \
  |  |   41|   732k|        return vis(monostate_val);                              \
  |  |   42|   732k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 3.71M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   779k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 779k, False: 2.93M]
  ------------------
   56|   779k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   779k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   779k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   779k|    }                                                           \
  |  |   40|   779k|    else {                                                      \
  |  |   41|   779k|        return vis(monostate_val);                              \
  |  |   42|   779k|    }
  ------------------
   57|   481k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 481k, False: 3.22M]
  ------------------
   58|   481k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   481k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   481k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   481k|    }                                                           \
  |  |   40|   481k|    else {                                                      \
  |  |   41|   481k|        return vis(monostate_val);                              \
  |  |   42|   481k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 3.71M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   601k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 601k, False: 3.10M]
  ------------------
   62|   601k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   601k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   601k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   601k|    }                                                           \
  |  |   40|   601k|    else {                                                      \
  |  |   41|   601k|        return vis(monostate_val);                              \
  |  |   42|   601k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 3.71M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   624k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 624k, False: 3.08M]
  ------------------
   66|   624k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   624k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   624k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   624k|    }                                                           \
  |  |   40|   624k|    else {                                                      \
  |  |   41|   624k|        return vis(monostate_val);                              \
  |  |   42|   624k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 3.71M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 3.71M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 3.71M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 3.71M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 3.71M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 3.71M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 3.71M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 3.71M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 3.71M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 3.71M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 3.71M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 3.71M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 3.71M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 3.71M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 3.71M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 3.71M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 3.71M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  3.71M|            SCN_CLANG_POP
  114|  3.71M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  3.71M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   358k|{
   36|   358k|#define SCN_VISIT(Type)                                         \
   37|   358k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   358k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   358k|    }                                                           \
   40|   358k|    else {                                                      \
   41|   358k|        return vis(monostate_val);                              \
   42|   358k|    }
   43|       |
   44|   358k|    monostate monostate_val{};
   45|       |
   46|   358k|    switch (arg.m_type) {
   47|  59.7k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 59.7k, False: 298k]
  ------------------
   48|  59.7k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  59.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  59.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  59.7k|    }                                                           \
  |  |   40|  59.7k|    else {                                                      \
  |  |   41|  59.7k|        return vis(monostate_val);                              \
  |  |   42|  59.7k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 358k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  59.7k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 59.7k, False: 298k]
  ------------------
   52|  59.7k|            SCN_VISIT(int);
  ------------------
  |  |   37|  59.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  59.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  59.7k|    }                                                           \
  |  |   40|  59.7k|    else {                                                      \
  |  |   41|  59.7k|        return vis(monostate_val);                              \
  |  |   42|  59.7k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 358k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  59.7k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 59.7k, False: 298k]
  ------------------
   56|  59.7k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  59.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  59.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  59.7k|    }                                                           \
  |  |   40|  59.7k|    else {                                                      \
  |  |   41|  59.7k|        return vis(monostate_val);                              \
  |  |   42|  59.7k|    }
  ------------------
   57|  59.7k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 59.7k, False: 298k]
  ------------------
   58|  59.7k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  59.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  59.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  59.7k|    }                                                           \
  |  |   40|  59.7k|    else {                                                      \
  |  |   41|  59.7k|        return vis(monostate_val);                              \
  |  |   42|  59.7k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 358k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  59.7k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 59.7k, False: 298k]
  ------------------
   62|  59.7k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  59.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  59.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  59.7k|    }                                                           \
  |  |   40|  59.7k|    else {                                                      \
  |  |   41|  59.7k|        return vis(monostate_val);                              \
  |  |   42|  59.7k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 358k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  59.7k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 59.7k, False: 298k]
  ------------------
   66|  59.7k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  59.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  59.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  59.7k|    }                                                           \
  |  |   40|  59.7k|    else {                                                      \
  |  |   41|  59.7k|        return vis(monostate_val);                              \
  |  |   42|  59.7k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 358k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 358k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 358k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 358k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 358k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 358k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 358k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 358k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 358k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 358k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 358k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 358k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 358k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 358k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 358k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 358k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 358k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   358k|            SCN_CLANG_POP
  114|   358k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   358k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  1.40M|{
   36|  1.40M|#define SCN_VISIT(Type)                                         \
   37|  1.40M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  1.40M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  1.40M|    }                                                           \
   40|  1.40M|    else {                                                      \
   41|  1.40M|        return vis(monostate_val);                              \
   42|  1.40M|    }
   43|       |
   44|  1.40M|    monostate monostate_val{};
   45|       |
   46|  1.40M|    switch (arg.m_type) {
   47|   207k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 207k, False: 1.20M]
  ------------------
   48|   207k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   207k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   207k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   207k|    }                                                           \
  |  |   40|   207k|    else {                                                      \
  |  |   41|   207k|        return vis(monostate_val);                              \
  |  |   42|   207k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 1.40M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   262k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 262k, False: 1.14M]
  ------------------
   52|   262k|            SCN_VISIT(int);
  ------------------
  |  |   37|   262k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   262k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   262k|    }                                                           \
  |  |   40|   262k|    else {                                                      \
  |  |   41|   262k|        return vis(monostate_val);                              \
  |  |   42|   262k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 1.40M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   279k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 279k, False: 1.12M]
  ------------------
   56|   279k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   279k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   279k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   279k|    }                                                           \
  |  |   40|   279k|    else {                                                      \
  |  |   41|   279k|        return vis(monostate_val);                              \
  |  |   42|   279k|    }
  ------------------
   57|   198k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 198k, False: 1.20M]
  ------------------
   58|   198k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   198k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   198k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   198k|    }                                                           \
  |  |   40|   198k|    else {                                                      \
  |  |   41|   198k|        return vis(monostate_val);                              \
  |  |   42|   198k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 1.40M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   226k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 226k, False: 1.18M]
  ------------------
   62|   226k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   226k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   226k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   226k|    }                                                           \
  |  |   40|   226k|    else {                                                      \
  |  |   41|   226k|        return vis(monostate_val);                              \
  |  |   42|   226k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 1.40M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   233k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 233k, False: 1.17M]
  ------------------
   66|   233k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   233k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   233k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   233k|    }                                                           \
  |  |   40|   233k|    else {                                                      \
  |  |   41|   233k|        return vis(monostate_val);                              \
  |  |   42|   233k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 1.40M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 1.40M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 1.40M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 1.40M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 1.40M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 1.40M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 1.40M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 1.40M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 1.40M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 1.40M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 1.40M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 1.40M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 1.40M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 1.40M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 1.40M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 1.40M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 1.40M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  1.40M|            SCN_CLANG_POP
  114|  1.40M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  1.40M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  3.66M|{
   36|  3.66M|#define SCN_VISIT(Type)                                         \
   37|  3.66M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  3.66M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  3.66M|    }                                                           \
   40|  3.66M|    else {                                                      \
   41|  3.66M|        return vis(monostate_val);                              \
   42|  3.66M|    }
   43|       |
   44|  3.66M|    monostate monostate_val{};
   45|       |
   46|  3.66M|    switch (arg.m_type) {
   47|   493k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 493k, False: 3.17M]
  ------------------
   48|   493k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   493k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   493k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   493k|    }                                                           \
  |  |   40|   493k|    else {                                                      \
  |  |   41|   493k|        return vis(monostate_val);                              \
  |  |   42|   493k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 3.66M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   706k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 706k, False: 2.95M]
  ------------------
   52|   706k|            SCN_VISIT(int);
  ------------------
  |  |   37|   706k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   706k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   706k|    }                                                           \
  |  |   40|   706k|    else {                                                      \
  |  |   41|   706k|        return vis(monostate_val);                              \
  |  |   42|   706k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 3.66M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   748k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 748k, False: 2.91M]
  ------------------
   56|   748k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   748k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   748k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   748k|    }                                                           \
  |  |   40|   748k|    else {                                                      \
  |  |   41|   748k|        return vis(monostate_val);                              \
  |  |   42|   748k|    }
  ------------------
   57|   493k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 493k, False: 3.17M]
  ------------------
   58|   493k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   493k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   493k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   493k|    }                                                           \
  |  |   40|   493k|    else {                                                      \
  |  |   41|   493k|        return vis(monostate_val);                              \
  |  |   42|   493k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 3.66M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   601k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 601k, False: 3.06M]
  ------------------
   62|   601k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   601k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   601k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   601k|    }                                                           \
  |  |   40|   601k|    else {                                                      \
  |  |   41|   601k|        return vis(monostate_val);                              \
  |  |   42|   601k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 3.66M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   622k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 622k, False: 3.04M]
  ------------------
   66|   622k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   622k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   622k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   622k|    }                                                           \
  |  |   40|   622k|    else {                                                      \
  |  |   41|   622k|        return vis(monostate_val);                              \
  |  |   42|   622k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 3.66M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 3.66M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 3.66M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 3.66M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 3.66M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 3.66M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 3.66M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 3.66M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 3.66M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 3.66M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 3.66M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 3.66M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 3.66M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 3.66M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 3.66M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 3.66M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 3.66M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  3.66M|            SCN_CLANG_POP
  114|  3.66M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  3.66M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   248k|{
   36|   248k|#define SCN_VISIT(Type)                                         \
   37|   248k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   248k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   248k|    }                                                           \
   40|   248k|    else {                                                      \
   41|   248k|        return vis(monostate_val);                              \
   42|   248k|    }
   43|       |
   44|   248k|    monostate monostate_val{};
   45|       |
   46|   248k|    switch (arg.m_type) {
   47|  41.3k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 41.3k, False: 206k]
  ------------------
   48|  41.3k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  41.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  41.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  41.3k|    }                                                           \
  |  |   40|  41.3k|    else {                                                      \
  |  |   41|  41.3k|        return vis(monostate_val);                              \
  |  |   42|  41.3k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 248k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  41.3k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 41.3k, False: 206k]
  ------------------
   52|  41.3k|            SCN_VISIT(int);
  ------------------
  |  |   37|  41.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  41.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  41.3k|    }                                                           \
  |  |   40|  41.3k|    else {                                                      \
  |  |   41|  41.3k|        return vis(monostate_val);                              \
  |  |   42|  41.3k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 248k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  41.3k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 41.3k, False: 206k]
  ------------------
   56|  41.3k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  41.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  41.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  41.3k|    }                                                           \
  |  |   40|  41.3k|    else {                                                      \
  |  |   41|  41.3k|        return vis(monostate_val);                              \
  |  |   42|  41.3k|    }
  ------------------
   57|  41.3k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 41.3k, False: 206k]
  ------------------
   58|  41.3k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  41.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  41.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  41.3k|    }                                                           \
  |  |   40|  41.3k|    else {                                                      \
  |  |   41|  41.3k|        return vis(monostate_val);                              \
  |  |   42|  41.3k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 248k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  41.3k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 41.3k, False: 206k]
  ------------------
   62|  41.3k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  41.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  41.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  41.3k|    }                                                           \
  |  |   40|  41.3k|    else {                                                      \
  |  |   41|  41.3k|        return vis(monostate_val);                              \
  |  |   42|  41.3k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 248k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  41.3k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 41.3k, False: 206k]
  ------------------
   66|  41.3k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  41.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  41.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  41.3k|    }                                                           \
  |  |   40|  41.3k|    else {                                                      \
  |  |   41|  41.3k|        return vis(monostate_val);                              \
  |  |   42|  41.3k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 248k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 248k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 248k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 248k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 248k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 248k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 248k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 248k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 248k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 248k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 248k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 248k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 248k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 248k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 248k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 248k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 248k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   248k|            SCN_CLANG_POP
  114|   248k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   248k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  1.04M|{
   36|  1.04M|#define SCN_VISIT(Type)                                         \
   37|  1.04M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  1.04M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  1.04M|    }                                                           \
   40|  1.04M|    else {                                                      \
   41|  1.04M|        return vis(monostate_val);                              \
   42|  1.04M|    }
   43|       |
   44|  1.04M|    monostate monostate_val{};
   45|       |
   46|  1.04M|    switch (arg.m_type) {
   47|   165k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 165k, False: 882k]
  ------------------
   48|   165k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   165k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   165k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   165k|    }                                                           \
  |  |   40|   165k|    else {                                                      \
  |  |   41|   165k|        return vis(monostate_val);                              \
  |  |   42|   165k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 1.04M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   179k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 179k, False: 868k]
  ------------------
   52|   179k|            SCN_VISIT(int);
  ------------------
  |  |   37|   179k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   179k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   179k|    }                                                           \
  |  |   40|   179k|    else {                                                      \
  |  |   41|   179k|        return vis(monostate_val);                              \
  |  |   42|   179k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 1.04M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   179k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 179k, False: 868k]
  ------------------
   56|   179k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   179k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   179k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   179k|    }                                                           \
  |  |   40|   179k|    else {                                                      \
  |  |   41|   179k|        return vis(monostate_val);                              \
  |  |   42|   179k|    }
  ------------------
   57|   165k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 165k, False: 882k]
  ------------------
   58|   165k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   165k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   165k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   165k|    }                                                           \
  |  |   40|   165k|    else {                                                      \
  |  |   41|   165k|        return vis(monostate_val);                              \
  |  |   42|   165k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 1.04M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   179k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 179k, False: 868k]
  ------------------
   62|   179k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   179k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   179k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   179k|    }                                                           \
  |  |   40|   179k|    else {                                                      \
  |  |   41|   179k|        return vis(monostate_val);                              \
  |  |   42|   179k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 1.04M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   179k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 179k, False: 868k]
  ------------------
   66|   179k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   179k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   179k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   179k|    }                                                           \
  |  |   40|   179k|    else {                                                      \
  |  |   41|   179k|        return vis(monostate_val);                              \
  |  |   42|   179k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 1.04M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 1.04M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 1.04M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 1.04M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 1.04M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 1.04M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 1.04M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 1.04M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 1.04M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 1.04M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 1.04M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 1.04M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 1.04M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 1.04M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 1.04M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 1.04M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 1.04M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  1.04M|            SCN_CLANG_POP
  114|  1.04M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  1.04M|}  // namespace scn

_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|  2.38M|{
  174|  2.38M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  2.38M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|  2.38M|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NSC_17basic_string_viewIT0_NSC_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  110|  2.38M|{
  111|  2.38M|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  2.38M|    auto result = vscan_impl(buffer, format, args);
  114|  2.38M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  2.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 137k, False: 2.25M]
  |  |  ------------------
  ------------------
  115|   137k|        return unexpected(result.error());
  116|   137k|    }
  117|  2.25M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  2.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  2.38M|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENSt3__16localeEvEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vINSA_9remove_cvINSA_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEERKT0_OSG_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|  2.38M|{
  192|  2.38M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  2.38M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|  2.38M|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT_OSH_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
  126|  2.38M|{
  127|  2.38M|#if !SCN_DISABLE_LOCALE
  128|  2.38M|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  2.38M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  2.38M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  2.38M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  2.38M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  2.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 137k, False: 2.25M]
  |  |  ------------------
  ------------------
  135|   137k|        return unexpected(result.error());
  136|   137k|    }
  137|  2.25M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  2.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  2.38M|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|   492k|{
  205|   492k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  248|   492k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   492k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   492k|{
  151|   492k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   492k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   492k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   492k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.7k, False: 478k]
  |  |  ------------------
  ------------------
  155|  13.7k|        return unexpected(result.error());
  156|  13.7k|    }
  157|   478k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   478k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   492k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|   248k|{
  174|   248k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   248k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|   248k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS7_17basic_string_viewIT0_NS7_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  110|   248k|{
  111|   248k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   248k|    auto result = vscan_impl(buffer, format, args);
  114|   248k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 137k, False: 110k]
  |  |  ------------------
  ------------------
  115|   137k|        return unexpected(result.error());
  116|   137k|    }
  117|   110k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   248k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEERKT0_OSL_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|   248k|{
  192|   248k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   248k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|   248k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT_OSM_NS3_17basic_string_viewIT1_NS3_11char_traitsIS14_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS14_EEEE:
  126|   248k|{
  127|   248k|#if !SCN_DISABLE_LOCALE
  128|   248k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   248k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   248k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   248k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   248k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 137k, False: 110k]
  |  |  ------------------
  ------------------
  135|   137k|        return unexpected(result.error());
  136|   137k|    }
  137|   110k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   248k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|  27.5k|{
  205|  27.5k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  248|  27.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  27.5k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  27.5k|{
  151|  27.5k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  27.5k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  27.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  27.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.7k, False: 13.7k]
  |  |  ------------------
  ------------------
  155|  13.7k|        return unexpected(result.error());
  156|  13.7k|    }
  157|  13.7k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  27.5k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NSC_17basic_string_viewIT0_NSC_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  110|  2.42M|{
  111|  2.42M|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  2.42M|    auto result = vscan_impl(buffer, format, args);
  114|  2.42M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  2.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 413k, False: 2.01M]
  |  |  ------------------
  ------------------
  115|   413k|        return unexpected(result.error());
  116|   413k|    }
  117|  2.01M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  2.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  2.42M|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT_OSH_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
  126|  2.42M|{
  127|  2.42M|#if !SCN_DISABLE_LOCALE
  128|  2.42M|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  2.42M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  2.42M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  2.42M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  2.42M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  2.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 413k, False: 2.01M]
  |  |  ------------------
  ------------------
  135|   413k|        return unexpected(result.error());
  136|   413k|    }
  137|  2.01M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  2.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  2.42M|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   469k|{
  151|   469k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   469k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   469k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   469k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 41.3k, False: 427k]
  |  |  ------------------
  ------------------
  155|  41.3k|        return unexpected(result.error());
  156|  41.3k|    }
  157|   427k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   427k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   469k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS7_17basic_string_viewIT0_NS7_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  110|   730k|{
  111|   730k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   730k|    auto result = vscan_impl(buffer, format, args);
  114|   730k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   730k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 413k, False: 317k]
  |  |  ------------------
  ------------------
  115|   413k|        return unexpected(result.error());
  116|   413k|    }
  117|   317k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   317k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   730k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT_OSM_NS3_17basic_string_viewIT1_NS3_11char_traitsIS14_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS14_EEEE:
  126|   730k|{
  127|   730k|#if !SCN_DISABLE_LOCALE
  128|   730k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   730k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   730k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   730k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   730k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   730k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 413k, False: 317k]
  |  |  ------------------
  ------------------
  135|   413k|        return unexpected(result.error());
  136|   413k|    }
  137|   317k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   317k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   730k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  82.7k|{
  151|  82.7k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  82.7k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  82.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  82.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 41.3k, False: 41.3k]
  |  |  ------------------
  ------------------
  155|  41.3k|        return unexpected(result.error());
  156|  41.3k|    }
  157|  41.3k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  82.7k|}

_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   336k|{
   90|   336k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   336k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   336k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NSB_17basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|  2.42M|{
   45|  2.42M|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|  2.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  2.42M|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   336k|{
  125|   336k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   336k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   336k|                                                         format, {});
  127|   336k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENSt3__16localeELPv0EEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vINSA_9remove_cvINSA_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT0_OSH_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|  2.42M|{
   61|  2.42M|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|  2.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|  2.42M|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  69.3k|{
  159|  69.3k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  69.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  69.3k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|   469k|{
   73|   469k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  248|   469k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|   469k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   333k|{
   90|   333k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   333k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   333k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   333k|{
  125|   333k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   333k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   333k|                                                         format, {});
  127|   333k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  66.2k|{
  159|  66.2k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  66.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  66.2k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   461k|{
   90|   461k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   461k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   461k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   461k|{
  125|   461k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   461k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   461k|                                                         format, {});
  127|   461k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  87.4k|{
  159|  87.4k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  87.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  87.4k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   396k|{
   90|   396k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   396k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   396k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   396k|{
  125|   396k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   396k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   396k|                                                         format, {});
  127|   396k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  75.5k|{
  159|  75.5k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  75.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  75.5k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   487k|{
   90|   487k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   487k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   487k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   487k|{
  125|   487k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   487k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   487k|                                                         format, {});
  127|   487k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  93.0k|{
  159|  93.0k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  93.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  93.0k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   409k|{
   90|   409k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   409k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   409k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   409k|{
  125|   409k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   409k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   409k|                                                         format, {});
  127|   409k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  77.8k|{
  159|  77.8k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  77.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  77.8k|}
_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|   117k|{
   90|   117k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   117k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|   730k|{
   45|   730k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|   730k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   730k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|   117k|{
  125|   117k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   117k|                                                         format, {});
  127|   117k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT0_OSM_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|   730k|{
   61|   730k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|   730k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|   730k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  13.7k|{
  159|  13.7k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  13.7k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|  82.7k|{
   73|  82.7k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  248|  82.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|  82.7k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|   117k|{
   90|   117k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   117k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|   117k|{
  125|   117k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   117k|                                                         format, {});
  127|   117k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  13.7k|{
  159|  13.7k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  13.7k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|   124k|{
   90|   124k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   124k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|   124k|{
  125|   124k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   124k|                                                         format, {});
  127|   124k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  13.7k|{
  159|  13.7k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  13.7k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|   124k|{
   90|   124k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   124k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|   124k|{
  125|   124k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   124k|                                                         format, {});
  127|   124k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  13.7k|{
  159|  13.7k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  13.7k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|   124k|{
   90|   124k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   124k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|   124k|{
  125|   124k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   124k|                                                         format, {});
  127|   124k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  13.7k|{
  159|  13.7k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  13.7k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|   124k|{
   90|   124k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   124k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|   124k|{
  125|   124k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   124k|                                                         format, {});
  127|   124k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  13.7k|{
  159|  13.7k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  13.7k|}

_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|  6.16M|            {
 2693|  6.16M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  6.16M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|  6.16M|            {
 2672|  6.16M|                return decay_copy(t.begin());
 2673|  6.16M|            }
_ZN4nano6ranges6detail10decay_copyIPKcEENSt3__15decayIT_E4typeEOS7_:
 2605|   169M|    {
 2606|   169M|        return std::forward<T>(t);
 2607|   169M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  10.4M|            {
 3178|  10.4M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  10.4M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  10.4M|            {
 3158|  10.4M|                return t.data();
 3159|  10.4M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  10.4M|    {
 6095|  10.4M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 23.4k, False: 10.4M]
  ------------------
 6096|  10.4M|                   ? nullptr
 6097|  10.4M|                   : std::addressof(*ranges::begin(derived()));
 6098|  10.4M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  10.4M|            {
 3127|  10.4M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  10.4M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  10.4M|            {
 3098|  10.4M|                return bool((std::forward<T>(t).empty()));
 3099|  10.4M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  24.7M|        {
 6454|  24.7M|            return data_.begin_ == data_.end_;
 6455|  24.7M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  20.8M|    {
 6049|  20.8M|        return static_cast<const D&>(*this);
 6050|  20.8M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  42.7M|            {
 2693|  42.7M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  42.7M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  42.7M|            {
 2672|  42.7M|                return decay_copy(t.begin());
 2673|  42.7M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|  98.8M|        {
 6444|  98.8M|            return data_.begin_;
 6445|  98.8M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  10.4M|            {
 3038|  10.4M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  10.4M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  10.4M|            {
 3000|  10.4M|                return decay_copy(std::forward<T>(t).size());
 3001|  10.4M|            }
_ZN4nano6ranges6detail10decay_copyIlEENSt3__15decayIT_E4typeEOS5_:
 2605|  44.1M|    {
 2606|  44.1M|        return std::forward<T>(t);
 2607|  44.1M|    }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  24.8M|        {
 6462|  24.8M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  24.8M|                return data_.size_;
 6464|  24.8M|            }
 6465|  24.8M|            else {
 6466|  24.8M|                return data_.end_ - data_.begin_;
 6467|  24.8M|            }
 6468|  24.8M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  17.5M|            {
 3788|  17.5M|                ranges::advance(x, n);
 3789|  17.5M|                return x;
 3790|  17.5M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  17.5M|            {
 3678|  17.5M|                fn::impl(i, n);
 3679|  17.5M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  17.5M|            {
 3562|  17.5M|                r += n;
 3563|  17.5M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  52.2M|            {
 2693|  52.2M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  52.2M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  52.2M|            {
 2672|  52.2M|                return decay_copy(t.begin());
 2673|  52.2M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  24.0M|            {
 2759|  24.0M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  24.0M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  24.0M|            {
 2739|  24.0M|                return decay_copy(std::forward<T>(t).end());
 2740|  24.0M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE3endEv:
 6448|  63.8M|        {
 6449|  63.8M|            return data_.end_;
 6450|  63.8M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  12.0M|            {
 2759|  12.0M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  12.0M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEPKcSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  12.0M|            {
 2739|  12.0M|                return decay_copy(std::forward<T>(t).end());
 2740|  12.0M|            }
_ZN4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  41.6M|        {
 6375|  41.6M|        }
_ZN4nano6ranges6detail13subrange_dataIPKcS4_Lb0EEC2EOS4_S6_:
 6293|  41.6M|        {
 6294|  41.6M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   289k|            {
 2693|   289k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   289k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|   289k|            {
 2672|   289k|                return decay_copy(t.begin());
 2673|   289k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEEEENS3_5decayIT_E4typeEOSC_:
 2605|  3.38M|    {
 2606|  3.38M|        return std::forward<T>(t);
 2607|  3.38M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|   758k|            {
 2693|   758k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   758k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|   758k|            {
 2672|   758k|                return decay_copy(t.begin());
 2673|   758k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|   992k|        {
 6444|   992k|            return data_.begin_;
 6445|   992k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  1.58M|            {
 2759|  1.58M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.58M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  1.58M|            {
 2739|  1.58M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.58M|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|  1.58M|        {
 6449|  1.58M|            return data_.end_;
 6450|  1.58M|        }
_ZNK4nano6ranges6detail5next_2fnclINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EESE_E4typeESE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3787|   234k|            {
 3788|   234k|                ranges::advance(x, n);
 3789|   234k|                return x;
 3790|   234k|            }
_ZNK4nano6ranges6detail8advance_2fnclINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3677|   234k|            {
 3678|   234k|                fn::impl(i, n);
 3679|   234k|            }
_ZN4nano6ranges6detail8advance_2fn4implINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEEEENS5_9enable_ifIX22random_access_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3561|   234k|            {
 3562|   234k|                r += n;
 3563|   234k|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   524k|            {
 2759|   524k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   524k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEENS5_16__deque_iteratorIcPKcRSD_PKSE_lLl4096EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   524k|            {
 2739|   524k|                return decay_copy(std::forward<T>(t).end());
 2740|   524k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|   758k|        {
 6375|   758k|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_Lb0EEC2EOSA_SC_:
 6293|   758k|        {
 6294|   758k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSJ_:
 2692|   234k|            {
 2693|   234k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   234k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|   234k|            {
 2672|   234k|                return decay_copy(t.begin());
 2673|   234k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|  2.17M|            {
 2693|  2.17M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  2.17M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|  2.17M|            {
 2672|  2.17M|                return decay_copy(t.begin());
 2673|  2.17M|            }
_ZN4nano6ranges6detail10decay_copyIPKwEENSt3__15decayIT_E4typeEOS7_:
 2605|   252M|    {
 2606|   252M|        return std::forward<T>(t);
 2607|   252M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  5.32M|            {
 3178|  5.32M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  5.32M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  5.32M|            {
 3158|  5.32M|                return t.data();
 3159|  5.32M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  5.32M|    {
 6095|  5.32M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 28.1k, False: 5.29M]
  ------------------
 6096|  5.32M|                   ? nullptr
 6097|  5.32M|                   : std::addressof(*ranges::begin(derived()));
 6098|  5.32M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  5.32M|            {
 3127|  5.32M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  5.32M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  5.32M|            {
 3098|  5.32M|                return bool((std::forward<T>(t).empty()));
 3099|  5.32M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  8.49M|        {
 6454|  8.49M|            return data_.begin_ == data_.end_;
 6455|  8.49M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  10.6M|    {
 6049|  10.6M|        return static_cast<const D&>(*this);
 6050|  10.6M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  41.6M|            {
 2693|  41.6M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  41.6M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  41.6M|            {
 2672|  41.6M|                return decay_copy(t.begin());
 2673|  41.6M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|   106M|        {
 6444|   106M|            return data_.begin_;
 6445|   106M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  5.32M|            {
 3038|  5.32M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  5.32M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  5.32M|            {
 3000|  5.32M|                return decay_copy(std::forward<T>(t).size());
 3001|  5.32M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  19.3M|        {
 6462|  19.3M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  19.3M|                return data_.size_;
 6464|  19.3M|            }
 6465|  19.3M|            else {
 6466|  19.3M|                return data_.end_ - data_.begin_;
 6467|  19.3M|            }
 6468|  19.3M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  22.2M|            {
 3788|  22.2M|                ranges::advance(x, n);
 3789|  22.2M|                return x;
 3790|  22.2M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  22.2M|            {
 3678|  22.2M|                fn::impl(i, n);
 3679|  22.2M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  22.2M|            {
 3562|  22.2M|                r += n;
 3563|  22.2M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  61.0M|            {
 2693|  61.0M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  61.0M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  61.0M|            {
 2672|  61.0M|                return decay_copy(t.begin());
 2673|  61.0M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  23.1M|            {
 2759|  23.1M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  23.1M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  23.1M|            {
 2739|  23.1M|                return decay_copy(std::forward<T>(t).end());
 2740|  23.1M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE3endEv:
 6448|   143M|        {
 6449|   143M|            return data_.end_;
 6450|   143M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  10.5M|            {
 2759|  10.5M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  10.5M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEPKwSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  10.5M|            {
 2739|  10.5M|                return decay_copy(std::forward<T>(t).end());
 2740|  10.5M|            }
_ZN4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  40.8M|        {
 6375|  40.8M|        }
_ZN4nano6ranges6detail13subrange_dataIPKwS4_Lb0EEC2EOS4_S6_:
 6293|  40.8M|        {
 6294|  40.8M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   869k|            {
 2693|   869k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   869k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|   869k|            {
 2672|   869k|                return decay_copy(t.begin());
 2673|   869k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEEEENS3_5decayIT_E4typeEOSC_:
 2605|  13.9M|    {
 2606|  13.9M|        return std::forward<T>(t);
 2607|  13.9M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  2.22M|            {
 2693|  2.22M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  2.22M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  2.22M|            {
 2672|  2.22M|                return decay_copy(t.begin());
 2673|  2.22M|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|  2.89M|        {
 6444|  2.89M|            return data_.begin_;
 6445|  2.89M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  8.68M|            {
 2759|  8.68M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  8.68M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  8.68M|            {
 2739|  8.68M|                return decay_copy(std::forward<T>(t).end());
 2740|  8.68M|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|  8.68M|        {
 6449|  8.68M|            return data_.end_;
 6450|  8.68M|        }
_ZNK4nano6ranges6detail5next_2fnclINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EESE_E4typeESE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3787|   675k|            {
 3788|   675k|                ranges::advance(x, n);
 3789|   675k|                return x;
 3790|   675k|            }
_ZNK4nano6ranges6detail8advance_2fnclINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3677|   675k|            {
 3678|   675k|                fn::impl(i, n);
 3679|   675k|            }
_ZN4nano6ranges6detail8advance_2fn4implINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX22random_access_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3561|   675k|            {
 3562|   675k|                r += n;
 3563|   675k|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  1.54M|            {
 2759|  1.54M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.54M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEENS5_16__deque_iteratorIwPKwRSD_PKSE_lLl1024EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  1.54M|            {
 2739|  1.54M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.54M|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|  2.22M|        {
 6375|  2.22M|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_Lb0EEC2EOSA_SC_:
 6293|  2.22M|        {
 6294|  2.22M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSJ_:
 2692|   675k|            {
 2693|   675k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   675k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|   675k|            {
 2672|   675k|                return decay_copy(t.begin());
 2673|   675k|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  12.8M|        {
 6444|  12.8M|            return data_.begin_;
 6445|  12.8M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  48.0M|        {
 6444|  48.0M|            return data_.begin_;
 6445|  48.0M|        }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  28.7M|    {
 6044|  28.7M|        return static_cast<D&>(*this);
 6045|  28.7M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  14.3M|            {
 3098|  14.3M|                return bool((std::forward<T>(t).empty()));
 3099|  14.3M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  14.3M|            {
 3127|  14.3M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  14.3M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  14.3M|    {
 6085|  14.3M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 0, False: 14.3M]
  ------------------
 6086|  14.3M|                   ? nullptr
 6087|  14.3M|                   : std::addressof(*ranges::begin(derived()));
 6088|  14.3M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|  32.5M|            {
 2739|  32.5M|                return decay_copy(std::forward<T>(t).end());
 2740|  32.5M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|  32.5M|            {
 2759|  32.5M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  32.5M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  6.35M|    {
 6044|  6.35M|        return static_cast<D&>(*this);
 6045|  6.35M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  3.17M|            {
 3098|  3.17M|                return bool((std::forward<T>(t).empty()));
 3099|  3.17M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  3.17M|            {
 3127|  3.17M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  3.17M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  3.17M|    {
 6085|  3.17M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 0, False: 3.17M]
  ------------------
 6086|  3.17M|                   ? nullptr
 6087|  3.17M|                   : std::addressof(*ranges::begin(derived()));
 6088|  3.17M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|   113M|            {
 2739|   113M|                return decay_copy(std::forward<T>(t).end());
 2740|   113M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|   113M|            {
 2759|   113M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   113M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  8.73M|            {
 3780|  8.73M|                ++x;
 3781|  8.73M|                return x;
 3782|  8.73M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  14.4M|            {
 3038|  14.4M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  14.4M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  14.4M|            {
 3000|  14.4M|                return decay_copy(std::forward<T>(t).size());
 3001|  14.4M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  14.3M|            {
 3178|  14.3M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  14.3M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  14.3M|            {
 3158|  14.3M|                return t.data();
 3159|  14.3M|            }
_ZNK4nano6ranges6detail5prev_2fnclIPKcEENSt3__19enable_ifIX22bidirectional_iteratorIT_EES9_E4typeES9_:
 3827|  1.37M|            {
 3828|  1.37M|                --x;
 3829|  1.37M|                return x;
 3830|  1.37M|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 3076|  1.19M|            {
 3077|  1.19M|                return fn::impl(std::forward<T>(t));
 3078|  1.19M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISF_EENS0_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSF_EEEEE15difference_typeEE4typeELm8EElSO_E4typeE_EEOSF_:
 3066|  1.19M|            {
 3067|  1.19M|                return static_cast<ssize_return_t<T>>(
 3068|  1.19M|                    ranges::size(std::forward<T>(t)));
 3069|  1.19M|            }
_ZNK4nano6ranges6detail5size_2fnclIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSE_:
 3037|  1.19M|            {
 3038|  1.19M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  1.19M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  1.19M|            {
 3000|  1.19M|                return decay_copy(std::forward<T>(t).size());
 3001|  1.19M|            }
_ZN4nano6ranges6detail10decay_copyImEENSt3__15decayIT_E4typeEOS5_:
 2605|  15.0M|    {
 2606|  15.0M|        return std::forward<T>(t);
 2607|  15.0M|    }
_ZNK4nano6ranges6detail6ssize_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSB_:
 3076|  13.8M|            {
 3077|  13.8M|                return fn::impl(std::forward<T>(t));
 3078|  13.8M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISC_EENS0_20incrementable_traitsIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRSC_EEEEE15difference_typeEE4typeELm8EElSL_E4typeE_EEOSC_:
 3066|  13.8M|            {
 3067|  13.8M|                return static_cast<ssize_return_t<T>>(
 3068|  13.8M|                    ranges::size(std::forward<T>(t)));
 3069|  13.8M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 3037|  13.8M|            {
 3038|  13.8M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  13.8M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESC_E4typeEOSE_NS1_12priority_tagILm2EEE:
 2999|  13.8M|            {
 3000|  13.8M|                return decay_copy(std::forward<T>(t).size());
 3001|  13.8M|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS9_DpOSA_:
 1299|  11.1M|            {
 1300|  11.1M|                return fn::impl(std::forward<F>(f),
 1301|  11.1M|                                std::forward<Args>(args)...);
 1302|  11.1M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJRKcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS9_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISC_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSC_DpOSF_:
 1288|  11.1M|            {
 1289|  11.1M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  11.1M|            }
_ZNK4nano6ranges8identityclIRKcEEOT_S6_:
 1141|  11.1M|    {
 1142|  11.1M|        return std::forward<T>(t);
 1143|  11.1M|    }
_ZNK4nano6ranges6detail9distance_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  17.7M|            {
 3756|  17.7M|                return fn::impl(std::move(first), std::move(last));
 3757|  17.7M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKcS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  17.7M|            {
 3716|  17.7M|                return s - i;
 3717|  17.7M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  3.10M|        {
 6375|  3.10M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  3.10M|        {
 6294|  3.10M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  5.79M|            {
 2693|  5.79M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  5.79M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  5.79M|            {
 2672|  5.79M|                return decay_copy(t.begin());
 2673|  5.79M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__15decayIT_E4typeEOSB_:
 2605|  12.4M|    {
 2606|  12.4M|        return std::forward<T>(t);
 2607|  12.4M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  2.14M|            {
 2759|  2.14M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  2.14M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  2.14M|            {
 2739|  2.14M|                return decay_copy(std::forward<T>(t).end());
 2740|  2.14M|            }
_ZN4nano6ranges6detail10decay_copyINS0_18default_sentinel_tEEENSt3__15decayIT_E4typeEOS6_:
 2605|  33.9M|    {
 2606|  33.9M|        return std::forward<T>(t);
 2607|  33.9M|    }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  5.75M|        {
 6449|  5.75M|            return data_.end_;
 6450|  5.75M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EE5beginEv:
 6443|  2.06M|        {
 6444|  2.06M|            return data_.begin_;
 6445|  2.06M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EE3endEv:
 6448|  2.06M|        {
 6449|  2.06M|            return data_.end_;
 6450|  2.06M|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S8_:
 6374|   689k|        {
 6375|   689k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_Lb0EEC2EOS8_SA_:
 6293|   689k|        {
 6294|   689k|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|   689k|            {
 3780|   689k|                ++x;
 3781|   689k|                return x;
 3782|   689k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbcESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|   289k|        {
 6793|   289k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   289k|                                    proj);
 6795|   289k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbcESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   289k|        {
 6761|   399k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 399k, False: 48]
  ------------------
 6762|   399k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 289k, False: 110k]
  ------------------
 6763|   289k|                    return first;
 6764|   289k|                }
 6765|   110k|                ++first;
 6766|   110k|            }
 6767|     48|            return first;
 6768|   289k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbcES9_EEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|   399k|            {
 1300|   399k|                return fn::impl(std::forward<F>(f),
 1301|   399k|                                std::forward<Args>(args)...);
 1302|   399k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbcES9_EEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSC_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISF_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSF_DpOSI_:
 1288|   399k|            {
 1289|   399k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   399k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|   399k|            {
 1300|   399k|                return fn::impl(std::forward<F>(f),
 1301|   399k|                                std::forward<Args>(args)...);
 1302|   399k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISA_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSA_DpOSD_:
 1288|   399k|            {
 1289|   399k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   399k|            }
_ZNK4nano6ranges8identityclIcEEOT_S4_:
 1141|   399k|    {
 1142|   399k|        return std::forward<T>(t);
 1143|   399k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  3.61M|            {
 2759|  3.61M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  3.61M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  3.61M|            {
 2739|  3.61M|                return decay_copy(std::forward<T>(t).end());
 2740|  3.61M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  6.63M|            {
 2693|  6.63M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  6.63M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  6.63M|            {
 2672|  6.63M|                return decay_copy(t.begin());
 2673|  6.63M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  3.17M|            {
 3178|  3.17M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  3.17M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  3.17M|            {
 3158|  3.17M|                return t.data();
 3159|  3.17M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  14.0M|            {
 3038|  14.0M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  14.0M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  14.0M|            {
 3000|  14.0M|                return decay_copy(std::forward<T>(t).size());
 3001|  14.0M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  8.48M|            {
 3780|  8.48M|                ++x;
 3781|  8.48M|                return x;
 3782|  8.48M|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSC_:
 3076|  10.8M|            {
 3077|  10.8M|                return fn::impl(std::forward<T>(t));
 3078|  10.8M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNSt3__111conditionalIXltstNSE_9enable_ifIX5rangeISD_EENS0_20incrementable_traitsIDTclL_ZNSC_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSD_:
 3066|  10.8M|            {
 3067|  10.8M|                return static_cast<ssize_return_t<T>>(
 3068|  10.8M|                    ranges::size(std::forward<T>(t)));
 3069|  10.8M|            }
_ZNK4nano6ranges6detail5prev_2fnclIPKwEENSt3__19enable_ifIX22bidirectional_iteratorIT_EES9_E4typeES9_:
 3827|  1.23M|            {
 3828|  1.23M|                --x;
 3829|  1.23M|                return x;
 3830|  1.23M|            }
_ZNK4nano6ranges6detail9distance_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  12.2M|            {
 3756|  12.2M|                return fn::impl(std::move(first), std::move(last));
 3757|  12.2M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKwS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  12.2M|            {
 3716|  12.2M|                return s - i;
 3717|  12.2M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  12.9M|        {
 6375|  12.9M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  12.9M|        {
 6294|  12.9M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  16.6M|            {
 2693|  16.6M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  16.6M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  16.6M|            {
 2672|  16.6M|                return decay_copy(t.begin());
 2673|  16.6M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__15decayIT_E4typeEOSB_:
 2605|  46.7M|    {
 2606|  46.7M|        return std::forward<T>(t);
 2607|  46.7M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  10.5M|            {
 2759|  10.5M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  10.5M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  10.5M|            {
 2739|  10.5M|                return decay_copy(std::forward<T>(t).end());
 2740|  10.5M|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  28.1M|        {
 6449|  28.1M|            return data_.end_;
 6450|  28.1M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EE5beginEv:
 6443|  17.4M|        {
 6444|  17.4M|            return data_.begin_;
 6445|  17.4M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EE3endEv:
 6448|  17.4M|        {
 6449|  17.4M|            return data_.end_;
 6450|  17.4M|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S8_:
 6374|  5.80M|        {
 6375|  5.80M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_Lb0EEC2EOS8_SA_:
 6293|  5.80M|        {
 6294|  5.80M|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|  2.03M|            {
 3780|  2.03M|                ++x;
 3781|  2.03M|                return x;
 3782|  2.03M|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbwESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|  1.10M|        {
 6793|  1.10M|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  1.10M|                                    proj);
 6795|  1.10M|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbwESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|  1.10M|        {
 6761|  2.67M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 2.67M, False: 232]
  ------------------
 6762|  2.67M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 1.10M, False: 1.57M]
  ------------------
 6763|  1.10M|                    return first;
 6764|  1.10M|                }
 6765|  1.57M|                ++first;
 6766|  1.57M|            }
 6767|    232|            return first;
 6768|  1.10M|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbwES9_EEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|  2.67M|            {
 1300|  2.67M|                return fn::impl(std::forward<F>(f),
 1301|  2.67M|                                std::forward<Args>(args)...);
 1302|  2.67M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbwES9_EEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSC_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISF_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSF_DpOSI_:
 1288|  2.67M|            {
 1289|  2.67M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  2.67M|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|  2.67M|            {
 1300|  2.67M|                return fn::impl(std::forward<F>(f),
 1301|  2.67M|                                std::forward<Args>(args)...);
 1302|  2.67M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISA_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSA_DpOSD_:
 1288|  2.67M|            {
 1289|  2.67M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  2.67M|            }
_ZNK4nano6ranges8identityclIwEEOT_S4_:
 1141|  2.67M|    {
 1142|  2.67M|        return std::forward<T>(t);
 1143|  2.67M|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  17.5M|            {
 2759|  17.5M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  17.5M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  17.5M|            {
 2739|  17.5M|                return decay_copy(std::forward<T>(t).end());
 2740|  17.5M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  30.1M|            {
 2693|  30.1M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  30.1M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  30.1M|            {
 2672|  30.1M|                return decay_copy(t.begin());
 2673|  30.1M|            }
find_whitespace.cpp:_ZNK4nano6ranges6detail10find_if_fnclIRNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEENS0_8identityEZN3scn2v24impl33find_classic_nonspace_narrow_fastES8_E3$_3EENS4_9enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SA_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSG_EEEENS1_16projected_helperISO_SJ_vEEEEEENSI_IX14borrowed_rangeISG_EEE4typeISO_NS0_8danglingEEEE4typeEOSG_SH_SJ_:
 6792|  5.58M|        {
 6793|  5.58M|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  5.58M|                                    proj);
 6795|  5.58M|        }
find_whitespace.cpp:_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEE3$_3NS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|  5.58M|        {
 6761|  11.5M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 11.1M, False: 363k]
  ------------------
 6762|  11.1M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 5.22M, False: 5.96M]
  ------------------
 6763|  5.22M|                    return first;
 6764|  5.22M|                }
 6765|  5.96M|                ++first;
 6766|  5.96M|            }
 6767|   363k|            return first;
 6768|  5.58M|        }
find_whitespace.cpp:_ZNK4nano6ranges6detail7invoke_2fnclIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSH_DpOSI_:
 1299|  11.1M|            {
 1300|  11.1M|                return fn::impl(std::forward<F>(f),
 1301|  11.1M|                                std::forward<Args>(args)...);
 1302|  11.1M|            }
find_whitespace.cpp:_ZN4nano6ranges6detail7invoke_2fn4implIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEENS8_9enable_ifIXntsr3std17is_member_pointerINS8_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISJ_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSJ_DpOSM_:
 1288|  11.1M|            {
 1289|  11.1M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  11.1M|            }

_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
   49|   563k|{
   50|   563k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|   563k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|   563k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
   49|   191k|{
   50|   191k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|   191k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|   191k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA51_KcEEEDaDpOT_:
   49|  90.3k|{
   50|  90.3k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  90.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  90.3k|}
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|   289k|    {
   44|   289k|    }
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|  1.10M|    {
   44|  1.10M|    }
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA17_KcEEEDaDpOT_:
   49|  79.5k|{
   50|  79.5k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  79.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  79.5k|}

_ZNK3scn2v28expectedIlNS0_10scan_errorEEcvbEv:
 1190|  14.7M|    {
 1191|  14.7M|        return has_value();
 1192|  14.7M|    }
_ZNK3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  188|  28.2M|    {
  189|  28.2M|        return m_has_value;
  190|  28.2M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5errorEv:
 1196|  2.31M|    {
 1197|  2.31M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  2.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  2.31M|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  2.31M|    {
  172|  2.31M|        return m_unexpected;
  173|  2.31M|    }
_ZNR3scn2v210unexpectedINS0_10scan_errorEE5errorEv:
   71|  17.4M|    {
   72|  17.4M|        return m_unexpected;
   73|  17.4M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
   57|  8.59M|    {
   58|  8.59M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  8.59M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  8.59M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   289k|    {
 1078|   289k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   289k|    {
  151|   289k|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
   66|  10.2M|    {
   67|  10.2M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  10.2M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  10.2M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.27M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1250|  11.2M|    {
 1251|  11.2M|        return value();
 1252|  11.2M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1220|  11.2M|    {
 1221|  11.2M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  11.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  11.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  11.2M|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  154|  11.2M|    {
  155|  11.2M|        return m_value;
  156|  11.2M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  4.98M|    {
 1034|  4.98M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  4.98M|    {
  142|  4.98M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  5.27M|    {
 1191|  5.27M|        return has_value();
 1192|  5.27M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  10.5M|    {
  189|  10.5M|        return m_has_value;
  190|  10.5M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   289k|    {
 1197|   289k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   289k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   289k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   289k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   289k|    {
  172|   289k|        return m_unexpected;
  173|   289k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  48.2k|    {
 1078|  48.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  48.2k|    {
  151|  48.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   721k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  4.50M|    {
 1251|  4.50M|        return value();
 1252|  4.50M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  4.98M|    {
 1221|  4.98M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.98M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.98M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.98M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  4.98M|    {
  155|  4.98M|        return m_value;
  156|  4.98M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   673k|    {
 1034|   673k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   673k|    {
  142|   673k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|   721k|    {
 1191|   721k|        return has_value();
 1192|   721k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.39M|    {
  189|  1.39M|        return m_has_value;
  190|  1.39M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|   673k|    {
 1274|   673k|        return std::addressof(value());
 1275|   673k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   673k|    {
 1221|   673k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   673k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   673k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   673k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   673k|    {
  155|   673k|        return m_value;
  156|   673k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|   478k|    {
 1263|   478k|        return std::move(value());
 1264|   478k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  48.2k|    {
 1078|  48.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  48.2k|    {
  151|  48.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   699k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   651k|    {
 1034|   651k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   651k|    {
  142|   651k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|   699k|    {
 1191|   699k|        return has_value();
 1192|   699k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.35M|    {
  189|  1.35M|        return m_has_value;
  190|  1.35M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|   651k|    {
 1274|   651k|        return std::addressof(value());
 1275|   651k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   651k|    {
 1221|   651k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   651k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   651k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   651k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   651k|    {
  155|   651k|        return m_value;
  156|   651k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  48.2k|    {
 1078|  48.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  48.2k|    {
  151|  48.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.02M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   977k|    {
 1034|   977k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   977k|    {
  142|   977k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|  1.02M|    {
 1191|  1.02M|        return has_value();
 1192|  1.02M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.00M|    {
  189|  2.00M|        return m_has_value;
  190|  2.00M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|   977k|    {
 1274|   977k|        return std::addressof(value());
 1275|   977k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   977k|    {
 1221|   977k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   977k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   977k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   977k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   977k|    {
  155|   977k|        return m_value;
  156|   977k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  48.2k|    {
 1078|  48.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  48.2k|    {
  151|  48.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   850k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   802k|    {
 1034|   802k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   802k|    {
  142|   802k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|   850k|    {
 1191|   850k|        return has_value();
 1192|   850k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.65M|    {
  189|  1.65M|        return m_has_value;
  190|  1.65M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|   802k|    {
 1274|   802k|        return std::addressof(value());
 1275|   802k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   802k|    {
 1221|   802k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   802k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   802k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   802k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   802k|    {
  155|   802k|        return m_value;
  156|   802k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  48.2k|    {
 1078|  48.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  48.2k|    {
  151|  48.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.09M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|  1.04M|    {
 1034|  1.04M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|  1.04M|    {
  142|  1.04M|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|  1.09M|    {
 1191|  1.09M|        return has_value();
 1192|  1.09M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.13M|    {
  189|  2.13M|        return m_has_value;
  190|  2.13M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|  1.04M|    {
 1274|  1.04M|        return std::addressof(value());
 1275|  1.04M|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|  1.04M|    {
 1221|  1.04M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.04M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.04M|    {
  155|  1.04M|        return m_value;
  156|  1.04M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  48.2k|    {
 1078|  48.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  48.2k|    {
  151|  48.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   881k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   832k|    {
 1034|   832k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   832k|    {
  142|   832k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|   881k|    {
 1191|   881k|        return has_value();
 1192|   881k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.71M|    {
  189|  1.71M|        return m_has_value;
  190|  1.71M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|   832k|    {
 1274|   832k|        return std::addressof(value());
 1275|   832k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   832k|    {
 1221|   832k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   832k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   832k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   832k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   832k|    {
  155|   832k|        return m_value;
  156|   832k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|   289k|    {
 1078|   289k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|   289k|    {
  151|   289k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   524k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|   234k|    {
 1034|   234k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSG_EvEENS7_10in_place_tEDpOT_:
  141|   234k|    {
  142|   234k|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   524k|    {
 1191|   524k|        return has_value();
 1192|   524k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.04M|    {
  189|  1.04M|        return m_has_value;
  190|  1.04M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   289k|    {
 1197|   289k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   289k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   289k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   289k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   289k|    {
  172|   289k|        return m_unexpected;
  173|   289k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  48.2k|    {
 1078|  48.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  48.2k|    {
  151|  48.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  87.3k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEERT_v:
 1250|   220k|    {
 1251|   220k|        return value();
 1252|   220k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|   234k|    {
 1221|   234k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   234k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   234k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   234k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|   234k|    {
  155|   234k|        return m_value;
  156|   234k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  39.0k|    {
 1034|  39.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  39.0k|    {
  142|  39.0k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|  87.3k|    {
 1191|  87.3k|        return has_value();
 1192|  87.3k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   126k|    {
  189|   126k|        return m_has_value;
  190|   126k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|  39.0k|    {
 1274|  39.0k|        return std::addressof(value());
 1275|  39.0k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  39.0k|    {
 1221|  39.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  39.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  39.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  39.0k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  39.0k|    {
  155|  39.0k|        return m_value;
  156|  39.0k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEEOT_v:
 1262|  13.7k|    {
 1263|  13.7k|        return std::move(value());
 1264|  13.7k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  48.2k|    {
 1078|  48.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  48.2k|    {
  151|  48.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  87.3k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  39.0k|    {
 1034|  39.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  39.0k|    {
  142|  39.0k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|  87.3k|    {
 1191|  87.3k|        return has_value();
 1192|  87.3k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   126k|    {
  189|   126k|        return m_has_value;
  190|   126k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|  39.0k|    {
 1274|  39.0k|        return std::addressof(value());
 1275|  39.0k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  39.0k|    {
 1221|  39.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  39.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  39.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  39.0k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  39.0k|    {
  155|  39.0k|        return m_value;
  156|  39.0k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  48.2k|    {
 1078|  48.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  48.2k|    {
  151|  48.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  87.3k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  39.0k|    {
 1034|  39.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  39.0k|    {
  142|  39.0k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|  87.3k|    {
 1191|  87.3k|        return has_value();
 1192|  87.3k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   126k|    {
  189|   126k|        return m_has_value;
  190|   126k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|  39.0k|    {
 1274|  39.0k|        return std::addressof(value());
 1275|  39.0k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  39.0k|    {
 1221|  39.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  39.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  39.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  39.0k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  39.0k|    {
  155|  39.0k|        return m_value;
  156|  39.0k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  48.2k|    {
 1078|  48.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  48.2k|    {
  151|  48.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  87.3k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  39.0k|    {
 1034|  39.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  39.0k|    {
  142|  39.0k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|  87.3k|    {
 1191|  87.3k|        return has_value();
 1192|  87.3k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   126k|    {
  189|   126k|        return m_has_value;
  190|   126k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|  39.0k|    {
 1274|  39.0k|        return std::addressof(value());
 1275|  39.0k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  39.0k|    {
 1221|  39.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  39.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  39.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  39.0k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  39.0k|    {
  155|  39.0k|        return m_value;
  156|  39.0k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  48.2k|    {
 1078|  48.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  48.2k|    {
  151|  48.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  87.3k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  39.0k|    {
 1034|  39.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  39.0k|    {
  142|  39.0k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|  87.3k|    {
 1191|  87.3k|        return has_value();
 1192|  87.3k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   126k|    {
  189|   126k|        return m_has_value;
  190|   126k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|  39.0k|    {
 1274|  39.0k|        return std::addressof(value());
 1275|  39.0k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  39.0k|    {
 1221|  39.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  39.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  39.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  39.0k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  39.0k|    {
  155|  39.0k|        return m_value;
  156|  39.0k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  48.2k|    {
 1078|  48.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  48.2k|    {
  151|  48.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  87.3k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  39.0k|    {
 1034|  39.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  39.0k|    {
  142|  39.0k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|  87.3k|    {
 1191|  87.3k|        return has_value();
 1192|  87.3k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   126k|    {
  189|   126k|        return m_has_value;
  190|   126k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|  39.0k|    {
 1274|  39.0k|        return std::addressof(value());
 1275|  39.0k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  39.0k|    {
 1221|  39.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  39.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  39.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  39.0k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  39.0k|    {
  155|  39.0k|        return m_value;
  156|  39.0k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   869k|    {
 1078|   869k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   869k|    {
  151|   869k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.32M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  4.45M|    {
 1034|  4.45M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  4.45M|    {
  142|  4.45M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  5.32M|    {
 1191|  5.32M|        return has_value();
 1192|  5.32M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  10.6M|    {
  189|  10.6M|        return m_has_value;
  190|  10.6M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   869k|    {
 1197|   869k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   869k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   869k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   869k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   869k|    {
  172|   869k|        return m_unexpected;
  173|   869k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|   144k|    {
 1078|   144k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|   144k|    {
  151|   144k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   742k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  4.02M|    {
 1251|  4.02M|        return value();
 1252|  4.02M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  4.45M|    {
 1221|  4.45M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.45M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  4.45M|    {
  155|  4.45M|        return m_value;
  156|  4.45M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   597k|    {
 1034|   597k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   597k|    {
  142|   597k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|   742k|    {
 1191|   742k|        return has_value();
 1192|   742k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.33M|    {
  189|  1.33M|        return m_has_value;
  190|  1.33M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|   597k|    {
 1274|   597k|        return std::addressof(value());
 1275|   597k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   597k|    {
 1221|   597k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   597k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   597k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   597k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   597k|    {
  155|   597k|        return m_value;
  156|   597k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|   427k|    {
 1263|   427k|        return std::move(value());
 1264|   427k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|   144k|    {
 1078|   144k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|   144k|    {
  151|   144k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   733k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   588k|    {
 1034|   588k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   588k|    {
  142|   588k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|   733k|    {
 1191|   733k|        return has_value();
 1192|   733k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.32M|    {
  189|  1.32M|        return m_has_value;
  190|  1.32M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|   588k|    {
 1274|   588k|        return std::addressof(value());
 1275|   588k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   588k|    {
 1221|   588k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   588k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   588k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   588k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   588k|    {
  155|   588k|        return m_value;
  156|   588k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|   144k|    {
 1078|   144k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|   144k|    {
  151|   144k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.01M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   865k|    {
 1034|   865k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   865k|    {
  142|   865k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|  1.01M|    {
 1191|  1.01M|        return has_value();
 1192|  1.01M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.87M|    {
  189|  1.87M|        return m_has_value;
  190|  1.87M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|   865k|    {
 1274|   865k|        return std::addressof(value());
 1275|   865k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   865k|    {
 1221|   865k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   865k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   865k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   865k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   865k|    {
  155|   865k|        return m_value;
  156|   865k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|   144k|    {
 1078|   144k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|   144k|    {
  151|   144k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   869k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   724k|    {
 1034|   724k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   724k|    {
  142|   724k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|   869k|    {
 1191|   869k|        return has_value();
 1192|   869k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.59M|    {
  189|  1.59M|        return m_has_value;
  190|  1.59M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|   724k|    {
 1274|   724k|        return std::addressof(value());
 1275|   724k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   724k|    {
 1221|   724k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   724k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   724k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   724k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   724k|    {
  155|   724k|        return m_value;
  156|   724k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|   144k|    {
 1078|   144k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|   144k|    {
  151|   144k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.06M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   923k|    {
 1034|   923k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   923k|    {
  142|   923k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|  1.06M|    {
 1191|  1.06M|        return has_value();
 1192|  1.06M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.99M|    {
  189|  1.99M|        return m_has_value;
  190|  1.99M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|   923k|    {
 1274|   923k|        return std::addressof(value());
 1275|   923k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   923k|    {
 1221|   923k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   923k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   923k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   923k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   923k|    {
  155|   923k|        return m_value;
  156|   923k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|   144k|    {
 1078|   144k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|   144k|    {
  151|   144k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   897k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   752k|    {
 1034|   752k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   752k|    {
  142|   752k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|   897k|    {
 1191|   897k|        return has_value();
 1192|   897k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.65M|    {
  189|  1.65M|        return m_has_value;
  190|  1.65M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|   752k|    {
 1274|   752k|        return std::addressof(value());
 1275|   752k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   752k|    {
 1221|   752k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   752k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   752k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   752k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   752k|    {
  155|   752k|        return m_value;
  156|   752k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|   869k|    {
 1078|   869k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|   869k|    {
  151|   869k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.54M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|   675k|    {
 1034|   675k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSG_EvEENS7_10in_place_tEDpOT_:
  141|   675k|    {
  142|   675k|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  1.54M|    {
 1191|  1.54M|        return has_value();
 1192|  1.54M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  3.08M|    {
  189|  3.08M|        return m_has_value;
  190|  3.08M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   869k|    {
 1197|   869k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   869k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   869k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   869k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   869k|    {
  172|   869k|        return m_unexpected;
  173|   869k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|   144k|    {
 1078|   144k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|   144k|    {
  151|   144k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   248k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEERT_v:
 1250|   634k|    {
 1251|   634k|        return value();
 1252|   634k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|   675k|    {
 1221|   675k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   675k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   675k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   675k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|   675k|    {
  155|   675k|        return m_value;
  156|   675k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|   103k|    {
 1034|   103k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|   103k|    {
  142|   103k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|   248k|    {
 1191|   248k|        return has_value();
 1192|   248k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   351k|    {
  189|   351k|        return m_has_value;
  190|   351k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|   103k|    {
 1274|   103k|        return std::addressof(value());
 1275|   103k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|   103k|    {
 1221|   103k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   103k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   103k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   103k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   103k|    {
  155|   103k|        return m_value;
  156|   103k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEEOT_v:
 1262|  41.3k|    {
 1263|  41.3k|        return std::move(value());
 1264|  41.3k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|   144k|    {
 1078|   144k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|   144k|    {
  151|   144k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   248k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|   103k|    {
 1034|   103k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|   103k|    {
  142|   103k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|   248k|    {
 1191|   248k|        return has_value();
 1192|   248k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   351k|    {
  189|   351k|        return m_has_value;
  190|   351k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|   103k|    {
 1274|   103k|        return std::addressof(value());
 1275|   103k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|   103k|    {
 1221|   103k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   103k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   103k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   103k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   103k|    {
  155|   103k|        return m_value;
  156|   103k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|   144k|    {
 1078|   144k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|   144k|    {
  151|   144k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   262k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|   117k|    {
 1034|   117k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|   117k|    {
  142|   117k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|   262k|    {
 1191|   262k|        return has_value();
 1192|   262k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   379k|    {
  189|   379k|        return m_has_value;
  190|   379k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|   117k|    {
 1274|   117k|        return std::addressof(value());
 1275|   117k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|   117k|    {
 1221|   117k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   117k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   117k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   117k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   117k|    {
  155|   117k|        return m_value;
  156|   117k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|   144k|    {
 1078|   144k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|   144k|    {
  151|   144k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   262k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|   117k|    {
 1034|   117k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|   117k|    {
  142|   117k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|   262k|    {
 1191|   262k|        return has_value();
 1192|   262k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   379k|    {
  189|   379k|        return m_has_value;
  190|   379k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|   117k|    {
 1274|   117k|        return std::addressof(value());
 1275|   117k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|   117k|    {
 1221|   117k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   117k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   117k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   117k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   117k|    {
  155|   117k|        return m_value;
  156|   117k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|   144k|    {
 1078|   144k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|   144k|    {
  151|   144k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   262k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|   117k|    {
 1034|   117k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|   117k|    {
  142|   117k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|   262k|    {
 1191|   262k|        return has_value();
 1192|   262k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   379k|    {
  189|   379k|        return m_has_value;
  190|   379k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|   117k|    {
 1274|   117k|        return std::addressof(value());
 1275|   117k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|   117k|    {
 1221|   117k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   117k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   117k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   117k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   117k|    {
  155|   117k|        return m_value;
  156|   117k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|   144k|    {
 1078|   144k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|   144k|    {
  151|   144k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   262k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|   117k|    {
 1034|   117k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|   117k|    {
  142|   117k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|   262k|    {
 1191|   262k|        return has_value();
 1192|   262k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   379k|    {
  189|   379k|        return m_has_value;
  190|   379k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|   117k|    {
 1274|   117k|        return std::addressof(value());
 1275|   117k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|   117k|    {
 1221|   117k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   117k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   117k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   117k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   117k|    {
  155|   117k|        return m_value;
  156|   117k|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  5.18M|    {
 1405|  5.18M|        return detail::transform_error_impl(std::move(*this),
 1406|  5.18M|                                            std::forward<F>(f));
 1407|  5.18M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  5.18M|{
  927|  5.18M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  5.18M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  5.18M|        if (SCN_LIKELY(exp.has_value())) {
  930|  5.18M|            return result(*std::forward<Exp>(exp));
  931|  5.18M|        }
  932|       |
  933|  5.18M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  5.18M|        return result(unexpect, monostate{});
  935|  5.18M|    }
  936|  5.18M|    else {
  937|  5.18M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  5.18M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  5.18M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 5.16M, False: 27.0k]
  |  |  ------------------
  ------------------
  939|  5.18M|                   ? result(*std::forward<Exp>(exp))
  940|  5.18M|                   : result(unexpect,
  941|  27.0k|                            std::invoke(std::forward<F>(f),
  942|  27.0k|                                        std::forward<Exp>(exp).error()));
  943|  5.18M|    }
  944|  5.18M|}
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  21.4M|    {
  189|  21.4M|        return m_has_value;
  190|  21.4M|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  5.16M|    {
 1263|  5.16M|        return std::move(value());
 1264|  5.16M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  7.48M|    {
 1221|  7.48M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  7.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  7.48M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  7.48M|    {
  155|  7.48M|        return m_value;
  156|  7.48M|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  19.6M|    {
 1034|  19.6M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  19.6M|    {
  142|  19.6M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  20.0M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1206|  27.0k|    {
 1207|  27.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  27.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  27.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|  27.0k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|  28.4k|    {
  172|  28.4k|        return m_unexpected;
  173|  28.4k|    }
_ZNR3scn2v210unexpectedINS0_4impl9eof_errorEE5errorEv:
   71|   369k|    {
   72|   369k|        return m_unexpected;
   73|   369k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  27.0k|    {
 1088|  27.0k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|   393k|    {
  151|   393k|    }
_ZNK3scn2v28expectedIPKcNS0_10scan_errorEEcvbEv:
 1190|  20.0M|    {
 1191|  20.0M|        return has_value();
 1192|  20.0M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  188|  40.0M|    {
  189|  40.0M|        return m_has_value;
  190|  40.0M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5errorEv:
 1196|   393k|    {
 1197|   393k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   393k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   393k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   393k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   393k|    {
  172|   393k|        return m_unexpected;
  173|   393k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|   366k|    {
 1078|   366k|    }
_ZNO3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  16.1M|    {
 1263|  16.1M|        return std::move(value());
 1264|  16.1M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  19.6M|    {
 1221|  19.6M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  19.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  19.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  19.6M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  154|  19.6M|    {
  155|  19.6M|        return m_value;
  156|  19.6M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
   57|   925k|    {
   58|   925k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   925k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   925k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1077|  2.31M|    {
 1078|  2.31M|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  150|  2.31M|    {
  151|  2.31M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  12.6M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
   57|  67.4k|    {
   58|  67.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  67.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  67.4k|    }
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  28.4k|    {
 1078|  28.4k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  28.4k|    {
  151|  28.4k|    }
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|   184k|    {
   67|   184k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   184k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|   184k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  13.9M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  13.8M|    {
 1034|  13.8M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  13.8M|    {
  142|  13.8M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1190|  8.74M|    {
 1191|  8.74M|        return has_value();
 1192|  8.74M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1196|  1.33k|    {
 1197|  1.33k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.33k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
   57|  52.3k|    {
   58|  52.3k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  52.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  52.3k|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  49.8k|    {
 1078|  49.8k|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_errorEE5errorEv:
   71|  12.2M|    {
   72|  12.2M|        return m_unexpected;
   73|  12.2M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  49.8k|    {
  151|  49.8k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|   286k|    {
   67|   286k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   286k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|   286k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  23.6M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|  2.32M|    {
 1251|  2.32M|        return value();
 1252|  2.32M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|  4.38M|    {
 1034|  4.38M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|  4.38M|    {
  142|  4.38M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
   57|  44.1M|    {
   58|  44.1M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  44.1M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  44.1M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  19.1M|    {
 1078|  19.1M|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_error4codeEE5errorEv:
   71|  44.1M|    {
   72|  44.1M|        return m_unexpected;
   73|  44.1M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  19.1M|    {
  151|  19.1M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
   66|  44.1M|    {
   67|  44.1M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  44.1M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  44.1M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1190|  23.6M|    {
 1191|  23.6M|        return has_value();
 1192|  23.6M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  32.9M|    {
  189|  32.9M|        return m_has_value;
  190|  32.9M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1196|  4.85M|    {
 1197|  4.85M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  4.85M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.85M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  4.85M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  4.85M|    {
  172|  4.85M|        return m_unexpected;
  173|  4.85M|    }
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  5.16M|    {
 1034|  5.16M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  5.16M|    {
  142|  5.16M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.16M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
   57|   117k|    {
   58|   117k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   117k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   117k|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|  4.46M|    {
 1251|  4.46M|        return value();
 1252|  4.46M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  4.46M|    {
 1221|  4.46M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.46M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.46M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.46M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  4.46M|    {
  155|  4.46M|        return m_value;
  156|  4.46M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  5.16M|    {
 1191|  5.16M|        return has_value();
 1192|  5.16M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  10.3M|    {
  189|  10.3M|        return m_has_value;
  190|  10.3M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.16M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  5.16M|    {
 1263|  5.16M|        return std::move(value());
 1264|  5.16M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  5.16M|    {
 1221|  5.16M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.16M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  5.16M|    {
  155|  5.16M|        return m_value;
  156|  5.16M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  82.0k|    {
 1034|  82.0k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  82.0k|    {
  142|  82.0k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1033|  5.16M|    {
 1034|  5.16M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  5.16M|    {
  142|  5.16M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|  5.16M|    {
 1405|  5.16M|        return detail::transform_error_impl(std::move(*this),
 1406|  5.16M|                                            std::forward<F>(f));
 1407|  5.16M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
  926|  5.16M|{
  927|  5.16M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  5.16M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  5.16M|        if (SCN_LIKELY(exp.has_value())) {
  930|  5.16M|            return result(*std::forward<Exp>(exp));
  931|  5.16M|        }
  932|       |
  933|  5.16M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  5.16M|        return result(unexpect, monostate{});
  935|  5.16M|    }
  936|  5.16M|    else {
  937|  5.16M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  5.16M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  5.16M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 5.16M, False: 0]
  |  |  ------------------
  ------------------
  939|  5.16M|                   ? result(*std::forward<Exp>(exp))
  940|  5.16M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  5.16M|    }
  944|  5.16M|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  188|  10.3M|    {
  189|  10.3M|        return m_has_value;
  190|  10.3M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1262|  5.16M|    {
 1263|  5.16M|        return std::move(value());
 1264|  5.16M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1220|  5.16M|    {
 1221|  5.16M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.16M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  154|  5.16M|    {
  155|  5.16M|        return m_value;
  156|  5.16M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1033|  5.16M|    {
 1034|  5.16M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  5.16M|    {
  142|  5.16M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.16M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1190|  5.16M|    {
 1191|  5.16M|        return has_value();
 1192|  5.16M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  188|  10.3M|    {
  189|  10.3M|        return m_has_value;
  190|  10.3M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1262|  5.16M|    {
 1263|  5.16M|        return std::move(value());
 1264|  5.16M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1220|  5.16M|    {
 1221|  5.16M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.16M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  154|  5.16M|    {
  155|  5.16M|        return m_value;
  156|  5.16M|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_LPv0ELSG_0EEEONS0_10unexpectedIT_EE:
 1077|  11.2k|    {
 1078|  11.2k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  311|  11.2k|    {
  312|  11.2k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  11.2k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  372|  11.2k|    {
  373|  11.2k|        scn::detail::construct_at(unexpected_ptr(),
  374|  11.2k|                                  std::forward<Args>(args)...);
  375|  11.2k|        m_has_value = false;
  376|  11.2k|    }
_ZN3scn2v26detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  101|   187k|{
  102|   187k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   187k|        T(std::forward<Args>(args)...);
  104|   187k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  33.7k|    {
  403|  33.7k|        return reinterpret_cast<unexpected<E>*>(
  404|  33.7k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  33.7k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  33.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   605k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  316|   605k|    {
  317|   605k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 594k, False: 11.2k]
  ------------------
  318|   594k|            destroy_value();
  319|   594k|        }
  320|  11.2k|        else {
  321|  11.2k|            destroy_unexpected();
  322|  11.2k|        }
  323|   605k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  360|  1.81M|    {
  361|  1.81M|        return m_has_value;
  362|  1.81M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|   594k|    {
  380|   594k|        scn::detail::destroy_at(value_ptr());
  381|   594k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEEEvPT_:
  107|   594k|{
  108|   594k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   594k|        for (auto& elem : *p) {
  110|   594k|            scn::detail::destroy_at(std::addressof(elem));
  111|   594k|        }
  112|   594k|    }
  113|   594k|    else {
  114|   594k|        p->~T();
  115|   594k|    }
  116|   594k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  1.78M|    {
  390|  1.78M|        return reinterpret_cast<T*>(
  391|  1.78M|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  1.78M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  1.78M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  11.2k|    {
  384|  11.2k|        scn::detail::destroy_at(unexpected_ptr());
  385|  11.2k|    }
_ZN3scn2v26detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  107|   187k|{
  108|   187k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   187k|        for (auto& elem : *p) {
  110|   187k|            scn::detail::destroy_at(std::addressof(elem));
  111|   187k|        }
  112|   187k|    }
  113|   187k|    else {
  114|   187k|        p->~T();
  115|   187k|    }
  116|   187k|}
_ZN3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISC_vEEOT_:
 1033|   594k|    {
 1034|   594k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSD_EvEENS3_10in_place_tEDpOT_:
  302|   594k|    {
  303|   594k|        construct(std::forward<Args>(args)...);
  304|   594k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9constructIJSD_EEEvDpOT_:
  366|   594k|    {
  367|   594k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|   594k|        m_has_value = true;
  369|   594k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEJSD_EEEPT_SF_DpOT0_:
  101|   594k|{
  102|   594k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   594k|        T(std::forward<Args>(args)...);
  104|   594k|}
_ZNK3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1190|   605k|    {
 1191|   605k|        return has_value();
 1192|   605k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1196|  11.2k|    {
 1197|  11.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  11.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  11.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  11.2k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  11.2k|    {
  344|  11.2k|        return *unexpected_ptr();
  345|  11.2k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEdeISC_LPv0EEEOT_v:
 1262|   594k|    {
 1263|   594k|        return std::move(value());
 1264|   594k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5valueISC_LPv0EEERT_v:
 1220|   594k|    {
 1221|   594k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   594k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   594k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   594k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9get_valueEv:
  326|   594k|    {
  327|   594k|        return *value_ptr();
  328|   594k|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  3.54M|    {
 1251|  3.54M|        return value();
 1252|  3.54M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
   57|   117k|    {
   58|   117k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   117k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   117k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1033|  10.3M|    {
 1034|  10.3M|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  141|  10.3M|    {
  142|  10.3M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    564|    {
 1078|    564|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    564|    {
  151|    564|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.90M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|  1.90M|    {
 1034|  1.90M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  1.90M|    {
  142|  1.90M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|   441k|    {
 1405|   441k|        return detail::transform_error_impl(std::move(*this),
 1406|   441k|                                            std::forward<F>(f));
 1407|   441k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   441k|{
  927|   441k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   441k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   441k|        if (SCN_LIKELY(exp.has_value())) {
  930|   441k|            return result(*std::forward<Exp>(exp));
  931|   441k|        }
  932|       |
  933|   441k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   441k|        return result(unexpect, monostate{});
  935|   441k|    }
  936|   441k|    else {
  937|   441k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   441k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   441k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 441k, False: 228]
  |  |  ------------------
  ------------------
  939|   441k|                   ? result(*std::forward<Exp>(exp))
  940|   441k|                   : result(unexpect,
  941|    228|                            std::invoke(std::forward<F>(f),
  942|    228|                                        std::forward<Exp>(exp).error()));
  943|   441k|    }
  944|   441k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  3.23M|    {
  189|  3.23M|        return m_has_value;
  190|  3.23M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|  1.21M|    {
 1263|  1.21M|        return std::move(value());
 1264|  1.21M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|  1.33M|    {
 1221|  1.33M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.33M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.33M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.33M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  1.33M|    {
  155|  1.33M|        return m_value;
  156|  1.33M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|   785k|    {
 1034|   785k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   785k|    {
  142|   785k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.17M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    564|    {
 1207|    564|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    564|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    564|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    564|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    564|    {
  172|    564|        return m_unexpected;
  173|    564|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|   179k|    {
 1088|   179k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   386k|    {
  151|   386k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|   689k|    {
 1191|   689k|        return has_value();
 1192|   689k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    336|    {
 1078|    336|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    672|    {
  151|    672|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.77M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1250|   124k|    {
 1251|   124k|        return value();
 1252|   124k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1033|   248k|    {
 1034|   248k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  141|   248k|    {
  142|   248k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  1.63M|    {
 1078|  1.63M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  1.63M|    {
  151|  1.63M|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|  2.48M|    {
 1191|  2.48M|        return has_value();
 1192|  2.48M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  4.52M|    {
  189|  4.52M|        return m_has_value;
  190|  4.52M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|   441k|    {
 1197|   441k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   441k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   441k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   441k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|   620k|    {
  172|   620k|        return m_unexpected;
  173|   620k|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|   441k|    {
 1034|   441k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   441k|    {
  142|   441k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   441k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1250|   248k|    {
 1251|   248k|        return value();
 1252|   248k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|  1.13M|    {
 1221|  1.13M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.13M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  1.13M|    {
  155|  1.13M|        return m_value;
  156|  1.13M|    }
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1190|   441k|    {
 1191|   441k|        return has_value();
 1192|   441k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|   882k|    {
  189|   882k|        return m_has_value;
  190|   882k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   441k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|   441k|    {
 1263|   441k|        return std::move(value());
 1264|   441k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|   441k|    {
 1221|   441k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   441k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   441k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   441k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|   441k|    {
  155|   441k|        return m_value;
  156|   441k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|   771k|    {
 1405|   771k|        return detail::transform_error_impl(std::move(*this),
 1406|   771k|                                            std::forward<F>(f));
 1407|   771k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   771k|{
  927|   771k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   771k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   771k|        if (SCN_LIKELY(exp.has_value())) {
  930|   771k|            return result(*std::forward<Exp>(exp));
  931|   771k|        }
  932|       |
  933|   771k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   771k|        return result(unexpect, monostate{});
  935|   771k|    }
  936|   771k|    else {
  937|   771k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   771k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   771k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 771k, False: 336]
  |  |  ------------------
  ------------------
  939|   771k|                   ? result(*std::forward<Exp>(exp))
  940|   771k|                   : result(unexpect,
  941|    336|                            std::invoke(std::forward<F>(f),
  942|    336|                                        std::forward<Exp>(exp).error()));
  943|   771k|    }
  944|   771k|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|   881k|    {
 1034|   881k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   881k|    {
  142|   881k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    336|    {
 1088|    336|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|   881k|    {
 1263|   881k|        return std::move(value());
 1264|   881k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1033|   441k|    {
 1034|   441k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   441k|    {
  142|   441k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|   441k|    {
 1405|   441k|        return detail::transform_error_impl(std::move(*this),
 1406|   441k|                                            std::forward<F>(f));
 1407|   441k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
  926|   441k|{
  927|   441k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   441k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   441k|        if (SCN_LIKELY(exp.has_value())) {
  930|   441k|            return result(*std::forward<Exp>(exp));
  931|   441k|        }
  932|       |
  933|   441k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   441k|        return result(unexpect, monostate{});
  935|   441k|    }
  936|   441k|    else {
  937|   441k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   441k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   441k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 441k, False: 0]
  |  |  ------------------
  ------------------
  939|   441k|                   ? result(*std::forward<Exp>(exp))
  940|   441k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   441k|    }
  944|   441k|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  188|   882k|    {
  189|   882k|        return m_has_value;
  190|   882k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|   441k|    {
 1263|   441k|        return std::move(value());
 1264|   441k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|   441k|    {
 1221|   441k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   441k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   441k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   441k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  154|   441k|    {
  155|   441k|        return m_value;
  156|   441k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|   441k|    {
 1034|   441k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   441k|    {
  142|   441k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   441k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1190|   441k|    {
 1191|   441k|        return has_value();
 1192|   441k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   882k|    {
  189|   882k|        return m_has_value;
  190|   882k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|   441k|    {
 1263|   441k|        return std::move(value());
 1264|   441k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|   441k|    {
 1221|   441k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   441k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   441k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   441k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   441k|    {
  155|   441k|        return m_value;
  156|   441k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1404|   289k|    {
 1405|   289k|        return detail::transform_error_impl(std::move(*this),
 1406|   289k|                                            std::forward<F>(f));
 1407|   289k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESA_EEDaOT_OT0_:
  926|   289k|{
  927|   289k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   289k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   289k|        if (SCN_LIKELY(exp.has_value())) {
  930|   289k|            return result(*std::forward<Exp>(exp));
  931|   289k|        }
  932|       |
  933|   289k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   289k|        return result(unexpect, monostate{});
  935|   289k|    }
  936|   289k|    else {
  937|   289k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   289k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   289k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 110k, False: 179k]
  |  |  ------------------
  ------------------
  939|   289k|                   ? result(*std::forward<Exp>(exp))
  940|   289k|                   : result(unexpect,
  941|   179k|                            std::invoke(std::forward<F>(f),
  942|   179k|                                        std::forward<Exp>(exp).error()));
  943|   289k|    }
  944|   289k|}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1206|   179k|    {
 1207|   179k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   179k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   179k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   179k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   206k|    {
 1078|   206k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1077|  27.5k|    {
 1078|  27.5k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSF_EvEENS0_10unexpect_tEDpOT_:
  311|  27.5k|    {
  312|  27.5k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  27.5k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESF_EEEvDpOT_:
  372|  27.5k|    {
  373|  27.5k|        scn::detail::construct_at(unexpected_ptr(),
  374|  27.5k|                                  std::forward<Args>(args)...);
  375|  27.5k|        m_has_value = false;
  376|  27.5k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  82.6k|    {
  403|  82.6k|        return reinterpret_cast<unexpected<E>*>(
  404|  82.6k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  82.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  82.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  27.5k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EED2Ev:
  316|  27.5k|    {
  317|  27.5k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 0, False: 27.5k]
  ------------------
  318|      0|            destroy_value();
  319|      0|        }
  320|  27.5k|        else {
  321|  27.5k|            destroy_unexpected();
  322|  27.5k|        }
  323|  27.5k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9has_valueEv:
  360|  82.6k|    {
  361|  82.6k|        return m_has_value;
  362|  82.6k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  27.5k|    {
  384|  27.5k|        scn::detail::destroy_at(unexpected_ptr());
  385|  27.5k|    }
_ZNK3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEcvbEv:
 1190|  27.5k|    {
 1191|  27.5k|        return has_value();
 1192|  27.5k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5errorEv:
 1196|  27.5k|    {
 1197|  27.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  27.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  27.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  27.5k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  27.5k|    {
  344|  27.5k|        return *unexpected_ptr();
  345|  27.5k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1250|   193k|    {
 1251|   193k|        return value();
 1252|   193k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|   785k|    {
 1221|   785k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   785k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   785k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   785k|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.34M|    {
  189|  2.34M|        return m_has_value;
  190|  2.34M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|   785k|    {
  155|   785k|        return m_value;
  156|   785k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|  1.17M|    {
 1191|  1.17M|        return has_value();
 1192|  1.17M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|   386k|    {
 1197|   386k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   386k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   386k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   386k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   386k|    {
  172|   386k|        return m_unexpected;
  173|   386k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   592k|    {
 1263|   592k|        return std::move(value());
 1264|   592k|    }
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|   154k|    {
 1078|   154k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   154k|    {
  151|   154k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  24.3M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  24.2M|    {
 1034|  24.2M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  24.2M|    {
  142|  24.2M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  5.07M|    {
 1405|  5.07M|        return detail::transform_error_impl(std::move(*this),
 1406|  5.07M|                                            std::forward<F>(f));
 1407|  5.07M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  5.07M|{
  927|  5.07M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  5.07M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  5.07M|        if (SCN_LIKELY(exp.has_value())) {
  930|  5.07M|            return result(*std::forward<Exp>(exp));
  931|  5.07M|        }
  932|       |
  933|  5.07M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  5.07M|        return result(unexpect, monostate{});
  935|  5.07M|    }
  936|  5.07M|    else {
  937|  5.07M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  5.07M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  5.07M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 5.03M, False: 35.5k]
  |  |  ------------------
  ------------------
  939|  5.07M|                   ? result(*std::forward<Exp>(exp))
  940|  5.07M|                   : result(unexpect,
  941|  35.5k|                            std::invoke(std::forward<F>(f),
  942|  35.5k|                                        std::forward<Exp>(exp).error()));
  943|  5.07M|    }
  944|  5.07M|}
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  42.3M|    {
  189|  42.3M|        return m_has_value;
  190|  42.3M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  15.7M|    {
 1263|  15.7M|        return std::move(value());
 1264|  15.7M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  17.8M|    {
 1221|  17.8M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  17.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  17.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  17.8M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  17.8M|    {
  155|  17.8M|        return m_value;
  156|  17.8M|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  18.9M|    {
 1034|  18.9M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  18.9M|    {
  142|  18.9M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  20.1M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1206|   152k|    {
 1207|   152k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   152k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   152k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   152k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|   154k|    {
  172|   154k|        return m_unexpected;
  173|   154k|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  35.5k|    {
 1088|  35.5k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|  1.22M|    {
  151|  1.22M|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|  1.18M|    {
 1078|  1.18M|    }
_ZNK3scn2v28expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1190|  8.48M|    {
 1191|  8.48M|        return has_value();
 1192|  8.48M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1196|  2.47k|    {
 1197|  2.47k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  2.47k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.47k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  2.47k|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|   119k|    {
 1078|   119k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   235k|    {
  151|   235k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  33.6M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|  2.07M|    {
 1251|  2.07M|        return value();
 1252|  2.07M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|  3.92M|    {
 1034|  3.92M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|  3.92M|    {
  142|  3.92M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  18.6M|    {
 1078|  18.6M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  18.6M|    {
  151|  18.6M|    }
_ZNK3scn2v28expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1190|  33.6M|    {
 1191|  33.6M|        return has_value();
 1192|  33.6M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  53.2M|    {
  189|  53.2M|        return m_has_value;
  190|  53.2M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1196|  4.89M|    {
 1197|  4.89M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  4.89M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.89M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  4.89M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  4.89M|    {
  172|  4.89M|        return m_unexpected;
  173|  4.89M|    }
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  5.03M|    {
 1034|  5.03M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  5.03M|    {
  142|  5.03M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.03M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|  4.00M|    {
 1251|  4.00M|        return value();
 1252|  4.00M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  14.7M|    {
 1221|  14.7M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  14.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  14.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  14.7M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  14.7M|    {
  155|  14.7M|        return m_value;
  156|  14.7M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  5.03M|    {
 1191|  5.03M|        return has_value();
 1192|  5.03M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  10.0M|    {
  189|  10.0M|        return m_has_value;
  190|  10.0M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.03M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  5.03M|    {
 1263|  5.03M|        return std::move(value());
 1264|  5.03M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  5.03M|    {
 1221|  5.03M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.03M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  5.03M|    {
  155|  5.03M|        return m_value;
  156|  5.03M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDaOT_:
 1404|  10.8M|    {
 1405|  10.8M|        return detail::transform_error_impl(std::move(*this),
 1406|  10.8M|                                            std::forward<F>(f));
 1407|  10.8M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  10.8M|{
  927|  10.8M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  10.8M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  10.8M|        if (SCN_LIKELY(exp.has_value())) {
  930|  10.8M|            return result(*std::forward<Exp>(exp));
  931|  10.8M|        }
  932|       |
  933|  10.8M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  10.8M|        return result(unexpect, monostate{});
  935|  10.8M|    }
  936|  10.8M|    else {
  937|  10.8M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  10.8M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  10.8M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 10.7M, False: 116k]
  |  |  ------------------
  ------------------
  939|  10.8M|                   ? result(*std::forward<Exp>(exp))
  940|  10.8M|                   : result(unexpect,
  941|   116k|                            std::invoke(std::forward<F>(f),
  942|   116k|                                        std::forward<Exp>(exp).error()));
  943|  10.8M|    }
  944|  10.8M|}
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  10.7M|    {
 1034|  10.7M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  10.7M|    {
  142|  10.7M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1087|   116k|    {
 1088|   116k|    }
_ZNO3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1262|  10.7M|    {
 1263|  10.7M|        return std::move(value());
 1264|  10.7M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1033|  5.03M|    {
 1034|  5.03M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  5.03M|    {
  142|  5.03M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|  5.03M|    {
 1405|  5.03M|        return detail::transform_error_impl(std::move(*this),
 1406|  5.03M|                                            std::forward<F>(f));
 1407|  5.03M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
  926|  5.03M|{
  927|  5.03M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  5.03M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  5.03M|        if (SCN_LIKELY(exp.has_value())) {
  930|  5.03M|            return result(*std::forward<Exp>(exp));
  931|  5.03M|        }
  932|       |
  933|  5.03M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  5.03M|        return result(unexpect, monostate{});
  935|  5.03M|    }
  936|  5.03M|    else {
  937|  5.03M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  5.03M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  5.03M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 5.03M, False: 0]
  |  |  ------------------
  ------------------
  939|  5.03M|                   ? result(*std::forward<Exp>(exp))
  940|  5.03M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  5.03M|    }
  944|  5.03M|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  188|  10.0M|    {
  189|  10.0M|        return m_has_value;
  190|  10.0M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1262|  5.03M|    {
 1263|  5.03M|        return std::move(value());
 1264|  5.03M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1220|  5.03M|    {
 1221|  5.03M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.03M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  154|  5.03M|    {
  155|  5.03M|        return m_value;
  156|  5.03M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1033|  5.03M|    {
 1034|  5.03M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  5.03M|    {
  142|  5.03M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.03M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1190|  5.03M|    {
 1191|  5.03M|        return has_value();
 1192|  5.03M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  188|  10.0M|    {
  189|  10.0M|        return m_has_value;
  190|  10.0M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1262|  5.03M|    {
 1263|  5.03M|        return std::move(value());
 1264|  5.03M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1220|  5.03M|    {
 1221|  5.03M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.03M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  154|  5.03M|    {
  155|  5.03M|        return m_value;
  156|  5.03M|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|  66.4k|    {
 1078|  66.4k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  311|  66.4k|    {
  312|  66.4k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  66.4k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  372|  66.4k|    {
  373|  66.4k|        scn::detail::construct_at(unexpected_ptr(),
  374|  66.4k|                                  std::forward<Args>(args)...);
  375|  66.4k|        m_has_value = false;
  376|  66.4k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|   199k|    {
  403|   199k|        return reinterpret_cast<unexpected<E>*>(
  404|   199k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|   199k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|   199k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   595k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|   595k|    {
  317|   595k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 529k, False: 66.4k]
  ------------------
  318|   529k|            destroy_value();
  319|   529k|        }
  320|  66.4k|        else {
  321|  66.4k|            destroy_unexpected();
  322|  66.4k|        }
  323|   595k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|  1.78M|    {
  361|  1.78M|        return m_has_value;
  362|  1.78M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|   529k|    {
  380|   529k|        scn::detail::destroy_at(value_ptr());
  381|   529k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEEEvPT_:
  107|   529k|{
  108|   529k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   529k|        for (auto& elem : *p) {
  110|   529k|            scn::detail::destroy_at(std::addressof(elem));
  111|   529k|        }
  112|   529k|    }
  113|   529k|    else {
  114|   529k|        p->~T();
  115|   529k|    }
  116|   529k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  1.58M|    {
  390|  1.58M|        return reinterpret_cast<T*>(
  391|  1.58M|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  1.58M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  1.58M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  66.4k|    {
  384|  66.4k|        scn::detail::destroy_at(unexpected_ptr());
  385|  66.4k|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|   529k|    {
 1034|   529k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSG_EvEENS3_10in_place_tEDpOT_:
  302|   529k|    {
  303|   529k|        construct(std::forward<Args>(args)...);
  304|   529k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSG_EEEvDpOT_:
  366|   529k|    {
  367|   529k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|   529k|        m_has_value = true;
  369|   529k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEJSG_EEEPT_SI_DpOT0_:
  101|   529k|{
  102|   529k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   529k|        T(std::forward<Args>(args)...);
  104|   529k|}
_ZNK3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1190|   595k|    {
 1191|   595k|        return has_value();
 1192|   595k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1196|  66.4k|    {
 1197|  66.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  66.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  66.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  66.4k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  66.4k|    {
  344|  66.4k|        return *unexpected_ptr();
  345|  66.4k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEdeISF_LPv0EEEOT_v:
 1262|   529k|    {
 1263|   529k|        return std::move(value());
 1264|   529k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|   529k|    {
 1221|   529k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   529k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   529k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   529k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  326|   529k|    {
  327|   529k|        return *value_ptr();
  328|   529k|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  3.16M|    {
 1251|  3.16M|        return value();
 1252|  3.16M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  18.9M|    {
 1221|  18.9M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  18.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  18.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  18.9M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  188|  40.2M|    {
  189|  40.2M|        return m_has_value;
  190|  40.2M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  154|  18.9M|    {
  155|  18.9M|        return m_value;
  156|  18.9M|    }
_ZNK3scn2v28expectedIPKwNS0_10scan_errorEEcvbEv:
 1190|  20.1M|    {
 1191|  20.1M|        return has_value();
 1192|  20.1M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5errorEv:
 1196|  1.22M|    {
 1197|  1.22M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.22M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  1.22M|    {
  172|  1.22M|        return m_unexpected;
  173|  1.22M|    }
_ZNO3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  15.7M|    {
 1263|  15.7M|        return std::move(value());
 1264|  15.7M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   620k|    {
 1078|   620k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  1.10M|    {
  151|  1.10M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.69M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|  2.59M|    {
 1034|  2.59M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  2.59M|    {
  142|  2.59M|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|  3.69M|    {
 1191|  3.69M|        return has_value();
 1192|  3.69M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|  7.39M|    {
  189|  7.39M|        return m_has_value;
  190|  7.39M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|  1.10M|    {
 1197|  1.10M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.10M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.10M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.10M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  1.10M|    {
  172|  1.10M|        return m_unexpected;
  173|  1.10M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1250|   551k|    {
 1251|   551k|        return value();
 1252|   551k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|  2.59M|    {
 1221|  2.59M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.59M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.59M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.59M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|  2.59M|    {
  155|  2.59M|        return m_value;
  156|  2.59M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|  1.15k|    {
 1078|  1.15k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|  1.15k|    {
  151|  1.15k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.62M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|  5.62M|    {
 1034|  5.62M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  5.62M|    {
  142|  5.62M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|  1.29M|    {
 1405|  1.29M|        return detail::transform_error_impl(std::move(*this),
 1406|  1.29M|                                            std::forward<F>(f));
 1407|  1.29M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|  1.29M|{
  927|  1.29M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  1.29M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  1.29M|        if (SCN_LIKELY(exp.has_value())) {
  930|  1.29M|            return result(*std::forward<Exp>(exp));
  931|  1.29M|        }
  932|       |
  933|  1.29M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  1.29M|        return result(unexpect, monostate{});
  935|  1.29M|    }
  936|  1.29M|    else {
  937|  1.29M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  1.29M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  1.29M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 1.29M, False: 810]
  |  |  ------------------
  ------------------
  939|  1.29M|                   ? result(*std::forward<Exp>(exp))
  940|  1.29M|                   : result(unexpect,
  941|    810|                            std::invoke(std::forward<F>(f),
  942|    810|                                        std::forward<Exp>(exp).error()));
  943|  1.29M|    }
  944|  1.29M|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  9.63M|    {
  189|  9.63M|        return m_has_value;
  190|  9.63M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|  3.58M|    {
 1263|  3.58M|        return std::move(value());
 1264|  3.58M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|  4.01M|    {
 1221|  4.01M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.01M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  4.01M|    {
  155|  4.01M|        return m_value;
  156|  4.01M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|  1.15k|    {
 1207|  1.15k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|  1.15k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|  1.15k|    {
  172|  1.15k|        return m_unexpected;
  173|  1.15k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|   482k|    {
 1088|   482k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|  2.03M|    {
 1191|  2.03M|        return has_value();
 1192|  2.03M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    340|    {
 1078|    340|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    680|    {
  151|    680|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  8.46M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1250|   427k|    {
 1251|   427k|        return value();
 1252|   427k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1033|   799k|    {
 1034|   799k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  141|   799k|    {
  142|   799k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  4.75M|    {
 1078|  4.75M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  4.75M|    {
  151|  4.75M|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|  7.35M|    {
 1191|  7.35M|        return has_value();
 1192|  7.35M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  13.8M|    {
  189|  13.8M|        return m_has_value;
  190|  13.8M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|  1.24M|    {
 1197|  1.24M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.24M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.24M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.24M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  1.72M|    {
  172|  1.72M|        return m_unexpected;
  173|  1.72M|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|  1.29M|    {
 1034|  1.29M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|  1.29M|    {
  142|  1.29M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.29M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1250|   799k|    {
 1251|   799k|        return value();
 1252|   799k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|  3.70M|    {
 1221|  3.70M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.70M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.70M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.70M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  3.70M|    {
  155|  3.70M|        return m_value;
  156|  3.70M|    }
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1190|  1.29M|    {
 1191|  1.29M|        return has_value();
 1192|  1.29M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|  2.59M|    {
  189|  2.59M|        return m_has_value;
  190|  2.59M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.29M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|  1.29M|    {
 1263|  1.29M|        return std::move(value());
 1264|  1.29M|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|  1.29M|    {
 1221|  1.29M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.29M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|  1.29M|    {
  155|  1.29M|        return m_value;
  156|  1.29M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|  2.28M|    {
 1405|  2.28M|        return detail::transform_error_impl(std::move(*this),
 1406|  2.28M|                                            std::forward<F>(f));
 1407|  2.28M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|  2.28M|{
  927|  2.28M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.28M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.28M|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.28M|            return result(*std::forward<Exp>(exp));
  931|  2.28M|        }
  932|       |
  933|  2.28M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.28M|        return result(unexpect, monostate{});
  935|  2.28M|    }
  936|  2.28M|    else {
  937|  2.28M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.28M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  2.28M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 2.28M, False: 340]
  |  |  ------------------
  ------------------
  939|  2.28M|                   ? result(*std::forward<Exp>(exp))
  940|  2.28M|                   : result(unexpect,
  941|    340|                            std::invoke(std::forward<F>(f),
  942|    340|                                        std::forward<Exp>(exp).error()));
  943|  2.28M|    }
  944|  2.28M|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|  2.90M|    {
 1034|  2.90M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  2.90M|    {
  142|  2.90M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    340|    {
 1088|    340|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|  2.90M|    {
 1263|  2.90M|        return std::move(value());
 1264|  2.90M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1033|  1.29M|    {
 1034|  1.29M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|  1.29M|    {
  142|  1.29M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|  1.29M|    {
 1405|  1.29M|        return detail::transform_error_impl(std::move(*this),
 1406|  1.29M|                                            std::forward<F>(f));
 1407|  1.29M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
  926|  1.29M|{
  927|  1.29M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  1.29M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  1.29M|        if (SCN_LIKELY(exp.has_value())) {
  930|  1.29M|            return result(*std::forward<Exp>(exp));
  931|  1.29M|        }
  932|       |
  933|  1.29M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  1.29M|        return result(unexpect, monostate{});
  935|  1.29M|    }
  936|  1.29M|    else {
  937|  1.29M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  1.29M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  1.29M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 1.29M, False: 0]
  |  |  ------------------
  ------------------
  939|  1.29M|                   ? result(*std::forward<Exp>(exp))
  940|  1.29M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  1.29M|    }
  944|  1.29M|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  188|  2.59M|    {
  189|  2.59M|        return m_has_value;
  190|  2.59M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  1.29M|    {
 1263|  1.29M|        return std::move(value());
 1264|  1.29M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  1.29M|    {
 1221|  1.29M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.29M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  154|  1.29M|    {
  155|  1.29M|        return m_value;
  156|  1.29M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|  1.29M|    {
 1034|  1.29M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|  1.29M|    {
  142|  1.29M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.29M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1190|  1.29M|    {
 1191|  1.29M|        return has_value();
 1192|  1.29M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.59M|    {
  189|  2.59M|        return m_has_value;
  190|  2.59M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|  1.29M|    {
 1263|  1.29M|        return std::move(value());
 1264|  1.29M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|  1.29M|    {
 1221|  1.29M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.29M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.29M|    {
  155|  1.29M|        return m_value;
  156|  1.29M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1404|  1.10M|    {
 1405|  1.10M|        return detail::transform_error_impl(std::move(*this),
 1406|  1.10M|                                            std::forward<F>(f));
 1407|  1.10M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESA_EEDaOT_OT0_:
  926|  1.10M|{
  927|  1.10M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  1.10M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  1.10M|        if (SCN_LIKELY(exp.has_value())) {
  930|  1.10M|            return result(*std::forward<Exp>(exp));
  931|  1.10M|        }
  932|       |
  933|  1.10M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  1.10M|        return result(unexpect, monostate{});
  935|  1.10M|    }
  936|  1.10M|    else {
  937|  1.10M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  1.10M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  1.10M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 620k, False: 482k]
  |  |  ------------------
  ------------------
  939|  1.10M|                   ? result(*std::forward<Exp>(exp))
  940|  1.10M|                   : result(unexpect,
  941|   482k|                            std::invoke(std::forward<F>(f),
  942|   482k|                                        std::forward<Exp>(exp).error()));
  943|  1.10M|    }
  944|  1.10M|}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1206|   482k|    {
 1207|   482k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   482k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   482k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   482k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  82.6k|    {
 1078|  82.6k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  311|  82.6k|    {
  312|  82.6k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  82.6k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  372|  82.6k|    {
  373|  82.6k|        scn::detail::construct_at(unexpected_ptr(),
  374|  82.6k|                                  std::forward<Args>(args)...);
  375|  82.6k|        m_has_value = false;
  376|  82.6k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|   248k|    {
  403|   248k|        return reinterpret_cast<unexpected<E>*>(
  404|   248k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|   248k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|   248k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   165k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|   165k|    {
  317|   165k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 82.7k, False: 82.6k]
  ------------------
  318|  82.7k|            destroy_value();
  319|  82.7k|        }
  320|  82.6k|        else {
  321|  82.6k|            destroy_unexpected();
  322|  82.6k|        }
  323|   165k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|   496k|    {
  361|   496k|        return m_has_value;
  362|   496k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|  82.7k|    {
  380|  82.7k|        scn::detail::destroy_at(value_ptr());
  381|  82.7k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEEEvPT_:
  107|  82.7k|{
  108|  82.7k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  82.7k|        for (auto& elem : *p) {
  110|  82.7k|            scn::detail::destroy_at(std::addressof(elem));
  111|  82.7k|        }
  112|  82.7k|    }
  113|  82.7k|    else {
  114|  82.7k|        p->~T();
  115|  82.7k|    }
  116|  82.7k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  389|   248k|    {
  390|   248k|        return reinterpret_cast<T*>(
  391|   248k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|   248k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|   248k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  82.6k|    {
  384|  82.6k|        scn::detail::destroy_at(unexpected_ptr());
  385|  82.6k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  82.7k|    {
 1034|  82.7k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS3_10in_place_tEDpOT_:
  302|  82.7k|    {
  303|  82.7k|        construct(std::forward<Args>(args)...);
  304|  82.7k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSH_EEEvDpOT_:
  366|  82.7k|    {
  367|  82.7k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|  82.7k|        m_has_value = true;
  369|  82.7k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEJSH_EEEPT_SJ_DpOT0_:
  101|  82.7k|{
  102|  82.7k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|  82.7k|        T(std::forward<Args>(args)...);
  104|  82.7k|}
_ZNK3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1190|   165k|    {
 1191|   165k|        return has_value();
 1192|   165k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1196|  82.6k|    {
 1197|  82.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  82.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  82.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  82.6k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  82.6k|    {
  344|  82.6k|        return *unexpected_ptr();
  345|  82.6k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEdeISH_LPv0EEEOT_v:
 1262|  82.7k|    {
 1263|  82.7k|        return std::move(value());
 1264|  82.7k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  82.7k|    {
 1221|  82.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  82.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  82.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  82.7k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  326|  82.7k|    {
  327|  82.7k|        return *value_ptr();
  328|  82.7k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|  2.03M|    {
 1263|  2.03M|        return std::move(value());
 1264|  2.03M|    }

_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  4.59k|{
  200|  4.59k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  4.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  4.59k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  4.59k|{
  180|  4.59k|    return p;
  181|  4.59k|}
_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  4.59k|{
  200|  4.59k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  4.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  4.59k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  4.59k|{
  180|  4.59k|    return p;
  181|  4.59k|}
_ZN3scn2v26detail10to_addressIRPKhEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  4.59k|{
  200|  4.59k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  4.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  4.59k|}
_ZN3scn2v26detail15to_address_implIKhEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  4.59k|{
  180|  4.59k|    return p;
  181|  4.59k|}
_ZN3scn2v26detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  17.9M|{
  200|  17.9M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  17.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  17.9M|}
_ZN3scn2v26detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  19.3M|{
  180|  19.3M|    return p;
  181|  19.3M|}
_ZN3scn2v26detail10to_addressIRPDiEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  13.2M|{
  200|  13.2M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  13.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  13.2M|}
_ZN3scn2v26detail15to_address_implIDiEEPT_S4_NS1_12priority_tagILm2EEE:
  179|  13.2M|{
  180|  13.2M|    return p;
  181|  13.2M|}
_ZN3scn2v26detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  1.37M|{
  200|  1.37M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  1.37M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  1.37M|}
_ZN3scn2v26detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  12.7M|{
  200|  12.7M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  12.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  12.7M|}
_ZN3scn2v26detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  24.3M|{
  180|  24.3M|    return p;
  181|  24.3M|}
_ZN3scn2v26detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  11.6M|{
  200|  11.6M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  11.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  11.6M|}

_ZNK3scn2v24spanIKhE4sizeEv:
  241|  18.2k|    {
  242|  18.2k|        return static_cast<size_type>(m_end - m_ptr);
  243|  18.2k|    }
_ZN3scn2v24spanIKhE5beginEv:
  180|  4.59k|    {
  181|  4.59k|        return m_ptr;
  182|  4.59k|    }
_ZN3scn2v24spanIKhE3endEv:
  184|  4.59k|    {
  185|  4.59k|        return m_end;
  186|  4.59k|    }
_ZNK3scn2v24spanIKhE4dataEv:
  237|  2.29k|    {
  238|  2.29k|        return m_ptr;
  239|  2.29k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEC2IPS6_LPv0EEET_m:
  119|  2.29k|    {
  120|  2.29k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE5beginEv:
  180|  55.1k|    {
  181|  55.1k|        return m_ptr;
  182|  55.1k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE3endEv:
  184|  55.1k|    {
  185|  55.1k|        return m_end;
  186|  55.1k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEC2IPS6_LPv0EEET_m:
  119|  2.29k|    {
  120|  2.29k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE5beginEv:
  180|   165k|    {
  181|   165k|        return m_ptr;
  182|   165k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE3endEv:
  184|   165k|    {
  185|   165k|        return m_end;
  186|   165k|    }
_ZN3scn2v24spanIKhEC2IPS2_LPv0EEET_m:
  119|  2.29k|    {
  120|  2.29k|    }
_ZN3scn2v24spanIDiEC2IPDiLPv0EEET_m:
  119|  6.64M|    {
  120|  6.64M|    }
_ZNK3scn2v24spanIDiE4dataEv:
  237|  6.64M|    {
  238|  6.64M|        return m_ptr;
  239|  6.64M|    }
_ZNK3scn2v24spanIDiE4sizeEv:
  241|  6.64M|    {
  242|  6.64M|        return static_cast<size_type>(m_end - m_ptr);
  243|  6.64M|    }

_ZN3scn2v26detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  2.95M|{
   60|  2.95M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  2.95M|                                          const CharT*, const CharT*>) {
   62|  2.95M|        return {first, last};
   63|  2.95M|    }
   64|  2.95M|    else {
   65|  2.95M|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  2.95M|    }
   67|  2.95M|}
_ZN3scn2v26detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  8.76M|{
   60|  8.76M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  8.76M|                                          const CharT*, const CharT*>) {
   62|  8.76M|        return {first, last};
   63|  8.76M|    }
   64|  8.76M|    else {
   65|  8.76M|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  8.76M|    }
   67|  8.76M|}
_ZN3scn2v26detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
   43|  5.79M|{
   44|  5.79M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (44:19): [Folded - Ignored]
  |  Branch (44:19): [Folded - Ignored]
  ------------------
   45|  5.79M|                                          decltype(first), decltype(last)> &&
   46|  5.79M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (46:19): [Folded - Ignored]
  ------------------
   47|  5.79M|        return {first, last};
   48|  5.79M|    }
   49|  5.79M|    else {
   50|  5.79M|        return {to_address(first), static_cast<size_t>(std::distance(
   51|  5.79M|                                       to_address(first), to_address(last)))};
   52|  5.79M|    }
   53|  5.79M|}
_ZN3scn2v26detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
   74|  11.1M|{
   75|  11.1M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (75:19): [Folded - Ignored]
  |  Branch (75:19): [Folded - Ignored]
  ------------------
   76|  11.1M|                      typename std::basic_string_view<CharT>::iterator,
   77|  11.1M|                      decltype(it)> &&
   78|  11.1M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (78:19): [Folded - Ignored]
  ------------------
   79|  11.1M|        SCN_UNUSED(sv);
  ------------------
  |  |  227|  11.1M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   80|  11.1M|        return it;
   81|  11.1M|    }
   82|  11.1M|    else {
   83|  11.1M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
   84|  11.1M|    }
   85|  11.1M|}

_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|   441k|{
   54|   441k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|   441k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|   441k|        return true;
   57|   441k|    }
   58|   441k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|   441k|                           ranges::iterator_t<Range>,
   60|   441k|                           typename detail::basic_scan_buffer<
   61|   441k|                               detail::char_t<Range>>::forward_iterator>) {
   62|   441k|        auto beg = ranges::begin(r);
   63|   441k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 441k, False: 0]
  ------------------
   64|   441k|            return false;
   65|   441k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|   441k|    else {
   79|   441k|        return false;
   80|   441k|    }
   81|   441k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   730k|{
  112|   730k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   730k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   730k|        return r;
  115|   730k|    }
  116|   730k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   730k|                           ranges::iterator_t<Range>,
  118|   730k|                           typename detail::basic_scan_buffer<
  119|   730k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   730k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   730k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   730k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   730k|                ranges::begin(r), ranges::end(r)));
  124|   730k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   730k|        }
  126|   730k|        else {
  127|   730k|            return ranges::begin(r).contiguous_segment();
  128|   730k|        }
  129|   730k|    }
  130|   730k|    else {
  131|   730k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   730k|    }
  133|   730k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|   771k|{
  166|   771k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|   771k|        return ranges_polyfill::usize(r);
  168|   771k|    }
  169|   771k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|   771k|                           ranges::iterator_t<Range>,
  171|   771k|                           typename detail::basic_scan_buffer<
  172|   771k|                               detail::char_t<Range>>::forward_iterator>) {
  173|   771k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|   771k|            return static_cast<size_t>(ranges::end(r).position() -
  175|   771k|                                       ranges::begin(r).position());
  176|   771k|        }
  177|   771k|        else {
  178|   771k|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 771k, False: 0]
  ------------------
  179|   771k|                return static_cast<size_t>(
  180|   771k|                    ranges::begin(r).parent()->chars_available() -
  181|   771k|                    ranges::begin(r).position());
  182|   771k|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|   771k|        }
  185|   771k|    }
  186|   771k|    else {
  187|   771k|        return 0;
  188|   771k|    }
  189|   771k|}
_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|  1.29M|{
   54|  1.29M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|  1.29M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|  1.29M|        return true;
   57|  1.29M|    }
   58|  1.29M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|  1.29M|                           ranges::iterator_t<Range>,
   60|  1.29M|                           typename detail::basic_scan_buffer<
   61|  1.29M|                               detail::char_t<Range>>::forward_iterator>) {
   62|  1.29M|        auto beg = ranges::begin(r);
   63|  1.29M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 1.29M, False: 0]
  ------------------
   64|  1.29M|            return false;
   65|  1.29M|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|  1.29M|    else {
   79|  1.29M|        return false;
   80|  1.29M|    }
   81|  1.29M|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|  1.29M|{
  112|  1.29M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|  1.29M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|  1.29M|        return r;
  115|  1.29M|    }
  116|  1.29M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|  1.29M|                           ranges::iterator_t<Range>,
  118|  1.29M|                           typename detail::basic_scan_buffer<
  119|  1.29M|                               detail::char_t<Range>>::forward_iterator>) {
  120|  1.29M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|  1.29M|            auto seg = ranges::begin(r).contiguous_segment();
  122|  1.29M|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|  1.29M|                ranges::begin(r), ranges::end(r)));
  124|  1.29M|            return seg.substr(0, std::min(seg.size(), dist));
  125|  1.29M|        }
  126|  1.29M|        else {
  127|  1.29M|            return ranges::begin(r).contiguous_segment();
  128|  1.29M|        }
  129|  1.29M|    }
  130|  1.29M|    else {
  131|  1.29M|        return std::basic_string_view<detail::char_t<Range>>{};
  132|  1.29M|    }
  133|  1.29M|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|  2.28M|{
  166|  2.28M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|  2.28M|        return ranges_polyfill::usize(r);
  168|  2.28M|    }
  169|  2.28M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|  2.28M|                           ranges::iterator_t<Range>,
  171|  2.28M|                           typename detail::basic_scan_buffer<
  172|  2.28M|                               detail::char_t<Range>>::forward_iterator>) {
  173|  2.28M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|  2.28M|            return static_cast<size_t>(ranges::end(r).position() -
  175|  2.28M|                                       ranges::begin(r).position());
  176|  2.28M|        }
  177|  2.28M|        else {
  178|  2.28M|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 2.28M, False: 0]
  ------------------
  179|  2.28M|                return static_cast<size_t>(
  180|  2.28M|                    ranges::begin(r).parent()->chars_available() -
  181|  2.28M|                    ranges::begin(r).position());
  182|  2.28M|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|  2.28M|        }
  185|  2.28M|    }
  186|  2.28M|    else {
  187|  2.28M|        return 0;
  188|  2.28M|    }
  189|  2.28M|}

_ZN3scn2v24impl22make_contiguous_bufferIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  5.16M|{
  235|  5.16M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  5.16M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  5.16M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  5.16M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  5.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  5.16M|    }
  240|  5.16M|    else {
  241|  5.16M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  5.16M|    }
  243|  5.16M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  5.16M|    {
   50|  5.16M|    }
_ZNK3scn2v24impl19string_view_wrapperIcE4viewEv:
   62|  16.4M|    {
   63|  16.4M|        return sv;
   64|  16.4M|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  3.14M|{
  235|  3.14M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  3.14M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  3.14M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  3.14M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  3.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  3.14M|    }
  240|  3.14M|    else {
  241|  3.14M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  3.14M|    }
  243|  3.14M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  3.14M|    {
   50|  3.14M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIcE4viewEv:
  141|   799k|    {
  142|   799k|        return m_view;
  143|   799k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcED2Ev:
  131|   689k|    ~contiguous_range_factory() = default;
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|   689k|{
  235|   689k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|   689k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|   689k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|   689k|        return string_view_wrapper{SCN_FWD(range)};
  239|   689k|    }
  240|   689k|    else {
  241|   689k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  248|   689k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|   689k|    }
  243|   689k|}
_ZN3scn2v24impl24contiguous_range_factoryIcEC2IN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|   689k|    {
   97|   689k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|   689k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|   689k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_LNS6_13subrange_kindE0EEEEEvOT_:
  180|   689k|    {
  181|   689k|        using value_t = ranges::range_value_t<Range>;
  182|   689k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|   689k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|   689k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|   689k|            m_storage.reset();
  186|   689k|            m_view = string_view_type{ranges::data(range),
  187|   689k|                                      ranges_polyfill::usize(range)};
  188|   689k|        }
  189|   689k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|   689k|                                          std::basic_string<CharT>>) {
  191|   689k|            m_storage.emplace(SCN_FWD(range));
  192|   689k|            m_view = string_view_type{*m_storage};
  193|   689k|        }
  194|   689k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|   689k|                                          typename detail::basic_scan_buffer<
  196|   689k|                                              value_t>::forward_iterator> &&
  197|   689k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|   689k|            auto beg_seg = range.begin().contiguous_segment();
  199|   689k|            auto end_seg = range.end().contiguous_segment();
  200|   689k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  153|   689k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 689k, False: 300]
  |  |  ------------------
  ------------------
  201|   689k|                             detail::to_address(end_seg.end()))) {
  202|   689k|                auto& str = m_storage.emplace();
  203|   689k|                str.reserve(range.end().position() - range.begin().position());
  204|   689k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|   689k|                m_view = string_view_type{str};
  206|   689k|                return;
  207|   689k|            }
  208|       |
  209|    300|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|    300|                                                            end_seg.data());
  211|    300|            m_storage.reset();
  212|    300|        }
  213|   689k|        else {
  214|   689k|            auto& str = m_storage.emplace();
  215|   689k|            if constexpr (ranges::sized_range<Range>) {
  216|   689k|                str.reserve(ranges_polyfill::usize(range));
  217|   689k|            }
  218|   689k|            std::copy(ranges::begin(range), ranges::end(range),
  219|   689k|                      std::back_inserter(str));
  220|   689k|            m_view = string_view_type{str};
  221|   689k|        }
  222|   689k|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  3.17M|{
  235|  3.17M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  3.17M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  3.17M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  3.17M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  3.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  3.17M|    }
  240|  3.17M|    else {
  241|  3.17M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  3.17M|    }
  243|  3.17M|}
_ZN3scn2v24impl19string_view_wrapperIwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  3.17M|    {
   50|  3.17M|    }
_ZNK3scn2v24impl19string_view_wrapperIwE4viewEv:
   62|  5.87M|    {
   63|  5.87M|        return sv;
   64|  5.87M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIwE4viewEv:
  141|  6.39M|    {
  142|  6.39M|        return m_view;
  143|  6.39M|    }
_ZN3scn2v24impl24contiguous_range_factoryIwED2Ev:
  131|  5.80M|    ~contiguous_range_factory() = default;
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|  5.80M|{
  235|  5.80M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  5.80M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  5.80M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  5.80M|        return string_view_wrapper{SCN_FWD(range)};
  239|  5.80M|    }
  240|  5.80M|    else {
  241|  5.80M|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  248|  5.80M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|  5.80M|    }
  243|  5.80M|}
_ZN3scn2v24impl24contiguous_range_factoryIwEC2IN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|  5.80M|    {
   97|  5.80M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  5.80M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|  5.80M|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEEEEvOT_:
  180|  5.80M|    {
  181|  5.80M|        using value_t = ranges::range_value_t<Range>;
  182|  5.80M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  5.80M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  5.80M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  5.80M|            m_storage.reset();
  186|  5.80M|            m_view = string_view_type{ranges::data(range),
  187|  5.80M|                                      ranges_polyfill::usize(range)};
  188|  5.80M|        }
  189|  5.80M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|  5.80M|                                          std::basic_string<CharT>>) {
  191|  5.80M|            m_storage.emplace(SCN_FWD(range));
  192|  5.80M|            m_view = string_view_type{*m_storage};
  193|  5.80M|        }
  194|  5.80M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|  5.80M|                                          typename detail::basic_scan_buffer<
  196|  5.80M|                                              value_t>::forward_iterator> &&
  197|  5.80M|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|  5.80M|            auto beg_seg = range.begin().contiguous_segment();
  199|  5.80M|            auto end_seg = range.end().contiguous_segment();
  200|  5.80M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  153|  5.80M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.80M, False: 842]
  |  |  ------------------
  ------------------
  201|  5.80M|                             detail::to_address(end_seg.end()))) {
  202|  5.80M|                auto& str = m_storage.emplace();
  203|  5.80M|                str.reserve(range.end().position() - range.begin().position());
  204|  5.80M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  5.80M|                m_view = string_view_type{str};
  206|  5.80M|                return;
  207|  5.80M|            }
  208|       |
  209|    842|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|    842|                                                            end_seg.data());
  211|    842|            m_storage.reset();
  212|    842|        }
  213|  5.80M|        else {
  214|  5.80M|            auto& str = m_storage.emplace();
  215|  5.80M|            if constexpr (ranges::sized_range<Range>) {
  216|  5.80M|                str.reserve(ranges_polyfill::usize(range));
  217|  5.80M|            }
  218|  5.80M|            std::copy(ranges::begin(range), ranges::end(range),
  219|  5.80M|                      std::back_inserter(str));
  220|  5.80M|            m_view = string_view_type{str};
  221|  5.80M|        }
  222|  5.80M|    }

_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  22.2M|{
   97|  22.2M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  22.2M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 29.8k, False: 22.2M]
  |  |  ------------------
  ------------------
   98|  29.8k|        return eof_error::eof;
   99|  29.8k|    }
  100|  22.2M|    return eof_error::good;
  101|  22.2M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  22.2M|{
   91|  22.2M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  22.2M|}
_ZN3scn2v24impl12is_range_eofIPKcS4_EEbT_T0_:
   74|  22.2M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  22.2M|    {
   84|  22.2M|        return begin == end;
   85|  22.2M|    }
   86|  22.2M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|  1.57M|{
   97|  1.57M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  1.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 228, False: 1.57M]
  |  |  ------------------
  ------------------
   98|    228|        return eof_error::eof;
   99|    228|    }
  100|  1.57M|    return eof_error::good;
  101|  1.57M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|  1.57M|{
   91|  1.57M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  1.57M|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|  1.57M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  1.57M|    {
   84|  1.57M|        return begin == end;
   85|  1.57M|    }
   86|  1.57M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  21.7M|{
   97|  21.7M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  21.7M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 40.3k, False: 21.7M]
  |  |  ------------------
  ------------------
   98|  40.3k|        return eof_error::eof;
   99|  40.3k|    }
  100|  21.7M|    return eof_error::good;
  101|  21.7M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  21.7M|{
   91|  21.7M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  21.7M|}
_ZN3scn2v24impl12is_range_eofIPKwS4_EEbT_T0_:
   74|  21.7M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  21.7M|    {
   84|  21.7M|        return begin == end;
   85|  21.7M|    }
   86|  21.7M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|  4.63M|{
   97|  4.63M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  4.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 810, False: 4.63M]
  |  |  ------------------
  ------------------
   98|    810|        return eof_error::eof;
   99|    810|    }
  100|  4.63M|    return eof_error::good;
  101|  4.63M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|  4.63M|{
   91|  4.63M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  4.63M|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|  4.63M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  4.63M|    {
   84|  4.63M|        return begin == end;
   85|  4.63M|    }
   86|  4.63M|}

_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  127|  5.60M|{
  128|  5.60M|    return find_classic_impl(
  129|  5.60M|        source, [](char ch) { return !is_ascii_space(ch); },
  130|  5.60M|        [](char32_t cp) { return !is_cp_space(cp); });
  131|  5.60M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
   30|  5.67M|{
   31|  5.67M|    static_assert(sizeof(*source.data()) == 1);
   32|  5.67M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  242|  5.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   33|      0|    uint64_t word{};
   34|  5.67M|    std::memcpy(&word, source.data(), source.size());
   35|       |
   36|  5.67M|    return has_byte_greater(word, 127) != 0;
   37|  5.67M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_3ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_4EEPKcS8_T_T0_:
   43|  5.60M|{
   44|  5.60M|    auto it = source.begin();
   45|       |
   46|  5.96M|    while (it != source.end()) {
  ------------------
  |  Branch (46:12): [True: 5.67M, False: 293k]
  ------------------
   47|  5.67M|        auto sv =
   48|  5.67M|            detail::make_string_view_from_iterators<char>(it, source.end())
   49|  5.67M|                .substr(0, 8);
   50|       |
   51|  5.67M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (51:13): [True: 5.58M, False: 89.9k]
  ------------------
   52|  5.58M|            auto tmp_it = ranges::find_if(sv, cu_cb);
   53|  5.58M|            it = detail::make_string_view_iterator(source, tmp_it);
   54|  5.58M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (54:17): [True: 5.22M, False: 363k]
  ------------------
   55|  5.22M|                break;
   56|  5.22M|            }
   57|   363k|            continue;
   58|  5.58M|        }
   59|       |
   60|   117k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (60:28): [True: 116k, False: 1.37k]
  ------------------
   61|   116k|            auto tmp =
   62|   116k|                detail::make_string_view_from_iterators<char>(it, source.end());
   63|   116k|            auto res = get_next_code_point(tmp);
   64|   116k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (64:17): [True: 88.6k, False: 27.6k]
  ------------------
   65|  88.6k|                return it;
   66|  88.6k|            }
   67|  27.6k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
   68|  27.6k|            it = detail::make_string_view_iterator(source, res.iterator);
   69|  27.6k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  243|  27.6k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  27.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   70|  27.6k|        }
   71|  89.9k|    }
   72|       |
   73|  5.51M|    return detail::make_string_view_iterator(source, it);
   74|  5.60M|}
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_3clEc:
  129|  11.1M|        source, [](char ch) { return !is_ascii_space(ch); },
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_4clEDi:
  130|   116k|        [](char32_t cp) { return !is_cp_space(cp); });

_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  5.16M|{
  300|  5.16M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  5.16M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  5.16M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  5.16M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  ------------------
  |  |  248|  5.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  304|  5.16M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  5.16M|        return ranges::next(ranges::begin(range),
  306|  5.16M|                            ranges::distance(buf.view().begin(), it));
  307|  5.16M|    }
  308|  5.16M|    else {
  309|  5.16M|        auto it = ranges::begin(range);
  310|       |
  311|  5.16M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  312|  5.16M|            auto seg = get_contiguous_beginning(range);
  313|  5.16M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  5.16M|                seg_it != seg.end()) {
  315|  5.16M|                return ranges_polyfill::batch_next(
  316|  5.16M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  5.16M|            }
  318|  5.16M|            ranges_polyfill::batch_next(it, seg.size());
  319|  5.16M|        }
  320|       |
  321|  5.16M|        return read_while_code_point(
  322|  5.16M|            SCN_FWD(range),
  323|  5.16M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  5.16M|    }
  325|  5.16M|}
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  5.16M|{
  459|  5.16M|    auto it = read_code_unit(range);
  460|  5.16M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  5.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.16M]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  10.2M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 10.2M, False: 4.85M]
  ------------------
  465|  10.2M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 310k, False: 9.94M]
  ------------------
  466|   310k|            return *it;
  467|   310k|        }
  468|  10.2M|    }
  469|       |
  470|  4.85M|    return unexpected(parse_error::error);
  471|  5.16M|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEOSH_OSJ_:
  481|  1.03M|{
  482|  1.03M|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 893k, False: 145k]
  ------------------
  483|   893k|        return ranges::begin(range);
  484|   893k|    }
  485|   145k|    return *result;
  486|  1.03M|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  11.2M|{
  418|  11.2M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  11.2M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  11.2M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  11.2M|        if (ranges::size(range) < str.size()) {
  ------------------
  |  Branch (422:13): [True: 48.5k, False: 11.2M]
  ------------------
  423|  48.5k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  48.5k|        }
  425|  11.2M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  ------------------
  |  Branch (425:13): [True: 11.1M, False: 82.0k]
  ------------------
  426|  11.1M|            return unexpected(parse_error::error);
  427|  11.1M|        }
  428|  82.0k|        return ranges::next(ranges::begin(range), str.size());
  429|  11.2M|    }
  430|  11.2M|    else {
  431|  11.2M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  11.2M|            if (ch < 'A' || ch > 'Z') {
  433|  11.2M|                return ch;
  434|  11.2M|            }
  435|  11.2M|            return static_cast<char_type>(ch +
  436|  11.2M|                                          static_cast<char_type>('a' - 'A'));
  437|  11.2M|        };
  438|       |
  439|  11.2M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  440|  11.2M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  11.2M|        if (SCN_UNLIKELY(!std::equal(
  443|  11.2M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  11.2M|                    return ascii_tolower(a) ==
  445|  11.2M|                           static_cast<detail::char_t<Range>>(b);
  446|  11.2M|                }))) {
  447|  11.2M|            return unexpected(parse_error::error);
  448|  11.2M|        }
  449|       |
  450|  11.2M|        return it;
  451|  11.2M|    }
  452|  11.2M|}
_ZN3scn2v24impl17fast_streq_nocaseEPKcS3_m:
  406|  11.2M|{
  407|  11.2M|    unsigned char running_diff{0};
  408|  33.6M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (408:24): [True: 22.4M, False: 11.2M]
  ------------------
  409|  22.4M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
  410|  22.4M|    }
  411|  11.2M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (411:12): [True: 76.6k, False: 11.1M]
  |  Branch (411:33): [True: 5.36k, False: 11.1M]
  ------------------
  412|  11.2M|}
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NDTcl4implISE_EEE4typeE:
  331|  3.57M|{
  332|  3.57M|    auto it = read_code_unit(range);
  333|  3.57M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  3.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.33k, False: 3.57M]
  |  |  ------------------
  ------------------
  334|  1.33k|        return unexpected(make_eof_parse_error(it.error()));
  335|  1.33k|    }
  336|       |
  337|  3.57M|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|  3.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.56M, False: 2.01M]
  |  |  ------------------
  ------------------
  338|  3.57M|                     static_cast<detail::char_t<Range>>(ch))) {
  339|  1.56M|        return unexpected(parse_error::error);
  340|  1.56M|    }
  341|       |
  342|  2.01M|    return *it;
  343|  3.57M|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|   441k|{
  300|   441k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   441k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   441k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   441k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   441k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   441k|        return ranges::next(ranges::begin(range),
  306|   441k|                            ranges::distance(buf.view().begin(), it));
  307|   441k|    }
  308|   441k|    else {
  309|   441k|        auto it = ranges::begin(range);
  310|       |
  311|   441k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   441k|            auto seg = get_contiguous_beginning(range);
  313|   441k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   441k|                seg_it != seg.end()) {
  ------------------
  |  Branch (314:17): [True: 151k, False: 289k]
  ------------------
  315|   151k|                return ranges_polyfill::batch_next(
  316|   151k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   151k|            }
  318|   289k|            ranges_polyfill::batch_next(it, seg.size());
  319|   289k|        }
  320|       |
  321|   289k|        return read_while_code_point(
  322|   289k|            SCN_FWD(range),
  ------------------
  |  |  248|   289k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   289k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   441k|    }
  325|   441k|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  263|   289k|{
  264|   289k|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   289k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|   289k|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  230|   289k|{
  231|   289k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|   289k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|   289k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|   289k|    }
  235|   289k|    else {
  236|   289k|        auto it = ranges::begin(range);
  237|   289k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|   289k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|   289k|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 0, False: 289k]
  ------------------
  241|      0|            return ranges_polyfill::batch_next(
  242|      0|                it, ranges::distance(seg.begin(), seg_it));
  243|      0|        }
  244|       |
  245|   579k|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 579k, False: 126]
  ------------------
  246|   579k|            const auto [iter, value] =
  247|   579k|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|   579k|            const auto cp = decode_code_point_exhaustive(value.view());
  249|   579k|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 289k, False: 289k]
  ------------------
  250|   289k|                return it;
  251|   289k|            }
  252|   289k|            it = iter;
  253|   289k|        }
  254|       |
  255|    126|        return it;
  256|   289k|    }
  257|   289k|}
_ZN3scn2v24impl27read_until_code_point_eagerIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_NS1_12function_refIFbDiESF_EE:
  177|   289k|{
  178|   289k|    static_assert(ranges::contiguous_range<Range> &&
  179|   289k|                  ranges::sized_range<Range>);
  180|       |
  181|   289k|    std::array<char32_t, 16> cp_buf{};
  182|   289k|    std::array<uint8_t, 16> idx_buf{};
  183|   289k|    auto it = ranges::begin(range);
  184|   579k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 289k, False: 289k]
  ------------------
  185|   289k|        auto chunk_begin = it;
  186|   289k|        size_t code_point_count = 0;
  187|   289k|        uint8_t code_unit_idx = 0;
  188|   579k|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 579k, False: 0]
  |  Branch (188:52): [True: 289k, False: 289k]
  ------------------
  189|   289k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 289k, False: 0]
  ------------------
  190|   289k|                idx_buf[code_point_count] = code_unit_idx;
  191|   289k|                ++code_point_count;
  192|   289k|            }
  193|   289k|            ++it;
  194|   289k|            ++code_unit_idx;
  195|   289k|        }
  196|       |
  197|   289k|        auto input = detail::make_string_view_from_pointers(
  198|   289k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|   289k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|   289k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|   289k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|   289k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 289k]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|   579k|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 289k, False: 289k]
  ------------------
  217|   289k|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 0, False: 289k]
  ------------------
  218|      0|                return chunk_begin + idx_buf[i];
  219|      0|            }
  220|   289k|        }
  221|   289k|    }
  222|       |
  223|   289k|    return it;
  224|   289k|}
_ZN3scn2v24impl20read_code_point_intoIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_21iterator_value_resultINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_24contiguous_range_factoryINDTcl4implISG_EEE4typeEEEEEOSG_:
   41|   579k|{
   42|   579k|    SCN_EXPECT(ranges::begin(range) != ranges::end(range));
  ------------------
  |  |  242|   579k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   579k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   43|       |
   44|      0|    auto it = ranges::begin(range);
   45|   579k|    const auto len = code_point_length_by_starting_code_unit(*it);
   46|       |
   47|   579k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|   579k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 579k]
  |  |  ------------------
  ------------------
   48|      0|        for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (48:16): [True: 0, False: 0]
  ------------------
   49|      0|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (49:17): [True: 0, False: 0]
  ------------------
   50|      0|                break;
   51|      0|            }
   52|      0|        }
   53|       |
   54|      0|        return {it, make_contiguous_buffer(
   55|      0|                        ranges::subrange{ranges::begin(range), it})};
   56|      0|    }
   57|       |
   58|   579k|    if (len == 1) {
  ------------------
  |  Branch (58:9): [True: 579k, False: 0]
  ------------------
   59|   579k|        ++it;
   60|   579k|        return {it, make_contiguous_buffer(
   61|   579k|                        ranges::subrange{ranges::begin(range), it})};
   62|   579k|    }
   63|       |
   64|      0|    ranges::advance(it, static_cast<ranges::range_difference_t<Range>>(len),
   65|      0|                    ranges::end(range));
   66|      0|    return {it,
   67|      0|            make_contiguous_buffer(ranges::subrange{ranges::begin(range), it})};
   68|   579k|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_ENKUlDiE_clEDi:
  323|   868k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|   441k|{
  459|   441k|    auto it = read_code_unit(range);
  460|   441k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   441k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 441k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|   882k|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 882k, False: 441k]
  ------------------
  465|   882k|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 0, False: 882k]
  ------------------
  466|      0|            return *it;
  467|      0|        }
  468|   882k|    }
  469|       |
  470|   441k|    return unexpected(parse_error::error);
  471|   441k|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEOSK_OSM_:
  481|   192k|{
  482|   192k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 165k, False: 27.5k]
  ------------------
  483|   165k|        return ranges::begin(range);
  484|   165k|    }
  485|  27.5k|    return *result;
  486|   192k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|   771k|{
  418|   771k|    using char_type = detail::char_t<Range>;
  419|       |
  420|   771k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|   771k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|   771k|        if (ranges::size(range) < str.size()) {
  423|   771k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|   771k|        }
  425|   771k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|   771k|            return unexpected(parse_error::error);
  427|   771k|        }
  428|   771k|        return ranges::next(ranges::begin(range), str.size());
  429|   771k|    }
  430|   771k|    else {
  431|   771k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   771k|            if (ch < 'A' || ch > 'Z') {
  433|   771k|                return ch;
  434|   771k|            }
  435|   771k|            return static_cast<char_type>(ch +
  436|   771k|                                          static_cast<char_type>('a' - 'A'));
  437|   771k|        };
  438|       |
  439|   771k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|   771k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   771k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   771k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   771k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 336, False: 771k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    336|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    336|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    336|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    336|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    336|    }                                                  \
  |  |  |  |   70|   771k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   771k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|   771k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|   771k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|   771k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 771k, False: 0]
  |  |  ------------------
  ------------------
  443|   771k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|   771k|                    return ascii_tolower(a) ==
  445|   771k|                           static_cast<detail::char_t<Range>>(b);
  446|   771k|                }))) {
  447|   771k|            return unexpected(parse_error::error);
  448|   771k|        }
  449|       |
  450|      0|        return it;
  451|   771k|    }
  452|   771k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlcE_clEc:
  431|  1.14M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  1.14M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 771k, False: 371k]
  |  Branch (432:29): [True: 371k, False: 0]
  ------------------
  433|  1.14M|                return ch;
  434|  1.14M|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|  1.14M|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NDTcl4implISH_EEE4typeE:
  331|   248k|{
  332|   248k|    auto it = read_code_unit(range);
  333|   248k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 248k]
  |  |  ------------------
  ------------------
  334|      0|        return unexpected(make_eof_parse_error(it.error()));
  335|      0|    }
  336|       |
  337|   248k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 124k, False: 124k]
  |  |  ------------------
  ------------------
  338|   248k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   124k|        return unexpected(parse_error::error);
  340|   124k|    }
  341|       |
  342|   124k|    return *it;
  343|   248k|}
_ZN3scn2v24impl21read_while1_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NS1_12function_refIFbNDTcl4implISH_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
  158|   289k|{
  159|   289k|    auto it = read_while_code_unit(range, pred);
  160|   289k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 179k, False: 110k]
  ------------------
  161|   179k|        return unexpected(parse_error::error);
  162|   179k|    }
  163|   110k|    return it;
  164|   289k|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|   289k|{
  139|   289k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   289k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   289k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|   289k|{
  131|   289k|    return ranges::find_if(range, pred);
  132|   289k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  5.04M|{
  300|  5.04M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  5.04M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  5.04M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  5.04M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|  5.04M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  5.04M|        return ranges::next(ranges::begin(range),
  306|  5.04M|                            ranges::distance(buf.view().begin(), it));
  307|  5.04M|    }
  308|  5.04M|    else {
  309|  5.04M|        auto it = ranges::begin(range);
  310|       |
  311|  5.04M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|  5.04M|            auto seg = get_contiguous_beginning(range);
  313|  5.04M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  5.04M|                seg_it != seg.end()) {
  315|  5.04M|                return ranges_polyfill::batch_next(
  316|  5.04M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  5.04M|            }
  318|  5.04M|            ranges_polyfill::batch_next(it, seg.size());
  319|  5.04M|        }
  320|       |
  321|  5.04M|        return read_while_code_point(
  322|  5.04M|            SCN_FWD(range),
  ------------------
  |  |  248|  5.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  5.04M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  5.04M|    }
  325|  5.04M|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  263|  5.04M|{
  264|  5.04M|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  5.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|  5.04M|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  230|  5.04M|{
  231|  5.04M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|  5.04M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|  5.04M|        return read_until_code_point_eager(SCN_FWD(range), pred);
  ------------------
  |  |  248|  5.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  234|  5.04M|    }
  235|  5.04M|    else {
  236|  5.04M|        auto it = ranges::begin(range);
  237|  5.04M|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|  5.04M|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|  5.04M|            seg_it != seg.end()) {
  241|  5.04M|            return ranges_polyfill::batch_next(
  242|  5.04M|                it, ranges::distance(seg.begin(), seg_it));
  243|  5.04M|        }
  244|       |
  245|  5.04M|        while (it != ranges::end(range)) {
  246|  5.04M|            const auto [iter, value] =
  247|  5.04M|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  5.04M|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  5.04M|            if (pred(cp)) {
  250|  5.04M|                return it;
  251|  5.04M|            }
  252|  5.04M|            it = iter;
  253|  5.04M|        }
  254|       |
  255|  5.04M|        return it;
  256|  5.04M|    }
  257|  5.04M|}
_ZN3scn2v24impl27read_until_code_point_eagerIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  177|  5.04M|{
  178|  5.04M|    static_assert(ranges::contiguous_range<Range> &&
  179|  5.04M|                  ranges::sized_range<Range>);
  180|       |
  181|  5.04M|    std::array<char32_t, 16> cp_buf{};
  182|  5.04M|    std::array<uint8_t, 16> idx_buf{};
  183|  5.04M|    auto it = ranges::begin(range);
  184|  5.06M|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 5.05M, False: 7.35k]
  ------------------
  185|  5.05M|        auto chunk_begin = it;
  186|  5.05M|        size_t code_point_count = 0;
  187|  5.05M|        uint8_t code_unit_idx = 0;
  188|  81.5M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 77.0M, False: 4.57M]
  |  Branch (188:52): [True: 76.5M, False: 484k]
  ------------------
  189|  76.5M|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 76.5M, False: 0]
  ------------------
  190|  76.5M|                idx_buf[code_point_count] = code_unit_idx;
  191|  76.5M|                ++code_point_count;
  192|  76.5M|            }
  193|  76.5M|            ++it;
  194|  76.5M|            ++code_unit_idx;
  195|  76.5M|        }
  196|       |
  197|  5.05M|        auto input = detail::make_string_view_from_pointers(
  198|  5.05M|            detail::to_address(chunk_begin), detail::to_address(it));
  199|  5.05M|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|  5.05M|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|  5.05M|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|  5.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.05M]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|  10.1M|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 10.1M, False: 20.6k]
  ------------------
  217|  10.1M|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 5.03M, False: 5.13M]
  ------------------
  218|  5.03M|                return chunk_begin + idx_buf[i];
  219|  5.03M|            }
  220|  10.1M|        }
  221|  5.05M|    }
  222|       |
  223|  7.35k|    return it;
  224|  5.04M|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_ENKUlDiE_clEDi:
  323|  10.1M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  5.03M|{
  459|  5.03M|    auto it = read_code_unit(range);
  460|  5.03M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  5.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.03M]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  10.0M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 10.0M, False: 4.78M]
  ------------------
  465|  10.0M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 256k, False: 9.76M]
  ------------------
  466|   256k|            return *it;
  467|   256k|        }
  468|  10.0M|    }
  469|       |
  470|  4.78M|    return unexpected(parse_error::error);
  471|  5.03M|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEOSH_OSJ_:
  481|  1.09M|{
  482|  1.09M|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 970k, False: 129k]
  ------------------
  483|   970k|        return ranges::begin(range);
  484|   970k|    }
  485|   129k|    return *result;
  486|  1.09M|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  10.8M|{
  418|  10.8M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  10.8M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  10.8M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  10.8M|        if (ranges::size(range) < str.size()) {
  423|  10.8M|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  10.8M|        }
  425|  10.8M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  10.8M|            return unexpected(parse_error::error);
  427|  10.8M|        }
  428|  10.8M|        return ranges::next(ranges::begin(range), str.size());
  429|  10.8M|    }
  430|  10.8M|    else {
  431|  10.8M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  10.8M|            if (ch < 'A' || ch > 'Z') {
  433|  10.8M|                return ch;
  434|  10.8M|            }
  435|  10.8M|            return static_cast<char_type>(ch +
  436|  10.8M|                                          static_cast<char_type>('a' - 'A'));
  437|  10.8M|        };
  438|       |
  439|  10.8M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  10.8M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.8M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.8M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  10.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 116k, False: 10.7M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|   116k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|   116k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   116k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|   116k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|   116k|    }                                                  \
  |  |  |  |   70|  10.8M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  10.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  10.7M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  10.7M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  10.7M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 10.6M, False: 74.4k]
  |  |  ------------------
  ------------------
  443|  10.7M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  10.7M|                    return ascii_tolower(a) ==
  445|  10.7M|                           static_cast<detail::char_t<Range>>(b);
  446|  10.7M|                }))) {
  447|  10.6M|            return unexpected(parse_error::error);
  448|  10.6M|        }
  449|       |
  450|  74.4k|        return it;
  451|  10.7M|    }
  452|  10.8M|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
  431|  16.5M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  16.5M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 15.6M, False: 893k]
  |  Branch (432:29): [True: 848k, False: 44.5k]
  ------------------
  433|  16.5M|                return ch;
  434|  16.5M|            }
  435|  44.5k|            return static_cast<char_type>(ch +
  436|  44.5k|                                          static_cast<char_type>('a' - 'A'));
  437|  16.5M|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NDTcl4implISE_EEE4typeE:
  331|  3.45M|{
  332|  3.45M|    auto it = read_code_unit(range);
  333|  3.45M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  3.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.47k, False: 3.44M]
  |  |  ------------------
  ------------------
  334|  2.47k|        return unexpected(make_eof_parse_error(it.error()));
  335|  2.47k|    }
  336|       |
  337|  3.44M|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|  3.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.63M, False: 1.81M]
  |  |  ------------------
  ------------------
  338|  3.44M|                     static_cast<detail::char_t<Range>>(ch))) {
  339|  1.63M|        return unexpected(parse_error::error);
  340|  1.63M|    }
  341|       |
  342|  1.81M|    return *it;
  343|  3.44M|}
_ZN3scn2v24impl27read_until_code_point_eagerIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_NS1_12function_refIFbDiESF_EE:
  177|  1.29M|{
  178|  1.29M|    static_assert(ranges::contiguous_range<Range> &&
  179|  1.29M|                  ranges::sized_range<Range>);
  180|       |
  181|  1.29M|    std::array<char32_t, 16> cp_buf{};
  182|  1.29M|    std::array<uint8_t, 16> idx_buf{};
  183|  1.29M|    auto it = ranges::begin(range);
  184|  2.59M|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 1.29M, False: 1.29M]
  ------------------
  185|  1.29M|        auto chunk_begin = it;
  186|  1.29M|        size_t code_point_count = 0;
  187|  1.29M|        uint8_t code_unit_idx = 0;
  188|  2.59M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 2.59M, False: 0]
  |  Branch (188:52): [True: 1.29M, False: 1.29M]
  ------------------
  189|  1.29M|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 1.29M, False: 0]
  ------------------
  190|  1.29M|                idx_buf[code_point_count] = code_unit_idx;
  191|  1.29M|                ++code_point_count;
  192|  1.29M|            }
  193|  1.29M|            ++it;
  194|  1.29M|            ++code_unit_idx;
  195|  1.29M|        }
  196|       |
  197|  1.29M|        auto input = detail::make_string_view_from_pointers(
  198|  1.29M|            detail::to_address(chunk_begin), detail::to_address(it));
  199|  1.29M|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|  1.29M|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|  1.29M|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|  1.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.29M]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|  2.59M|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 1.29M, False: 1.29M]
  ------------------
  217|  1.29M|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 54, False: 1.29M]
  ------------------
  218|     54|                return chunk_begin + idx_buf[i];
  219|     54|            }
  220|  1.29M|        }
  221|  1.29M|    }
  222|       |
  223|  1.29M|    return it;
  224|  1.29M|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|  1.29M|{
  300|  1.29M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  1.29M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  1.29M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  1.29M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|  1.29M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  1.29M|        return ranges::next(ranges::begin(range),
  306|  1.29M|                            ranges::distance(buf.view().begin(), it));
  307|  1.29M|    }
  308|  1.29M|    else {
  309|  1.29M|        auto it = ranges::begin(range);
  310|       |
  311|  1.29M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|  1.29M|            auto seg = get_contiguous_beginning(range);
  313|  1.29M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  1.29M|                seg_it != seg.end()) {
  315|  1.29M|                return ranges_polyfill::batch_next(
  316|  1.29M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  1.29M|            }
  318|  1.29M|            ranges_polyfill::batch_next(it, seg.size());
  319|  1.29M|        }
  320|       |
  321|  1.29M|        return read_while_code_point(
  322|  1.29M|            SCN_FWD(range),
  ------------------
  |  |  248|  1.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  1.29M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  1.29M|    }
  325|  1.29M|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  263|  1.29M|{
  264|  1.29M|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  1.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|  1.29M|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  230|  1.29M|{
  231|  1.29M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|  1.29M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|  1.29M|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|  1.29M|    }
  235|  1.29M|    else {
  236|  1.29M|        auto it = ranges::begin(range);
  237|  1.29M|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|  1.29M|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|  1.29M|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 54, False: 1.29M]
  ------------------
  241|     54|            return ranges_polyfill::batch_next(
  242|     54|                it, ranges::distance(seg.begin(), seg_it));
  243|     54|        }
  244|       |
  245|  5.18M|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 5.18M, False: 564]
  ------------------
  246|  5.18M|            const auto [iter, value] =
  247|  5.18M|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  5.18M|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  5.18M|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 1.29M, False: 3.88M]
  ------------------
  250|  1.29M|                return it;
  251|  1.29M|            }
  252|  3.88M|            it = iter;
  253|  3.88M|        }
  254|       |
  255|    564|        return it;
  256|  1.29M|    }
  257|  1.29M|}
_ZN3scn2v24impl20read_code_point_intoIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_21iterator_value_resultINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_24contiguous_range_factoryINDTcl4implISG_EEE4typeEEEEEOSG_:
   41|  5.18M|{
   42|  5.18M|    SCN_EXPECT(ranges::begin(range) != ranges::end(range));
  ------------------
  |  |  242|  5.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   43|       |
   44|      0|    auto it = ranges::begin(range);
   45|  5.18M|    const auto len = code_point_length_by_starting_code_unit(*it);
   46|       |
   47|  5.18M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|  5.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.18M]
  |  |  ------------------
  ------------------
   48|      0|        for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (48:16): [True: 0, False: 0]
  ------------------
   49|      0|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (49:17): [True: 0, False: 0]
  ------------------
   50|      0|                break;
   51|      0|            }
   52|      0|        }
   53|       |
   54|      0|        return {it, make_contiguous_buffer(
   55|      0|                        ranges::subrange{ranges::begin(range), it})};
   56|      0|    }
   57|       |
   58|  5.18M|    if (len == 1) {
  ------------------
  |  Branch (58:9): [True: 5.18M, False: 0]
  ------------------
   59|  5.18M|        ++it;
   60|  5.18M|        return {it, make_contiguous_buffer(
   61|  5.18M|                        ranges::subrange{ranges::begin(range), it})};
   62|  5.18M|    }
   63|       |
   64|      0|    ranges::advance(it, static_cast<ranges::range_difference_t<Range>>(len),
   65|      0|                    ranges::end(range));
   66|      0|    return {it,
   67|      0|            make_contiguous_buffer(ranges::subrange{ranges::begin(range), it})};
   68|  5.18M|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_ENKUlDiE_clEDi:
  323|  6.47M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|  1.29M|{
  459|  1.29M|    auto it = read_code_unit(range);
  460|  1.29M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  1.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.29M]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  2.59M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 2.59M, False: 1.24M]
  ------------------
  465|  2.59M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 55.0k, False: 2.53M]
  ------------------
  466|  55.0k|            return *it;
  467|  55.0k|        }
  468|  2.59M|    }
  469|       |
  470|  1.24M|    return unexpected(parse_error::error);
  471|  1.29M|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEOSK_OSM_:
  481|   551k|{
  482|   551k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 468k, False: 82.7k]
  ------------------
  483|   468k|        return ranges::begin(range);
  484|   468k|    }
  485|  82.7k|    return *result;
  486|   551k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|  2.28M|{
  418|  2.28M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  2.28M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  2.28M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  2.28M|        if (ranges::size(range) < str.size()) {
  423|  2.28M|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  2.28M|        }
  425|  2.28M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  2.28M|            return unexpected(parse_error::error);
  427|  2.28M|        }
  428|  2.28M|        return ranges::next(ranges::begin(range), str.size());
  429|  2.28M|    }
  430|  2.28M|    else {
  431|  2.28M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  2.28M|            if (ch < 'A' || ch > 'Z') {
  433|  2.28M|                return ch;
  434|  2.28M|            }
  435|  2.28M|            return static_cast<char_type>(ch +
  436|  2.28M|                                          static_cast<char_type>('a' - 'A'));
  437|  2.28M|        };
  438|       |
  439|  2.28M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  2.28M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.28M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.28M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 340, False: 2.28M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    340|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    340|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    340|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    340|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    340|    }                                                  \
  |  |  |  |   70|  2.28M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  2.28M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  2.28M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  2.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.28M, False: 0]
  |  |  ------------------
  ------------------
  443|  2.28M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  2.28M|                    return ascii_tolower(a) ==
  445|  2.28M|                           static_cast<detail::char_t<Range>>(b);
  446|  2.28M|                }))) {
  447|  2.28M|            return unexpected(parse_error::error);
  448|  2.28M|        }
  449|       |
  450|      0|        return it;
  451|  2.28M|    }
  452|  2.28M|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlwE_clEw:
  431|  3.40M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  3.40M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 2.28M, False: 1.11M]
  |  Branch (432:29): [True: 1.11M, False: 0]
  ------------------
  433|  3.40M|                return ch;
  434|  3.40M|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|  3.40M|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NDTcl4implISH_EEE4typeE:
  331|   744k|{
  332|   744k|    auto it = read_code_unit(range);
  333|   744k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   744k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 744k]
  |  |  ------------------
  ------------------
  334|      0|        return unexpected(make_eof_parse_error(it.error()));
  335|      0|    }
  336|       |
  337|   744k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|   744k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 372k, False: 372k]
  |  |  ------------------
  ------------------
  338|   744k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   372k|        return unexpected(parse_error::error);
  340|   372k|    }
  341|       |
  342|   372k|    return *it;
  343|   744k|}
_ZN3scn2v24impl21read_while1_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NS1_12function_refIFbNDTcl4implISH_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
  158|  1.10M|{
  159|  1.10M|    auto it = read_while_code_unit(range, pred);
  160|  1.10M|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 482k, False: 620k]
  ------------------
  161|   482k|        return unexpected(parse_error::error);
  162|   482k|    }
  163|   620k|    return it;
  164|  1.10M|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|  1.10M|{
  139|  1.10M|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  1.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|  1.10M|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|  1.10M|{
  131|  1.10M|    return ranges::find_if(range, pred);
  132|  1.10M|}

_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  8.74M|{
   36|  8.74M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  8.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.33k, False: 8.73M]
  |  |  ------------------
  ------------------
   37|  1.33k|        return unexpected(e);
   38|  1.33k|    }
   39|       |
   40|  8.73M|    return ranges::next(ranges::begin(range));
   41|  8.74M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|   689k|{
   36|   689k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   689k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 689k]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|   689k|    return ranges::next(ranges::begin(range));
   41|   689k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|   771k|{
   48|   771k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|   771k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   771k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|   771k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|   771k|        const auto sz = ranges::ssize(range);
   52|   771k|        if (sz < count) {
   53|   771k|            return unexpected(eof_error::eof);
   54|   771k|        }
   55|       |
   56|   771k|        return ranges::next(ranges::begin(range), count);
   57|   771k|    }
   58|   771k|    else {
   59|   771k|        auto it = ranges::begin(range);
   60|   771k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 771k, False: 336]
  ------------------
   61|   771k|            return ranges_polyfill::batch_next(it, count);
   62|   771k|        }
   63|       |
   64|    672|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 672, False: 0]
  ------------------
   65|    672|             ++i, (void)++it) {
   66|    672|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 336, False: 336]
  ------------------
   67|    336|                return unexpected(eof_error::eof);
   68|    336|            }
   69|    672|        }
   70|       |
   71|      0|        return it;
   72|    336|    }
   73|   771k|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  8.48M|{
   36|  8.48M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  8.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.47k, False: 8.48M]
  |  |  ------------------
  ------------------
   37|  2.47k|        return unexpected(e);
   38|  2.47k|    }
   39|       |
   40|  8.48M|    return ranges::next(ranges::begin(range));
   41|  8.48M|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__19enable_ifIX5rangeISE_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeE:
   47|  10.8M|{
   48|  10.8M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  10.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  10.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  10.8M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  10.8M|        const auto sz = ranges::ssize(range);
   52|  10.8M|        if (sz < count) {
  ------------------
  |  Branch (52:13): [True: 116k, False: 10.7M]
  ------------------
   53|   116k|            return unexpected(eof_error::eof);
   54|   116k|        }
   55|       |
   56|  10.7M|        return ranges::next(ranges::begin(range), count);
   57|  10.8M|    }
   58|  10.8M|    else {
   59|  10.8M|        auto it = ranges::begin(range);
   60|  10.8M|        if (guaranteed_minimum_size(range) >= count) {
   61|  10.8M|            return ranges_polyfill::batch_next(it, count);
   62|  10.8M|        }
   63|       |
   64|  10.8M|        for (ranges::range_difference_t<Range> i = 0; i < count;
   65|  10.8M|             ++i, (void)++it) {
   66|  10.8M|            if (it == ranges::end(range)) {
   67|  10.8M|                return unexpected(eof_error::eof);
   68|  10.8M|            }
   69|  10.8M|        }
   70|       |
   71|  10.8M|        return it;
   72|  10.8M|    }
   73|  10.8M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|  2.03M|{
   36|  2.03M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.03M]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|  2.03M|    return ranges::next(ranges::begin(range));
   41|  2.03M|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|  2.28M|{
   48|  2.28M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  2.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  2.28M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  2.28M|        const auto sz = ranges::ssize(range);
   52|  2.28M|        if (sz < count) {
   53|  2.28M|            return unexpected(eof_error::eof);
   54|  2.28M|        }
   55|       |
   56|  2.28M|        return ranges::next(ranges::begin(range), count);
   57|  2.28M|    }
   58|  2.28M|    else {
   59|  2.28M|        auto it = ranges::begin(range);
   60|  2.28M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 2.23M, False: 55.3k]
  ------------------
   61|  2.23M|            return ranges_polyfill::batch_next(it, count);
   62|  2.23M|        }
   63|       |
   64|   165k|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 110k, False: 55.0k]
  ------------------
   65|   110k|             ++i, (void)++it) {
   66|   110k|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 340, False: 110k]
  ------------------
   67|    340|                return unexpected(eof_error::eof);
   68|    340|            }
   69|   110k|        }
   70|       |
   71|  55.0k|        return it;
   72|  55.3k|    }
   73|  2.28M|}

_ZN3scn2v26detail10locale_refC2INSt3__16localeEEERKT_:
   32|  5.79M|{
   33|  5.79M|    static_assert(std::is_same_v<Locale, std::locale>);
   34|  5.79M|}
_ZNK3scn2v26detail10locale_ref3getINSt3__16localeEEET_v:
   38|  1.39M|{
   39|  1.39M|    static_assert(std::is_same_v<Locale, std::locale>);
   40|  1.39M|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (40:12): [True: 697k, False: 697k]
  ------------------
   41|  1.39M|                    : std::locale{};
   42|  1.39M|}

_ZN3scn2v24impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
  111|   633k|    {
  112|   633k|        auto stdloc = loc.get<std::locale>();
  113|   633k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|   633k|        grouping = numpunct.grouping();
  115|   633k|        thousands_sep =
  116|   633k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 633k]
  ------------------
  117|   633k|        decimal_point = numpunct.decimal_point();
  118|   633k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
   48|   633k|{
   49|   633k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 633k, False: 0]
  ------------------
   50|   633k|        return std::use_facet<Facet>(stdloc);
   51|   633k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|   633k|}
_ZN3scn2v24impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
  111|   761k|    {
  112|   761k|        auto stdloc = loc.get<std::locale>();
  113|   761k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|   761k|        grouping = numpunct.grouping();
  115|   761k|        thousands_sep =
  116|   761k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 761k]
  ------------------
  117|   761k|        decimal_point = numpunct.decimal_point();
  118|   761k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
   48|   761k|{
   49|   761k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 761k, False: 0]
  ------------------
   50|   761k|        return std::use_facet<Facet>(stdloc);
   51|   761k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|   761k|}

_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  5.16M|{
   46|  5.16M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 5.16M, False: 0]
  ------------------
   47|  5.16M|        auto it = read_while_classic_space(range);
   48|  5.16M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  5.16M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  5.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.69k, False: 5.16M]
  |  |  ------------------
  ------------------
   50|  3.69k|            return unexpected(e);
   51|  3.69k|        }
   52|       |
   53|  5.16M|        return it;
   54|  5.16M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  5.16M|}
_ZNK3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
  125|  5.62M|    {
  126|  5.62M|        return true;
  127|  5.62M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|   441k|{
   46|   441k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 441k, False: 0]
  ------------------
   47|   441k|        auto it = read_while_classic_space(range);
   48|   441k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   441k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   441k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 126, False: 441k]
  |  |  ------------------
  ------------------
   50|    126|            return unexpected(e);
   51|    126|        }
   52|       |
   53|   441k|        return it;
   54|   441k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   441k|}
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
  130|  4.06M|    {
  131|  4.06M|        reader_error_handler eh{};
  132|  4.06M|        get_derived().check_specs_impl(specs, eh);
  133|  4.06M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  4.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.06M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  4.06M|        return {};
  137|  4.06M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
  141|  4.06M|    {
  142|  4.06M|        return static_cast<Derived&>(*this);
  143|  4.06M|    }
_ZNK3scn2v24impl20reader_error_handlercvbEv:
   34|  8.78M|    {
   35|  8.78M|        return m_msg == nullptr;
   36|  8.78M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  5.04M|{
   46|  5.04M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 5.04M, False: 0]
  ------------------
   47|  5.04M|        auto it = read_while_classic_space(range);
   48|  5.04M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  5.04M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  5.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 7.35k, False: 5.03M]
  |  |  ------------------
  ------------------
   50|  7.35k|            return unexpected(e);
   51|  7.35k|        }
   52|       |
   53|  5.03M|        return it;
   54|  5.04M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  5.04M|}
_ZNK3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
  125|  6.36M|    {
  126|  6.36M|        return true;
  127|  6.36M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
  130|  4.71M|    {
  131|  4.71M|        reader_error_handler eh{};
  132|  4.71M|        get_derived().check_specs_impl(specs, eh);
  133|  4.71M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  4.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.71M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  4.71M|        return {};
  137|  4.71M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
  141|  4.71M|    {
  142|  4.71M|        return static_cast<Derived&>(*this);
  143|  4.71M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|  1.29M|{
   46|  1.29M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 1.29M, False: 0]
  ------------------
   47|  1.29M|        auto it = read_while_classic_space(range);
   48|  1.29M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  1.29M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 564, False: 1.29M]
  |  |  ------------------
  ------------------
   50|    564|            return unexpected(e);
   51|    564|        }
   52|       |
   53|  1.29M|        return it;
   54|  1.29M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  1.29M|}

_ZN3scn2v24impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   513k|{
  218|   513k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   513k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   513k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   513k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   513k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   513k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   513k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   513k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   513k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   513k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   513k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   513k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   513k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 16.4k, False: 497k]
  ------------------
  224|  16.4k|        SCN_UNLIKELY_ATTR
  225|  16.4k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  16.4k|                                     "Invalid integer value");
  227|  16.4k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   497k|    auto start = source.data();
  231|   497k|    const auto end = source.data() + source.size();
  232|   497k|    {
  233|   879k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 850k, False: 28.4k]
  ------------------
  234|   850k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 469k, False: 381k]
  ------------------
  235|   469k|                break;
  236|   469k|            }
  237|   850k|        }
  238|   497k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   966k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 142k, False: 355k]
  |  |  |  Branch (153:45): [True: 28.4k, False: 469k]
  |  |  |  Branch (153:45): [True: 113k, False: 355k]
  |  |  ------------------
  ------------------
  239|   142k|            value = 0;
  240|   142k|            return ranges::next(source.begin(),
  241|   142k|                                ranges::distance(source.data(), start));
  242|   142k|        }
  243|   497k|    }
  244|       |
  245|   355k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   355k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 267k, False: 88.1k]
  ------------------
  247|   267k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   267k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   267k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   267k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   267k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.96k, False: 260k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.96k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.96k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.96k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.96k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.96k|    }                                                  \
  |  |  |  |   70|   267k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   260k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   260k|                             detail::make_string_view_from_pointers(start, end),
  249|   260k|                             value, sign == sign_type::minus_sign));
  250|   260k|            return ranges::next(source.begin(),
  251|   260k|                                ranges::distance(source.data(), ptr));
  252|   267k|        }
  253|   355k|    }
  254|       |
  255|  88.1k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|  88.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  88.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  88.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  88.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.51k, False: 82.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.51k|    }                                                  \
  |  |  |  |   70|  88.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  82.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|  82.6k|                     detail::make_string_view_from_pointers(start, end), value,
  257|  82.6k|                     base, sign == sign_type::minus_sign));
  258|  82.6k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|  88.1k|}
_ZN3scn2v24impl19parse_integer_valueIwaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   616k|{
  218|   616k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   616k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   616k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   616k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   616k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   616k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   616k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   616k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   616k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   616k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   616k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   616k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   616k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 76.3k, False: 540k]
  ------------------
  224|  76.3k|        SCN_UNLIKELY_ATTR
  225|  76.3k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  76.3k|                                     "Invalid integer value");
  227|  76.3k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   540k|    auto start = source.data();
  231|   540k|    const auto end = source.data() + source.size();
  232|   540k|    {
  233|  1.12M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.00M, False: 117k]
  ------------------
  234|  1.00M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 423k, False: 582k]
  ------------------
  235|   423k|                break;
  236|   423k|            }
  237|  1.00M|        }
  238|   540k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   963k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 220k, False: 319k]
  |  |  |  Branch (153:45): [True: 117k, False: 423k]
  |  |  |  Branch (153:45): [True: 103k, False: 319k]
  |  |  ------------------
  ------------------
  239|   220k|            value = 0;
  240|   220k|            return ranges::next(source.begin(),
  241|   220k|                                ranges::distance(source.data(), start));
  242|   220k|        }
  243|   540k|    }
  244|       |
  245|   319k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   319k|        if (base == 10) {
  247|   319k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   319k|                             detail::make_string_view_from_pointers(start, end),
  249|   319k|                             value, sign == sign_type::minus_sign));
  250|   319k|            return ranges::next(source.begin(),
  251|   319k|                                ranges::distance(source.data(), ptr));
  252|   319k|        }
  253|   319k|    }
  254|       |
  255|   319k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   319k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   319k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   319k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 24.3k, False: 295k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  24.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  24.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  24.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  24.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  24.3k|    }                                                  \
  |  |  |  |   70|   319k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   295k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   295k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   295k|                     base, sign == sign_type::minus_sign));
  258|   295k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   319k|}
_ZN3scn2v24impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   764k|{
  218|   764k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   764k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   764k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   764k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   764k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   764k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   764k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   764k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   764k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   764k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   764k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   764k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   764k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 21.0k, False: 743k]
  ------------------
  224|  21.0k|        SCN_UNLIKELY_ATTR
  225|  21.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  21.0k|                                     "Invalid integer value");
  227|  21.0k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   743k|    auto start = source.data();
  231|   743k|    const auto end = source.data() + source.size();
  232|   743k|    {
  233|  1.32M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.29M, False: 32.9k]
  ------------------
  234|  1.29M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 710k, False: 584k]
  ------------------
  235|   710k|                break;
  236|   710k|            }
  237|  1.29M|        }
  238|   743k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 205k, False: 537k]
  |  |  |  Branch (153:45): [True: 32.9k, False: 710k]
  |  |  |  Branch (153:45): [True: 172k, False: 537k]
  |  |  ------------------
  ------------------
  239|   205k|            value = 0;
  240|   205k|            return ranges::next(source.begin(),
  241|   205k|                                ranges::distance(source.data(), start));
  242|   205k|        }
  243|   743k|    }
  244|       |
  245|   537k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   537k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 364k, False: 172k]
  ------------------
  247|   364k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   364k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   364k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   364k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   364k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.07k, False: 362k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.07k|    }                                                  \
  |  |  |  |   70|   364k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   362k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   362k|                             detail::make_string_view_from_pointers(start, end),
  249|   362k|                             value, sign == sign_type::minus_sign));
  250|   362k|            return ranges::next(source.begin(),
  251|   362k|                                ranges::distance(source.data(), ptr));
  252|   364k|        }
  253|   537k|    }
  254|       |
  255|   172k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   172k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   172k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   172k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   172k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.18k, False: 170k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.18k|    }                                                  \
  |  |  |  |   70|   172k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   170k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   170k|                     base, sign == sign_type::minus_sign));
  258|   170k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   172k|}
_ZN3scn2v24impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   836k|{
  218|   836k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   836k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   836k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   836k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   836k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   836k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   836k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   836k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   836k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   836k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   836k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   836k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   836k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 79.9k, False: 756k]
  ------------------
  224|  79.9k|        SCN_UNLIKELY_ATTR
  225|  79.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  79.9k|                                     "Invalid integer value");
  227|  79.9k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   756k|    auto start = source.data();
  231|   756k|    const auto end = source.data() + source.size();
  232|   756k|    {
  233|  1.52M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.40M, False: 121k]
  ------------------
  234|  1.40M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 634k, False: 770k]
  ------------------
  235|   634k|                break;
  236|   634k|            }
  237|  1.40M|        }
  238|   756k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 279k, False: 476k]
  |  |  |  Branch (153:45): [True: 121k, False: 634k]
  |  |  |  Branch (153:45): [True: 157k, False: 476k]
  |  |  ------------------
  ------------------
  239|   279k|            value = 0;
  240|   279k|            return ranges::next(source.begin(),
  241|   279k|                                ranges::distance(source.data(), start));
  242|   279k|        }
  243|   756k|    }
  244|       |
  245|   476k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   476k|        if (base == 10) {
  247|   476k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   476k|                             detail::make_string_view_from_pointers(start, end),
  249|   476k|                             value, sign == sign_type::minus_sign));
  250|   476k|            return ranges::next(source.begin(),
  251|   476k|                                ranges::distance(source.data(), ptr));
  252|   476k|        }
  253|   476k|    }
  254|       |
  255|   476k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   476k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   476k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   476k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   476k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.45k, False: 473k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.45k|    }                                                  \
  |  |  |  |   70|   476k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   473k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   473k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   473k|                     base, sign == sign_type::minus_sign));
  258|   473k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   476k|}
_ZN3scn2v24impl19parse_integer_valueIcxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   825k|{
  218|   825k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   825k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   825k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   825k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   825k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   825k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   825k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   825k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   825k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   825k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   825k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   825k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   825k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 22.5k, False: 802k]
  ------------------
  224|  22.5k|        SCN_UNLIKELY_ATTR
  225|  22.5k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  22.5k|                                     "Invalid integer value");
  227|  22.5k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   802k|    auto start = source.data();
  231|   802k|    const auto end = source.data() + source.size();
  232|   802k|    {
  233|  1.43M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.40M, False: 33.3k]
  ------------------
  234|  1.40M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 769k, False: 634k]
  ------------------
  235|   769k|                break;
  236|   769k|            }
  237|  1.40M|        }
  238|   802k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 210k, False: 592k]
  |  |  |  Branch (153:45): [True: 33.3k, False: 769k]
  |  |  |  Branch (153:45): [True: 177k, False: 592k]
  |  |  ------------------
  ------------------
  239|   210k|            value = 0;
  240|   210k|            return ranges::next(source.begin(),
  241|   210k|                                ranges::distance(source.data(), start));
  242|   210k|        }
  243|   802k|    }
  244|       |
  245|   592k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   592k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 404k, False: 187k]
  ------------------
  247|   404k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   404k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   404k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   404k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   404k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 960, False: 403k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    960|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    960|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    960|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    960|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    960|    }                                                  \
  |  |  |  |   70|   404k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   403k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   403k|                             detail::make_string_view_from_pointers(start, end),
  249|   403k|                             value, sign == sign_type::minus_sign));
  250|   403k|            return ranges::next(source.begin(),
  251|   403k|                                ranges::distance(source.data(), ptr));
  252|   404k|        }
  253|   592k|    }
  254|       |
  255|   187k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   187k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   187k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   187k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.01k, False: 186k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.01k|    }                                                  \
  |  |  |  |   70|   187k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   186k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   186k|                     base, sign == sign_type::minus_sign));
  258|   186k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   187k|}
_ZN3scn2v24impl19parse_integer_valueIwxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   890k|{
  218|   890k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   890k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   890k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   890k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   890k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   890k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   890k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   890k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   890k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   890k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   890k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   890k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   890k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 81.0k, False: 809k]
  ------------------
  224|  81.0k|        SCN_UNLIKELY_ATTR
  225|  81.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  81.0k|                                     "Invalid integer value");
  227|  81.0k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   809k|    auto start = source.data();
  231|   809k|    const auto end = source.data() + source.size();
  232|   809k|    {
  233|  1.62M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.49M, False: 121k]
  ------------------
  234|  1.49M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 687k, False: 811k]
  ------------------
  235|   687k|                break;
  236|   687k|            }
  237|  1.49M|        }
  238|   809k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 283k, False: 525k]
  |  |  |  Branch (153:45): [True: 121k, False: 687k]
  |  |  |  Branch (153:45): [True: 161k, False: 525k]
  |  |  ------------------
  ------------------
  239|   283k|            value = 0;
  240|   283k|            return ranges::next(source.begin(),
  241|   283k|                                ranges::distance(source.data(), start));
  242|   283k|        }
  243|   809k|    }
  244|       |
  245|   525k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   525k|        if (base == 10) {
  247|   525k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   525k|                             detail::make_string_view_from_pointers(start, end),
  249|   525k|                             value, sign == sign_type::minus_sign));
  250|   525k|            return ranges::next(source.begin(),
  251|   525k|                                ranges::distance(source.data(), ptr));
  252|   525k|        }
  253|   525k|    }
  254|       |
  255|   525k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   525k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   525k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   525k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   525k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.69k, False: 524k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.69k|    }                                                  \
  |  |  |  |   70|   525k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   524k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   524k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   524k|                     base, sign == sign_type::minus_sign));
  258|   524k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   525k|}
_ZN3scn2v24impl19parse_integer_valueIchEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   485k|{
  218|   485k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   485k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   485k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   485k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   485k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   485k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   485k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   485k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   485k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   485k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   485k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   485k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   485k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 12.6k, False: 473k]
  ------------------
  224|  12.6k|        SCN_UNLIKELY_ATTR
  225|  12.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  12.6k|                                     "Invalid integer value");
  227|  12.6k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   473k|    auto start = source.data();
  231|   473k|    const auto end = source.data() + source.size();
  232|   473k|    {
  233|   917k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 887k, False: 30.0k]
  ------------------
  234|   887k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 442k, False: 444k]
  ------------------
  235|   442k|                break;
  236|   442k|            }
  237|   887k|        }
  238|   473k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   915k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 155k, False: 317k]
  |  |  |  Branch (153:45): [True: 30.0k, False: 442k]
  |  |  |  Branch (153:45): [True: 125k, False: 317k]
  |  |  ------------------
  ------------------
  239|   155k|            value = 0;
  240|   155k|            return ranges::next(source.begin(),
  241|   155k|                                ranges::distance(source.data(), start));
  242|   155k|        }
  243|   473k|    }
  244|       |
  245|   317k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   317k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 221k, False: 96.8k]
  ------------------
  247|   221k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   221k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   221k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   221k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.49k, False: 217k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.49k|    }                                                  \
  |  |  |  |   70|   221k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   217k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   217k|                             detail::make_string_view_from_pointers(start, end),
  249|   217k|                             value, sign == sign_type::minus_sign));
  250|   217k|            return ranges::next(source.begin(),
  251|   217k|                                ranges::distance(source.data(), ptr));
  252|   221k|        }
  253|   317k|    }
  254|       |
  255|  96.8k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|  96.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  96.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  96.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  96.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.72k, False: 94.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.72k|    }                                                  \
  |  |  |  |   70|  96.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  94.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|  94.1k|                     detail::make_string_view_from_pointers(start, end), value,
  257|  94.1k|                     base, sign == sign_type::minus_sign));
  258|  94.1k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|  96.8k|}
_ZN3scn2v24impl19parse_integer_valueIwhEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   601k|{
  218|   601k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   601k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   601k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   601k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   601k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   601k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   601k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   601k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   601k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   601k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   601k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   601k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   601k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 73.3k, False: 528k]
  ------------------
  224|  73.3k|        SCN_UNLIKELY_ATTR
  225|  73.3k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  73.3k|                                     "Invalid integer value");
  227|  73.3k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   528k|    auto start = source.data();
  231|   528k|    const auto end = source.data() + source.size();
  232|   528k|    {
  233|  1.17M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.05M, False: 118k]
  ------------------
  234|  1.05M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 409k, False: 643k]
  ------------------
  235|   409k|                break;
  236|   409k|            }
  237|  1.05M|        }
  238|   528k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   938k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 233k, False: 294k]
  |  |  |  Branch (153:45): [True: 118k, False: 409k]
  |  |  |  Branch (153:45): [True: 115k, False: 294k]
  |  |  ------------------
  ------------------
  239|   233k|            value = 0;
  240|   233k|            return ranges::next(source.begin(),
  241|   233k|                                ranges::distance(source.data(), start));
  242|   233k|        }
  243|   528k|    }
  244|       |
  245|   294k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   294k|        if (base == 10) {
  247|   294k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   294k|                             detail::make_string_view_from_pointers(start, end),
  249|   294k|                             value, sign == sign_type::minus_sign));
  250|   294k|            return ranges::next(source.begin(),
  251|   294k|                                ranges::distance(source.data(), ptr));
  252|   294k|        }
  253|   294k|    }
  254|       |
  255|   294k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   294k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   294k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   294k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 19.5k, False: 275k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  19.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  19.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  19.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  19.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  19.5k|    }                                                  \
  |  |  |  |   70|   294k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   275k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   275k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   275k|                     base, sign == sign_type::minus_sign));
  258|   275k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   294k|}
_ZN3scn2v24impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   616k|{
  218|   616k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   616k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   616k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   616k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   616k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   616k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   616k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   616k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   616k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   616k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   616k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   616k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   616k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 14.4k, False: 602k]
  ------------------
  224|  14.4k|        SCN_UNLIKELY_ATTR
  225|  14.4k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  14.4k|                                     "Invalid integer value");
  227|  14.4k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   602k|    auto start = source.data();
  231|   602k|    const auto end = source.data() + source.size();
  232|   602k|    {
  233|  1.13M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.10M, False: 31.0k]
  ------------------
  234|  1.10M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 571k, False: 536k]
  ------------------
  235|   571k|                break;
  236|   571k|            }
  237|  1.10M|        }
  238|   602k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 182k, False: 419k]
  |  |  |  Branch (153:45): [True: 31.0k, False: 571k]
  |  |  |  Branch (153:45): [True: 151k, False: 419k]
  |  |  ------------------
  ------------------
  239|   182k|            value = 0;
  240|   182k|            return ranges::next(source.begin(),
  241|   182k|                                ranges::distance(source.data(), start));
  242|   182k|        }
  243|   602k|    }
  244|       |
  245|   419k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   419k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 285k, False: 133k]
  ------------------
  247|   285k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   285k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   285k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   285k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   285k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.08k, False: 284k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.08k|    }                                                  \
  |  |  |  |   70|   285k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   284k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   284k|                             detail::make_string_view_from_pointers(start, end),
  249|   284k|                             value, sign == sign_type::minus_sign));
  250|   284k|            return ranges::next(source.begin(),
  251|   284k|                                ranges::distance(source.data(), ptr));
  252|   285k|        }
  253|   419k|    }
  254|       |
  255|   133k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   133k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   133k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   133k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 965, False: 132k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    965|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    965|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    965|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    965|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    965|    }                                                  \
  |  |  |  |   70|   133k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   132k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   132k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   132k|                     base, sign == sign_type::minus_sign));
  258|   132k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   133k|}
_ZN3scn2v24impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   718k|{
  218|   718k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   718k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   718k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   718k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   718k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   718k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   718k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   718k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   718k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   718k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   718k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   718k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   718k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 75.0k, False: 643k]
  ------------------
  224|  75.0k|        SCN_UNLIKELY_ATTR
  225|  75.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  75.0k|                                     "Invalid integer value");
  227|  75.0k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   643k|    auto start = source.data();
  231|   643k|    const auto end = source.data() + source.size();
  232|   643k|    {
  233|  1.37M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.25M, False: 119k]
  ------------------
  234|  1.25M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 523k, False: 729k]
  ------------------
  235|   523k|                break;
  236|   523k|            }
  237|  1.25M|        }
  238|   643k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 259k, False: 383k]
  |  |  |  Branch (153:45): [True: 119k, False: 523k]
  |  |  |  Branch (153:45): [True: 139k, False: 383k]
  |  |  ------------------
  ------------------
  239|   259k|            value = 0;
  240|   259k|            return ranges::next(source.begin(),
  241|   259k|                                ranges::distance(source.data(), start));
  242|   259k|        }
  243|   643k|    }
  244|       |
  245|   383k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   383k|        if (base == 10) {
  247|   383k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   383k|                             detail::make_string_view_from_pointers(start, end),
  249|   383k|                             value, sign == sign_type::minus_sign));
  250|   383k|            return ranges::next(source.begin(),
  251|   383k|                                ranges::distance(source.data(), ptr));
  252|   383k|        }
  253|   383k|    }
  254|       |
  255|   383k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   383k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   383k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   383k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   383k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.84k, False: 381k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.84k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.84k|    }                                                  \
  |  |  |  |   70|   383k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   381k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   381k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   381k|                     base, sign == sign_type::minus_sign));
  258|   381k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   383k|}
_ZN3scn2v24impl19parse_integer_valueIcyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   644k|{
  218|   644k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   644k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   644k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   644k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   644k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   644k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   644k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   644k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   644k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   644k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   644k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   644k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   644k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 14.9k, False: 629k]
  ------------------
  224|  14.9k|        SCN_UNLIKELY_ATTR
  225|  14.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  14.9k|                                     "Invalid integer value");
  227|  14.9k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   629k|    auto start = source.data();
  231|   629k|    const auto end = source.data() + source.size();
  232|   629k|    {
  233|  1.17M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.14M, False: 31.2k]
  ------------------
  234|  1.14M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 598k, False: 545k]
  ------------------
  235|   598k|                break;
  236|   598k|            }
  237|  1.14M|        }
  238|   629k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 184k, False: 445k]
  |  |  |  Branch (153:45): [True: 31.2k, False: 598k]
  |  |  |  Branch (153:45): [True: 153k, False: 445k]
  |  |  ------------------
  ------------------
  239|   184k|            value = 0;
  240|   184k|            return ranges::next(source.begin(),
  241|   184k|                                ranges::distance(source.data(), start));
  242|   184k|        }
  243|   629k|    }
  244|       |
  245|   445k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   445k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 304k, False: 140k]
  ------------------
  247|   304k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   304k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   304k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   304k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   304k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 476, False: 303k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    476|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    476|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    476|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    476|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    476|    }                                                  \
  |  |  |  |   70|   304k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   303k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   303k|                             detail::make_string_view_from_pointers(start, end),
  249|   303k|                             value, sign == sign_type::minus_sign));
  250|   303k|            return ranges::next(source.begin(),
  251|   303k|                                ranges::distance(source.data(), ptr));
  252|   304k|        }
  253|   445k|    }
  254|       |
  255|   140k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   140k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   140k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   140k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 381, False: 140k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    381|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    381|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    381|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    381|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    381|    }                                                  \
  |  |  |  |   70|   140k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   140k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   140k|                     base, sign == sign_type::minus_sign));
  258|   140k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   140k|}
_ZN3scn2v24impl19parse_integer_valueIwyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   743k|{
  218|   743k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   743k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   743k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   743k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   743k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   743k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   743k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   743k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   743k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   743k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   743k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   743k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   743k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 75.4k, False: 668k]
  ------------------
  224|  75.4k|        SCN_UNLIKELY_ATTR
  225|  75.4k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  75.4k|                                     "Invalid integer value");
  227|  75.4k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   668k|    auto start = source.data();
  231|   668k|    const auto end = source.data() + source.size();
  232|   668k|    {
  233|  1.40M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.28M, False: 119k]
  ------------------
  234|  1.28M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 548k, False: 738k]
  ------------------
  235|   548k|                break;
  236|   548k|            }
  237|  1.28M|        }
  238|   668k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 261k, False: 407k]
  |  |  |  Branch (153:45): [True: 119k, False: 548k]
  |  |  |  Branch (153:45): [True: 141k, False: 407k]
  |  |  ------------------
  ------------------
  239|   261k|            value = 0;
  240|   261k|            return ranges::next(source.begin(),
  241|   261k|                                ranges::distance(source.data(), start));
  242|   261k|        }
  243|   668k|    }
  244|       |
  245|   407k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   407k|        if (base == 10) {
  247|   407k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   407k|                             detail::make_string_view_from_pointers(start, end),
  249|   407k|                             value, sign == sign_type::minus_sign));
  250|   407k|            return ranges::next(source.begin(),
  251|   407k|                                ranges::distance(source.data(), ptr));
  252|   407k|        }
  253|   407k|    }
  254|       |
  255|   407k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   407k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   407k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   407k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   407k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 731, False: 406k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    731|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    731|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    731|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    731|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    731|    }                                                  \
  |  |  |  |   70|   407k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   406k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   406k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   406k|                     base, sign == sign_type::minus_sign));
  258|   406k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   407k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIaEEbmmib:
  125|   674k|{
  126|   674k|    auto max_digits = maxdigits_u64(base);
  127|   674k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 1.61k, False: 673k]
  ------------------
  128|  1.61k|        return true;
  129|  1.61k|    }
  130|   673k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 730, False: 672k]
  |  Branch (130:39): [True: 94, False: 636]
  ------------------
  131|     94|        return true;
  132|     94|    }
  133|   673k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   673k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 35.1k, False: 638k]
  ------------------
  135|   673k|                      static_cast<uint64_t>(is_negative)) {
  136|  35.1k|            SCN_UNLIKELY_ATTR
  137|  35.1k|            return true;
  138|  35.1k|        }
  139|   673k|    }
  140|       |
  141|   638k|    return false;
  142|   673k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113maxdigits_u64Ei:
   95|  5.07M|{
   96|  5.07M|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  242|  5.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   97|      0|    return maxdigits_u64_table[static_cast<size_t>(base - 2)];
   98|  5.07M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112min_safe_u64Ei:
  115|  3.96k|{
  116|  3.96k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  242|  3.96k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.96k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  117|      0|    return min_safe_u64_table[static_cast<size_t>(base - 2)];
  118|  3.96k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIaEET_mb:
  146|   638k|{
  147|   638k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 97.8k, False: 540k]
  ------------------
  148|  97.8k|        SCN_MSVC_PUSH
  149|  97.8k|        SCN_MSVC_IGNORE(4146)
  150|  97.8k|        return static_cast<T>(
  151|  97.8k|            -std::numeric_limits<T>::max() -
  152|  97.8k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|  97.8k|        SCN_MSVC_POP
  154|  97.8k|    }
  155|       |
  156|   540k|    return static_cast<T>(u64val);
  157|   638k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIiEEbmmib:
  125|  1.01M|{
  126|  1.01M|    auto max_digits = maxdigits_u64(base);
  127|  1.01M|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 1.98k, False: 1.01M]
  ------------------
  128|  1.98k|        return true;
  129|  1.98k|    }
  130|  1.01M|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 774, False: 1.01M]
  |  Branch (130:39): [True: 94, False: 680]
  ------------------
  131|     94|        return true;
  132|     94|    }
  133|  1.01M|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|  1.01M|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 5.64k, False: 1.00M]
  ------------------
  135|  1.01M|                      static_cast<uint64_t>(is_negative)) {
  136|  5.64k|            SCN_UNLIKELY_ATTR
  137|  5.64k|            return true;
  138|  5.64k|        }
  139|  1.01M|    }
  140|       |
  141|  1.00M|    return false;
  142|  1.01M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIiEET_mb:
  146|  1.00M|{
  147|  1.00M|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 121k, False: 885k]
  ------------------
  148|   121k|        SCN_MSVC_PUSH
  149|   121k|        SCN_MSVC_IGNORE(4146)
  150|   121k|        return static_cast<T>(
  151|   121k|            -std::numeric_limits<T>::max() -
  152|   121k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|   121k|        SCN_MSVC_POP
  154|   121k|    }
  155|       |
  156|   885k|    return static_cast<T>(u64val);
  157|  1.00M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIxEEbmmib:
  125|  1.11M|{
  126|  1.11M|    auto max_digits = maxdigits_u64(base);
  127|  1.11M|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 3.13k, False: 1.11M]
  ------------------
  128|  3.13k|        return true;
  129|  3.13k|    }
  130|  1.11M|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 996, False: 1.11M]
  |  Branch (130:39): [True: 140, False: 856]
  ------------------
  131|    140|        return true;
  132|    140|    }
  133|  1.11M|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|  1.11M|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 400, False: 1.11M]
  ------------------
  135|  1.11M|                      static_cast<uint64_t>(is_negative)) {
  136|    400|            SCN_UNLIKELY_ATTR
  137|    400|            return true;
  138|    400|        }
  139|  1.11M|    }
  140|       |
  141|  1.11M|    return false;
  142|  1.11M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIxEET_mb:
  146|  1.11M|{
  147|  1.11M|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 125k, False: 988k]
  ------------------
  148|   125k|        SCN_MSVC_PUSH
  149|   125k|        SCN_MSVC_IGNORE(4146)
  150|   125k|        return static_cast<T>(
  151|   125k|            -std::numeric_limits<T>::max() -
  152|   125k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|   125k|        SCN_MSVC_POP
  154|   125k|    }
  155|       |
  156|   988k|    return static_cast<T>(u64val);
  157|  1.11M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIhEEbmmib:
  125|   612k|{
  126|   612k|    auto max_digits = maxdigits_u64(base);
  127|   612k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 941, False: 611k]
  ------------------
  128|    941|        return true;
  129|    941|    }
  130|   611k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 380, False: 611k]
  |  Branch (130:39): [True: 94, False: 286]
  ------------------
  131|     94|        return true;
  132|     94|    }
  133|   611k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   611k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 24.7k, False: 586k]
  ------------------
  135|   611k|                      static_cast<uint64_t>(is_negative)) {
  136|  24.7k|            SCN_UNLIKELY_ATTR
  137|  24.7k|            return true;
  138|  24.7k|        }
  139|   611k|    }
  140|       |
  141|   586k|    return false;
  142|   611k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIhEET_mb:
  146|   586k|{
  147|   586k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 586k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   586k|    return static_cast<T>(u64val);
  157|   586k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIjEEbmmib:
  125|   803k|{
  126|   803k|    auto max_digits = maxdigits_u64(base);
  127|   803k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 1.06k, False: 802k]
  ------------------
  128|  1.06k|        return true;
  129|  1.06k|    }
  130|   802k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 420, False: 801k]
  |  Branch (130:39): [True: 94, False: 326]
  ------------------
  131|     94|        return true;
  132|     94|    }
  133|   802k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   802k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 2.74k, False: 799k]
  ------------------
  135|   802k|                      static_cast<uint64_t>(is_negative)) {
  136|  2.74k|            SCN_UNLIKELY_ATTR
  137|  2.74k|            return true;
  138|  2.74k|        }
  139|   802k|    }
  140|       |
  141|   799k|    return false;
  142|   802k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIjEET_mb:
  146|   799k|{
  147|   799k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 799k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   799k|    return static_cast<T>(u64val);
  157|   799k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIyEEbmmib:
  125|   852k|{
  126|   852k|    auto max_digits = maxdigits_u64(base);
  127|   852k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 1.47k, False: 851k]
  ------------------
  128|  1.47k|        return true;
  129|  1.47k|    }
  130|   851k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 668, False: 850k]
  |  Branch (130:39): [True: 118, False: 550]
  ------------------
  131|    118|        return true;
  132|    118|    }
  133|   850k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   850k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 0, False: 850k]
  ------------------
  135|   850k|                      static_cast<uint64_t>(is_negative)) {
  136|      0|            SCN_UNLIKELY_ATTR
  137|      0|            return true;
  138|      0|        }
  139|   850k|    }
  140|       |
  141|   850k|    return false;
  142|   850k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIyEET_mb:
  146|   850k|{
  147|   850k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 850k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   850k|    return static_cast<T>(u64val);
  157|   850k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121get_eight_digits_wordEPKc:
   33|  1.51M|{
   34|  1.51M|    uint64_t val{};
   35|  1.51M|    std::memcpy(&val, input, sizeof(uint64_t));
   36|  1.51M|    if constexpr (SCN_IS_BIG_ENDIAN) {
  ------------------
  |  |  538|  1.51M|#define SCN_IS_BIG_ENDIAN 0
  |  |  ------------------
  |  |  |  Branch (538:27): [Folded - Ignored]
  |  |  ------------------
  ------------------
   37|      0|        val = byteswap(val);
   38|      0|    }
   39|  1.51M|    return val;
   40|  1.51M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_140parse_eight_decimal_digits_unrolled_fastEm:
   43|  54.1k|{
   44|  54.1k|    constexpr uint64_t mask = 0x000000FF000000FF;
   45|  54.1k|    constexpr uint64_t mul1 = 0x000F424000000064;  // 100 + (1000000ULL << 32)
   46|  54.1k|    constexpr uint64_t mul2 = 0x0000271000000001;  // 1 + (10000ULL << 32)
   47|  54.1k|    word -= 0x3030303030303030;
   48|  54.1k|    word = (word * 10) + (word >> 8);  // val = (val * 2561) >> 8;
   49|  54.1k|    word = (((word & mask) * mul1) + (((word >> 16) & mask) * mul2)) >> 32;
   50|  54.1k|    return static_cast<uint32_t>(word);
   51|  54.1k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_141is_word_made_of_eight_decimal_digits_fastEm:
   54|  1.46M|{
   55|  1.46M|    return !((((word + 0x4646464646464646) | (word - 0x3030303030303030)) &
   56|  1.46M|              0x8080808080808080));
   57|  1.46M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIaEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   267k|{
  164|   267k|    uint64_t u64val{};
  165|   267k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   267k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   267k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   267k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   267k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.96k, False: 260k]
  |  |  ------------------
  ------------------
  170|   267k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  6.96k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  6.96k|                                     "Integer overflow");
  173|  6.96k|    }
  174|       |
  175|   260k|    val = store_result<T>(u64val, is_negative);
  176|   260k|    return ptr;
  177|   267k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_131parse_decimal_integer_fast_implEPKcS4_Rm:
   75|  1.84M|{
   76|  1.84M|    loop_parse_if_eight_decimal_digits(begin, end, val);
   77|       |
   78|  4.64M|    while (begin != end) {
  ------------------
  |  Branch (78:12): [True: 4.22M, False: 412k]
  ------------------
   79|  4.22M|        const auto digit = char_to_int(*begin);
   80|  4.22M|        if (digit >= 10) {
  ------------------
  |  Branch (80:13): [True: 1.43M, False: 2.79M]
  ------------------
   81|  1.43M|            break;
   82|  1.43M|        }
   83|  2.79M|        val = 10ull * val + static_cast<uint64_t>(digit);
   84|  2.79M|        ++begin;
   85|  2.79M|    }
   86|       |
   87|  1.84M|    return begin;
   88|  1.84M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_134loop_parse_if_eight_decimal_digitsERPKcS4_Rm:
   62|  1.84M|{
   63|  1.84M|    while (
   64|  1.90M|        std::distance(p, end) >= 8 &&
  ------------------
  |  Branch (64:9): [True: 1.46M, False: 441k]
  ------------------
   65|  1.90M|        is_word_made_of_eight_decimal_digits_fast(get_eight_digits_word(p))) {
  ------------------
  |  Branch (65:9): [True: 54.1k, False: 1.40M]
  ------------------
   66|  54.1k|        val = val * 100'000'000 + parse_eight_decimal_digits_unrolled_fast(
   67|  54.1k|                                      get_eight_digits_word(p));
   68|  54.1k|        p += 8;
   69|  54.1k|    }
   70|  1.84M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|  88.1k|{
  185|  88.1k|    uint64_t u64val{};
  186|  88.1k|    const CharT* begin = input.data();
  187|  88.1k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   253k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 235k, False: 18.3k]
  ------------------
  190|   235k|        const auto digit = char_to_int(*begin);
  191|   235k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 69.8k, False: 165k]
  ------------------
  192|  69.8k|            break;
  193|  69.8k|        }
  194|   165k|        u64val =
  195|   165k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   165k|        ++begin;
  197|   165k|    }
  198|       |
  199|  88.1k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|  88.1k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|  88.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.51k, False: 82.6k]
  |  |  ------------------
  ------------------
  201|  88.1k|                                               is_negative))) {
  202|  5.51k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  5.51k|                                     "Integer overflow");
  204|  5.51k|    }
  205|       |
  206|  82.6k|    val = store_result<T>(u64val, is_negative);
  207|  82.6k|    return begin;
  208|  88.1k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   319k|{
  185|   319k|    uint64_t u64val{};
  186|   319k|    const CharT* begin = input.data();
  187|   319k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   881k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 801k, False: 80.2k]
  ------------------
  190|   801k|        const auto digit = char_to_int(*begin);
  191|   801k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 239k, False: 562k]
  ------------------
  192|   239k|            break;
  193|   239k|        }
  194|   562k|        u64val =
  195|   562k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   562k|        ++begin;
  197|   562k|    }
  198|       |
  199|   319k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   319k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 24.3k, False: 295k]
  |  |  ------------------
  ------------------
  201|   319k|                                               is_negative))) {
  202|  24.3k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  24.3k|                                     "Integer overflow");
  204|  24.3k|    }
  205|       |
  206|   295k|    val = store_result<T>(u64val, is_negative);
  207|   295k|    return begin;
  208|   319k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIiEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   364k|{
  164|   364k|    uint64_t u64val{};
  165|   364k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   364k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   364k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   364k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   364k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.07k, False: 362k]
  |  |  ------------------
  ------------------
  170|   364k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  2.07k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  2.07k|                                     "Integer overflow");
  173|  2.07k|    }
  174|       |
  175|   362k|    val = store_result<T>(u64val, is_negative);
  176|   362k|    return ptr;
  177|   364k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIciEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   172k|{
  185|   172k|    uint64_t u64val{};
  186|   172k|    const CharT* begin = input.data();
  187|   172k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   482k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 460k, False: 22.2k]
  ------------------
  190|   460k|        const auto digit = char_to_int(*begin);
  191|   460k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 150k, False: 309k]
  ------------------
  192|   150k|            break;
  193|   150k|        }
  194|   309k|        u64val =
  195|   309k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   309k|        ++begin;
  197|   309k|    }
  198|       |
  199|   172k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   172k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   172k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.18k, False: 170k]
  |  |  ------------------
  ------------------
  201|   172k|                                               is_negative))) {
  202|  2.18k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  2.18k|                                     "Integer overflow");
  204|  2.18k|    }
  205|       |
  206|   170k|    val = store_result<T>(u64val, is_negative);
  207|   170k|    return begin;
  208|   172k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwiEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   476k|{
  185|   476k|    uint64_t u64val{};
  186|   476k|    const CharT* begin = input.data();
  187|   476k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|  1.32M|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 1.22M, False: 99.9k]
  ------------------
  190|  1.22M|        const auto digit = char_to_int(*begin);
  191|  1.22M|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 376k, False: 848k]
  ------------------
  192|   376k|            break;
  193|   376k|        }
  194|   848k|        u64val =
  195|   848k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   848k|        ++begin;
  197|   848k|    }
  198|       |
  199|   476k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   476k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   476k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.45k, False: 473k]
  |  |  ------------------
  ------------------
  201|   476k|                                               is_negative))) {
  202|  3.45k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  3.45k|                                     "Integer overflow");
  204|  3.45k|    }
  205|       |
  206|   473k|    val = store_result<T>(u64val, is_negative);
  207|   473k|    return begin;
  208|   476k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIxEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   404k|{
  164|   404k|    uint64_t u64val{};
  165|   404k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   404k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   404k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   404k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   404k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 960, False: 403k]
  |  |  ------------------
  ------------------
  170|   404k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|    960|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|    960|                                     "Integer overflow");
  173|    960|    }
  174|       |
  175|   403k|    val = store_result<T>(u64val, is_negative);
  176|   403k|    return ptr;
  177|   404k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   187k|{
  185|   187k|    uint64_t u64val{};
  186|   187k|    const CharT* begin = input.data();
  187|   187k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   568k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 543k, False: 24.5k]
  ------------------
  190|   543k|        const auto digit = char_to_int(*begin);
  191|   543k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 163k, False: 380k]
  ------------------
  192|   163k|            break;
  193|   163k|        }
  194|   380k|        u64val =
  195|   380k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   380k|        ++begin;
  197|   380k|    }
  198|       |
  199|   187k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   187k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.01k, False: 186k]
  |  |  ------------------
  ------------------
  201|   187k|                                               is_negative))) {
  202|  1.01k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.01k|                                     "Integer overflow");
  204|  1.01k|    }
  205|       |
  206|   186k|    val = store_result<T>(u64val, is_negative);
  207|   186k|    return begin;
  208|   187k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   525k|{
  185|   525k|    uint64_t u64val{};
  186|   525k|    const CharT* begin = input.data();
  187|   525k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|  1.56M|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 1.45M, False: 109k]
  ------------------
  190|  1.45M|        const auto digit = char_to_int(*begin);
  191|  1.45M|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 415k, False: 1.04M]
  ------------------
  192|   415k|            break;
  193|   415k|        }
  194|  1.04M|        u64val =
  195|  1.04M|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|  1.04M|        ++begin;
  197|  1.04M|    }
  198|       |
  199|   525k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   525k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   525k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.69k, False: 524k]
  |  |  ------------------
  ------------------
  201|   525k|                                               is_negative))) {
  202|  1.69k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.69k|                                     "Integer overflow");
  204|  1.69k|    }
  205|       |
  206|   524k|    val = store_result<T>(u64val, is_negative);
  207|   524k|    return begin;
  208|   525k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIhEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   221k|{
  164|   221k|    uint64_t u64val{};
  165|   221k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   221k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   221k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   221k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.49k, False: 217k]
  |  |  ------------------
  ------------------
  170|   221k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  3.49k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  3.49k|                                     "Integer overflow");
  173|  3.49k|    }
  174|       |
  175|   217k|    val = store_result<T>(u64val, is_negative);
  176|   217k|    return ptr;
  177|   221k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIchEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|  96.8k|{
  185|  96.8k|    uint64_t u64val{};
  186|  96.8k|    const CharT* begin = input.data();
  187|  96.8k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   252k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 235k, False: 17.1k]
  ------------------
  190|   235k|        const auto digit = char_to_int(*begin);
  191|   235k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 79.7k, False: 155k]
  ------------------
  192|  79.7k|            break;
  193|  79.7k|        }
  194|   155k|        u64val =
  195|   155k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   155k|        ++begin;
  197|   155k|    }
  198|       |
  199|  96.8k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|  96.8k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|  96.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.72k, False: 94.1k]
  |  |  ------------------
  ------------------
  201|  96.8k|                                               is_negative))) {
  202|  2.72k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  2.72k|                                     "Integer overflow");
  204|  2.72k|    }
  205|       |
  206|  94.1k|    val = store_result<T>(u64val, is_negative);
  207|  94.1k|    return begin;
  208|  96.8k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwhEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   294k|{
  185|   294k|    uint64_t u64val{};
  186|   294k|    const CharT* begin = input.data();
  187|   294k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   774k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 702k, False: 71.7k]
  ------------------
  190|   702k|        const auto digit = char_to_int(*begin);
  191|   702k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 222k, False: 480k]
  ------------------
  192|   222k|            break;
  193|   222k|        }
  194|   480k|        u64val =
  195|   480k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   480k|        ++begin;
  197|   480k|    }
  198|       |
  199|   294k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   294k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 19.5k, False: 275k]
  |  |  ------------------
  ------------------
  201|   294k|                                               is_negative))) {
  202|  19.5k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  19.5k|                                     "Integer overflow");
  204|  19.5k|    }
  205|       |
  206|   275k|    val = store_result<T>(u64val, is_negative);
  207|   275k|    return begin;
  208|   294k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIjEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   285k|{
  164|   285k|    uint64_t u64val{};
  165|   285k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   285k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   285k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   285k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   285k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.08k, False: 284k]
  |  |  ------------------
  ------------------
  170|   285k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  1.08k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  1.08k|                                     "Integer overflow");
  173|  1.08k|    }
  174|       |
  175|   284k|    val = store_result<T>(u64val, is_negative);
  176|   284k|    return ptr;
  177|   285k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   133k|{
  185|   133k|    uint64_t u64val{};
  186|   133k|    const CharT* begin = input.data();
  187|   133k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   364k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 344k, False: 20.0k]
  ------------------
  190|   344k|        const auto digit = char_to_int(*begin);
  191|   344k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 113k, False: 230k]
  ------------------
  192|   113k|            break;
  193|   113k|        }
  194|   230k|        u64val =
  195|   230k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   230k|        ++begin;
  197|   230k|    }
  198|       |
  199|   133k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   133k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 965, False: 132k]
  |  |  ------------------
  ------------------
  201|   133k|                                               is_negative))) {
  202|    965|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    965|                                     "Integer overflow");
  204|    965|    }
  205|       |
  206|   132k|    val = store_result<T>(u64val, is_negative);
  207|   132k|    return begin;
  208|   133k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   383k|{
  185|   383k|    uint64_t u64val{};
  186|   383k|    const CharT* begin = input.data();
  187|   383k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|  1.06M|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 975k, False: 84.6k]
  ------------------
  190|   975k|        const auto digit = char_to_int(*begin);
  191|   975k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 299k, False: 676k]
  ------------------
  192|   299k|            break;
  193|   299k|        }
  194|   676k|        u64val =
  195|   676k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   676k|        ++begin;
  197|   676k|    }
  198|       |
  199|   383k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   383k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   383k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.84k, False: 381k]
  |  |  ------------------
  ------------------
  201|   383k|                                               is_negative))) {
  202|  1.84k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.84k|                                     "Integer overflow");
  204|  1.84k|    }
  205|       |
  206|   381k|    val = store_result<T>(u64val, is_negative);
  207|   381k|    return begin;
  208|   383k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIyEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   304k|{
  164|   304k|    uint64_t u64val{};
  165|   304k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   304k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   304k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   304k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   304k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 476, False: 303k]
  |  |  ------------------
  ------------------
  170|   304k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|    476|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|    476|                                     "Integer overflow");
  173|    476|    }
  174|       |
  175|   303k|    val = store_result<T>(u64val, is_negative);
  176|   303k|    return ptr;
  177|   304k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   140k|{
  185|   140k|    uint64_t u64val{};
  186|   140k|    const CharT* begin = input.data();
  187|   140k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   401k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 380k, False: 20.8k]
  ------------------
  190|   380k|        const auto digit = char_to_int(*begin);
  191|   380k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 120k, False: 260k]
  ------------------
  192|   120k|            break;
  193|   120k|        }
  194|   260k|        u64val =
  195|   260k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   260k|        ++begin;
  197|   260k|    }
  198|       |
  199|   140k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   140k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 381, False: 140k]
  |  |  ------------------
  ------------------
  201|   140k|                                               is_negative))) {
  202|    381|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    381|                                     "Integer overflow");
  204|    381|    }
  205|       |
  206|   140k|    val = store_result<T>(u64val, is_negative);
  207|   140k|    return begin;
  208|   140k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   407k|{
  185|   407k|    uint64_t u64val{};
  186|   407k|    const CharT* begin = input.data();
  187|   407k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|  1.17M|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 1.08M, False: 88.4k]
  ------------------
  190|  1.08M|        const auto digit = char_to_int(*begin);
  191|  1.08M|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 318k, False: 766k]
  ------------------
  192|   318k|            break;
  193|   318k|        }
  194|   766k|        u64val =
  195|   766k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   766k|        ++begin;
  197|   766k|    }
  198|       |
  199|   407k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   407k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   407k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 731, False: 406k]
  |  |  ------------------
  ------------------
  201|   407k|                                               is_negative))) {
  202|    731|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    731|                                     "Integer overflow");
  204|    731|    }
  205|       |
  206|   406k|    val = store_result<T>(u64val, is_negative);
  207|   406k|    return begin;
  208|   407k|}

_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   217k|    {
  324|   217k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   217k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   217k|        return read_default_with_base(range, value, 0);
  326|   217k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   217k|    {
  287|   217k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   217k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   217k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   217k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 217k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   217k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   217k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   217k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   217k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   217k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   217k|                return unexpected_scan_error(
  293|   217k|                    scan_error::invalid_scanned_value,
  294|   217k|                    "Unexpected '-' sign when parsing an "
  295|   217k|                    "unsigned value");
  296|   217k|            }
  297|   217k|        }
  298|       |
  299|   217k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 82.4k, False: 134k]
  ------------------
  300|  82.4k|            value = T{0};
  301|  82.4k|            return std::next(prefix_result.iterator);
  302|  82.4k|        }
  303|       |
  304|   269k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   134k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   134k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   134k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 81, False: 134k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     81|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     81|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     81|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     81|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     81|    }                                                  \
  |  |  |  |   70|   134k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   269k|                                     ranges::subrange{prefix_result.iterator,
  306|   269k|                                                      ranges::end(range)},
  307|   269k|                                     prefix_result.parsed_base));
  308|       |
  309|   269k|        auto buf = make_contiguous_buffer(
  310|   269k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   269k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   134k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   134k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   134k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.98k, False: 128k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.98k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.98k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.98k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.98k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.98k|    }                                                  \
  |  |  |  |   70|   134k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   128k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   128k|                                    prefix_result.parsed_base));
  314|       |
  315|   128k|        return ranges_polyfill::batch_next(
  316|   128k|            prefix_result.iterator,
  317|   128k|            ranges::distance(buf.view().begin(), result_it));
  318|   269k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESE_i:
  120|  5.16M|{
  121|  5.16M|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|  5.16M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.16M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.16M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  5.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 5.16M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  5.16M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  5.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|  5.16M|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|  5.16M|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|  5.16M|        parse_integer_base_prefix(
  126|  5.16M|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|  5.16M|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 2.01M, False: 3.14M]
  ------------------
  129|  2.01M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 2.01k, False: 2.01M]
  ------------------
  130|  2.01M|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 1.37M, False: 644k]
  ------------------
  131|  1.37M|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|  1.37M|                digits_begin_it, ranges::begin(range));
  133|  1.37M|        }
  134|   644k|        else {
  135|   644k|            parsed_zero = false;
  136|   644k|        }
  137|  2.01M|    }
  138|  3.14M|    else {
  139|  3.14M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 5.30k, False: 3.13M]
  ------------------
  140|  3.14M|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 120k, False: 3.01M]
  ------------------
  141|   125k|            digits_begin_it = base_prefix_begin_it;
  142|   125k|        }
  143|  3.14M|    }
  144|       |
  145|  5.16M|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 4.85M, False: 310k]
  ------------------
  146|  4.85M|        sign = sign_type::plus_sign;
  147|  4.85M|    }
  148|  5.16M|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|  5.16M|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|  5.16M|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_i:
   87|  5.16M|{
   88|  5.16M|    switch (base) {
   89|   104k|        case 2:
  ------------------
  |  Branch (89:9): [True: 104k, False: 5.05M]
  ------------------
   90|       |            // allow 0b/0B
   91|   104k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|   104k|                    false};
   93|       |
   94|   226k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 226k, False: 4.93M]
  ------------------
   95|       |            // allow 0o/0O/0
   96|   226k|            bool zero_parsed = false;
   97|   226k|            auto it = apply_opt(
   98|   226k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|   226k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|   708k|        case 16:
  ------------------
  |  Branch (102:9): [True: 708k, False: 4.45M]
  ------------------
  103|       |            // allow 0x/0X
  104|   708k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|   708k|                    false};
  106|       |
  107|  3.42M|        case 0:
  ------------------
  |  Branch (107:9): [True: 3.42M, False: 1.73M]
  ------------------
  108|       |            // detect base
  109|  3.42M|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|  3.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|   693k|        default:
  ------------------
  |  Branch (111:9): [True: 693k, False: 4.46M]
  ------------------
  112|       |            // no base prefix allowed
  113|   693k|            return {ranges::begin(range), base, false};
  114|  5.16M|    }
  115|  5.16M|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   37|  3.50M|{
   38|  3.50M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|  3.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|  3.50M|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_Rb:
   52|  3.62M|{
   53|  3.62M|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 44.2k, False: 3.57M]
  ------------------
   54|  44.2k|        return *r;
   55|  44.2k|    }
   56|       |
   57|  3.57M|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 2.01M, False: 1.56M]
  ------------------
   58|  2.01M|        zero_parsed = true;
   59|  2.01M|        return *r;
   60|  2.01M|    }
   61|       |
   62|  1.56M|    return unexpected(parse_error::error);
   63|  3.57M|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   44|  4.13M|{
   45|  4.13M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  4.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  4.13M|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_:
   68|  3.42M|{
   69|  3.42M|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 28.0k, False: 3.39M]
  ------------------
   70|  28.0k|        return {*r, 16, false};
   71|  28.0k|    }
   72|  3.39M|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 1.43k, False: 3.39M]
  ------------------
   73|  1.43k|        return {*r, 2, false};
   74|  1.43k|    }
   75|  3.39M|    {
   76|  3.39M|        bool zero_parsed{false};
   77|  3.39M|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 1.92M, False: 1.47M]
  ------------------
   78|  1.92M|            return {*r, 8, zero_parsed};
   79|  1.92M|        }
   80|  3.39M|    }
   81|  1.47M|    return {ranges::begin(range), 10, false};
   82|  3.39M|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESD_i:
  155|  3.14M|{
  156|  3.14M|    using char_type = detail::char_t<Range>;
  157|       |
  158|  3.14M|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|  3.14M|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  3.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.39k, False: 3.14M]
  |  |  ------------------
  ------------------
  160|  1.39k|            return unexpected_scan_error(
  161|  1.39k|                scan_error::invalid_scanned_value,
  162|  1.39k|                "Failed to parse integer: No digits found");
  163|  1.39k|        }
  164|  3.14M|        return ranges::end(range);
  165|  3.14M|    }
  166|  3.14M|    else {
  167|  3.14M|        return read_while1_code_unit(
  168|  3.14M|                   range, [&](char_type ch)
  169|  3.14M|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|  3.14M|            .transform_error(map_parse_error_to_scan_error(
  171|  3.14M|                scan_error::invalid_scanned_value,
  172|  3.14M|                "Failed to parse integer: No digits found"));
  173|  3.14M|    }
  174|  3.14M|}
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   277k|    {
  324|   277k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   277k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   277k|        return read_default_with_base(range, value, 0);
  326|   277k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   277k|    {
  287|   277k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   277k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   277k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   277k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 277k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   277k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   277k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   277k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   277k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   277k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   277k|                return unexpected_scan_error(
  293|   277k|                    scan_error::invalid_scanned_value,
  294|   277k|                    "Unexpected '-' sign when parsing an "
  295|   277k|                    "unsigned value");
  296|   277k|            }
  297|   277k|        }
  298|       |
  299|   277k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 103k, False: 174k]
  ------------------
  300|   103k|            value = T{0};
  301|   103k|            return std::next(prefix_result.iterator);
  302|   103k|        }
  303|       |
  304|   349k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   174k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   174k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   174k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   174k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 102, False: 174k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    102|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    102|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    102|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    102|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    102|    }                                                  \
  |  |  |  |   70|   174k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   349k|                                     ranges::subrange{prefix_result.iterator,
  306|   349k|                                                      ranges::end(range)},
  307|   349k|                                     prefix_result.parsed_base));
  308|       |
  309|   349k|        auto buf = make_contiguous_buffer(
  310|   349k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   349k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   174k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   174k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   174k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   174k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.28k, False: 169k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.28k|    }                                                  \
  |  |  |  |   70|   174k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   169k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   169k|                                    prefix_result.parsed_base));
  314|       |
  315|   169k|        return ranges_polyfill::batch_next(
  316|   169k|            prefix_result.iterator,
  317|   169k|            ranges::distance(buf.view().begin(), result_it));
  318|   349k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   296k|    {
  324|   296k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   296k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   296k|        return read_default_with_base(range, value, 0);
  326|   296k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   296k|    {
  287|   296k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   296k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   296k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   296k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   296k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 296k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   296k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   296k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   296k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   296k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   296k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   296k|                return unexpected_scan_error(
  293|   296k|                    scan_error::invalid_scanned_value,
  294|   296k|                    "Unexpected '-' sign when parsing an "
  295|   296k|                    "unsigned value");
  296|   296k|            }
  297|   296k|        }
  298|       |
  299|   296k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 104k, False: 191k]
  ------------------
  300|   104k|            value = T{0};
  301|   104k|            return std::next(prefix_result.iterator);
  302|   104k|        }
  303|       |
  304|   383k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   191k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   191k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   191k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 114, False: 191k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    114|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    114|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    114|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    114|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    114|    }                                                  \
  |  |  |  |   70|   191k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   191k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   383k|                                     ranges::subrange{prefix_result.iterator,
  306|   383k|                                                      ranges::end(range)},
  307|   383k|                                     prefix_result.parsed_base));
  308|       |
  309|   383k|        auto buf = make_contiguous_buffer(
  310|   383k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   383k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   191k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   191k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   191k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.16k, False: 186k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.16k|    }                                                  \
  |  |  |  |   70|   191k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   186k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   186k|                                    prefix_result.parsed_base));
  314|       |
  315|   186k|        return ranges_polyfill::batch_next(
  316|   186k|            prefix_result.iterator,
  317|   186k|            ranges::distance(buf.view().begin(), result_it));
  318|   383k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   203k|    {
  324|   203k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   203k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   203k|        return read_default_with_base(range, value, 0);
  326|   203k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   203k|    {
  287|   203k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   203k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   203k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   203k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   203k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 203k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   203k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   203k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   203k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   203k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   203k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.49k, False: 200k]
  ------------------
  292|  2.49k|                return unexpected_scan_error(
  293|  2.49k|                    scan_error::invalid_scanned_value,
  294|  2.49k|                    "Unexpected '-' sign when parsing an "
  295|  2.49k|                    "unsigned value");
  296|  2.49k|            }
  297|   203k|        }
  298|       |
  299|   200k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 81.3k, False: 119k]
  ------------------
  300|  81.3k|            value = T{0};
  301|  81.3k|            return std::next(prefix_result.iterator);
  302|  81.3k|        }
  303|       |
  304|   238k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   119k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   119k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   119k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   119k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 42, False: 119k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     42|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     42|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     42|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     42|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     42|    }                                                  \
  |  |  |  |   70|   119k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   119k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   238k|                                     ranges::subrange{prefix_result.iterator,
  306|   238k|                                                      ranges::end(range)},
  307|   238k|                                     prefix_result.parsed_base));
  308|       |
  309|   238k|        auto buf = make_contiguous_buffer(
  310|   238k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   238k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   119k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   119k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   119k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   119k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.64k, False: 115k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.64k|    }                                                  \
  |  |  |  |   70|   119k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   115k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   115k|                                    prefix_result.parsed_base));
  314|       |
  315|   115k|        return ranges_polyfill::batch_next(
  316|   115k|            prefix_result.iterator,
  317|   115k|            ranges::distance(buf.view().begin(), result_it));
  318|   238k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   234k|    {
  324|   234k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   234k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   234k|        return read_default_with_base(range, value, 0);
  326|   234k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   234k|    {
  287|   234k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   234k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   234k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   234k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   234k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 234k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   234k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   234k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   234k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   234k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   234k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.58k, False: 231k]
  ------------------
  292|  2.58k|                return unexpected_scan_error(
  293|  2.58k|                    scan_error::invalid_scanned_value,
  294|  2.58k|                    "Unexpected '-' sign when parsing an "
  295|  2.58k|                    "unsigned value");
  296|  2.58k|            }
  297|   234k|        }
  298|       |
  299|   231k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 88.9k, False: 142k]
  ------------------
  300|  88.9k|            value = T{0};
  301|  88.9k|            return std::next(prefix_result.iterator);
  302|  88.9k|        }
  303|       |
  304|   285k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   142k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   142k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   142k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 42, False: 142k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     42|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     42|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     42|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     42|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     42|    }                                                  \
  |  |  |  |   70|   142k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   285k|                                     ranges::subrange{prefix_result.iterator,
  306|   285k|                                                      ranges::end(range)},
  307|   285k|                                     prefix_result.parsed_base));
  308|       |
  309|   285k|        auto buf = make_contiguous_buffer(
  310|   285k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   285k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   142k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   142k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   142k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.14k, False: 139k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.14k|    }                                                  \
  |  |  |  |   70|   142k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   139k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   139k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   139k|                                    prefix_result.parsed_base));
  314|       |
  315|   139k|        return ranges_polyfill::batch_next(
  316|   139k|            prefix_result.iterator,
  317|   139k|            ranges::distance(buf.view().begin(), result_it));
  318|   285k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   241k|    {
  324|   241k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   241k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   241k|        return read_default_with_base(range, value, 0);
  326|   241k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   241k|    {
  287|   241k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   241k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   241k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   241k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 241k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   241k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   241k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   241k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   241k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   241k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.66k, False: 238k]
  ------------------
  292|  2.66k|                return unexpected_scan_error(
  293|  2.66k|                    scan_error::invalid_scanned_value,
  294|  2.66k|                    "Unexpected '-' sign when parsing an "
  295|  2.66k|                    "unsigned value");
  296|  2.66k|            }
  297|   241k|        }
  298|       |
  299|   238k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 89.7k, False: 148k]
  ------------------
  300|  89.7k|            value = T{0};
  301|  89.7k|            return std::next(prefix_result.iterator);
  302|  89.7k|        }
  303|       |
  304|   297k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   148k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   148k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   148k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 45, False: 148k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     45|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     45|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     45|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     45|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     45|    }                                                  \
  |  |  |  |   70|   148k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   148k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   297k|                                     ranges::subrange{prefix_result.iterator,
  306|   297k|                                                      ranges::end(range)},
  307|   297k|                                     prefix_result.parsed_base));
  308|       |
  309|   297k|        auto buf = make_contiguous_buffer(
  310|   297k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   297k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   148k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   148k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   148k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.98k, False: 145k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.98k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.98k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.98k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.98k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.98k|    }                                                  \
  |  |  |  |   70|   148k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   145k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   145k|                                    prefix_result.parsed_base));
  314|       |
  315|   145k|        return ranges_polyfill::batch_next(
  316|   145k|            prefix_result.iterator,
  317|   145k|            ranges::distance(buf.view().begin(), result_it));
  318|   297k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSC_12basic_stringIT0_NSC_11char_traitsISJ_EENSC_9allocatorISJ_EEEENSI_IcNSK_IcEENSM_IcEEEEEEEEESF_iRKNS1_35localized_number_formatting_optionsISJ_EE:
  184|   605k|{
  185|   605k|    std::basic_string<CharT> output;
  186|   605k|    std::string thsep_indices;
  187|   605k|    auto it = ranges::begin(range);
  188|   605k|    bool digit_matched = false;
  189|  1.85M|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 1.84M, False: 5.74k]
  ------------------
  190|  1.84M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 27.0k, False: 1.81M]
  ------------------
  191|  27.0k|            thsep_indices.push_back(static_cast<char>(
  192|  27.0k|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|  27.0k|        }
  194|  1.81M|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 600k, False: 1.21M]
  ------------------
  195|   600k|            break;
  196|   600k|        }
  197|  1.21M|        else {
  198|  1.21M|            output.push_back(*it);
  199|  1.21M|            digit_matched = true;
  200|  1.21M|        }
  201|  1.84M|    }
  202|   605k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|   605k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 11.2k, False: 594k]
  |  |  ------------------
  ------------------
  203|  11.2k|        return unexpected_scan_error(
  204|  11.2k|            scan_error::invalid_scanned_value,
  205|  11.2k|            "Failed to parse integer: No digits found");
  206|  11.2k|    }
  207|   594k|    return std::tuple{it, output, thsep_indices};
  208|   605k|}
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  13.7k|    {
  324|  13.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  13.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  13.7k|        return read_default_with_base(range, value, 0);
  326|  13.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  13.7k|    {
  287|  13.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  13.7k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  13.7k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  13.7k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  13.7k|                return unexpected_scan_error(
  293|  13.7k|                    scan_error::invalid_scanned_value,
  294|  13.7k|                    "Unexpected '-' sign when parsing an "
  295|  13.7k|                    "unsigned value");
  296|  13.7k|            }
  297|  13.7k|        }
  298|       |
  299|  13.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 6.89k, False: 6.89k]
  ------------------
  300|  6.89k|            value = T{0};
  301|  6.89k|            return std::next(prefix_result.iterator);
  302|  6.89k|        }
  303|       |
  304|  6.89k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  6.89k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.89k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.89k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.89k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.89k|    }                                                  \
  |  |  |  |   70|  6.89k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  6.89k|                                     ranges::subrange{prefix_result.iterator,
  306|  6.89k|                                                      ranges::end(range)},
  307|  6.89k|                                     prefix_result.parsed_base));
  308|       |
  309|  6.89k|        auto buf = make_contiguous_buffer(
  310|  6.89k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  6.89k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  6.89k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESH_i:
  120|   441k|{
  121|   441k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|   441k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   441k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   441k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   441k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 441k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   441k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   441k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|   441k|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|   441k|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|   441k|        parse_integer_base_prefix(
  126|   441k|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|   441k|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 124k, False: 316k]
  ------------------
  129|   124k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 54, False: 124k]
  ------------------
  130|   124k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 124k, False: 0]
  ------------------
  131|   124k|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|   124k|                digits_begin_it, ranges::begin(range));
  133|   124k|        }
  134|      0|        else {
  135|      0|            parsed_zero = false;
  136|      0|        }
  137|   124k|    }
  138|   316k|    else {
  139|   316k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 0, False: 316k]
  ------------------
  140|   316k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 206k, False: 110k]
  ------------------
  141|   206k|            digits_begin_it = base_prefix_begin_it;
  142|   206k|        }
  143|   316k|    }
  144|       |
  145|   441k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 441k, False: 0]
  ------------------
  146|   441k|        sign = sign_type::plus_sign;
  147|   441k|    }
  148|   441k|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|   441k|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|   441k|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_i:
   87|   441k|{
   88|   441k|    switch (base) {
   89|  55.1k|        case 2:
  ------------------
  |  Branch (89:9): [True: 55.1k, False: 385k]
  ------------------
   90|       |            // allow 0b/0B
   91|  55.1k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  55.1k|                    false};
   93|       |
   94|  55.1k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 55.1k, False: 385k]
  ------------------
   95|       |            // allow 0o/0O/0
   96|  55.1k|            bool zero_parsed = false;
   97|  55.1k|            auto it = apply_opt(
   98|  55.1k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|  55.1k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|  82.6k|        case 16:
  ------------------
  |  Branch (102:9): [True: 82.6k, False: 358k]
  ------------------
  103|       |            // allow 0x/0X
  104|  82.6k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|  82.6k|                    false};
  106|       |
  107|   192k|        case 0:
  ------------------
  |  Branch (107:9): [True: 192k, False: 248k]
  ------------------
  108|       |            // detect base
  109|   192k|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|   192k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|  55.1k|        default:
  ------------------
  |  Branch (111:9): [True: 55.1k, False: 385k]
  ------------------
  112|       |            // no base prefix allowed
  113|  55.1k|            return {ranges::begin(range), base, false};
  114|   441k|    }
  115|   441k|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   37|   248k|{
   38|   248k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|   248k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|   248k|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_Rb:
   52|   248k|{
   53|   248k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 0, False: 248k]
  ------------------
   54|      0|        return *r;
   55|      0|    }
   56|       |
   57|   248k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 124k, False: 124k]
  ------------------
   58|   124k|        zero_parsed = true;
   59|   124k|        return *r;
   60|   124k|    }
   61|       |
   62|   124k|    return unexpected(parse_error::error);
   63|   248k|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   44|   275k|{
   45|   275k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|   275k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   275k|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_:
   68|   192k|{
   69|   192k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 0, False: 192k]
  ------------------
   70|      0|        return {*r, 16, false};
   71|      0|    }
   72|   192k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 0, False: 192k]
  ------------------
   73|      0|        return {*r, 2, false};
   74|      0|    }
   75|   192k|    {
   76|   192k|        bool zero_parsed{false};
   77|   192k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 96.5k, False: 96.4k]
  ------------------
   78|  96.5k|            return {*r, 8, zero_parsed};
   79|  96.5k|        }
   80|   192k|    }
   81|  96.4k|    return {ranges::begin(range), 10, false};
   82|   192k|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_i:
  155|   289k|{
  156|   289k|    using char_type = detail::char_t<Range>;
  157|       |
  158|   289k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|   289k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  160|   289k|            return unexpected_scan_error(
  161|   289k|                scan_error::invalid_scanned_value,
  162|   289k|                "Failed to parse integer: No digits found");
  163|   289k|        }
  164|   289k|        return ranges::end(range);
  165|   289k|    }
  166|   289k|    else {
  167|   289k|        return read_while1_code_unit(
  168|   289k|                   range, [&](char_type ch)
  169|   289k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|   289k|            .transform_error(map_parse_error_to_scan_error(
  171|   289k|                scan_error::invalid_scanned_value,
  172|   289k|                "Failed to parse integer: No digits found"));
  173|   289k|    }
  174|   289k|}
_ZZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_iENKUlcE_clEc:
  169|   399k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  13.7k|    {
  324|  13.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  13.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  13.7k|        return read_default_with_base(range, value, 0);
  326|  13.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  13.7k|    {
  287|  13.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  13.7k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  13.7k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  13.7k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  13.7k|                return unexpected_scan_error(
  293|  13.7k|                    scan_error::invalid_scanned_value,
  294|  13.7k|                    "Unexpected '-' sign when parsing an "
  295|  13.7k|                    "unsigned value");
  296|  13.7k|            }
  297|  13.7k|        }
  298|       |
  299|  13.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 6.89k, False: 6.89k]
  ------------------
  300|  6.89k|            value = T{0};
  301|  6.89k|            return std::next(prefix_result.iterator);
  302|  6.89k|        }
  303|       |
  304|  6.89k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  6.89k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.89k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.89k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.89k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.89k|    }                                                  \
  |  |  |  |   70|  6.89k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  6.89k|                                     ranges::subrange{prefix_result.iterator,
  306|  6.89k|                                                      ranges::end(range)},
  307|  6.89k|                                     prefix_result.parsed_base));
  308|       |
  309|  6.89k|        auto buf = make_contiguous_buffer(
  310|  6.89k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  6.89k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  6.89k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  13.7k|    {
  324|  13.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  13.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  13.7k|        return read_default_with_base(range, value, 0);
  326|  13.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  13.7k|    {
  287|  13.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  13.7k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  13.7k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  13.7k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  13.7k|                return unexpected_scan_error(
  293|  13.7k|                    scan_error::invalid_scanned_value,
  294|  13.7k|                    "Unexpected '-' sign when parsing an "
  295|  13.7k|                    "unsigned value");
  296|  13.7k|            }
  297|  13.7k|        }
  298|       |
  299|  13.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 6.89k, False: 6.89k]
  ------------------
  300|  6.89k|            value = T{0};
  301|  6.89k|            return std::next(prefix_result.iterator);
  302|  6.89k|        }
  303|       |
  304|  6.89k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  6.89k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.89k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.89k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.89k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.89k|    }                                                  \
  |  |  |  |   70|  6.89k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  6.89k|                                     ranges::subrange{prefix_result.iterator,
  306|  6.89k|                                                      ranges::end(range)},
  307|  6.89k|                                     prefix_result.parsed_base));
  308|       |
  309|  6.89k|        auto buf = make_contiguous_buffer(
  310|  6.89k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  6.89k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  6.89k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  13.7k|    {
  324|  13.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  13.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  13.7k|        return read_default_with_base(range, value, 0);
  326|  13.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  13.7k|    {
  287|  13.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  13.7k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  13.7k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  13.7k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 13.7k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  13.7k|        }
  298|       |
  299|  13.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 6.89k, False: 6.89k]
  ------------------
  300|  6.89k|            value = T{0};
  301|  6.89k|            return std::next(prefix_result.iterator);
  302|  6.89k|        }
  303|       |
  304|  6.89k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  6.89k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.89k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.89k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.89k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.89k|    }                                                  \
  |  |  |  |   70|  6.89k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  6.89k|                                     ranges::subrange{prefix_result.iterator,
  306|  6.89k|                                                      ranges::end(range)},
  307|  6.89k|                                     prefix_result.parsed_base));
  308|       |
  309|  6.89k|        auto buf = make_contiguous_buffer(
  310|  6.89k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  6.89k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  6.89k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  13.7k|    {
  324|  13.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  13.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  13.7k|        return read_default_with_base(range, value, 0);
  326|  13.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  13.7k|    {
  287|  13.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  13.7k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  13.7k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  13.7k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 13.7k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  13.7k|        }
  298|       |
  299|  13.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 6.89k, False: 6.89k]
  ------------------
  300|  6.89k|            value = T{0};
  301|  6.89k|            return std::next(prefix_result.iterator);
  302|  6.89k|        }
  303|       |
  304|  6.89k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  6.89k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.89k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.89k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.89k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.89k|    }                                                  \
  |  |  |  |   70|  6.89k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  6.89k|                                     ranges::subrange{prefix_result.iterator,
  306|  6.89k|                                                      ranges::end(range)},
  307|  6.89k|                                     prefix_result.parsed_base));
  308|       |
  309|  6.89k|        auto buf = make_contiguous_buffer(
  310|  6.89k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  6.89k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  6.89k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  13.7k|    {
  324|  13.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  13.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  13.7k|        return read_default_with_base(range, value, 0);
  326|  13.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  13.7k|    {
  287|  13.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  13.7k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  13.7k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  13.7k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 13.7k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  13.7k|        }
  298|       |
  299|  13.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 6.89k, False: 6.89k]
  ------------------
  300|  6.89k|            value = T{0};
  301|  6.89k|            return std::next(prefix_result.iterator);
  302|  6.89k|        }
  303|       |
  304|  6.89k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  6.89k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.89k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.89k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.89k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.89k|    }                                                  \
  |  |  |  |   70|  6.89k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  6.89k|                                     ranges::subrange{prefix_result.iterator,
  306|  6.89k|                                                      ranges::end(range)},
  307|  6.89k|                                     prefix_result.parsed_base));
  308|       |
  309|  6.89k|        auto buf = make_contiguous_buffer(
  310|  6.89k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  6.89k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  6.89k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSF_12basic_stringIT0_NSF_11char_traitsISM_EENSF_9allocatorISM_EEEENSL_IcNSN_IcEENSP_IcEEEEEEEEESI_iRKNS1_35localized_number_formatting_optionsISM_EE:
  184|  27.5k|{
  185|  27.5k|    std::basic_string<CharT> output;
  186|  27.5k|    std::string thsep_indices;
  187|  27.5k|    auto it = ranges::begin(range);
  188|  27.5k|    bool digit_matched = false;
  189|  76.6k|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 76.6k, False: 0]
  ------------------
  190|  76.6k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 49.1k, False: 27.5k]
  ------------------
  191|  49.1k|            thsep_indices.push_back(static_cast<char>(
  192|  49.1k|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|  49.1k|        }
  194|  27.5k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 27.5k, False: 0]
  ------------------
  195|  27.5k|            break;
  196|  27.5k|        }
  197|      0|        else {
  198|      0|            output.push_back(*it);
  199|      0|            digit_matched = true;
  200|      0|        }
  201|  76.6k|    }
  202|  27.5k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|  27.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 27.5k, False: 0]
  |  |  ------------------
  ------------------
  203|  27.5k|        return unexpected_scan_error(
  204|  27.5k|            scan_error::invalid_scanned_value,
  205|  27.5k|            "Failed to parse integer: No digits found");
  206|  27.5k|    }
  207|      0|    return std::tuple{it, output, thsep_indices};
  208|  27.5k|}
_ZN3scn2v24impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  279|  4.06M|    {
  280|  4.06M|        detail::check_int_type_specs(specs, eh);
  281|  4.06M|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   487k|    {
  335|   487k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   487k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   487k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   487k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   487k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 487k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   487k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   487k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   487k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   487k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 46.2k, False: 441k]
  ------------------
  339|  46.2k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  46.2k|                return unexpected_scan_error(
  341|  46.2k|                    scan_error::invalid_scanned_value,
  342|  46.2k|                    "Unexpected '-' sign when parsing an "
  343|  46.2k|                    "unsigned value");
  344|  46.2k|            }
  345|  46.2k|            else {
  346|  46.2k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 46.2k]
  ------------------
  347|  46.2k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  46.2k|            }
  353|  46.2k|        }
  354|       |
  355|   487k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 124k, False: 363k]
  ------------------
  356|   124k|            value = T{0};
  357|   124k|            return std::next(prefix_result.iterator);
  358|   124k|        }
  359|       |
  360|   363k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   363k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 273k, False: 89.5k]
  |  |  ------------------
  ------------------
  361|   273k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   273k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   273k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   273k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   273k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 170, False: 273k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    170|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    170|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    170|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    170|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    170|    }                                                  \
  |  |  |  |   70|   273k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   273k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   273k|                    parse_integer_digits_without_thsep(
  363|   273k|                        ranges::subrange{prefix_result.iterator,
  364|   273k|                                         ranges::end(range)},
  365|   273k|                        prefix_result.parsed_base));
  366|       |
  367|   273k|            auto buf = make_contiguous_buffer(
  368|   273k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   273k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   273k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   273k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   273k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   273k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 21.1k, False: 252k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  21.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  21.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  21.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  21.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  21.1k|    }                                                  \
  |  |  |  |   70|   273k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   252k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   252k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   252k|                                        prefix_result.parsed_base));
  372|       |
  373|   252k|            return ranges_polyfill::batch_next(
  374|   252k|                prefix_result.iterator,
  375|   252k|                ranges::distance(buf.view().begin(), result_it));
  376|   273k|        }
  377|       |
  378|  89.5k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  89.5k|            localized_number_formatting_options<CharT>{loc};
  383|  89.5k|#endif
  384|       |
  385|  89.5k|        SCN_TRY(
  ------------------
  |  |   71|  89.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  89.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  89.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  89.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.78k, False: 87.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.78k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.78k|    }                                                  \
  |  |  |  |   70|  89.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  87.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  87.7k|            parse_digits_result,
  387|  87.7k|            parse_integer_digits_with_thsep(
  388|  87.7k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  87.7k|                prefix_result.parsed_base, locale_options));
  390|  87.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  87.7k|            parse_digits_result;
  392|       |
  393|  87.7k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 428, False: 87.3k]
  ------------------
  394|    428|            if (auto e = check_thsep_grouping(
  395|    428|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    428|                    thsep_indices, locale_options.grouping);
  397|    428|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    428|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 412, False: 16]
  |  |  ------------------
  ------------------
  398|    412|                return unexpected(e);
  399|    412|            }
  400|    428|        }
  401|       |
  402|  87.3k|        auto nothsep_source_view =
  403|  87.3k|            std::basic_string_view<CharT>{nothsep_source};
  404|  87.3k|        SCN_TRY(
  ------------------
  |  |   71|  87.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  87.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  87.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  87.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.85k, False: 85.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.85k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.85k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.85k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.85k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.85k|    }                                                  \
  |  |  |  |   70|  87.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  85.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  85.4k|            nothsep_source_it,
  406|  85.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  85.4k|                                prefix_result.parsed_base));
  408|       |
  409|  85.4k|        return ranges_polyfill::batch_next(
  410|  85.4k|            prefix_result.iterator,
  411|  85.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  85.4k|                ranges::ssize(thsep_indices));
  413|  87.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   728k|    {
  335|   728k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   728k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   728k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   728k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   728k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 728k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   728k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   728k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   728k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   728k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 56.5k, False: 671k]
  ------------------
  339|  56.5k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  56.5k|                return unexpected_scan_error(
  341|  56.5k|                    scan_error::invalid_scanned_value,
  342|  56.5k|                    "Unexpected '-' sign when parsing an "
  343|  56.5k|                    "unsigned value");
  344|  56.5k|            }
  345|  56.5k|            else {
  346|  56.5k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 56.5k]
  ------------------
  347|  56.5k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  56.5k|            }
  353|  56.5k|        }
  354|       |
  355|   728k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 154k, False: 574k]
  ------------------
  356|   154k|            value = T{0};
  357|   154k|            return std::next(prefix_result.iterator);
  358|   154k|        }
  359|       |
  360|   574k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   574k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 458k, False: 116k]
  |  |  ------------------
  ------------------
  361|   458k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   458k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   458k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   458k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   458k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 242, False: 458k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    242|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    242|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    242|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    242|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    242|    }                                                  \
  |  |  |  |   70|   458k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   458k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   458k|                    parse_integer_digits_without_thsep(
  363|   458k|                        ranges::subrange{prefix_result.iterator,
  364|   458k|                                         ranges::end(range)},
  365|   458k|                        prefix_result.parsed_base));
  366|       |
  367|   458k|            auto buf = make_contiguous_buffer(
  368|   458k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   458k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   458k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   458k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   458k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   458k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 19.3k, False: 438k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  19.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  19.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  19.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  19.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  19.3k|    }                                                  \
  |  |  |  |   70|   458k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   438k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   438k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   438k|                                        prefix_result.parsed_base));
  372|       |
  373|   438k|            return ranges_polyfill::batch_next(
  374|   438k|                prefix_result.iterator,
  375|   438k|                ranges::distance(buf.view().begin(), result_it));
  376|   458k|        }
  377|       |
  378|   116k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   116k|            localized_number_formatting_options<CharT>{loc};
  383|   116k|#endif
  384|       |
  385|   116k|        SCN_TRY(
  ------------------
  |  |   71|   116k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   116k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   116k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.45k, False: 113k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.45k|    }                                                  \
  |  |  |  |   70|   116k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   113k|            parse_digits_result,
  387|   113k|            parse_integer_digits_with_thsep(
  388|   113k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   113k|                prefix_result.parsed_base, locale_options));
  390|   113k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   113k|            parse_digits_result;
  392|       |
  393|   113k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 510, False: 113k]
  ------------------
  394|    510|            if (auto e = check_thsep_grouping(
  395|    510|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    510|                    thsep_indices, locale_options.grouping);
  397|    510|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    510|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 494, False: 16]
  |  |  ------------------
  ------------------
  398|    494|                return unexpected(e);
  399|    494|            }
  400|    510|        }
  401|       |
  402|   113k|        auto nothsep_source_view =
  403|   113k|            std::basic_string_view<CharT>{nothsep_source};
  404|   113k|        SCN_TRY(
  ------------------
  |  |   71|   113k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   113k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   113k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 642, False: 112k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    642|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    642|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    642|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    642|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    642|    }                                                  \
  |  |  |  |   70|   113k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   112k|            nothsep_source_it,
  406|   112k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|   112k|                                prefix_result.parsed_base));
  408|       |
  409|   112k|        return ranges_polyfill::batch_next(
  410|   112k|            prefix_result.iterator,
  411|   112k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|   112k|                ranges::ssize(thsep_indices));
  413|   113k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   774k|    {
  335|   774k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   774k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   774k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   774k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   774k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 774k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   774k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   774k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   774k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   774k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 57.6k, False: 717k]
  ------------------
  339|  57.6k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  57.6k|                return unexpected_scan_error(
  341|  57.6k|                    scan_error::invalid_scanned_value,
  342|  57.6k|                    "Unexpected '-' sign when parsing an "
  343|  57.6k|                    "unsigned value");
  344|  57.6k|            }
  345|  57.6k|            else {
  346|  57.6k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 57.6k]
  ------------------
  347|  57.6k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  57.6k|            }
  353|  57.6k|        }
  354|       |
  355|   774k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 156k, False: 618k]
  ------------------
  356|   156k|            value = T{0};
  357|   156k|            return std::next(prefix_result.iterator);
  358|   156k|        }
  359|       |
  360|   618k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   618k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 491k, False: 127k]
  |  |  ------------------
  ------------------
  361|   491k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   491k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   491k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   491k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   491k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 272, False: 491k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    272|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    272|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    272|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    272|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    272|    }                                                  \
  |  |  |  |   70|   491k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   491k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   491k|                    parse_integer_digits_without_thsep(
  363|   491k|                        ranges::subrange{prefix_result.iterator,
  364|   491k|                                         ranges::end(range)},
  365|   491k|                        prefix_result.parsed_base));
  366|       |
  367|   491k|            auto buf = make_contiguous_buffer(
  368|   491k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   491k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   491k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   491k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   491k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   491k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 19.1k, False: 472k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  19.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  19.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  19.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  19.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  19.1k|    }                                                  \
  |  |  |  |   70|   491k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   472k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   472k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   472k|                                        prefix_result.parsed_base));
  372|       |
  373|   472k|            return ranges_polyfill::batch_next(
  374|   472k|                prefix_result.iterator,
  375|   472k|                ranges::distance(buf.view().begin(), result_it));
  376|   491k|        }
  377|       |
  378|   127k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   127k|            localized_number_formatting_options<CharT>{loc};
  383|   127k|#endif
  384|       |
  385|   127k|        SCN_TRY(
  ------------------
  |  |   71|   127k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   127k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   127k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.70k, False: 124k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.70k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.70k|    }                                                  \
  |  |  |  |   70|   127k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   124k|            parse_digits_result,
  387|   124k|            parse_integer_digits_with_thsep(
  388|   124k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   124k|                prefix_result.parsed_base, locale_options));
  390|   124k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   124k|            parse_digits_result;
  392|       |
  393|   124k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 566, False: 124k]
  ------------------
  394|    566|            if (auto e = check_thsep_grouping(
  395|    566|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    566|                    thsep_indices, locale_options.grouping);
  397|    566|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    566|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 548, False: 18]
  |  |  ------------------
  ------------------
  398|    548|                return unexpected(e);
  399|    548|            }
  400|    566|        }
  401|       |
  402|   124k|        auto nothsep_source_view =
  403|   124k|            std::basic_string_view<CharT>{nothsep_source};
  404|   124k|        SCN_TRY(
  ------------------
  |  |   71|   124k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   124k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   124k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 264, False: 123k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    264|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    264|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    264|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    264|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    264|    }                                                  \
  |  |  |  |   70|   124k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   123k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   123k|            nothsep_source_it,
  406|   123k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|   123k|                                prefix_result.parsed_base));
  408|       |
  409|   123k|        return ranges_polyfill::batch_next(
  410|   123k|            prefix_result.iterator,
  411|   123k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|   123k|                ranges::ssize(thsep_indices));
  413|   124k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   479k|    {
  335|   479k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   479k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   479k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   479k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   479k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 479k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   479k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   479k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   479k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   479k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 8.66k, False: 470k]
  ------------------
  339|  8.66k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  8.66k|                return unexpected_scan_error(
  341|  8.66k|                    scan_error::invalid_scanned_value,
  342|  8.66k|                    "Unexpected '-' sign when parsing an "
  343|  8.66k|                    "unsigned value");
  344|  8.66k|            }
  345|  8.66k|            else {
  346|  8.66k|                if (specs.type ==
  347|  8.66k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  8.66k|                    return unexpected_scan_error(
  349|  8.66k|                        scan_error::invalid_scanned_value,
  350|  8.66k|                        "'u'-option disallows negative values");
  351|  8.66k|                }
  352|  8.66k|            }
  353|  8.66k|        }
  354|       |
  355|   470k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 121k, False: 349k]
  ------------------
  356|   121k|            value = T{0};
  357|   121k|            return std::next(prefix_result.iterator);
  358|   121k|        }
  359|       |
  360|   349k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   349k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 270k, False: 79.3k]
  |  |  ------------------
  ------------------
  361|   270k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   270k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   270k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   270k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   270k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 90, False: 270k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     90|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     90|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     90|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     90|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     90|    }                                                  \
  |  |  |  |   70|   270k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   270k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   270k|                    parse_integer_digits_without_thsep(
  363|   270k|                        ranges::subrange{prefix_result.iterator,
  364|   270k|                                         ranges::end(range)},
  365|   270k|                        prefix_result.parsed_base));
  366|       |
  367|   270k|            auto buf = make_contiguous_buffer(
  368|   270k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   270k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   270k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   270k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   270k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   270k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 14.3k, False: 255k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  14.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  14.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  14.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  14.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  14.3k|    }                                                  \
  |  |  |  |   70|   270k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   255k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   255k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   255k|                                        prefix_result.parsed_base));
  372|       |
  373|   255k|            return ranges_polyfill::batch_next(
  374|   255k|                prefix_result.iterator,
  375|   255k|                ranges::distance(buf.view().begin(), result_it));
  376|   270k|        }
  377|       |
  378|  79.3k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  79.3k|            localized_number_formatting_options<CharT>{loc};
  383|  79.3k|#endif
  384|       |
  385|  79.3k|        SCN_TRY(
  ------------------
  |  |   71|  79.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  79.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  79.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  79.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.27k, False: 78.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.27k|    }                                                  \
  |  |  |  |   70|  79.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  78.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  78.0k|            parse_digits_result,
  387|  78.0k|            parse_integer_digits_with_thsep(
  388|  78.0k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  78.0k|                prefix_result.parsed_base, locale_options));
  390|  78.0k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  78.0k|            parse_digits_result;
  392|       |
  393|  78.0k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 286, False: 77.7k]
  ------------------
  394|    286|            if (auto e = check_thsep_grouping(
  395|    286|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    286|                    thsep_indices, locale_options.grouping);
  397|    286|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    286|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 282, False: 4]
  |  |  ------------------
  ------------------
  398|    282|                return unexpected(e);
  399|    282|            }
  400|    286|        }
  401|       |
  402|  77.7k|        auto nothsep_source_view =
  403|  77.7k|            std::basic_string_view<CharT>{nothsep_source};
  404|  77.7k|        SCN_TRY(
  ------------------
  |  |   71|  77.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  77.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  77.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  77.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 904, False: 76.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    904|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    904|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    904|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    904|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    904|    }                                                  \
  |  |  |  |   70|  77.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  76.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  76.8k|            nothsep_source_it,
  406|  76.8k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  76.8k|                                prefix_result.parsed_base));
  408|       |
  409|  76.8k|        return ranges_polyfill::batch_next(
  410|  76.8k|            prefix_result.iterator,
  411|  76.8k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  76.8k|                ranges::ssize(thsep_indices));
  413|  77.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   598k|    {
  335|   598k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   598k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   598k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   598k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   598k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 598k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   598k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   598k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   598k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   598k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 9.01k, False: 589k]
  ------------------
  339|  9.01k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  9.01k|                return unexpected_scan_error(
  341|  9.01k|                    scan_error::invalid_scanned_value,
  342|  9.01k|                    "Unexpected '-' sign when parsing an "
  343|  9.01k|                    "unsigned value");
  344|  9.01k|            }
  345|  9.01k|            else {
  346|  9.01k|                if (specs.type ==
  347|  9.01k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  9.01k|                    return unexpected_scan_error(
  349|  9.01k|                        scan_error::invalid_scanned_value,
  350|  9.01k|                        "'u'-option disallows negative values");
  351|  9.01k|                }
  352|  9.01k|            }
  353|  9.01k|        }
  354|       |
  355|   589k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 131k, False: 457k]
  ------------------
  356|   131k|            value = T{0};
  357|   131k|            return std::next(prefix_result.iterator);
  358|   131k|        }
  359|       |
  360|   457k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   457k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 362k, False: 94.8k]
  |  |  ------------------
  ------------------
  361|   362k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   362k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   362k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   362k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   362k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 96, False: 362k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     96|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     96|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     96|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     96|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     96|    }                                                  \
  |  |  |  |   70|   362k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   362k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   362k|                    parse_integer_digits_without_thsep(
  363|   362k|                        ranges::subrange{prefix_result.iterator,
  364|   362k|                                         ranges::end(range)},
  365|   362k|                        prefix_result.parsed_base));
  366|       |
  367|   362k|            auto buf = make_contiguous_buffer(
  368|   362k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   362k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   362k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   362k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   362k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   362k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 13.0k, False: 349k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  13.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  13.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  13.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  13.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  13.0k|    }                                                  \
  |  |  |  |   70|   362k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   349k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   349k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   349k|                                        prefix_result.parsed_base));
  372|       |
  373|   349k|            return ranges_polyfill::batch_next(
  374|   349k|                prefix_result.iterator,
  375|   349k|                ranges::distance(buf.view().begin(), result_it));
  376|   362k|        }
  377|       |
  378|  94.8k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  94.8k|            localized_number_formatting_options<CharT>{loc};
  383|  94.8k|#endif
  384|       |
  385|  94.8k|        SCN_TRY(
  ------------------
  |  |   71|  94.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  94.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  94.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  94.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.48k, False: 93.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.48k|    }                                                  \
  |  |  |  |   70|  94.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  93.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  93.3k|            parse_digits_result,
  387|  93.3k|            parse_integer_digits_with_thsep(
  388|  93.3k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  93.3k|                prefix_result.parsed_base, locale_options));
  390|  93.3k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  93.3k|            parse_digits_result;
  392|       |
  393|  93.3k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 336, False: 93.0k]
  ------------------
  394|    336|            if (auto e = check_thsep_grouping(
  395|    336|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    336|                    thsep_indices, locale_options.grouping);
  397|    336|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    336|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 332, False: 4]
  |  |  ------------------
  ------------------
  398|    332|                return unexpected(e);
  399|    332|            }
  400|    336|        }
  401|       |
  402|  93.0k|        auto nothsep_source_view =
  403|  93.0k|            std::basic_string_view<CharT>{nothsep_source};
  404|  93.0k|        SCN_TRY(
  ------------------
  |  |   71|  93.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  93.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  93.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  93.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 310, False: 92.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    310|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    310|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    310|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    310|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    310|    }                                                  \
  |  |  |  |   70|  93.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  92.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  92.7k|            nothsep_source_it,
  406|  92.7k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  92.7k|                                prefix_result.parsed_base));
  408|       |
  409|  92.7k|        return ranges_polyfill::batch_next(
  410|  92.7k|            prefix_result.iterator,
  411|  92.7k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  92.7k|                ranges::ssize(thsep_indices));
  413|  93.0k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   621k|    {
  335|   621k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   621k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   621k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   621k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   621k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 621k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   621k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   621k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   621k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   621k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 9.22k, False: 612k]
  ------------------
  339|  9.22k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  9.22k|                return unexpected_scan_error(
  341|  9.22k|                    scan_error::invalid_scanned_value,
  342|  9.22k|                    "Unexpected '-' sign when parsing an "
  343|  9.22k|                    "unsigned value");
  344|  9.22k|            }
  345|  9.22k|            else {
  346|  9.22k|                if (specs.type ==
  347|  9.22k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  9.22k|                    return unexpected_scan_error(
  349|  9.22k|                        scan_error::invalid_scanned_value,
  350|  9.22k|                        "'u'-option disallows negative values");
  351|  9.22k|                }
  352|  9.22k|            }
  353|  9.22k|        }
  354|       |
  355|   612k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 132k, False: 479k]
  ------------------
  356|   132k|            value = T{0};
  357|   132k|            return std::next(prefix_result.iterator);
  358|   132k|        }
  359|       |
  360|   479k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   479k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 380k, False: 98.9k]
  |  |  ------------------
  ------------------
  361|   380k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   380k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   380k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   380k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   380k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 102, False: 380k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    102|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    102|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    102|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    102|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    102|    }                                                  \
  |  |  |  |   70|   380k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   380k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   380k|                    parse_integer_digits_without_thsep(
  363|   380k|                        ranges::subrange{prefix_result.iterator,
  364|   380k|                                         ranges::end(range)},
  365|   380k|                        prefix_result.parsed_base));
  366|       |
  367|   380k|            auto buf = make_contiguous_buffer(
  368|   380k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   380k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   380k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   380k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   380k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   380k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 12.7k, False: 367k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  12.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  12.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  12.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  12.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  12.7k|    }                                                  \
  |  |  |  |   70|   380k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   367k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   367k|                                        prefix_result.parsed_base));
  372|       |
  373|   367k|            return ranges_polyfill::batch_next(
  374|   367k|                prefix_result.iterator,
  375|   367k|                ranges::distance(buf.view().begin(), result_it));
  376|   380k|        }
  377|       |
  378|  98.9k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  98.9k|            localized_number_formatting_options<CharT>{loc};
  383|  98.9k|#endif
  384|       |
  385|  98.9k|        SCN_TRY(
  ------------------
  |  |   71|  98.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  98.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  98.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  98.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.57k, False: 97.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.57k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.57k|    }                                                  \
  |  |  |  |   70|  98.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  97.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  97.3k|            parse_digits_result,
  387|  97.3k|            parse_integer_digits_with_thsep(
  388|  97.3k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  97.3k|                prefix_result.parsed_base, locale_options));
  390|  97.3k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  97.3k|            parse_digits_result;
  392|       |
  393|  97.3k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 340, False: 96.9k]
  ------------------
  394|    340|            if (auto e = check_thsep_grouping(
  395|    340|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    340|                    thsep_indices, locale_options.grouping);
  397|    340|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    340|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 336, False: 4]
  |  |  ------------------
  ------------------
  398|    336|                return unexpected(e);
  399|    336|            }
  400|    340|        }
  401|       |
  402|  97.0k|        auto nothsep_source_view =
  403|  97.0k|            std::basic_string_view<CharT>{nothsep_source};
  404|  97.0k|        SCN_TRY(
  ------------------
  |  |   71|  97.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  97.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  97.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  97.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 108, False: 96.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    108|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    108|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    108|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    108|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    108|    }                                                  \
  |  |  |  |   70|  97.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  96.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  96.8k|            nothsep_source_it,
  406|  96.8k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  96.8k|                                prefix_result.parsed_base));
  408|       |
  409|  96.8k|        return ranges_polyfill::batch_next(
  410|  96.8k|            prefix_result.iterator,
  411|  96.8k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  96.8k|                ranges::ssize(thsep_indices));
  413|  97.0k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  59.7k|    {
  335|  59.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  59.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  59.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  59.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  59.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 59.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  59.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  59.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  59.7k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  59.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 59.7k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  59.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 13.7k, False: 45.9k]
  ------------------
  356|  13.7k|            value = T{0};
  357|  13.7k|            return std::next(prefix_result.iterator);
  358|  13.7k|        }
  359|       |
  360|  45.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  45.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 41.3k, False: 4.59k]
  |  |  ------------------
  ------------------
  361|  41.3k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  41.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  41.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 22.9k, False: 18.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  22.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  22.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  22.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  22.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  22.9k|    }                                                  \
  |  |  |  |   70|  41.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  18.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  18.3k|                    parse_integer_digits_without_thsep(
  363|  18.3k|                        ranges::subrange{prefix_result.iterator,
  364|  18.3k|                                         ranges::end(range)},
  365|  18.3k|                        prefix_result.parsed_base));
  366|       |
  367|  18.3k|            auto buf = make_contiguous_buffer(
  368|  18.3k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  18.3k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  18.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  18.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  18.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 18.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  18.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  18.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  18.3k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  18.3k|                                        prefix_result.parsed_base));
  372|       |
  373|  18.3k|            return ranges_polyfill::batch_next(
  374|  18.3k|                prefix_result.iterator,
  375|  18.3k|                ranges::distance(buf.view().begin(), result_it));
  376|  18.3k|        }
  377|       |
  378|  4.59k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.59k|            localized_number_formatting_options<CharT>{loc};
  383|  4.59k|#endif
  384|       |
  385|  4.59k|        SCN_TRY(
  ------------------
  |  |   71|  4.59k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.59k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.59k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.59k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.59k|    }                                                  \
  |  |  |  |   70|  4.59k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  59.7k|    {
  335|  59.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  59.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  59.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  59.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  59.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 59.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  59.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  59.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  59.7k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  59.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 59.7k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  59.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 13.7k, False: 45.9k]
  ------------------
  356|  13.7k|            value = T{0};
  357|  13.7k|            return std::next(prefix_result.iterator);
  358|  13.7k|        }
  359|       |
  360|  45.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  45.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 41.3k, False: 4.59k]
  |  |  ------------------
  ------------------
  361|  41.3k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  41.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  41.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 22.9k, False: 18.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  22.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  22.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  22.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  22.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  22.9k|    }                                                  \
  |  |  |  |   70|  41.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  18.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  18.3k|                    parse_integer_digits_without_thsep(
  363|  18.3k|                        ranges::subrange{prefix_result.iterator,
  364|  18.3k|                                         ranges::end(range)},
  365|  18.3k|                        prefix_result.parsed_base));
  366|       |
  367|  18.3k|            auto buf = make_contiguous_buffer(
  368|  18.3k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  18.3k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  18.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  18.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  18.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 18.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  18.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  18.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  18.3k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  18.3k|                                        prefix_result.parsed_base));
  372|       |
  373|  18.3k|            return ranges_polyfill::batch_next(
  374|  18.3k|                prefix_result.iterator,
  375|  18.3k|                ranges::distance(buf.view().begin(), result_it));
  376|  18.3k|        }
  377|       |
  378|  4.59k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.59k|            localized_number_formatting_options<CharT>{loc};
  383|  4.59k|#endif
  384|       |
  385|  4.59k|        SCN_TRY(
  ------------------
  |  |   71|  4.59k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.59k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.59k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.59k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.59k|    }                                                  \
  |  |  |  |   70|  4.59k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  59.7k|    {
  335|  59.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  59.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  59.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  59.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  59.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 59.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  59.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  59.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  59.7k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  59.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 59.7k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  59.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 13.7k, False: 45.9k]
  ------------------
  356|  13.7k|            value = T{0};
  357|  13.7k|            return std::next(prefix_result.iterator);
  358|  13.7k|        }
  359|       |
  360|  45.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  45.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 41.3k, False: 4.59k]
  |  |  ------------------
  ------------------
  361|  41.3k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  41.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  41.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 22.9k, False: 18.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  22.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  22.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  22.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  22.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  22.9k|    }                                                  \
  |  |  |  |   70|  41.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  18.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  18.3k|                    parse_integer_digits_without_thsep(
  363|  18.3k|                        ranges::subrange{prefix_result.iterator,
  364|  18.3k|                                         ranges::end(range)},
  365|  18.3k|                        prefix_result.parsed_base));
  366|       |
  367|  18.3k|            auto buf = make_contiguous_buffer(
  368|  18.3k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  18.3k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  18.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  18.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  18.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 18.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  18.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  18.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  18.3k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  18.3k|                                        prefix_result.parsed_base));
  372|       |
  373|  18.3k|            return ranges_polyfill::batch_next(
  374|  18.3k|                prefix_result.iterator,
  375|  18.3k|                ranges::distance(buf.view().begin(), result_it));
  376|  18.3k|        }
  377|       |
  378|  4.59k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.59k|            localized_number_formatting_options<CharT>{loc};
  383|  4.59k|#endif
  384|       |
  385|  4.59k|        SCN_TRY(
  ------------------
  |  |   71|  4.59k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.59k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.59k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.59k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.59k|    }                                                  \
  |  |  |  |   70|  4.59k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  59.7k|    {
  335|  59.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  59.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  59.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  59.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  59.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 59.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  59.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  59.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  59.7k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  59.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 59.7k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  59.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 13.7k, False: 45.9k]
  ------------------
  356|  13.7k|            value = T{0};
  357|  13.7k|            return std::next(prefix_result.iterator);
  358|  13.7k|        }
  359|       |
  360|  45.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  45.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 41.3k, False: 4.59k]
  |  |  ------------------
  ------------------
  361|  41.3k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  41.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  41.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 22.9k, False: 18.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  22.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  22.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  22.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  22.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  22.9k|    }                                                  \
  |  |  |  |   70|  41.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  18.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  18.3k|                    parse_integer_digits_without_thsep(
  363|  18.3k|                        ranges::subrange{prefix_result.iterator,
  364|  18.3k|                                         ranges::end(range)},
  365|  18.3k|                        prefix_result.parsed_base));
  366|       |
  367|  18.3k|            auto buf = make_contiguous_buffer(
  368|  18.3k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  18.3k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  18.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  18.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  18.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 18.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  18.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  18.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  18.3k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  18.3k|                                        prefix_result.parsed_base));
  372|       |
  373|  18.3k|            return ranges_polyfill::batch_next(
  374|  18.3k|                prefix_result.iterator,
  375|  18.3k|                ranges::distance(buf.view().begin(), result_it));
  376|  18.3k|        }
  377|       |
  378|  4.59k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.59k|            localized_number_formatting_options<CharT>{loc};
  383|  4.59k|#endif
  384|       |
  385|  4.59k|        SCN_TRY(
  ------------------
  |  |   71|  4.59k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.59k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.59k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.59k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.59k|    }                                                  \
  |  |  |  |   70|  4.59k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  59.7k|    {
  335|  59.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  59.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  59.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  59.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  59.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 59.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  59.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  59.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  59.7k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  59.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 59.7k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  59.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 13.7k, False: 45.9k]
  ------------------
  356|  13.7k|            value = T{0};
  357|  13.7k|            return std::next(prefix_result.iterator);
  358|  13.7k|        }
  359|       |
  360|  45.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  45.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 41.3k, False: 4.59k]
  |  |  ------------------
  ------------------
  361|  41.3k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  41.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  41.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 22.9k, False: 18.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  22.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  22.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  22.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  22.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  22.9k|    }                                                  \
  |  |  |  |   70|  41.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  18.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  18.3k|                    parse_integer_digits_without_thsep(
  363|  18.3k|                        ranges::subrange{prefix_result.iterator,
  364|  18.3k|                                         ranges::end(range)},
  365|  18.3k|                        prefix_result.parsed_base));
  366|       |
  367|  18.3k|            auto buf = make_contiguous_buffer(
  368|  18.3k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  18.3k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  18.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  18.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  18.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 18.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  18.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  18.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  18.3k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  18.3k|                                        prefix_result.parsed_base));
  372|       |
  373|  18.3k|            return ranges_polyfill::batch_next(
  374|  18.3k|                prefix_result.iterator,
  375|  18.3k|                ranges::distance(buf.view().begin(), result_it));
  376|  18.3k|        }
  377|       |
  378|  4.59k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.59k|            localized_number_formatting_options<CharT>{loc};
  383|  4.59k|#endif
  384|       |
  385|  4.59k|        SCN_TRY(
  ------------------
  |  |   71|  4.59k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.59k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.59k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.59k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.59k|    }                                                  \
  |  |  |  |   70|  4.59k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  59.7k|    {
  335|  59.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  59.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  59.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  59.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  59.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 59.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  59.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  59.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  59.7k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  59.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 59.7k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  59.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 13.7k, False: 45.9k]
  ------------------
  356|  13.7k|            value = T{0};
  357|  13.7k|            return std::next(prefix_result.iterator);
  358|  13.7k|        }
  359|       |
  360|  45.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  45.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 41.3k, False: 4.59k]
  |  |  ------------------
  ------------------
  361|  41.3k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  41.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  41.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 22.9k, False: 18.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  22.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  22.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  22.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  22.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  22.9k|    }                                                  \
  |  |  |  |   70|  41.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  18.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  18.3k|                    parse_integer_digits_without_thsep(
  363|  18.3k|                        ranges::subrange{prefix_result.iterator,
  364|  18.3k|                                         ranges::end(range)},
  365|  18.3k|                        prefix_result.parsed_base));
  366|       |
  367|  18.3k|            auto buf = make_contiguous_buffer(
  368|  18.3k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  18.3k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  18.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  18.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  18.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 18.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  18.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  18.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  18.3k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  18.3k|                                        prefix_result.parsed_base));
  372|       |
  373|  18.3k|            return ranges_polyfill::batch_next(
  374|  18.3k|                prefix_result.iterator,
  375|  18.3k|                ranges::distance(buf.view().begin(), result_it));
  376|  18.3k|        }
  377|       |
  378|  4.59k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.59k|            localized_number_formatting_options<CharT>{loc};
  383|  4.59k|#endif
  384|       |
  385|  4.59k|        SCN_TRY(
  ------------------
  |  |   71|  4.59k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.59k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.59k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.59k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.59k|    }                                                  \
  |  |  |  |   70|  4.59k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   206k|    {
  324|   206k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   206k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   206k|        return read_default_with_base(range, value, 0);
  326|   206k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   206k|    {
  287|   206k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   206k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   206k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   206k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 206k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   206k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   206k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   206k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   206k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   206k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   206k|                return unexpected_scan_error(
  293|   206k|                    scan_error::invalid_scanned_value,
  294|   206k|                    "Unexpected '-' sign when parsing an "
  295|   206k|                    "unsigned value");
  296|   206k|            }
  297|   206k|        }
  298|       |
  299|   206k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 73.6k, False: 133k]
  ------------------
  300|  73.6k|            value = T{0};
  301|  73.6k|            return std::next(prefix_result.iterator);
  302|  73.6k|        }
  303|       |
  304|   266k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   133k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   133k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   133k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 144, False: 132k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    144|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    144|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    144|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    144|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    144|    }                                                  \
  |  |  |  |   70|   133k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   132k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   266k|                                     ranges::subrange{prefix_result.iterator,
  306|   266k|                                                      ranges::end(range)},
  307|   266k|                                     prefix_result.parsed_base));
  308|       |
  309|   266k|        auto buf = make_contiguous_buffer(
  310|   266k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   266k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   132k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   132k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   132k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 19.4k, False: 113k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  19.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  19.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  19.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  19.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  19.4k|    }                                                  \
  |  |  |  |   70|   132k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   113k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   113k|                                    prefix_result.parsed_base));
  314|       |
  315|   113k|        return ranges_polyfill::batch_next(
  316|   113k|            prefix_result.iterator,
  317|   113k|            ranges::distance(buf.view().begin(), result_it));
  318|   266k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESE_i:
  120|  5.03M|{
  121|  5.03M|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|  5.03M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.03M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.03M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  5.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 5.03M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  5.03M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  5.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|  5.03M|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|  5.03M|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|  5.03M|        parse_integer_base_prefix(
  126|  5.03M|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|  5.03M|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 1.81M, False: 3.22M]
  ------------------
  129|  1.81M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 3.01k, False: 1.81M]
  ------------------
  130|  1.81M|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 1.23M, False: 580k]
  ------------------
  131|  1.23M|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|  1.23M|                digits_begin_it, ranges::begin(range));
  133|  1.23M|        }
  134|   580k|        else {
  135|   580k|            parsed_zero = false;
  136|   580k|        }
  137|  1.81M|    }
  138|  3.22M|    else {
  139|  3.22M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 7.30k, False: 3.21M]
  ------------------
  140|  3.22M|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 535k, False: 2.67M]
  ------------------
  141|   542k|            digits_begin_it = base_prefix_begin_it;
  142|   542k|        }
  143|  3.22M|    }
  144|       |
  145|  5.03M|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 4.78M, False: 256k]
  ------------------
  146|  4.78M|        sign = sign_type::plus_sign;
  147|  4.78M|    }
  148|  5.03M|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|  5.03M|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|  5.03M|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_i:
   87|  5.03M|{
   88|  5.03M|    switch (base) {
   89|   151k|        case 2:
  ------------------
  |  Branch (89:9): [True: 151k, False: 4.88M]
  ------------------
   90|       |            // allow 0b/0B
   91|   151k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|   151k|                    false};
   93|       |
   94|   255k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 255k, False: 4.78M]
  ------------------
   95|       |            // allow 0o/0O/0
   96|   255k|            bool zero_parsed = false;
   97|   255k|            auto it = apply_opt(
   98|   255k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|   255k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|   693k|        case 16:
  ------------------
  |  Branch (102:9): [True: 693k, False: 4.34M]
  ------------------
  103|       |            // allow 0x/0X
  104|   693k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|   693k|                    false};
  106|       |
  107|  3.26M|        case 0:
  ------------------
  |  Branch (107:9): [True: 3.26M, False: 1.77M]
  ------------------
  108|       |            // detect base
  109|  3.26M|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|  3.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|   675k|        default:
  ------------------
  |  Branch (111:9): [True: 675k, False: 4.36M]
  ------------------
  112|       |            // no base prefix allowed
  113|   675k|            return {ranges::begin(range), base, false};
  114|  5.03M|    }
  115|  5.03M|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   37|  3.38M|{
   38|  3.38M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|  3.38M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|  3.38M|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_Rb:
   52|  3.49M|{
   53|  3.49M|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 38.9k, False: 3.45M]
  ------------------
   54|  38.9k|        return *r;
   55|  38.9k|    }
   56|       |
   57|  3.45M|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 1.81M, False: 1.63M]
  ------------------
   58|  1.81M|        zero_parsed = true;
   59|  1.81M|        return *r;
   60|  1.81M|    }
   61|       |
   62|  1.63M|    return unexpected(parse_error::error);
   63|  3.45M|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   44|  3.95M|{
   45|  3.95M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  3.95M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  3.95M|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_:
   68|  3.26M|{
   69|  3.26M|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 26.1k, False: 3.23M]
  ------------------
   70|  26.1k|        return {*r, 16, false};
   71|  26.1k|    }
   72|  3.23M|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 1.60k, False: 3.23M]
  ------------------
   73|  1.60k|        return {*r, 2, false};
   74|  1.60k|    }
   75|  3.23M|    {
   76|  3.23M|        bool zero_parsed{false};
   77|  3.23M|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 1.73M, False: 1.50M]
  ------------------
   78|  1.73M|            return {*r, 8, zero_parsed};
   79|  1.73M|        }
   80|  3.23M|    }
   81|  1.50M|    return {ranges::begin(range), 10, false};
   82|  3.23M|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESD_i:
  155|  3.17M|{
  156|  3.17M|    using char_type = detail::char_t<Range>;
  157|       |
  158|  3.17M|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|  3.17M|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  3.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.33k, False: 3.17M]
  |  |  ------------------
  ------------------
  160|  2.33k|            return unexpected_scan_error(
  161|  2.33k|                scan_error::invalid_scanned_value,
  162|  2.33k|                "Failed to parse integer: No digits found");
  163|  2.33k|        }
  164|  3.17M|        return ranges::end(range);
  165|  3.17M|    }
  166|  3.17M|    else {
  167|  3.17M|        return read_while1_code_unit(
  168|  3.17M|                   range, [&](char_type ch)
  169|  3.17M|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|  3.17M|            .transform_error(map_parse_error_to_scan_error(
  171|  3.17M|                scan_error::invalid_scanned_value,
  172|  3.17M|                "Failed to parse integer: No digits found"));
  173|  3.17M|    }
  174|  3.17M|}
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   260k|    {
  324|   260k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   260k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   260k|        return read_default_with_base(range, value, 0);
  326|   260k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   260k|    {
  287|   260k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   260k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   260k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   260k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   260k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 260k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   260k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   260k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   260k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   260k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   260k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   260k|                return unexpected_scan_error(
  293|   260k|                    scan_error::invalid_scanned_value,
  294|   260k|                    "Unexpected '-' sign when parsing an "
  295|   260k|                    "unsigned value");
  296|   260k|            }
  297|   260k|        }
  298|       |
  299|   260k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 92.5k, False: 167k]
  ------------------
  300|  92.5k|            value = T{0};
  301|  92.5k|            return std::next(prefix_result.iterator);
  302|  92.5k|        }
  303|       |
  304|   335k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   167k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   167k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   167k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   167k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 165, False: 167k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    165|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    165|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    165|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    165|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    165|    }                                                  \
  |  |  |  |   70|   167k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   335k|                                     ranges::subrange{prefix_result.iterator,
  306|   335k|                                                      ranges::end(range)},
  307|   335k|                                     prefix_result.parsed_base));
  308|       |
  309|   335k|        auto buf = make_contiguous_buffer(
  310|   335k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   335k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   167k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   167k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   167k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   167k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 18.7k, False: 148k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  18.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  18.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  18.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  18.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  18.7k|    }                                                  \
  |  |  |  |   70|   167k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   148k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   148k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   148k|                                    prefix_result.parsed_base));
  314|       |
  315|   148k|        return ranges_polyfill::batch_next(
  316|   148k|            prefix_result.iterator,
  317|   148k|            ranges::distance(buf.view().begin(), result_it));
  318|   335k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   277k|    {
  324|   277k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   277k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   277k|        return read_default_with_base(range, value, 0);
  326|   277k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   277k|    {
  287|   277k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   277k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   277k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   277k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 277k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   277k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   277k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   277k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   277k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   277k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   277k|                return unexpected_scan_error(
  293|   277k|                    scan_error::invalid_scanned_value,
  294|   277k|                    "Unexpected '-' sign when parsing an "
  295|   277k|                    "unsigned value");
  296|   277k|            }
  297|   277k|        }
  298|       |
  299|   277k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 93.9k, False: 183k]
  ------------------
  300|  93.9k|            value = T{0};
  301|  93.9k|            return std::next(prefix_result.iterator);
  302|  93.9k|        }
  303|       |
  304|   366k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   183k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   183k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   183k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 177, False: 182k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    177|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    177|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    177|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    177|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    177|    }                                                  \
  |  |  |  |   70|   183k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   182k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   366k|                                     ranges::subrange{prefix_result.iterator,
  306|   366k|                                                      ranges::end(range)},
  307|   366k|                                     prefix_result.parsed_base));
  308|       |
  309|   366k|        auto buf = make_contiguous_buffer(
  310|   366k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   366k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   182k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   182k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   182k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   182k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 18.5k, False: 164k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  18.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  18.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  18.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  18.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  18.5k|    }                                                  \
  |  |  |  |   70|   182k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   164k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   164k|                                    prefix_result.parsed_base));
  314|       |
  315|   164k|        return ranges_polyfill::batch_next(
  316|   164k|            prefix_result.iterator,
  317|   164k|            ranges::distance(buf.view().begin(), result_it));
  318|   366k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   197k|    {
  324|   197k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   197k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   197k|        return read_default_with_base(range, value, 0);
  326|   197k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   197k|    {
  287|   197k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   197k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   197k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   197k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   197k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 197k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   197k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   197k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   197k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   197k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   197k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.00k, False: 195k]
  ------------------
  292|  2.00k|                return unexpected_scan_error(
  293|  2.00k|                    scan_error::invalid_scanned_value,
  294|  2.00k|                    "Unexpected '-' sign when parsing an "
  295|  2.00k|                    "unsigned value");
  296|  2.00k|            }
  297|   197k|        }
  298|       |
  299|   195k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 73.7k, False: 121k]
  ------------------
  300|  73.7k|            value = T{0};
  301|  73.7k|            return std::next(prefix_result.iterator);
  302|  73.7k|        }
  303|       |
  304|   243k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   121k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   121k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   121k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 51, False: 121k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     51|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     51|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     51|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     51|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     51|    }                                                  \
  |  |  |  |   70|   121k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   121k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   243k|                                     ranges::subrange{prefix_result.iterator,
  306|   243k|                                                      ranges::end(range)},
  307|   243k|                                     prefix_result.parsed_base));
  308|       |
  309|   243k|        auto buf = make_contiguous_buffer(
  310|   243k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   243k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   121k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   121k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   121k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 17.6k, False: 104k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  17.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  17.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  17.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  17.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  17.6k|    }                                                  \
  |  |  |  |   70|   121k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   104k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   104k|                                    prefix_result.parsed_base));
  314|       |
  315|   104k|        return ranges_polyfill::batch_next(
  316|   104k|            prefix_result.iterator,
  317|   104k|            ranges::distance(buf.view().begin(), result_it));
  318|   243k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   225k|    {
  324|   225k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   225k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   225k|        return read_default_with_base(range, value, 0);
  326|   225k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   225k|    {
  287|   225k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   225k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   225k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   225k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 225k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   225k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   225k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   225k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   225k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   225k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.09k, False: 223k]
  ------------------
  292|  2.09k|                return unexpected_scan_error(
  293|  2.09k|                    scan_error::invalid_scanned_value,
  294|  2.09k|                    "Unexpected '-' sign when parsing an "
  295|  2.09k|                    "unsigned value");
  296|  2.09k|            }
  297|   225k|        }
  298|       |
  299|   223k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 80.8k, False: 142k]
  ------------------
  300|  80.8k|            value = T{0};
  301|  80.8k|            return std::next(prefix_result.iterator);
  302|  80.8k|        }
  303|       |
  304|   284k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   142k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   142k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   142k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 51, False: 142k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     51|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     51|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     51|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     51|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     51|    }                                                  \
  |  |  |  |   70|   142k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   284k|                                     ranges::subrange{prefix_result.iterator,
  306|   284k|                                                      ranges::end(range)},
  307|   284k|                                     prefix_result.parsed_base));
  308|       |
  309|   284k|        auto buf = make_contiguous_buffer(
  310|   284k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   284k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   142k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   142k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   142k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 17.1k, False: 125k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  17.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  17.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  17.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  17.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  17.1k|    }                                                  \
  |  |  |  |   70|   142k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   125k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   125k|                                    prefix_result.parsed_base));
  314|       |
  315|   125k|        return ranges_polyfill::batch_next(
  316|   125k|            prefix_result.iterator,
  317|   125k|            ranges::distance(buf.view().begin(), result_it));
  318|   284k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   231k|    {
  324|   231k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   231k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   231k|        return read_default_with_base(range, value, 0);
  326|   231k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   231k|    {
  287|   231k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   231k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   231k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   231k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   231k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 231k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   231k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   231k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   231k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   231k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   231k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.16k, False: 229k]
  ------------------
  292|  2.16k|                return unexpected_scan_error(
  293|  2.16k|                    scan_error::invalid_scanned_value,
  294|  2.16k|                    "Unexpected '-' sign when parsing an "
  295|  2.16k|                    "unsigned value");
  296|  2.16k|            }
  297|   231k|        }
  298|       |
  299|   229k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 81.6k, False: 148k]
  ------------------
  300|  81.6k|            value = T{0};
  301|  81.6k|            return std::next(prefix_result.iterator);
  302|  81.6k|        }
  303|       |
  304|   296k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   148k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   148k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   148k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 54, False: 148k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     54|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     54|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     54|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     54|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     54|    }                                                  \
  |  |  |  |   70|   148k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   148k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   296k|                                     ranges::subrange{prefix_result.iterator,
  306|   296k|                                                      ranges::end(range)},
  307|   296k|                                     prefix_result.parsed_base));
  308|       |
  309|   296k|        auto buf = make_contiguous_buffer(
  310|   296k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   296k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   148k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   148k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   148k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 16.9k, False: 131k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  16.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  16.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  16.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  16.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  16.9k|    }                                                  \
  |  |  |  |   70|   148k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   131k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   131k|                                    prefix_result.parsed_base));
  314|       |
  315|   131k|        return ranges_polyfill::batch_next(
  316|   131k|            prefix_result.iterator,
  317|   131k|            ranges::distance(buf.view().begin(), result_it));
  318|   296k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSC_12basic_stringIT0_NSC_11char_traitsISJ_EENSC_9allocatorISJ_EEEENSI_IcNSK_IcEENSM_IcEEEEEEEEESF_iRKNS1_35localized_number_formatting_optionsISJ_EE:
  184|   595k|{
  185|   595k|    std::basic_string<CharT> output;
  186|   595k|    std::string thsep_indices;
  187|   595k|    auto it = ranges::begin(range);
  188|   595k|    bool digit_matched = false;
  189|  1.71M|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 1.70M, False: 7.49k]
  ------------------
  190|  1.70M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 31.8k, False: 1.67M]
  ------------------
  191|  31.8k|            thsep_indices.push_back(static_cast<char>(
  192|  31.8k|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|  31.8k|        }
  194|  1.67M|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 588k, False: 1.08M]
  ------------------
  195|   588k|            break;
  196|   588k|        }
  197|  1.08M|        else {
  198|  1.08M|            output.push_back(*it);
  199|  1.08M|            digit_matched = true;
  200|  1.08M|        }
  201|  1.70M|    }
  202|   595k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|   595k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 66.4k, False: 529k]
  |  |  ------------------
  ------------------
  203|  66.4k|        return unexpected_scan_error(
  204|  66.4k|            scan_error::invalid_scanned_value,
  205|  66.4k|            "Failed to parse integer: No digits found");
  206|  66.4k|    }
  207|   529k|    return std::tuple{it, output, thsep_indices};
  208|   595k|}
_ZN3scn2v24impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  279|  4.71M|    {
  280|  4.71M|        detail::check_int_type_specs(specs, eh);
  281|  4.71M|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   489k|    {
  335|   489k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   489k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   489k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   489k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   489k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 489k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   489k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   489k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   489k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   489k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 38.4k, False: 451k]
  ------------------
  339|  38.4k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  38.4k|                return unexpected_scan_error(
  341|  38.4k|                    scan_error::invalid_scanned_value,
  342|  38.4k|                    "Unexpected '-' sign when parsing an "
  343|  38.4k|                    "unsigned value");
  344|  38.4k|            }
  345|  38.4k|            else {
  346|  38.4k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 38.4k]
  ------------------
  347|  38.4k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  38.4k|            }
  353|  38.4k|        }
  354|       |
  355|   489k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 111k, False: 378k]
  ------------------
  356|   111k|            value = T{0};
  357|   111k|            return std::next(prefix_result.iterator);
  358|   111k|        }
  359|       |
  360|   378k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   378k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 290k, False: 88.4k]
  |  |  ------------------
  ------------------
  361|   290k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   290k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   290k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   290k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   290k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 380, False: 289k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    380|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    380|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    380|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    380|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    380|    }                                                  \
  |  |  |  |   70|   290k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   289k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   289k|                    parse_integer_digits_without_thsep(
  363|   289k|                        ranges::subrange{prefix_result.iterator,
  364|   289k|                                         ranges::end(range)},
  365|   289k|                        prefix_result.parsed_base));
  366|       |
  367|   289k|            auto buf = make_contiguous_buffer(
  368|   289k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   289k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   289k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   289k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   289k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   289k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 65.9k, False: 223k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  65.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  65.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  65.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  65.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  65.9k|    }                                                  \
  |  |  |  |   70|   289k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   223k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   223k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   223k|                                        prefix_result.parsed_base));
  372|       |
  373|   223k|            return ranges_polyfill::batch_next(
  374|   223k|                prefix_result.iterator,
  375|   223k|                ranges::distance(buf.view().begin(), result_it));
  376|   289k|        }
  377|       |
  378|  88.4k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  88.4k|            localized_number_formatting_options<CharT>{loc};
  383|  88.4k|#endif
  384|       |
  385|  88.4k|        SCN_TRY(
  ------------------
  |  |   71|  88.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  88.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  88.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  88.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.9k, False: 77.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.9k|    }                                                  \
  |  |  |  |   70|  88.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  77.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  77.4k|            parse_digits_result,
  387|  77.4k|            parse_integer_digits_with_thsep(
  388|  77.4k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  77.4k|                prefix_result.parsed_base, locale_options));
  390|  77.4k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  77.4k|            parse_digits_result;
  392|       |
  393|  77.4k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 518, False: 76.9k]
  ------------------
  394|    518|            if (auto e = check_thsep_grouping(
  395|    518|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    518|                    thsep_indices, locale_options.grouping);
  397|    518|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    518|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 502, False: 16]
  |  |  ------------------
  ------------------
  398|    502|                return unexpected(e);
  399|    502|            }
  400|    518|        }
  401|       |
  402|  76.9k|        auto nothsep_source_view =
  403|  76.9k|            std::basic_string_view<CharT>{nothsep_source};
  404|  76.9k|        SCN_TRY(
  ------------------
  |  |   71|  76.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  76.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  76.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  76.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.56k, False: 75.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.56k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.56k|    }                                                  \
  |  |  |  |   70|  76.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  75.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  75.4k|            nothsep_source_it,
  406|  75.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  75.4k|                                prefix_result.parsed_base));
  408|       |
  409|  75.4k|        return ranges_polyfill::batch_next(
  410|  75.4k|            prefix_result.iterator,
  411|  75.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  75.4k|                ranges::ssize(thsep_indices));
  413|  76.9k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   701k|    {
  335|   701k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   701k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   701k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   701k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   701k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 701k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   701k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   701k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   701k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   701k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 44.9k, False: 656k]
  ------------------
  339|  44.9k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  44.9k|                return unexpected_scan_error(
  341|  44.9k|                    scan_error::invalid_scanned_value,
  342|  44.9k|                    "Unexpected '-' sign when parsing an "
  343|  44.9k|                    "unsigned value");
  344|  44.9k|            }
  345|  44.9k|            else {
  346|  44.9k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 44.9k]
  ------------------
  347|  44.9k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  44.9k|            }
  353|  44.9k|        }
  354|       |
  355|   701k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 137k, False: 563k]
  ------------------
  356|   137k|            value = T{0};
  357|   137k|            return std::next(prefix_result.iterator);
  358|   137k|        }
  359|       |
  360|   563k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   563k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 452k, False: 111k]
  |  |  ------------------
  ------------------
  361|   452k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   452k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   452k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   452k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 452, False: 451k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    452|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    452|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    452|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    452|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    452|    }                                                  \
  |  |  |  |   70|   452k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   451k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   451k|                    parse_integer_digits_without_thsep(
  363|   451k|                        ranges::subrange{prefix_result.iterator,
  364|   451k|                                         ranges::end(range)},
  365|   451k|                        prefix_result.parsed_base));
  366|       |
  367|   451k|            auto buf = make_contiguous_buffer(
  368|   451k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   451k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   451k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   451k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   451k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   451k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 64.2k, False: 387k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  64.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  64.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  64.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  64.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  64.2k|    }                                                  \
  |  |  |  |   70|   451k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   387k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   387k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   387k|                                        prefix_result.parsed_base));
  372|       |
  373|   387k|            return ranges_polyfill::batch_next(
  374|   387k|                prefix_result.iterator,
  375|   387k|                ranges::distance(buf.view().begin(), result_it));
  376|   451k|        }
  377|       |
  378|   111k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   111k|            localized_number_formatting_options<CharT>{loc};
  383|   111k|#endif
  384|       |
  385|   111k|        SCN_TRY(
  ------------------
  |  |   71|   111k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   111k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   111k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.4k, False: 100k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.4k|    }                                                  \
  |  |  |  |   70|   111k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   100k|            parse_digits_result,
  387|   100k|            parse_integer_digits_with_thsep(
  388|   100k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   100k|                prefix_result.parsed_base, locale_options));
  390|   100k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   100k|            parse_digits_result;
  392|       |
  393|   100k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 584, False: 99.4k]
  ------------------
  394|    584|            if (auto e = check_thsep_grouping(
  395|    584|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    584|                    thsep_indices, locale_options.grouping);
  397|    584|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    584|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 568, False: 16]
  |  |  ------------------
  ------------------
  398|    568|                return unexpected(e);
  399|    568|            }
  400|    584|        }
  401|       |
  402|  99.4k|        auto nothsep_source_view =
  403|  99.4k|            std::basic_string_view<CharT>{nothsep_source};
  404|  99.4k|        SCN_TRY(
  ------------------
  |  |   71|  99.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  99.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  99.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  99.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 522, False: 98.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    522|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    522|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    522|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    522|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    522|    }                                                  \
  |  |  |  |   70|  99.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  98.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  98.9k|            nothsep_source_it,
  406|  98.9k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  98.9k|                                prefix_result.parsed_base));
  408|       |
  409|  98.9k|        return ranges_polyfill::batch_next(
  410|  98.9k|            prefix_result.iterator,
  411|  98.9k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  98.9k|                ranges::ssize(thsep_indices));
  413|  99.4k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   742k|    {
  335|   742k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   742k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   742k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   742k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   742k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 742k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   742k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   742k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   742k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   742k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 45.8k, False: 696k]
  ------------------
  339|  45.8k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  45.8k|                return unexpected_scan_error(
  341|  45.8k|                    scan_error::invalid_scanned_value,
  342|  45.8k|                    "Unexpected '-' sign when parsing an "
  343|  45.8k|                    "unsigned value");
  344|  45.8k|            }
  345|  45.8k|            else {
  346|  45.8k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 45.8k]
  ------------------
  347|  45.8k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  45.8k|            }
  353|  45.8k|        }
  354|       |
  355|   742k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 139k, False: 602k]
  ------------------
  356|   139k|            value = T{0};
  357|   139k|            return std::next(prefix_result.iterator);
  358|   139k|        }
  359|       |
  360|   602k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   602k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 481k, False: 121k]
  |  |  ------------------
  ------------------
  361|   481k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   481k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   481k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   481k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   481k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 482, False: 480k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    482|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    482|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    482|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    482|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    482|    }                                                  \
  |  |  |  |   70|   481k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   480k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   480k|                    parse_integer_digits_without_thsep(
  363|   480k|                        ranges::subrange{prefix_result.iterator,
  364|   480k|                                         ranges::end(range)},
  365|   480k|                        prefix_result.parsed_base));
  366|       |
  367|   480k|            auto buf = make_contiguous_buffer(
  368|   480k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   480k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   480k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   480k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   480k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   480k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 63.9k, False: 416k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  63.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  63.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  63.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  63.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  63.9k|    }                                                  \
  |  |  |  |   70|   480k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   416k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   416k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   416k|                                        prefix_result.parsed_base));
  372|       |
  373|   416k|            return ranges_polyfill::batch_next(
  374|   416k|                prefix_result.iterator,
  375|   416k|                ranges::distance(buf.view().begin(), result_it));
  376|   480k|        }
  377|       |
  378|   121k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   121k|            localized_number_formatting_options<CharT>{loc};
  383|   121k|#endif
  384|       |
  385|   121k|        SCN_TRY(
  ------------------
  |  |   71|   121k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   121k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   121k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.6k, False: 109k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.6k|    }                                                  \
  |  |  |  |   70|   121k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   109k|            parse_digits_result,
  387|   109k|            parse_integer_digits_with_thsep(
  388|   109k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   109k|                prefix_result.parsed_base, locale_options));
  390|   109k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   109k|            parse_digits_result;
  392|       |
  393|   109k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 620, False: 109k]
  ------------------
  394|    620|            if (auto e = check_thsep_grouping(
  395|    620|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    620|                    thsep_indices, locale_options.grouping);
  397|    620|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    620|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 602, False: 18]
  |  |  ------------------
  ------------------
  398|    602|                return unexpected(e);
  399|    602|            }
  400|    620|        }
  401|       |
  402|   109k|        auto nothsep_source_view =
  403|   109k|            std::basic_string_view<CharT>{nothsep_source};
  404|   109k|        SCN_TRY(
  ------------------
  |  |   71|   109k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   109k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   109k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 226, False: 109k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    226|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    226|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    226|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    226|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    226|    }                                                  \
  |  |  |  |   70|   109k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   109k|            nothsep_source_it,
  406|   109k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|   109k|                                prefix_result.parsed_base));
  408|       |
  409|   109k|        return ranges_polyfill::batch_next(
  410|   109k|            prefix_result.iterator,
  411|   109k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|   109k|                ranges::ssize(thsep_indices));
  413|   109k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   490k|    {
  335|   490k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   490k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   490k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   490k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   490k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 490k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   490k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   490k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   490k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   490k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 7.03k, False: 483k]
  ------------------
  339|  7.03k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  7.03k|                return unexpected_scan_error(
  341|  7.03k|                    scan_error::invalid_scanned_value,
  342|  7.03k|                    "Unexpected '-' sign when parsing an "
  343|  7.03k|                    "unsigned value");
  344|  7.03k|            }
  345|  7.03k|            else {
  346|  7.03k|                if (specs.type ==
  347|  7.03k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  7.03k|                    return unexpected_scan_error(
  349|  7.03k|                        scan_error::invalid_scanned_value,
  350|  7.03k|                        "'u'-option disallows negative values");
  351|  7.03k|                }
  352|  7.03k|            }
  353|  7.03k|        }
  354|       |
  355|   483k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 109k, False: 373k]
  ------------------
  356|   109k|            value = T{0};
  357|   109k|            return std::next(prefix_result.iterator);
  358|   109k|        }
  359|       |
  360|   373k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   373k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 292k, False: 81.0k]
  |  |  ------------------
  ------------------
  361|   292k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   292k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   292k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   292k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   292k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 120, False: 292k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    120|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    120|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    120|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    120|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    120|    }                                                  \
  |  |  |  |   70|   292k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   292k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   292k|                    parse_integer_digits_without_thsep(
  363|   292k|                        ranges::subrange{prefix_result.iterator,
  364|   292k|                                         ranges::end(range)},
  365|   292k|                        prefix_result.parsed_base));
  366|       |
  367|   292k|            auto buf = make_contiguous_buffer(
  368|   292k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   292k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   292k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   292k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   292k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   292k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 60.7k, False: 231k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  60.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  60.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  60.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  60.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  60.7k|    }                                                  \
  |  |  |  |   70|   292k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   231k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   231k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   231k|                                        prefix_result.parsed_base));
  372|       |
  373|   231k|            return ranges_polyfill::batch_next(
  374|   231k|                prefix_result.iterator,
  375|   231k|                ranges::distance(buf.view().begin(), result_it));
  376|   292k|        }
  377|       |
  378|  81.0k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  81.0k|            localized_number_formatting_options<CharT>{loc};
  383|  81.0k|#endif
  384|       |
  385|  81.0k|        SCN_TRY(
  ------------------
  |  |   71|  81.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  81.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  81.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  81.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.5k, False: 70.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.5k|    }                                                  \
  |  |  |  |   70|  81.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  70.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  70.4k|            parse_digits_result,
  387|  70.4k|            parse_integer_digits_with_thsep(
  388|  70.4k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  70.4k|                prefix_result.parsed_base, locale_options));
  390|  70.4k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  70.4k|            parse_digits_result;
  392|       |
  393|  70.4k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 358, False: 70.1k]
  ------------------
  394|    358|            if (auto e = check_thsep_grouping(
  395|    358|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    358|                    thsep_indices, locale_options.grouping);
  397|    358|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    358|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 354, False: 4]
  |  |  ------------------
  ------------------
  398|    354|                return unexpected(e);
  399|    354|            }
  400|    358|        }
  401|       |
  402|  70.1k|        auto nothsep_source_view =
  403|  70.1k|            std::basic_string_view<CharT>{nothsep_source};
  404|  70.1k|        SCN_TRY(
  ------------------
  |  |   71|  70.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  70.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  70.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  70.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 842, False: 69.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    842|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    842|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    842|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    842|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    842|    }                                                  \
  |  |  |  |   70|  70.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  69.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  69.2k|            nothsep_source_it,
  406|  69.2k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  69.2k|                                prefix_result.parsed_base));
  408|       |
  409|  69.2k|        return ranges_polyfill::batch_next(
  410|  69.2k|            prefix_result.iterator,
  411|  69.2k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  69.2k|                ranges::ssize(thsep_indices));
  413|  70.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   596k|    {
  335|   596k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   596k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   596k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   596k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   596k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 596k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   596k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   596k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   596k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   596k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 7.35k, False: 589k]
  ------------------
  339|  7.35k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  7.35k|                return unexpected_scan_error(
  341|  7.35k|                    scan_error::invalid_scanned_value,
  342|  7.35k|                    "Unexpected '-' sign when parsing an "
  343|  7.35k|                    "unsigned value");
  344|  7.35k|            }
  345|  7.35k|            else {
  346|  7.35k|                if (specs.type ==
  347|  7.35k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  7.35k|                    return unexpected_scan_error(
  349|  7.35k|                        scan_error::invalid_scanned_value,
  350|  7.35k|                        "'u'-option disallows negative values");
  351|  7.35k|                }
  352|  7.35k|            }
  353|  7.35k|        }
  354|       |
  355|   589k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 119k, False: 470k]
  ------------------
  356|   119k|            value = T{0};
  357|   119k|            return std::next(prefix_result.iterator);
  358|   119k|        }
  359|       |
  360|   470k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   470k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 375k, False: 94.5k]
  |  |  ------------------
  ------------------
  361|   375k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   375k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   375k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   375k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   375k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 126, False: 375k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    126|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    126|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    126|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    126|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    126|    }                                                  \
  |  |  |  |   70|   375k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   375k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   375k|                    parse_integer_digits_without_thsep(
  363|   375k|                        ranges::subrange{prefix_result.iterator,
  364|   375k|                                         ranges::end(range)},
  365|   375k|                        prefix_result.parsed_base));
  366|       |
  367|   375k|            auto buf = make_contiguous_buffer(
  368|   375k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   375k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   375k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   375k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   375k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   375k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 59.4k, False: 315k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  59.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  59.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  59.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  59.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  59.4k|    }                                                  \
  |  |  |  |   70|   375k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   315k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   315k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   315k|                                        prefix_result.parsed_base));
  372|       |
  373|   315k|            return ranges_polyfill::batch_next(
  374|   315k|                prefix_result.iterator,
  375|   315k|                ranges::distance(buf.view().begin(), result_it));
  376|   375k|        }
  377|       |
  378|  94.5k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  94.5k|            localized_number_formatting_options<CharT>{loc};
  383|  94.5k|#endif
  384|       |
  385|  94.5k|        SCN_TRY(
  ------------------
  |  |   71|  94.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  94.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  94.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  94.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.7k, False: 83.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.7k|    }                                                  \
  |  |  |  |   70|  94.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  83.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  83.7k|            parse_digits_result,
  387|  83.7k|            parse_integer_digits_with_thsep(
  388|  83.7k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  83.7k|                prefix_result.parsed_base, locale_options));
  390|  83.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  83.7k|            parse_digits_result;
  392|       |
  393|  83.7k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 400, False: 83.3k]
  ------------------
  394|    400|            if (auto e = check_thsep_grouping(
  395|    400|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    400|                    thsep_indices, locale_options.grouping);
  397|    400|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    400|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 396, False: 4]
  |  |  ------------------
  ------------------
  398|    396|                return unexpected(e);
  399|    396|            }
  400|    400|        }
  401|       |
  402|  83.3k|        auto nothsep_source_view =
  403|  83.3k|            std::basic_string_view<CharT>{nothsep_source};
  404|  83.3k|        SCN_TRY(
  ------------------
  |  |   71|  83.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  83.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  83.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  83.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 282, False: 83.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    282|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    282|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    282|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    282|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    282|    }                                                  \
  |  |  |  |   70|  83.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  83.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  83.0k|            nothsep_source_it,
  406|  83.0k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  83.0k|                                prefix_result.parsed_base));
  408|       |
  409|  83.0k|        return ranges_polyfill::batch_next(
  410|  83.0k|            prefix_result.iterator,
  411|  83.0k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  83.0k|                ranges::ssize(thsep_indices));
  413|  83.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   617k|    {
  335|   617k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   617k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   617k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   617k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   617k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 617k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   617k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   617k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   617k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   617k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 7.54k, False: 610k]
  ------------------
  339|  7.54k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  7.54k|                return unexpected_scan_error(
  341|  7.54k|                    scan_error::invalid_scanned_value,
  342|  7.54k|                    "Unexpected '-' sign when parsing an "
  343|  7.54k|                    "unsigned value");
  344|  7.54k|            }
  345|  7.54k|            else {
  346|  7.54k|                if (specs.type ==
  347|  7.54k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  7.54k|                    return unexpected_scan_error(
  349|  7.54k|                        scan_error::invalid_scanned_value,
  350|  7.54k|                        "'u'-option disallows negative values");
  351|  7.54k|                }
  352|  7.54k|            }
  353|  7.54k|        }
  354|       |
  355|   610k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 120k, False: 490k]
  ------------------
  356|   120k|            value = T{0};
  357|   120k|            return std::next(prefix_result.iterator);
  358|   120k|        }
  359|       |
  360|   490k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   490k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 391k, False: 98.4k]
  |  |  ------------------
  ------------------
  361|   391k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   391k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   391k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   391k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   391k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 132, False: 391k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    132|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    132|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    132|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    132|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    132|    }                                                  \
  |  |  |  |   70|   391k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   391k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   391k|                    parse_integer_digits_without_thsep(
  363|   391k|                        ranges::subrange{prefix_result.iterator,
  364|   391k|                                         ranges::end(range)},
  365|   391k|                        prefix_result.parsed_base));
  366|       |
  367|   391k|            auto buf = make_contiguous_buffer(
  368|   391k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   391k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   391k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   391k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   391k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   391k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 59.1k, False: 332k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  59.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  59.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  59.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  59.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  59.1k|    }                                                  \
  |  |  |  |   70|   391k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   332k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   332k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   332k|                                        prefix_result.parsed_base));
  372|       |
  373|   332k|            return ranges_polyfill::batch_next(
  374|   332k|                prefix_result.iterator,
  375|   332k|                ranges::distance(buf.view().begin(), result_it));
  376|   391k|        }
  377|       |
  378|  98.4k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  98.4k|            localized_number_formatting_options<CharT>{loc};
  383|  98.4k|#endif
  384|       |
  385|  98.4k|        SCN_TRY(
  ------------------
  |  |   71|  98.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  98.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  98.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  98.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.8k, False: 87.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.8k|    }                                                  \
  |  |  |  |   70|  98.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  87.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  87.6k|            parse_digits_result,
  387|  87.6k|            parse_integer_digits_with_thsep(
  388|  87.6k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  87.6k|                prefix_result.parsed_base, locale_options));
  390|  87.6k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  87.6k|            parse_digits_result;
  392|       |
  393|  87.6k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 404, False: 87.2k]
  ------------------
  394|    404|            if (auto e = check_thsep_grouping(
  395|    404|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    404|                    thsep_indices, locale_options.grouping);
  397|    404|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    404|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 400, False: 4]
  |  |  ------------------
  ------------------
  398|    400|                return unexpected(e);
  399|    400|            }
  400|    404|        }
  401|       |
  402|  87.2k|        auto nothsep_source_view =
  403|  87.2k|            std::basic_string_view<CharT>{nothsep_source};
  404|  87.2k|        SCN_TRY(
  ------------------
  |  |   71|  87.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  87.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  87.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  87.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 92, False: 87.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     92|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     92|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     92|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     92|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     92|    }                                                  \
  |  |  |  |   70|  87.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  87.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  87.1k|            nothsep_source_it,
  406|  87.1k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  87.1k|                                prefix_result.parsed_base));
  408|       |
  409|  87.1k|        return ranges_polyfill::batch_next(
  410|  87.1k|            prefix_result.iterator,
  411|  87.1k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  87.1k|                ranges::ssize(thsep_indices));
  413|  87.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  41.3k|    {
  324|  41.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  41.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  41.3k|        return read_default_with_base(range, value, 0);
  326|  41.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  41.3k|    {
  287|  41.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  41.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  41.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 41.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  41.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  41.3k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  41.3k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  41.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  41.3k|                return unexpected_scan_error(
  293|  41.3k|                    scan_error::invalid_scanned_value,
  294|  41.3k|                    "Unexpected '-' sign when parsing an "
  295|  41.3k|                    "unsigned value");
  296|  41.3k|            }
  297|  41.3k|        }
  298|       |
  299|  41.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 3, False: 41.3k]
  ------------------
  300|      3|            value = T{0};
  301|      3|            return std::next(prefix_result.iterator);
  302|      3|        }
  303|       |
  304|  62.0k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  41.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  41.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20.6k, False: 20.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  20.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  20.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  20.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  20.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  20.6k|    }                                                  \
  |  |  |  |   70|  41.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  20.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  62.0k|                                     ranges::subrange{prefix_result.iterator,
  306|  62.0k|                                                      ranges::end(range)},
  307|  62.0k|                                     prefix_result.parsed_base));
  308|       |
  309|  62.0k|        auto buf = make_contiguous_buffer(
  310|  62.0k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  62.0k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  20.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  20.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  20.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  20.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 20.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  20.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  20.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  20.6k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  20.6k|                                    prefix_result.parsed_base));
  314|       |
  315|  20.6k|        return ranges_polyfill::batch_next(
  316|  20.6k|            prefix_result.iterator,
  317|  20.6k|            ranges::distance(buf.view().begin(), result_it));
  318|  62.0k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESH_i:
  120|  1.29M|{
  121|  1.29M|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|  1.29M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.29M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.29M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.29M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.29M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|  1.29M|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|  1.29M|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|  1.29M|        parse_integer_base_prefix(
  126|  1.29M|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|  1.29M|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 372k, False: 923k]
  ------------------
  129|   372k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 54, False: 372k]
  ------------------
  130|   372k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 0, False: 372k]
  ------------------
  131|     54|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|     54|                digits_begin_it, ranges::begin(range));
  133|     54|        }
  134|   372k|        else {
  135|   372k|            parsed_zero = false;
  136|   372k|        }
  137|   372k|    }
  138|   923k|    else {
  139|   923k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 8, False: 923k]
  ------------------
  140|   923k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 592k, False: 330k]
  ------------------
  141|   592k|            digits_begin_it = base_prefix_begin_it;
  142|   592k|        }
  143|   923k|    }
  144|       |
  145|  1.29M|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 1.24M, False: 55.0k]
  ------------------
  146|  1.24M|        sign = sign_type::plus_sign;
  147|  1.24M|    }
  148|  1.29M|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|  1.29M|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|  1.29M|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_i:
   87|  1.29M|{
   88|  1.29M|    switch (base) {
   89|   165k|        case 2:
  ------------------
  |  Branch (89:9): [True: 165k, False: 1.13M]
  ------------------
   90|       |            // allow 0b/0B
   91|   165k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|   165k|                    false};
   93|       |
   94|   165k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 165k, False: 1.13M]
  ------------------
   95|       |            // allow 0o/0O/0
   96|   165k|            bool zero_parsed = false;
   97|   165k|            auto it = apply_opt(
   98|   165k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|   165k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|   220k|        case 16:
  ------------------
  |  Branch (102:9): [True: 220k, False: 1.07M]
  ------------------
  103|       |            // allow 0x/0X
  104|   220k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|   220k|                    false};
  106|       |
  107|   578k|        case 0:
  ------------------
  |  Branch (107:9): [True: 578k, False: 716k]
  ------------------
  108|       |            // detect base
  109|   578k|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|   578k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|   165k|        default:
  ------------------
  |  Branch (111:9): [True: 165k, False: 1.13M]
  ------------------
  112|       |            // no base prefix allowed
  113|   165k|            return {ranges::begin(range), base, false};
  114|  1.29M|    }
  115|  1.29M|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   37|   744k|{
   38|   744k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|   744k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|   744k|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_Rb:
   52|   744k|{
   53|   744k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 0, False: 744k]
  ------------------
   54|      0|        return *r;
   55|      0|    }
   56|       |
   57|   744k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 372k, False: 372k]
  ------------------
   58|   372k|        zero_parsed = true;
   59|   372k|        return *r;
   60|   372k|    }
   61|       |
   62|   372k|    return unexpected(parse_error::error);
   63|   744k|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   44|   799k|{
   45|   799k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|   799k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   799k|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_:
   68|   578k|{
   69|   578k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 0, False: 578k]
  ------------------
   70|      0|        return {*r, 16, false};
   71|      0|    }
   72|   578k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 0, False: 578k]
  ------------------
   73|      0|        return {*r, 2, false};
   74|      0|    }
   75|   578k|    {
   76|   578k|        bool zero_parsed{false};
   77|   578k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 289k, False: 289k]
  ------------------
   78|   289k|            return {*r, 8, zero_parsed};
   79|   289k|        }
   80|   578k|    }
   81|   289k|    return {ranges::begin(range), 10, false};
   82|   578k|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_i:
  155|  1.10M|{
  156|  1.10M|    using char_type = detail::char_t<Range>;
  157|       |
  158|  1.10M|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|  1.10M|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  160|  1.10M|            return unexpected_scan_error(
  161|  1.10M|                scan_error::invalid_scanned_value,
  162|  1.10M|                "Failed to parse integer: No digits found");
  163|  1.10M|        }
  164|  1.10M|        return ranges::end(range);
  165|  1.10M|    }
  166|  1.10M|    else {
  167|  1.10M|        return read_while1_code_unit(
  168|  1.10M|                   range, [&](char_type ch)
  169|  1.10M|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|  1.10M|            .transform_error(map_parse_error_to_scan_error(
  171|  1.10M|                scan_error::invalid_scanned_value,
  172|  1.10M|                "Failed to parse integer: No digits found"));
  173|  1.10M|    }
  174|  1.10M|}
_ZZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_iENKUlwE_clEw:
  169|  2.67M|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  41.3k|    {
  324|  41.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  41.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  41.3k|        return read_default_with_base(range, value, 0);
  326|  41.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  41.3k|    {
  287|  41.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  41.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  41.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 41.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  41.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  41.3k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  41.3k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  41.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  41.3k|                return unexpected_scan_error(
  293|  41.3k|                    scan_error::invalid_scanned_value,
  294|  41.3k|                    "Unexpected '-' sign when parsing an "
  295|  41.3k|                    "unsigned value");
  296|  41.3k|            }
  297|  41.3k|        }
  298|       |
  299|  41.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 3, False: 41.3k]
  ------------------
  300|      3|            value = T{0};
  301|      3|            return std::next(prefix_result.iterator);
  302|      3|        }
  303|       |
  304|  62.0k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  41.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  41.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20.6k, False: 20.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  20.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  20.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  20.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  20.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  20.6k|    }                                                  \
  |  |  |  |   70|  41.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  20.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  62.0k|                                     ranges::subrange{prefix_result.iterator,
  306|  62.0k|                                                      ranges::end(range)},
  307|  62.0k|                                     prefix_result.parsed_base));
  308|       |
  309|  62.0k|        auto buf = make_contiguous_buffer(
  310|  62.0k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  62.0k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  20.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  20.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  20.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  20.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 20.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  20.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  20.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  20.6k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  20.6k|                                    prefix_result.parsed_base));
  314|       |
  315|  20.6k|        return ranges_polyfill::batch_next(
  316|  20.6k|            prefix_result.iterator,
  317|  20.6k|            ranges::distance(buf.view().begin(), result_it));
  318|  62.0k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  41.3k|    {
  324|  41.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  41.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  41.3k|        return read_default_with_base(range, value, 0);
  326|  41.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  41.3k|    {
  287|  41.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  41.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  41.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 41.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  41.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  41.3k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  41.3k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  41.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  41.3k|                return unexpected_scan_error(
  293|  41.3k|                    scan_error::invalid_scanned_value,
  294|  41.3k|                    "Unexpected '-' sign when parsing an "
  295|  41.3k|                    "unsigned value");
  296|  41.3k|            }
  297|  41.3k|        }
  298|       |
  299|  41.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 3, False: 41.3k]
  ------------------
  300|      3|            value = T{0};
  301|      3|            return std::next(prefix_result.iterator);
  302|      3|        }
  303|       |
  304|  62.0k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  41.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  41.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20.6k, False: 20.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  20.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  20.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  20.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  20.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  20.6k|    }                                                  \
  |  |  |  |   70|  41.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  20.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  62.0k|                                     ranges::subrange{prefix_result.iterator,
  306|  62.0k|                                                      ranges::end(range)},
  307|  62.0k|                                     prefix_result.parsed_base));
  308|       |
  309|  62.0k|        auto buf = make_contiguous_buffer(
  310|  62.0k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  62.0k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  20.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  20.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  20.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  20.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 20.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  20.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  20.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  20.6k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  20.6k|                                    prefix_result.parsed_base));
  314|       |
  315|  20.6k|        return ranges_polyfill::batch_next(
  316|  20.6k|            prefix_result.iterator,
  317|  20.6k|            ranges::distance(buf.view().begin(), result_it));
  318|  62.0k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  41.3k|    {
  324|  41.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  41.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  41.3k|        return read_default_with_base(range, value, 0);
  326|  41.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  41.3k|    {
  287|  41.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  41.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  41.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 41.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  41.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  41.3k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  41.3k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  41.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 41.3k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  41.3k|        }
  298|       |
  299|  41.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 3, False: 41.3k]
  ------------------
  300|      3|            value = T{0};
  301|      3|            return std::next(prefix_result.iterator);
  302|      3|        }
  303|       |
  304|  62.0k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  41.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  41.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20.6k, False: 20.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  20.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  20.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  20.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  20.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  20.6k|    }                                                  \
  |  |  |  |   70|  41.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  20.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  62.0k|                                     ranges::subrange{prefix_result.iterator,
  306|  62.0k|                                                      ranges::end(range)},
  307|  62.0k|                                     prefix_result.parsed_base));
  308|       |
  309|  62.0k|        auto buf = make_contiguous_buffer(
  310|  62.0k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  62.0k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  20.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  20.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  20.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  20.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 20.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  20.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  20.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  20.6k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  20.6k|                                    prefix_result.parsed_base));
  314|       |
  315|  20.6k|        return ranges_polyfill::batch_next(
  316|  20.6k|            prefix_result.iterator,
  317|  20.6k|            ranges::distance(buf.view().begin(), result_it));
  318|  62.0k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  41.3k|    {
  324|  41.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  41.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  41.3k|        return read_default_with_base(range, value, 0);
  326|  41.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  41.3k|    {
  287|  41.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  41.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  41.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 41.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  41.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  41.3k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  41.3k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  41.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 41.3k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  41.3k|        }
  298|       |
  299|  41.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 3, False: 41.3k]
  ------------------
  300|      3|            value = T{0};
  301|      3|            return std::next(prefix_result.iterator);
  302|      3|        }
  303|       |
  304|  62.0k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  41.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  41.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20.6k, False: 20.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  20.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  20.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  20.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  20.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  20.6k|    }                                                  \
  |  |  |  |   70|  41.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  20.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  62.0k|                                     ranges::subrange{prefix_result.iterator,
  306|  62.0k|                                                      ranges::end(range)},
  307|  62.0k|                                     prefix_result.parsed_base));
  308|       |
  309|  62.0k|        auto buf = make_contiguous_buffer(
  310|  62.0k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  62.0k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  20.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  20.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  20.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  20.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 20.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  20.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  20.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  20.6k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  20.6k|                                    prefix_result.parsed_base));
  314|       |
  315|  20.6k|        return ranges_polyfill::batch_next(
  316|  20.6k|            prefix_result.iterator,
  317|  20.6k|            ranges::distance(buf.view().begin(), result_it));
  318|  62.0k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  41.3k|    {
  324|  41.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  41.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  41.3k|        return read_default_with_base(range, value, 0);
  326|  41.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  41.3k|    {
  287|  41.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  41.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  41.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 41.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  41.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  41.3k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  41.3k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  41.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 41.3k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  41.3k|        }
  298|       |
  299|  41.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 3, False: 41.3k]
  ------------------
  300|      3|            value = T{0};
  301|      3|            return std::next(prefix_result.iterator);
  302|      3|        }
  303|       |
  304|  62.0k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  41.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  41.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20.6k, False: 20.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  20.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  20.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  20.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  20.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  20.6k|    }                                                  \
  |  |  |  |   70|  41.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  20.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  62.0k|                                     ranges::subrange{prefix_result.iterator,
  306|  62.0k|                                                      ranges::end(range)},
  307|  62.0k|                                     prefix_result.parsed_base));
  308|       |
  309|  62.0k|        auto buf = make_contiguous_buffer(
  310|  62.0k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  62.0k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  20.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  20.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  20.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  20.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 20.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  20.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  20.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  20.6k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  20.6k|                                    prefix_result.parsed_base));
  314|       |
  315|  20.6k|        return ranges_polyfill::batch_next(
  316|  20.6k|            prefix_result.iterator,
  317|  20.6k|            ranges::distance(buf.view().begin(), result_it));
  318|  62.0k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSF_12basic_stringIT0_NSF_11char_traitsISM_EENSF_9allocatorISM_EEEENSL_IcNSN_IcEENSP_IcEEEEEEEEESI_iRKNS1_35localized_number_formatting_optionsISM_EE:
  184|   165k|{
  185|   165k|    std::basic_string<CharT> output;
  186|   165k|    std::string thsep_indices;
  187|   165k|    auto it = ranges::begin(range);
  188|   165k|    bool digit_matched = false;
  189|   343k|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 342k, False: 24]
  ------------------
  190|   342k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 12.2k, False: 330k]
  ------------------
  191|  12.2k|            thsep_indices.push_back(static_cast<char>(
  192|  12.2k|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|  12.2k|        }
  194|   330k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 165k, False: 165k]
  ------------------
  195|   165k|            break;
  196|   165k|        }
  197|   165k|        else {
  198|   165k|            output.push_back(*it);
  199|   165k|            digit_matched = true;
  200|   165k|        }
  201|   342k|    }
  202|   165k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 82.6k, False: 82.7k]
  |  |  ------------------
  ------------------
  203|  82.6k|        return unexpected_scan_error(
  204|  82.6k|            scan_error::invalid_scanned_value,
  205|  82.6k|            "Failed to parse integer: No digits found");
  206|  82.6k|    }
  207|  82.7k|    return std::tuple{it, output, thsep_indices};
  208|   165k|}
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|   165k|    {
  335|   165k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   165k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   165k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   165k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 165k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   165k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   165k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   165k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 165k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|   165k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 6, False: 165k]
  ------------------
  356|      6|            value = T{0};
  357|      6|            return std::next(prefix_result.iterator);
  358|      6|        }
  359|       |
  360|   165k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   165k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 137k, False: 27.5k]
  |  |  ------------------
  ------------------
  361|   137k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   137k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   137k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   137k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 55.1k, False: 82.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  55.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  55.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  55.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  55.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  55.1k|    }                                                  \
  |  |  |  |   70|   137k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  82.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  82.7k|                    parse_integer_digits_without_thsep(
  363|  82.7k|                        ranges::subrange{prefix_result.iterator,
  364|  82.7k|                                         ranges::end(range)},
  365|  82.7k|                        prefix_result.parsed_base));
  366|       |
  367|  82.7k|            auto buf = make_contiguous_buffer(
  368|  82.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  82.7k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  82.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  82.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  82.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  82.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 13.7k, False: 68.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  13.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  13.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  13.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  13.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  13.7k|    }                                                  \
  |  |  |  |   70|  82.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  68.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  68.9k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  68.9k|                                        prefix_result.parsed_base));
  372|       |
  373|  68.9k|            return ranges_polyfill::batch_next(
  374|  68.9k|                prefix_result.iterator,
  375|  68.9k|                ranges::distance(buf.view().begin(), result_it));
  376|  82.7k|        }
  377|       |
  378|  27.5k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  27.5k|            localized_number_formatting_options<CharT>{loc};
  383|  27.5k|#endif
  384|       |
  385|  27.5k|        SCN_TRY(
  ------------------
  |  |   71|  27.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  27.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 13.7k, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  13.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  13.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  13.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  13.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  13.7k|    }                                                  \
  |  |  |  |   70|  27.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  13.7k|            parse_digits_result,
  387|  13.7k|            parse_integer_digits_with_thsep(
  388|  13.7k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  13.7k|                prefix_result.parsed_base, locale_options));
  390|  13.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  13.7k|            parse_digits_result;
  392|       |
  393|  13.7k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 13.7k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  13.7k|        auto nothsep_source_view =
  403|  13.7k|            std::basic_string_view<CharT>{nothsep_source};
  404|  13.7k|        SCN_TRY(
  ------------------
  |  |   71|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  13.7k|            nothsep_source_it,
  406|  13.7k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  13.7k|                                prefix_result.parsed_base));
  408|       |
  409|  13.7k|        return ranges_polyfill::batch_next(
  410|  13.7k|            prefix_result.iterator,
  411|  13.7k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  13.7k|                ranges::ssize(thsep_indices));
  413|  13.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|   179k|    {
  335|   179k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   179k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   179k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   179k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 179k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   179k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   179k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   179k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 13.7k, False: 165k]
  ------------------
  339|  13.7k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  13.7k|                return unexpected_scan_error(
  341|  13.7k|                    scan_error::invalid_scanned_value,
  342|  13.7k|                    "Unexpected '-' sign when parsing an "
  343|  13.7k|                    "unsigned value");
  344|  13.7k|            }
  345|  13.7k|            else {
  346|  13.7k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 13.7k]
  ------------------
  347|  13.7k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  13.7k|            }
  353|  13.7k|        }
  354|       |
  355|   179k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 6, False: 179k]
  ------------------
  356|      6|            value = T{0};
  357|      6|            return std::next(prefix_result.iterator);
  358|      6|        }
  359|       |
  360|   179k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   179k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 151k, False: 27.5k]
  |  |  ------------------
  ------------------
  361|   151k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   151k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   151k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   151k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 68.8k, False: 82.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  68.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  68.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  68.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  68.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  68.8k|    }                                                  \
  |  |  |  |   70|   151k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  82.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  82.7k|                    parse_integer_digits_without_thsep(
  363|  82.7k|                        ranges::subrange{prefix_result.iterator,
  364|  82.7k|                                         ranges::end(range)},
  365|  82.7k|                        prefix_result.parsed_base));
  366|       |
  367|  82.7k|            auto buf = make_contiguous_buffer(
  368|  82.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  82.7k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  82.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  82.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  82.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  82.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 82.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  82.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  82.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  82.7k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  82.7k|                                        prefix_result.parsed_base));
  372|       |
  373|  82.7k|            return ranges_polyfill::batch_next(
  374|  82.7k|                prefix_result.iterator,
  375|  82.7k|                ranges::distance(buf.view().begin(), result_it));
  376|  82.7k|        }
  377|       |
  378|  27.5k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  27.5k|            localized_number_formatting_options<CharT>{loc};
  383|  27.5k|#endif
  384|       |
  385|  27.5k|        SCN_TRY(
  ------------------
  |  |   71|  27.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  27.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 13.7k, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  13.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  13.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  13.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  13.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  13.7k|    }                                                  \
  |  |  |  |   70|  27.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  13.7k|            parse_digits_result,
  387|  13.7k|            parse_integer_digits_with_thsep(
  388|  13.7k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  13.7k|                prefix_result.parsed_base, locale_options));
  390|  13.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  13.7k|            parse_digits_result;
  392|       |
  393|  13.7k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 13.7k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  13.7k|        auto nothsep_source_view =
  403|  13.7k|            std::basic_string_view<CharT>{nothsep_source};
  404|  13.7k|        SCN_TRY(
  ------------------
  |  |   71|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  13.7k|            nothsep_source_it,
  406|  13.7k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  13.7k|                                prefix_result.parsed_base));
  408|       |
  409|  13.7k|        return ranges_polyfill::batch_next(
  410|  13.7k|            prefix_result.iterator,
  411|  13.7k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  13.7k|                ranges::ssize(thsep_indices));
  413|  13.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|   179k|    {
  335|   179k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   179k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   179k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   179k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 179k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   179k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   179k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   179k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 13.7k, False: 165k]
  ------------------
  339|  13.7k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  13.7k|                return unexpected_scan_error(
  341|  13.7k|                    scan_error::invalid_scanned_value,
  342|  13.7k|                    "Unexpected '-' sign when parsing an "
  343|  13.7k|                    "unsigned value");
  344|  13.7k|            }
  345|  13.7k|            else {
  346|  13.7k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 13.7k]
  ------------------
  347|  13.7k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  13.7k|            }
  353|  13.7k|        }
  354|       |
  355|   179k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 6, False: 179k]
  ------------------
  356|      6|            value = T{0};
  357|      6|            return std::next(prefix_result.iterator);
  358|      6|        }
  359|       |
  360|   179k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   179k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 151k, False: 27.5k]
  |  |  ------------------
  ------------------
  361|   151k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   151k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   151k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   151k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 68.8k, False: 82.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  68.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  68.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  68.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  68.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  68.8k|    }                                                  \
  |  |  |  |   70|   151k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  82.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  82.7k|                    parse_integer_digits_without_thsep(
  363|  82.7k|                        ranges::subrange{prefix_result.iterator,
  364|  82.7k|                                         ranges::end(range)},
  365|  82.7k|                        prefix_result.parsed_base));
  366|       |
  367|  82.7k|            auto buf = make_contiguous_buffer(
  368|  82.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  82.7k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  82.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  82.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  82.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  82.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 82.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  82.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  82.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  82.7k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  82.7k|                                        prefix_result.parsed_base));
  372|       |
  373|  82.7k|            return ranges_polyfill::batch_next(
  374|  82.7k|                prefix_result.iterator,
  375|  82.7k|                ranges::distance(buf.view().begin(), result_it));
  376|  82.7k|        }
  377|       |
  378|  27.5k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  27.5k|            localized_number_formatting_options<CharT>{loc};
  383|  27.5k|#endif
  384|       |
  385|  27.5k|        SCN_TRY(
  ------------------
  |  |   71|  27.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  27.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 13.7k, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  13.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  13.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  13.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  13.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  13.7k|    }                                                  \
  |  |  |  |   70|  27.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  13.7k|            parse_digits_result,
  387|  13.7k|            parse_integer_digits_with_thsep(
  388|  13.7k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  13.7k|                prefix_result.parsed_base, locale_options));
  390|  13.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  13.7k|            parse_digits_result;
  392|       |
  393|  13.7k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 13.7k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  13.7k|        auto nothsep_source_view =
  403|  13.7k|            std::basic_string_view<CharT>{nothsep_source};
  404|  13.7k|        SCN_TRY(
  ------------------
  |  |   71|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  13.7k|            nothsep_source_it,
  406|  13.7k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  13.7k|                                prefix_result.parsed_base));
  408|       |
  409|  13.7k|        return ranges_polyfill::batch_next(
  410|  13.7k|            prefix_result.iterator,
  411|  13.7k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  13.7k|                ranges::ssize(thsep_indices));
  413|  13.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|   165k|    {
  335|   165k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   165k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   165k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   165k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 165k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   165k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   165k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   165k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 165k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|   165k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 6, False: 165k]
  ------------------
  356|      6|            value = T{0};
  357|      6|            return std::next(prefix_result.iterator);
  358|      6|        }
  359|       |
  360|   165k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   165k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 137k, False: 27.5k]
  |  |  ------------------
  ------------------
  361|   137k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   137k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   137k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   137k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 55.1k, False: 82.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  55.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  55.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  55.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  55.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  55.1k|    }                                                  \
  |  |  |  |   70|   137k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  82.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  82.7k|                    parse_integer_digits_without_thsep(
  363|  82.7k|                        ranges::subrange{prefix_result.iterator,
  364|  82.7k|                                         ranges::end(range)},
  365|  82.7k|                        prefix_result.parsed_base));
  366|       |
  367|  82.7k|            auto buf = make_contiguous_buffer(
  368|  82.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  82.7k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  82.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  82.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  82.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  82.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 13.7k, False: 68.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  13.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  13.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  13.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  13.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  13.7k|    }                                                  \
  |  |  |  |   70|  82.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  68.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  68.9k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  68.9k|                                        prefix_result.parsed_base));
  372|       |
  373|  68.9k|            return ranges_polyfill::batch_next(
  374|  68.9k|                prefix_result.iterator,
  375|  68.9k|                ranges::distance(buf.view().begin(), result_it));
  376|  82.7k|        }
  377|       |
  378|  27.5k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  27.5k|            localized_number_formatting_options<CharT>{loc};
  383|  27.5k|#endif
  384|       |
  385|  27.5k|        SCN_TRY(
  ------------------
  |  |   71|  27.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  27.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 13.7k, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  13.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  13.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  13.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  13.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  13.7k|    }                                                  \
  |  |  |  |   70|  27.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  13.7k|            parse_digits_result,
  387|  13.7k|            parse_integer_digits_with_thsep(
  388|  13.7k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  13.7k|                prefix_result.parsed_base, locale_options));
  390|  13.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  13.7k|            parse_digits_result;
  392|       |
  393|  13.7k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 13.7k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  13.7k|        auto nothsep_source_view =
  403|  13.7k|            std::basic_string_view<CharT>{nothsep_source};
  404|  13.7k|        SCN_TRY(
  ------------------
  |  |   71|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  13.7k|            nothsep_source_it,
  406|  13.7k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  13.7k|                                prefix_result.parsed_base));
  408|       |
  409|  13.7k|        return ranges_polyfill::batch_next(
  410|  13.7k|            prefix_result.iterator,
  411|  13.7k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  13.7k|                ranges::ssize(thsep_indices));
  413|  13.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|   179k|    {
  335|   179k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   179k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   179k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   179k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 179k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   179k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   179k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   179k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 13.7k, False: 165k]
  ------------------
  339|  13.7k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  13.7k|                return unexpected_scan_error(
  341|  13.7k|                    scan_error::invalid_scanned_value,
  342|  13.7k|                    "Unexpected '-' sign when parsing an "
  343|  13.7k|                    "unsigned value");
  344|  13.7k|            }
  345|  13.7k|            else {
  346|  13.7k|                if (specs.type ==
  347|  13.7k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  13.7k|                    return unexpected_scan_error(
  349|  13.7k|                        scan_error::invalid_scanned_value,
  350|  13.7k|                        "'u'-option disallows negative values");
  351|  13.7k|                }
  352|  13.7k|            }
  353|  13.7k|        }
  354|       |
  355|   165k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 6, False: 165k]
  ------------------
  356|      6|            value = T{0};
  357|      6|            return std::next(prefix_result.iterator);
  358|      6|        }
  359|       |
  360|   165k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   165k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 137k, False: 27.5k]
  |  |  ------------------
  ------------------
  361|   137k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   137k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   137k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   137k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 55.1k, False: 82.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  55.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  55.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  55.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  55.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  55.1k|    }                                                  \
  |  |  |  |   70|   137k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  82.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  82.7k|                    parse_integer_digits_without_thsep(
  363|  82.7k|                        ranges::subrange{prefix_result.iterator,
  364|  82.7k|                                         ranges::end(range)},
  365|  82.7k|                        prefix_result.parsed_base));
  366|       |
  367|  82.7k|            auto buf = make_contiguous_buffer(
  368|  82.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  82.7k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  82.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  82.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  82.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  82.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 82.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  82.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  82.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  82.7k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  82.7k|                                        prefix_result.parsed_base));
  372|       |
  373|  82.7k|            return ranges_polyfill::batch_next(
  374|  82.7k|                prefix_result.iterator,
  375|  82.7k|                ranges::distance(buf.view().begin(), result_it));
  376|  82.7k|        }
  377|       |
  378|  27.5k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  27.5k|            localized_number_formatting_options<CharT>{loc};
  383|  27.5k|#endif
  384|       |
  385|  27.5k|        SCN_TRY(
  ------------------
  |  |   71|  27.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  27.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 13.7k, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  13.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  13.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  13.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  13.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  13.7k|    }                                                  \
  |  |  |  |   70|  27.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  13.7k|            parse_digits_result,
  387|  13.7k|            parse_integer_digits_with_thsep(
  388|  13.7k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  13.7k|                prefix_result.parsed_base, locale_options));
  390|  13.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  13.7k|            parse_digits_result;
  392|       |
  393|  13.7k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 13.7k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  13.7k|        auto nothsep_source_view =
  403|  13.7k|            std::basic_string_view<CharT>{nothsep_source};
  404|  13.7k|        SCN_TRY(
  ------------------
  |  |   71|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  13.7k|            nothsep_source_it,
  406|  13.7k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  13.7k|                                prefix_result.parsed_base));
  408|       |
  409|  13.7k|        return ranges_polyfill::batch_next(
  410|  13.7k|            prefix_result.iterator,
  411|  13.7k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  13.7k|                ranges::ssize(thsep_indices));
  413|  13.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|   179k|    {
  335|   179k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   179k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   179k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   179k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 179k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   179k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   179k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   179k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 13.7k, False: 165k]
  ------------------
  339|  13.7k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  13.7k|                return unexpected_scan_error(
  341|  13.7k|                    scan_error::invalid_scanned_value,
  342|  13.7k|                    "Unexpected '-' sign when parsing an "
  343|  13.7k|                    "unsigned value");
  344|  13.7k|            }
  345|  13.7k|            else {
  346|  13.7k|                if (specs.type ==
  347|  13.7k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  13.7k|                    return unexpected_scan_error(
  349|  13.7k|                        scan_error::invalid_scanned_value,
  350|  13.7k|                        "'u'-option disallows negative values");
  351|  13.7k|                }
  352|  13.7k|            }
  353|  13.7k|        }
  354|       |
  355|   165k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 6, False: 165k]
  ------------------
  356|      6|            value = T{0};
  357|      6|            return std::next(prefix_result.iterator);
  358|      6|        }
  359|       |
  360|   165k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   165k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 137k, False: 27.5k]
  |  |  ------------------
  ------------------
  361|   137k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   137k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   137k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   137k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 55.1k, False: 82.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  55.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  55.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  55.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  55.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  55.1k|    }                                                  \
  |  |  |  |   70|   137k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  82.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  82.7k|                    parse_integer_digits_without_thsep(
  363|  82.7k|                        ranges::subrange{prefix_result.iterator,
  364|  82.7k|                                         ranges::end(range)},
  365|  82.7k|                        prefix_result.parsed_base));
  366|       |
  367|  82.7k|            auto buf = make_contiguous_buffer(
  368|  82.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  82.7k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  82.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  82.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  82.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  82.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 82.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  82.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  82.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  82.7k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  82.7k|                                        prefix_result.parsed_base));
  372|       |
  373|  82.7k|            return ranges_polyfill::batch_next(
  374|  82.7k|                prefix_result.iterator,
  375|  82.7k|                ranges::distance(buf.view().begin(), result_it));
  376|  82.7k|        }
  377|       |
  378|  27.5k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  27.5k|            localized_number_formatting_options<CharT>{loc};
  383|  27.5k|#endif
  384|       |
  385|  27.5k|        SCN_TRY(
  ------------------
  |  |   71|  27.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  27.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 13.7k, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  13.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  13.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  13.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  13.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  13.7k|    }                                                  \
  |  |  |  |   70|  27.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  13.7k|            parse_digits_result,
  387|  13.7k|            parse_integer_digits_with_thsep(
  388|  13.7k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  13.7k|                prefix_result.parsed_base, locale_options));
  390|  13.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  13.7k|            parse_digits_result;
  392|       |
  393|  13.7k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 13.7k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  13.7k|        auto nothsep_source_view =
  403|  13.7k|            std::basic_string_view<CharT>{nothsep_source};
  404|  13.7k|        SCN_TRY(
  ------------------
  |  |   71|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  13.7k|            nothsep_source_it,
  406|  13.7k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  13.7k|                                prefix_result.parsed_base));
  408|       |
  409|  13.7k|        return ranges_polyfill::batch_next(
  410|  13.7k|            prefix_result.iterator,
  411|  13.7k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  13.7k|                ranges::ssize(thsep_indices));
  413|  13.7k|    }

_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  5.16M|{
   69|  5.16M|    auto r = read_one_of_code_unit(range, "+-");
   70|  5.16M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 4.85M, False: 310k]
  ------------------
   71|  4.85M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 4.85M, False: 0]
  ------------------
   72|  4.85M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  4.85M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  4.85M|    }
   76|       |
   77|   310k|    auto& it = *r;
   78|   310k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 245k, False: 64.6k]
  ------------------
   79|   245k|        return std::pair{it, sign_type::minus_sign};
   80|   245k|    }
   81|  64.6k|    return std::pair{it, sign_type::plus_sign};
   82|   310k|}
_ZN3scn2v24impl11char_to_intEc:
   50|  45.7M|{
   51|  45.7M|    return char_to_int_table[static_cast<unsigned char>(ch)];
   52|  45.7M|}
_ZN3scn2v24impl20check_thsep_groupingIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEELPv0EEENS0_10scan_errorEOT_NSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEENSF_17basic_string_viewIcSI_EE:
  139|  2.46k|{
  140|  2.46k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  242|  2.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  141|       |
  142|  2.46k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (142:9): [True: 2.40k, False: 62]
  ------------------
  143|  2.40k|        SCN_UNLIKELY_ATTR
  144|  2.40k|        return {scan_error::invalid_scanned_value,
  145|  2.40k|                "Invalid thousands separator grouping"};
  146|  2.40k|    }
  147|       |
  148|     62|    return {};
  149|  2.46k|}
_ZN3scn2v24impl25check_thsep_grouping_implIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
  100|  2.46k|{
  101|  2.46k|    transform_thsep_indices(
  102|  2.46k|        thsep_indices,
  103|  2.46k|        ranges::distance(ranges::begin(range), ranges::end(range)));
  104|       |
  105|  2.46k|    auto thsep_it = thsep_indices.rbegin();
  106|  2.46k|    for (auto grouping_it = grouping.begin();
  107|  2.46k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (107:10): [True: 0, False: 2.46k]
  |  Branch (107:10): [True: 0, False: 2.46k]
  |  Branch (107:43): [True: 0, False: 0]
  ------------------
  108|  2.46k|         ++grouping_it, (void)++thsep_it) {
  109|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (109:13): [True: 0, False: 0]
  ------------------
  110|      0|            return false;
  111|      0|        }
  112|      0|    }
  113|       |
  114|  2.46k|    SCN_CLANG_PUSH
  115|       |    // false positive
  116|  2.46k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
  117|       |
  118|  11.9k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (118:12): [True: 10.6k, False: 1.30k]
  ------------------
  119|  10.6k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (119:13): [True: 1.15k, False: 9.49k]
  ------------------
  120|  1.15k|            return false;
  121|  1.15k|        }
  122|  10.6k|    }
  123|       |
  124|  1.30k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (124:9): [True: 1.30k, False: 0]
  ------------------
  125|  1.30k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (125:13): [True: 1.24k, False: 62]
  ------------------
  126|  1.24k|            return false;
  127|  1.24k|        }
  128|  1.30k|    }
  129|       |
  130|     62|    SCN_CLANG_POP
  131|       |
  132|     62|    return true;
  133|  1.30k|}
_ZN3scn2v24impl23transform_thsep_indicesERNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEl:
   86|  5.35k|{
   87|  51.7k|    for (auto thsep_it = indices.rbegin(); thsep_it != indices.rend();
  ------------------
  |  Branch (87:44): [True: 46.4k, False: 5.35k]
  ------------------
   88|  46.4k|         ++thsep_it) {
   89|  46.4k|        const auto tmp = *thsep_it;
   90|  46.4k|        *thsep_it = static_cast<char>(last_thsep_index - tmp - 1);
   91|  46.4k|        last_thsep_index = static_cast<std::ptrdiff_t>(tmp);
   92|  46.4k|    }
   93|  5.35k|    indices.insert(indices.begin(), static_cast<char>(last_thsep_index));
   94|  5.35k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|   441k|{
   69|   441k|    auto r = read_one_of_code_unit(range, "+-");
   70|   441k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 441k, False: 0]
  ------------------
   71|   441k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 441k, False: 0]
  ------------------
   72|   441k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|   441k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|   441k|    }
   76|       |
   77|      0|    auto& it = *r;
   78|      0|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 0]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|      0|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  5.03M|{
   69|  5.03M|    auto r = read_one_of_code_unit(range, "+-");
   70|  5.03M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 4.78M, False: 256k]
  ------------------
   71|  4.78M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 4.78M, False: 0]
  ------------------
   72|  4.78M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  4.78M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  4.78M|    }
   76|       |
   77|   256k|    auto& it = *r;
   78|   256k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 198k, False: 57.9k]
  ------------------
   79|   198k|        return std::pair{it, sign_type::minus_sign};
   80|   198k|    }
   81|  57.9k|    return std::pair{it, sign_type::plus_sign};
   82|   256k|}
_ZN3scn2v24impl11char_to_intEw:
   54|  24.8M|{
   55|  24.8M|#if WCHAR_MIN < 0
   56|  24.8M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (56:9): [True: 24.8M, False: 49.7k]
  |  Branch (56:20): [True: 24.0M, False: 807k]
  ------------------
   57|       |#else
   58|       |    if (ch <= 255) {
   59|       |#endif
   60|  24.0M|        return char_to_int(static_cast<char>(ch));
   61|  24.0M|    }
   62|   856k|    return 255;
   63|  24.8M|}
_ZN3scn2v24impl20check_thsep_groupingIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEELPv0EEENS0_10scan_errorEOT_NSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEENSF_17basic_string_viewIcSI_EE:
  139|  2.88k|{
  140|  2.88k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  242|  2.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  141|       |
  142|  2.88k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (142:9): [True: 2.82k, False: 62]
  ------------------
  143|  2.82k|        SCN_UNLIKELY_ATTR
  144|  2.82k|        return {scan_error::invalid_scanned_value,
  145|  2.82k|                "Invalid thousands separator grouping"};
  146|  2.82k|    }
  147|       |
  148|     62|    return {};
  149|  2.88k|}
_ZN3scn2v24impl25check_thsep_grouping_implIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
  100|  2.88k|{
  101|  2.88k|    transform_thsep_indices(
  102|  2.88k|        thsep_indices,
  103|  2.88k|        ranges::distance(ranges::begin(range), ranges::end(range)));
  104|       |
  105|  2.88k|    auto thsep_it = thsep_indices.rbegin();
  106|  2.88k|    for (auto grouping_it = grouping.begin();
  107|  2.88k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (107:10): [True: 0, False: 2.88k]
  |  Branch (107:10): [True: 0, False: 2.88k]
  |  Branch (107:43): [True: 0, False: 0]
  ------------------
  108|  2.88k|         ++grouping_it, (void)++thsep_it) {
  109|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (109:13): [True: 0, False: 0]
  ------------------
  110|      0|            return false;
  111|      0|        }
  112|      0|    }
  113|       |
  114|  2.88k|    SCN_CLANG_PUSH
  115|       |    // false positive
  116|  2.88k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
  117|       |
  118|  15.7k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (118:12): [True: 13.8k, False: 1.83k]
  ------------------
  119|  13.8k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (119:13): [True: 1.04k, False: 12.8k]
  ------------------
  120|  1.04k|            return false;
  121|  1.04k|        }
  122|  13.8k|    }
  123|       |
  124|  1.83k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (124:9): [True: 1.83k, False: 0]
  ------------------
  125|  1.83k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (125:13): [True: 1.77k, False: 62]
  ------------------
  126|  1.77k|            return false;
  127|  1.77k|        }
  128|  1.83k|    }
  129|       |
  130|     62|    SCN_CLANG_POP
  131|       |
  132|     62|    return true;
  133|  1.83k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|  1.29M|{
   69|  1.29M|    auto r = read_one_of_code_unit(range, "+-");
   70|  1.29M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 1.24M, False: 55.0k]
  ------------------
   71|  1.24M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 1.24M, False: 0]
  ------------------
   72|  1.24M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  1.24M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  1.24M|    }
   76|       |
   77|  55.0k|    auto& it = *r;
   78|  55.0k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 55.0k, False: 0]
  ------------------
   79|  55.0k|        return std::pair{it, sign_type::minus_sign};
   80|  55.0k|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|  55.0k|}

_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
  121|   217k|    {
  122|   217k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   217k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   217k|                          basic_contiguous_scan_context<char_type>>) {
  126|   217k|            auto rd = make_reader<T, char_type>();
  127|   217k|            return impl(rd, range, value);
  128|   217k|        }
  129|   217k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   217k|            auto rd = make_reader<T, char_type>();
  131|   217k|            if (!is_segment_contiguous(range)) {
  132|   217k|                return impl(rd, range, value);
  133|   217k|            }
  134|   217k|            auto crange = get_as_contiguous(range);
  135|   217k|            SCN_TRY(it, impl(rd, crange, value));
  136|   217k|            return ranges_polyfill::batch_next(
  137|   217k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   217k|        }
  139|   217k|        else {
  140|   217k|            SCN_EXPECT(false);
  141|   217k|            SCN_UNREACHABLE;
  142|   217k|        }
  143|   217k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   217k|    {
  112|   217k|        SCN_TRY(it,
  ------------------
  |  |   71|   217k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   217k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   217k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 834, False: 217k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    834|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    834|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    834|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    834|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    834|    }                                                  \
  |  |  |  |   70|   217k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   217k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   217k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   217k|                    .transform_error(make_eof_scan_error));
  115|   217k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   217k|                               loc);
  117|   217k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  5.18M|{
   43|  5.18M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  5.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 23.4k, False: 5.16M]
  |  |  ------------------
  ------------------
   44|  23.4k|        return unexpected(e);
   45|  23.4k|    }
   46|       |
   47|  5.16M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 5.16M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  5.16M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  5.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  5.16M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
  121|   279k|    {
  122|   279k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   279k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   279k|                          basic_contiguous_scan_context<char_type>>) {
  126|   279k|            auto rd = make_reader<T, char_type>();
  127|   279k|            return impl(rd, range, value);
  128|   279k|        }
  129|   279k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   279k|            auto rd = make_reader<T, char_type>();
  131|   279k|            if (!is_segment_contiguous(range)) {
  132|   279k|                return impl(rd, range, value);
  133|   279k|            }
  134|   279k|            auto crange = get_as_contiguous(range);
  135|   279k|            SCN_TRY(it, impl(rd, crange, value));
  136|   279k|            return ranges_polyfill::batch_next(
  137|   279k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   279k|        }
  139|   279k|        else {
  140|   279k|            SCN_EXPECT(false);
  141|   279k|            SCN_UNREACHABLE;
  142|   279k|        }
  143|   279k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   279k|    {
  112|   279k|        SCN_TRY(it,
  ------------------
  |  |   71|   279k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   279k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   279k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.51k, False: 277k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.51k|    }                                                  \
  |  |  |  |   70|   279k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   277k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   277k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   277k|                    .transform_error(make_eof_scan_error));
  115|   277k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   277k|                               loc);
  117|   279k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
  121|   297k|    {
  122|   297k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   297k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   297k|                          basic_contiguous_scan_context<char_type>>) {
  126|   297k|            auto rd = make_reader<T, char_type>();
  127|   297k|            return impl(rd, range, value);
  128|   297k|        }
  129|   297k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   297k|            auto rd = make_reader<T, char_type>();
  131|   297k|            if (!is_segment_contiguous(range)) {
  132|   297k|                return impl(rd, range, value);
  133|   297k|            }
  134|   297k|            auto crange = get_as_contiguous(range);
  135|   297k|            SCN_TRY(it, impl(rd, crange, value));
  136|   297k|            return ranges_polyfill::batch_next(
  137|   297k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   297k|        }
  139|   297k|        else {
  140|   297k|            SCN_EXPECT(false);
  141|   297k|            SCN_UNREACHABLE;
  142|   297k|        }
  143|   297k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   297k|    {
  112|   297k|        SCN_TRY(it,
  ------------------
  |  |   71|   297k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   297k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   297k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.62k, False: 296k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.62k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.62k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.62k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.62k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.62k|    }                                                  \
  |  |  |  |   70|   297k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   296k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   296k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   296k|                    .transform_error(make_eof_scan_error));
  115|   296k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   296k|                               loc);
  117|   297k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
  121|   203k|    {
  122|   203k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   203k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   203k|                          basic_contiguous_scan_context<char_type>>) {
  126|   203k|            auto rd = make_reader<T, char_type>();
  127|   203k|            return impl(rd, range, value);
  128|   203k|        }
  129|   203k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   203k|            auto rd = make_reader<T, char_type>();
  131|   203k|            if (!is_segment_contiguous(range)) {
  132|   203k|                return impl(rd, range, value);
  133|   203k|            }
  134|   203k|            auto crange = get_as_contiguous(range);
  135|   203k|            SCN_TRY(it, impl(rd, crange, value));
  136|   203k|            return ranges_polyfill::batch_next(
  137|   203k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   203k|        }
  139|   203k|        else {
  140|   203k|            SCN_EXPECT(false);
  141|   203k|            SCN_UNREACHABLE;
  142|   203k|        }
  143|   203k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   203k|    {
  112|   203k|        SCN_TRY(it,
  ------------------
  |  |   71|   203k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   203k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   203k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   203k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 720, False: 203k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    720|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    720|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    720|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    720|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    720|    }                                                  \
  |  |  |  |   70|   203k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   203k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   203k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   203k|                    .transform_error(make_eof_scan_error));
  115|   203k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   203k|                               loc);
  117|   203k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
  121|   235k|    {
  122|   235k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   235k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   235k|                          basic_contiguous_scan_context<char_type>>) {
  126|   235k|            auto rd = make_reader<T, char_type>();
  127|   235k|            return impl(rd, range, value);
  128|   235k|        }
  129|   235k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   235k|            auto rd = make_reader<T, char_type>();
  131|   235k|            if (!is_segment_contiguous(range)) {
  132|   235k|                return impl(rd, range, value);
  133|   235k|            }
  134|   235k|            auto crange = get_as_contiguous(range);
  135|   235k|            SCN_TRY(it, impl(rd, crange, value));
  136|   235k|            return ranges_polyfill::batch_next(
  137|   235k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   235k|        }
  139|   235k|        else {
  140|   235k|            SCN_EXPECT(false);
  141|   235k|            SCN_UNREACHABLE;
  142|   235k|        }
  143|   235k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   235k|    {
  112|   235k|        SCN_TRY(it,
  ------------------
  |  |   71|   235k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   235k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   235k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   235k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.11k, False: 234k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.11k|    }                                                  \
  |  |  |  |   70|   235k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   234k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   234k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   234k|                    .transform_error(make_eof_scan_error));
  115|   234k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   234k|                               loc);
  117|   235k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
  121|   242k|    {
  122|   242k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   242k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   242k|                          basic_contiguous_scan_context<char_type>>) {
  126|   242k|            auto rd = make_reader<T, char_type>();
  127|   242k|            return impl(rd, range, value);
  128|   242k|        }
  129|   242k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   242k|            auto rd = make_reader<T, char_type>();
  131|   242k|            if (!is_segment_contiguous(range)) {
  132|   242k|                return impl(rd, range, value);
  133|   242k|            }
  134|   242k|            auto crange = get_as_contiguous(range);
  135|   242k|            SCN_TRY(it, impl(rd, crange, value));
  136|   242k|            return ranges_polyfill::batch_next(
  137|   242k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   242k|        }
  139|   242k|        else {
  140|   242k|            SCN_EXPECT(false);
  141|   242k|            SCN_UNREACHABLE;
  142|   242k|        }
  143|   242k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   242k|    {
  112|   242k|        SCN_TRY(it,
  ------------------
  |  |   71|   242k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   242k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   242k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.20k, False: 241k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.20k|    }                                                  \
  |  |  |  |   70|   242k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   241k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   241k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   241k|                    .transform_error(make_eof_scan_error));
  115|   241k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   241k|                               loc);
  117|   242k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  13.7k|    {
  122|  13.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  13.7k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  13.7k|            auto rd = make_reader<T, char_type>();
  127|  13.7k|            return impl(rd, range, value);
  128|  13.7k|        }
  129|  13.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  13.7k|            auto rd = make_reader<T, char_type>();
  131|  13.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 13.7k, False: 0]
  ------------------
  132|  13.7k|                return impl(rd, range, value);
  133|  13.7k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  13.7k|        else {
  140|  13.7k|            SCN_EXPECT(false);
  141|  13.7k|            SCN_UNREACHABLE;
  142|  13.7k|        }
  143|  13.7k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  13.7k|    {
  112|  13.7k|        SCN_TRY(it,
  ------------------
  |  |   71|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  13.7k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  13.7k|                    .transform_error(make_eof_scan_error));
  115|  13.7k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  13.7k|                               loc);
  117|  13.7k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|   441k|{
   43|   441k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   441k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 102, False: 441k]
  |  |  ------------------
  ------------------
   44|    102|        return unexpected(e);
   45|    102|    }
   46|       |
   47|   441k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 441k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|   441k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|   441k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   441k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  13.7k|    {
  122|  13.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  13.7k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  13.7k|            auto rd = make_reader<T, char_type>();
  127|  13.7k|            return impl(rd, range, value);
  128|  13.7k|        }
  129|  13.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  13.7k|            auto rd = make_reader<T, char_type>();
  131|  13.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 13.7k, False: 0]
  ------------------
  132|  13.7k|                return impl(rd, range, value);
  133|  13.7k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  13.7k|        else {
  140|  13.7k|            SCN_EXPECT(false);
  141|  13.7k|            SCN_UNREACHABLE;
  142|  13.7k|        }
  143|  13.7k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  13.7k|    {
  112|  13.7k|        SCN_TRY(it,
  ------------------
  |  |   71|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  13.7k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  13.7k|                    .transform_error(make_eof_scan_error));
  115|  13.7k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  13.7k|                               loc);
  117|  13.7k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  13.7k|    {
  122|  13.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  13.7k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  13.7k|            auto rd = make_reader<T, char_type>();
  127|  13.7k|            return impl(rd, range, value);
  128|  13.7k|        }
  129|  13.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  13.7k|            auto rd = make_reader<T, char_type>();
  131|  13.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 13.7k, False: 0]
  ------------------
  132|  13.7k|                return impl(rd, range, value);
  133|  13.7k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  13.7k|        else {
  140|  13.7k|            SCN_EXPECT(false);
  141|  13.7k|            SCN_UNREACHABLE;
  142|  13.7k|        }
  143|  13.7k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  13.7k|    {
  112|  13.7k|        SCN_TRY(it,
  ------------------
  |  |   71|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  13.7k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  13.7k|                    .transform_error(make_eof_scan_error));
  115|  13.7k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  13.7k|                               loc);
  117|  13.7k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  13.7k|    {
  122|  13.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  13.7k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  13.7k|            auto rd = make_reader<T, char_type>();
  127|  13.7k|            return impl(rd, range, value);
  128|  13.7k|        }
  129|  13.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  13.7k|            auto rd = make_reader<T, char_type>();
  131|  13.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 13.7k, False: 0]
  ------------------
  132|  13.7k|                return impl(rd, range, value);
  133|  13.7k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  13.7k|        else {
  140|  13.7k|            SCN_EXPECT(false);
  141|  13.7k|            SCN_UNREACHABLE;
  142|  13.7k|        }
  143|  13.7k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  13.7k|    {
  112|  13.7k|        SCN_TRY(it,
  ------------------
  |  |   71|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  13.7k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  13.7k|                    .transform_error(make_eof_scan_error));
  115|  13.7k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  13.7k|                               loc);
  117|  13.7k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  13.7k|    {
  122|  13.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  13.7k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  13.7k|            auto rd = make_reader<T, char_type>();
  127|  13.7k|            return impl(rd, range, value);
  128|  13.7k|        }
  129|  13.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  13.7k|            auto rd = make_reader<T, char_type>();
  131|  13.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 13.7k, False: 0]
  ------------------
  132|  13.7k|                return impl(rd, range, value);
  133|  13.7k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  13.7k|        else {
  140|  13.7k|            SCN_EXPECT(false);
  141|  13.7k|            SCN_UNREACHABLE;
  142|  13.7k|        }
  143|  13.7k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  13.7k|    {
  112|  13.7k|        SCN_TRY(it,
  ------------------
  |  |   71|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  13.7k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  13.7k|                    .transform_error(make_eof_scan_error));
  115|  13.7k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  13.7k|                               loc);
  117|  13.7k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  13.7k|    {
  122|  13.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  13.7k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  13.7k|            auto rd = make_reader<T, char_type>();
  127|  13.7k|            return impl(rd, range, value);
  128|  13.7k|        }
  129|  13.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  13.7k|            auto rd = make_reader<T, char_type>();
  131|  13.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 13.7k, False: 0]
  ------------------
  132|  13.7k|                return impl(rd, range, value);
  133|  13.7k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  13.7k|        else {
  140|  13.7k|            SCN_EXPECT(false);
  141|  13.7k|            SCN_UNREACHABLE;
  142|  13.7k|        }
  143|  13.7k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  13.7k|    {
  112|  13.7k|        SCN_TRY(it,
  ------------------
  |  |   71|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  13.7k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  13.7k|                    .transform_error(make_eof_scan_error));
  115|  13.7k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  13.7k|                               loc);
  117|  13.7k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
  222|   490k|    {
  223|   490k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   490k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   490k|                          basic_contiguous_scan_context<char_type>>) {
  227|   490k|            auto rd = make_reader<T, char_type>();
  228|   490k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   490k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 490k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   490k|            return impl(rd, range, value);
  233|   490k|        }
  234|   490k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   490k|            auto rd = make_reader<T, char_type>();
  236|   490k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   490k|                return unexpected(e);
  238|   490k|            }
  239|       |
  240|   490k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   490k|                return impl(rd, range, value);
  242|   490k|            }
  243|       |
  244|   490k|            auto crange = get_as_contiguous(range);
  245|   490k|            SCN_TRY(it, impl(rd, crange, value));
  246|   490k|            return ranges_polyfill::batch_next(
  247|   490k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   490k|        }
  249|   490k|        else {
  250|   490k|            SCN_EXPECT(false);
  251|   490k|            SCN_UNREACHABLE;
  252|   490k|        }
  253|   490k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   490k|    {
  205|   490k|        SCN_TRY(it,
  ------------------
  |  |   71|   490k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   490k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   490k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   490k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.25k, False: 487k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.25k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.25k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.25k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.25k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.25k|    }                                                  \
  |  |  |  |   70|   490k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   487k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   487k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   487k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   487k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   487k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 487k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   487k|        return rd.read_specs(subr, specs, value, loc);
  218|   487k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
  222|   732k|    {
  223|   732k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   732k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   732k|                          basic_contiguous_scan_context<char_type>>) {
  227|   732k|            auto rd = make_reader<T, char_type>();
  228|   732k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   732k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 732k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   732k|            return impl(rd, range, value);
  233|   732k|        }
  234|   732k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   732k|            auto rd = make_reader<T, char_type>();
  236|   732k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   732k|                return unexpected(e);
  238|   732k|            }
  239|       |
  240|   732k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   732k|                return impl(rd, range, value);
  242|   732k|            }
  243|       |
  244|   732k|            auto crange = get_as_contiguous(range);
  245|   732k|            SCN_TRY(it, impl(rd, crange, value));
  246|   732k|            return ranges_polyfill::batch_next(
  247|   732k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   732k|        }
  249|   732k|        else {
  250|   732k|            SCN_EXPECT(false);
  251|   732k|            SCN_UNREACHABLE;
  252|   732k|        }
  253|   732k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   732k|    {
  205|   732k|        SCN_TRY(it,
  ------------------
  |  |   71|   732k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   732k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   732k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   732k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.36k, False: 728k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.36k|    }                                                  \
  |  |  |  |   70|   732k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   728k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   728k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   728k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   728k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   728k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 728k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   728k|        return rd.read_specs(subr, specs, value, loc);
  218|   728k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
  222|   779k|    {
  223|   779k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   779k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   779k|                          basic_contiguous_scan_context<char_type>>) {
  227|   779k|            auto rd = make_reader<T, char_type>();
  228|   779k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   779k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 779k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   779k|            return impl(rd, range, value);
  233|   779k|        }
  234|   779k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   779k|            auto rd = make_reader<T, char_type>();
  236|   779k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   779k|                return unexpected(e);
  238|   779k|            }
  239|       |
  240|   779k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   779k|                return impl(rd, range, value);
  242|   779k|            }
  243|       |
  244|   779k|            auto crange = get_as_contiguous(range);
  245|   779k|            SCN_TRY(it, impl(rd, crange, value));
  246|   779k|            return ranges_polyfill::batch_next(
  247|   779k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   779k|        }
  249|   779k|        else {
  250|   779k|            SCN_EXPECT(false);
  251|   779k|            SCN_UNREACHABLE;
  252|   779k|        }
  253|   779k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   779k|    {
  205|   779k|        SCN_TRY(it,
  ------------------
  |  |   71|   779k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   779k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   779k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   779k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.70k, False: 774k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.70k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.70k|    }                                                  \
  |  |  |  |   70|   779k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   774k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   774k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   774k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   774k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   774k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 774k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   774k|        return rd.read_specs(subr, specs, value, loc);
  218|   774k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
  222|   481k|    {
  223|   481k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   481k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   481k|                          basic_contiguous_scan_context<char_type>>) {
  227|   481k|            auto rd = make_reader<T, char_type>();
  228|   481k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   481k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 481k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   481k|            return impl(rd, range, value);
  233|   481k|        }
  234|   481k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   481k|            auto rd = make_reader<T, char_type>();
  236|   481k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   481k|                return unexpected(e);
  238|   481k|            }
  239|       |
  240|   481k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   481k|                return impl(rd, range, value);
  242|   481k|            }
  243|       |
  244|   481k|            auto crange = get_as_contiguous(range);
  245|   481k|            SCN_TRY(it, impl(rd, crange, value));
  246|   481k|            return ranges_polyfill::batch_next(
  247|   481k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   481k|        }
  249|   481k|        else {
  250|   481k|            SCN_EXPECT(false);
  251|   481k|            SCN_UNREACHABLE;
  252|   481k|        }
  253|   481k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   481k|    {
  205|   481k|        SCN_TRY(it,
  ------------------
  |  |   71|   481k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   481k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   481k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   481k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.01k, False: 479k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.01k|    }                                                  \
  |  |  |  |   70|   481k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   479k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   479k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   479k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   479k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   479k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 479k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   479k|        return rd.read_specs(subr, specs, value, loc);
  218|   479k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
  222|   601k|    {
  223|   601k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   601k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   601k|                          basic_contiguous_scan_context<char_type>>) {
  227|   601k|            auto rd = make_reader<T, char_type>();
  228|   601k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   601k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 601k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   601k|            return impl(rd, range, value);
  233|   601k|        }
  234|   601k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   601k|            auto rd = make_reader<T, char_type>();
  236|   601k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   601k|                return unexpected(e);
  238|   601k|            }
  239|       |
  240|   601k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   601k|                return impl(rd, range, value);
  242|   601k|            }
  243|       |
  244|   601k|            auto crange = get_as_contiguous(range);
  245|   601k|            SCN_TRY(it, impl(rd, crange, value));
  246|   601k|            return ranges_polyfill::batch_next(
  247|   601k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   601k|        }
  249|   601k|        else {
  250|   601k|            SCN_EXPECT(false);
  251|   601k|            SCN_UNREACHABLE;
  252|   601k|        }
  253|   601k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   601k|    {
  205|   601k|        SCN_TRY(it,
  ------------------
  |  |   71|   601k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   601k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   601k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   601k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.25k, False: 598k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.25k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.25k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.25k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.25k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.25k|    }                                                  \
  |  |  |  |   70|   601k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   598k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   598k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   598k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   598k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   598k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 598k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   598k|        return rd.read_specs(subr, specs, value, loc);
  218|   598k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
  222|   624k|    {
  223|   624k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   624k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   624k|                          basic_contiguous_scan_context<char_type>>) {
  227|   624k|            auto rd = make_reader<T, char_type>();
  228|   624k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   624k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 624k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   624k|            return impl(rd, range, value);
  233|   624k|        }
  234|   624k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   624k|            auto rd = make_reader<T, char_type>();
  236|   624k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   624k|                return unexpected(e);
  238|   624k|            }
  239|       |
  240|   624k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   624k|                return impl(rd, range, value);
  242|   624k|            }
  243|       |
  244|   624k|            auto crange = get_as_contiguous(range);
  245|   624k|            SCN_TRY(it, impl(rd, crange, value));
  246|   624k|            return ranges_polyfill::batch_next(
  247|   624k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   624k|        }
  249|   624k|        else {
  250|   624k|            SCN_EXPECT(false);
  251|   624k|            SCN_UNREACHABLE;
  252|   624k|        }
  253|   624k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   624k|    {
  205|   624k|        SCN_TRY(it,
  ------------------
  |  |   71|   624k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   624k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   624k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   624k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.49k, False: 621k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.49k|    }                                                  \
  |  |  |  |   70|   624k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   621k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   621k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   621k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   621k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   621k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 621k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   621k|        return rd.read_specs(subr, specs, value, loc);
  218|   621k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  59.7k|    {
  223|  59.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  59.7k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  59.7k|            auto rd = make_reader<T, char_type>();
  228|  59.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  59.7k|                return unexpected(e);
  230|  59.7k|            }
  231|       |
  232|  59.7k|            return impl(rd, range, value);
  233|  59.7k|        }
  234|  59.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  59.7k|            auto rd = make_reader<T, char_type>();
  236|  59.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  59.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 59.7k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  59.7k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 59.7k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  59.7k|                return impl(rd, range, value);
  242|  59.7k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  59.7k|        else {
  250|  59.7k|            SCN_EXPECT(false);
  251|  59.7k|            SCN_UNREACHABLE;
  252|  59.7k|        }
  253|  59.7k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  59.7k|    {
  205|  59.7k|        SCN_TRY(it,
  ------------------
  |  |   71|  59.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  59.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  59.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  59.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 32, False: 59.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     32|    }                                                  \
  |  |  |  |   70|  59.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  59.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  59.7k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  59.7k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  59.7k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  59.7k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 59.7k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  59.7k|        return rd.read_specs(subr, specs, value, loc);
  218|  59.7k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  59.7k|    {
  223|  59.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  59.7k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  59.7k|            auto rd = make_reader<T, char_type>();
  228|  59.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  59.7k|                return unexpected(e);
  230|  59.7k|            }
  231|       |
  232|  59.7k|            return impl(rd, range, value);
  233|  59.7k|        }
  234|  59.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  59.7k|            auto rd = make_reader<T, char_type>();
  236|  59.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  59.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 59.7k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  59.7k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 59.7k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  59.7k|                return impl(rd, range, value);
  242|  59.7k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  59.7k|        else {
  250|  59.7k|            SCN_EXPECT(false);
  251|  59.7k|            SCN_UNREACHABLE;
  252|  59.7k|        }
  253|  59.7k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  59.7k|    {
  205|  59.7k|        SCN_TRY(it,
  ------------------
  |  |   71|  59.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  59.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  59.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  59.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 32, False: 59.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     32|    }                                                  \
  |  |  |  |   70|  59.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  59.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  59.7k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  59.7k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  59.7k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  59.7k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 59.7k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  59.7k|        return rd.read_specs(subr, specs, value, loc);
  218|  59.7k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  59.7k|    {
  223|  59.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  59.7k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  59.7k|            auto rd = make_reader<T, char_type>();
  228|  59.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  59.7k|                return unexpected(e);
  230|  59.7k|            }
  231|       |
  232|  59.7k|            return impl(rd, range, value);
  233|  59.7k|        }
  234|  59.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  59.7k|            auto rd = make_reader<T, char_type>();
  236|  59.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  59.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 59.7k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  59.7k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 59.7k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  59.7k|                return impl(rd, range, value);
  242|  59.7k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  59.7k|        else {
  250|  59.7k|            SCN_EXPECT(false);
  251|  59.7k|            SCN_UNREACHABLE;
  252|  59.7k|        }
  253|  59.7k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  59.7k|    {
  205|  59.7k|        SCN_TRY(it,
  ------------------
  |  |   71|  59.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  59.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  59.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  59.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 32, False: 59.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     32|    }                                                  \
  |  |  |  |   70|  59.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  59.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  59.7k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  59.7k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  59.7k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  59.7k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 59.7k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  59.7k|        return rd.read_specs(subr, specs, value, loc);
  218|  59.7k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  59.7k|    {
  223|  59.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  59.7k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  59.7k|            auto rd = make_reader<T, char_type>();
  228|  59.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  59.7k|                return unexpected(e);
  230|  59.7k|            }
  231|       |
  232|  59.7k|            return impl(rd, range, value);
  233|  59.7k|        }
  234|  59.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  59.7k|            auto rd = make_reader<T, char_type>();
  236|  59.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  59.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 59.7k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  59.7k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 59.7k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  59.7k|                return impl(rd, range, value);
  242|  59.7k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  59.7k|        else {
  250|  59.7k|            SCN_EXPECT(false);
  251|  59.7k|            SCN_UNREACHABLE;
  252|  59.7k|        }
  253|  59.7k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  59.7k|    {
  205|  59.7k|        SCN_TRY(it,
  ------------------
  |  |   71|  59.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  59.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  59.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  59.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 32, False: 59.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     32|    }                                                  \
  |  |  |  |   70|  59.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  59.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  59.7k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  59.7k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  59.7k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  59.7k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 59.7k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  59.7k|        return rd.read_specs(subr, specs, value, loc);
  218|  59.7k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  59.7k|    {
  223|  59.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  59.7k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  59.7k|            auto rd = make_reader<T, char_type>();
  228|  59.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  59.7k|                return unexpected(e);
  230|  59.7k|            }
  231|       |
  232|  59.7k|            return impl(rd, range, value);
  233|  59.7k|        }
  234|  59.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  59.7k|            auto rd = make_reader<T, char_type>();
  236|  59.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  59.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 59.7k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  59.7k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 59.7k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  59.7k|                return impl(rd, range, value);
  242|  59.7k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  59.7k|        else {
  250|  59.7k|            SCN_EXPECT(false);
  251|  59.7k|            SCN_UNREACHABLE;
  252|  59.7k|        }
  253|  59.7k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  59.7k|    {
  205|  59.7k|        SCN_TRY(it,
  ------------------
  |  |   71|  59.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  59.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  59.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  59.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 32, False: 59.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     32|    }                                                  \
  |  |  |  |   70|  59.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  59.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  59.7k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  59.7k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  59.7k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  59.7k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 59.7k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  59.7k|        return rd.read_specs(subr, specs, value, loc);
  218|  59.7k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  59.7k|    {
  223|  59.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  59.7k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  59.7k|            auto rd = make_reader<T, char_type>();
  228|  59.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  59.7k|                return unexpected(e);
  230|  59.7k|            }
  231|       |
  232|  59.7k|            return impl(rd, range, value);
  233|  59.7k|        }
  234|  59.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  59.7k|            auto rd = make_reader<T, char_type>();
  236|  59.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  59.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 59.7k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  59.7k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 59.7k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  59.7k|                return impl(rd, range, value);
  242|  59.7k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  59.7k|        else {
  250|  59.7k|            SCN_EXPECT(false);
  251|  59.7k|            SCN_UNREACHABLE;
  252|  59.7k|        }
  253|  59.7k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  59.7k|    {
  205|  59.7k|        SCN_TRY(it,
  ------------------
  |  |   71|  59.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  59.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  59.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  59.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 32, False: 59.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     32|    }                                                  \
  |  |  |  |   70|  59.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  59.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  59.7k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  59.7k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  59.7k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  59.7k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 59.7k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  59.7k|        return rd.read_specs(subr, specs, value, loc);
  218|  59.7k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
  121|   207k|    {
  122|   207k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   207k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   207k|                          basic_contiguous_scan_context<char_type>>) {
  126|   207k|            auto rd = make_reader<T, char_type>();
  127|   207k|            return impl(rd, range, value);
  128|   207k|        }
  129|   207k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   207k|            auto rd = make_reader<T, char_type>();
  131|   207k|            if (!is_segment_contiguous(range)) {
  132|   207k|                return impl(rd, range, value);
  133|   207k|            }
  134|   207k|            auto crange = get_as_contiguous(range);
  135|   207k|            SCN_TRY(it, impl(rd, crange, value));
  136|   207k|            return ranges_polyfill::batch_next(
  137|   207k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   207k|        }
  139|   207k|        else {
  140|   207k|            SCN_EXPECT(false);
  141|   207k|            SCN_UNREACHABLE;
  142|   207k|        }
  143|   207k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   207k|    {
  112|   207k|        SCN_TRY(it,
  ------------------
  |  |   71|   207k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   207k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   207k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   207k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.11k, False: 206k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.11k|    }                                                  \
  |  |  |  |   70|   207k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   206k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   206k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   206k|                    .transform_error(make_eof_scan_error));
  115|   206k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   206k|                               loc);
  117|   207k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  5.07M|{
   43|  5.07M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  5.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 28.1k, False: 5.04M]
  |  |  ------------------
  ------------------
   44|  28.1k|        return unexpected(e);
   45|  28.1k|    }
   46|       |
   47|  5.04M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 5.04M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  5.04M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  5.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  5.04M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
  121|   262k|    {
  122|   262k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   262k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   262k|                          basic_contiguous_scan_context<char_type>>) {
  126|   262k|            auto rd = make_reader<T, char_type>();
  127|   262k|            return impl(rd, range, value);
  128|   262k|        }
  129|   262k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   262k|            auto rd = make_reader<T, char_type>();
  131|   262k|            if (!is_segment_contiguous(range)) {
  132|   262k|                return impl(rd, range, value);
  133|   262k|            }
  134|   262k|            auto crange = get_as_contiguous(range);
  135|   262k|            SCN_TRY(it, impl(rd, crange, value));
  136|   262k|            return ranges_polyfill::batch_next(
  137|   262k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   262k|        }
  139|   262k|        else {
  140|   262k|            SCN_EXPECT(false);
  141|   262k|            SCN_UNREACHABLE;
  142|   262k|        }
  143|   262k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   262k|    {
  112|   262k|        SCN_TRY(it,
  ------------------
  |  |   71|   262k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   262k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   262k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   262k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.81k, False: 260k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.81k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.81k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.81k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.81k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.81k|    }                                                  \
  |  |  |  |   70|   262k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   260k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   260k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   260k|                    .transform_error(make_eof_scan_error));
  115|   260k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   260k|                               loc);
  117|   262k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
  121|   279k|    {
  122|   279k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   279k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   279k|                          basic_contiguous_scan_context<char_type>>) {
  126|   279k|            auto rd = make_reader<T, char_type>();
  127|   279k|            return impl(rd, range, value);
  128|   279k|        }
  129|   279k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   279k|            auto rd = make_reader<T, char_type>();
  131|   279k|            if (!is_segment_contiguous(range)) {
  132|   279k|                return impl(rd, range, value);
  133|   279k|            }
  134|   279k|            auto crange = get_as_contiguous(range);
  135|   279k|            SCN_TRY(it, impl(rd, crange, value));
  136|   279k|            return ranges_polyfill::batch_next(
  137|   279k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   279k|        }
  139|   279k|        else {
  140|   279k|            SCN_EXPECT(false);
  141|   279k|            SCN_UNREACHABLE;
  142|   279k|        }
  143|   279k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   279k|    {
  112|   279k|        SCN_TRY(it,
  ------------------
  |  |   71|   279k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   279k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   279k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.92k, False: 277k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.92k|    }                                                  \
  |  |  |  |   70|   279k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   277k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   277k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   277k|                    .transform_error(make_eof_scan_error));
  115|   277k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   277k|                               loc);
  117|   279k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
  121|   198k|    {
  122|   198k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   198k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   198k|                          basic_contiguous_scan_context<char_type>>) {
  126|   198k|            auto rd = make_reader<T, char_type>();
  127|   198k|            return impl(rd, range, value);
  128|   198k|        }
  129|   198k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   198k|            auto rd = make_reader<T, char_type>();
  131|   198k|            if (!is_segment_contiguous(range)) {
  132|   198k|                return impl(rd, range, value);
  133|   198k|            }
  134|   198k|            auto crange = get_as_contiguous(range);
  135|   198k|            SCN_TRY(it, impl(rd, crange, value));
  136|   198k|            return ranges_polyfill::batch_next(
  137|   198k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   198k|        }
  139|   198k|        else {
  140|   198k|            SCN_EXPECT(false);
  141|   198k|            SCN_UNREACHABLE;
  142|   198k|        }
  143|   198k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   198k|    {
  112|   198k|        SCN_TRY(it,
  ------------------
  |  |   71|   198k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   198k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   198k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 996, False: 197k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    996|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    996|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    996|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    996|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    996|    }                                                  \
  |  |  |  |   70|   198k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   197k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   197k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   197k|                    .transform_error(make_eof_scan_error));
  115|   197k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   197k|                               loc);
  117|   198k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
  121|   226k|    {
  122|   226k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   226k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   226k|                          basic_contiguous_scan_context<char_type>>) {
  126|   226k|            auto rd = make_reader<T, char_type>();
  127|   226k|            return impl(rd, range, value);
  128|   226k|        }
  129|   226k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   226k|            auto rd = make_reader<T, char_type>();
  131|   226k|            if (!is_segment_contiguous(range)) {
  132|   226k|                return impl(rd, range, value);
  133|   226k|            }
  134|   226k|            auto crange = get_as_contiguous(range);
  135|   226k|            SCN_TRY(it, impl(rd, crange, value));
  136|   226k|            return ranges_polyfill::batch_next(
  137|   226k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   226k|        }
  139|   226k|        else {
  140|   226k|            SCN_EXPECT(false);
  141|   226k|            SCN_UNREACHABLE;
  142|   226k|        }
  143|   226k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   226k|    {
  112|   226k|        SCN_TRY(it,
  ------------------
  |  |   71|   226k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   226k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   226k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   226k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.41k, False: 225k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.41k|    }                                                  \
  |  |  |  |   70|   226k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   225k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   225k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   225k|                    .transform_error(make_eof_scan_error));
  115|   225k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   225k|                               loc);
  117|   226k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
  121|   233k|    {
  122|   233k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   233k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   233k|                          basic_contiguous_scan_context<char_type>>) {
  126|   233k|            auto rd = make_reader<T, char_type>();
  127|   233k|            return impl(rd, range, value);
  128|   233k|        }
  129|   233k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   233k|            auto rd = make_reader<T, char_type>();
  131|   233k|            if (!is_segment_contiguous(range)) {
  132|   233k|                return impl(rd, range, value);
  133|   233k|            }
  134|   233k|            auto crange = get_as_contiguous(range);
  135|   233k|            SCN_TRY(it, impl(rd, crange, value));
  136|   233k|            return ranges_polyfill::batch_next(
  137|   233k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   233k|        }
  139|   233k|        else {
  140|   233k|            SCN_EXPECT(false);
  141|   233k|            SCN_UNREACHABLE;
  142|   233k|        }
  143|   233k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   233k|    {
  112|   233k|        SCN_TRY(it,
  ------------------
  |  |   71|   233k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   233k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   233k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   233k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.50k, False: 231k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.50k|    }                                                  \
  |  |  |  |   70|   233k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   231k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   231k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   231k|                    .transform_error(make_eof_scan_error));
  115|   231k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   231k|                               loc);
  117|   233k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
  222|   493k|    {
  223|   493k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   493k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   493k|                          basic_contiguous_scan_context<char_type>>) {
  227|   493k|            auto rd = make_reader<T, char_type>();
  228|   493k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   493k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 493k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   493k|            return impl(rd, range, value);
  233|   493k|        }
  234|   493k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   493k|            auto rd = make_reader<T, char_type>();
  236|   493k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   493k|                return unexpected(e);
  238|   493k|            }
  239|       |
  240|   493k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   493k|                return impl(rd, range, value);
  242|   493k|            }
  243|       |
  244|   493k|            auto crange = get_as_contiguous(range);
  245|   493k|            SCN_TRY(it, impl(rd, crange, value));
  246|   493k|            return ranges_polyfill::batch_next(
  247|   493k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   493k|        }
  249|   493k|        else {
  250|   493k|            SCN_EXPECT(false);
  251|   493k|            SCN_UNREACHABLE;
  252|   493k|        }
  253|   493k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   493k|    {
  205|   493k|        SCN_TRY(it,
  ------------------
  |  |   71|   493k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   493k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   493k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   493k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.34k, False: 489k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.34k|    }                                                  \
  |  |  |  |   70|   493k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   489k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   489k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   489k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   489k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   489k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 489k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   489k|        return rd.read_specs(subr, specs, value, loc);
  218|   489k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
  222|   706k|    {
  223|   706k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   706k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   706k|                          basic_contiguous_scan_context<char_type>>) {
  227|   706k|            auto rd = make_reader<T, char_type>();
  228|   706k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   706k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 706k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   706k|            return impl(rd, range, value);
  233|   706k|        }
  234|   706k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   706k|            auto rd = make_reader<T, char_type>();
  236|   706k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   706k|                return unexpected(e);
  238|   706k|            }
  239|       |
  240|   706k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   706k|                return impl(rd, range, value);
  242|   706k|            }
  243|       |
  244|   706k|            auto crange = get_as_contiguous(range);
  245|   706k|            SCN_TRY(it, impl(rd, crange, value));
  246|   706k|            return ranges_polyfill::batch_next(
  247|   706k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   706k|        }
  249|   706k|        else {
  250|   706k|            SCN_EXPECT(false);
  251|   706k|            SCN_UNREACHABLE;
  252|   706k|        }
  253|   706k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   706k|    {
  205|   706k|        SCN_TRY(it,
  ------------------
  |  |   71|   706k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   706k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   706k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   706k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.50k, False: 701k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.50k|    }                                                  \
  |  |  |  |   70|   706k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   701k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   701k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   701k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   701k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   701k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 701k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   701k|        return rd.read_specs(subr, specs, value, loc);
  218|   701k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
  222|   748k|    {
  223|   748k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   748k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   748k|                          basic_contiguous_scan_context<char_type>>) {
  227|   748k|            auto rd = make_reader<T, char_type>();
  228|   748k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   748k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 748k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   748k|            return impl(rd, range, value);
  233|   748k|        }
  234|   748k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   748k|            auto rd = make_reader<T, char_type>();
  236|   748k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   748k|                return unexpected(e);
  238|   748k|            }
  239|       |
  240|   748k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   748k|                return impl(rd, range, value);
  242|   748k|            }
  243|       |
  244|   748k|            auto crange = get_as_contiguous(range);
  245|   748k|            SCN_TRY(it, impl(rd, crange, value));
  246|   748k|            return ranges_polyfill::batch_next(
  247|   748k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   748k|        }
  249|   748k|        else {
  250|   748k|            SCN_EXPECT(false);
  251|   748k|            SCN_UNREACHABLE;
  252|   748k|        }
  253|   748k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   748k|    {
  205|   748k|        SCN_TRY(it,
  ------------------
  |  |   71|   748k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   748k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   748k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   748k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.84k, False: 742k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.84k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.84k|    }                                                  \
  |  |  |  |   70|   748k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   742k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   742k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   742k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   742k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   742k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 742k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   742k|        return rd.read_specs(subr, specs, value, loc);
  218|   742k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
  222|   493k|    {
  223|   493k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   493k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   493k|                          basic_contiguous_scan_context<char_type>>) {
  227|   493k|            auto rd = make_reader<T, char_type>();
  228|   493k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   493k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 493k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   493k|            return impl(rd, range, value);
  233|   493k|        }
  234|   493k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   493k|            auto rd = make_reader<T, char_type>();
  236|   493k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   493k|                return unexpected(e);
  238|   493k|            }
  239|       |
  240|   493k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   493k|                return impl(rd, range, value);
  242|   493k|            }
  243|       |
  244|   493k|            auto crange = get_as_contiguous(range);
  245|   493k|            SCN_TRY(it, impl(rd, crange, value));
  246|   493k|            return ranges_polyfill::batch_next(
  247|   493k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   493k|        }
  249|   493k|        else {
  250|   493k|            SCN_EXPECT(false);
  251|   493k|            SCN_UNREACHABLE;
  252|   493k|        }
  253|   493k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   493k|    {
  205|   493k|        SCN_TRY(it,
  ------------------
  |  |   71|   493k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   493k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   493k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   493k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.09k, False: 490k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.09k|    }                                                  \
  |  |  |  |   70|   493k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   490k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   490k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   490k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   490k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   490k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 490k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   490k|        return rd.read_specs(subr, specs, value, loc);
  218|   490k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
  222|   601k|    {
  223|   601k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   601k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   601k|                          basic_contiguous_scan_context<char_type>>) {
  227|   601k|            auto rd = make_reader<T, char_type>();
  228|   601k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   601k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 601k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   601k|            return impl(rd, range, value);
  233|   601k|        }
  234|   601k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   601k|            auto rd = make_reader<T, char_type>();
  236|   601k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   601k|                return unexpected(e);
  238|   601k|            }
  239|       |
  240|   601k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   601k|                return impl(rd, range, value);
  242|   601k|            }
  243|       |
  244|   601k|            auto crange = get_as_contiguous(range);
  245|   601k|            SCN_TRY(it, impl(rd, crange, value));
  246|   601k|            return ranges_polyfill::batch_next(
  247|   601k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   601k|        }
  249|   601k|        else {
  250|   601k|            SCN_EXPECT(false);
  251|   601k|            SCN_UNREACHABLE;
  252|   601k|        }
  253|   601k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   601k|    {
  205|   601k|        SCN_TRY(it,
  ------------------
  |  |   71|   601k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   601k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   601k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   601k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.37k, False: 596k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.37k|    }                                                  \
  |  |  |  |   70|   601k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   596k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   596k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   596k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   596k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   596k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 596k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   596k|        return rd.read_specs(subr, specs, value, loc);
  218|   596k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
  222|   622k|    {
  223|   622k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   622k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   622k|                          basic_contiguous_scan_context<char_type>>) {
  227|   622k|            auto rd = make_reader<T, char_type>();
  228|   622k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   622k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 622k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   622k|            return impl(rd, range, value);
  233|   622k|        }
  234|   622k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   622k|            auto rd = make_reader<T, char_type>();
  236|   622k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   622k|                return unexpected(e);
  238|   622k|            }
  239|       |
  240|   622k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   622k|                return impl(rd, range, value);
  242|   622k|            }
  243|       |
  244|   622k|            auto crange = get_as_contiguous(range);
  245|   622k|            SCN_TRY(it, impl(rd, crange, value));
  246|   622k|            return ranges_polyfill::batch_next(
  247|   622k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   622k|        }
  249|   622k|        else {
  250|   622k|            SCN_EXPECT(false);
  251|   622k|            SCN_UNREACHABLE;
  252|   622k|        }
  253|   622k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   622k|    {
  205|   622k|        SCN_TRY(it,
  ------------------
  |  |   71|   622k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   622k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   622k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   622k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.61k, False: 617k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.61k|    }                                                  \
  |  |  |  |   70|   622k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   617k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   617k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   617k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   617k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   617k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 617k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   617k|        return rd.read_specs(subr, specs, value, loc);
  218|   617k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  41.3k|    {
  122|  41.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  41.3k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  41.3k|            auto rd = make_reader<T, char_type>();
  127|  41.3k|            return impl(rd, range, value);
  128|  41.3k|        }
  129|  41.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  41.3k|            auto rd = make_reader<T, char_type>();
  131|  41.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 41.3k, False: 0]
  ------------------
  132|  41.3k|                return impl(rd, range, value);
  133|  41.3k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  41.3k|        else {
  140|  41.3k|            SCN_EXPECT(false);
  141|  41.3k|            SCN_UNREACHABLE;
  142|  41.3k|        }
  143|  41.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  41.3k|    {
  112|  41.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  41.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  41.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 24, False: 41.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     24|    }                                                  \
  |  |  |  |   70|  41.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  41.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  41.3k|                    .transform_error(make_eof_scan_error));
  115|  41.3k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  41.3k|                               loc);
  117|  41.3k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|  1.29M|{
   43|  1.29M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 246, False: 1.29M]
  |  |  ------------------
  ------------------
   44|    246|        return unexpected(e);
   45|    246|    }
   46|       |
   47|  1.29M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 1.29M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  1.29M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  1.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  1.29M|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  41.3k|    {
  122|  41.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  41.3k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  41.3k|            auto rd = make_reader<T, char_type>();
  127|  41.3k|            return impl(rd, range, value);
  128|  41.3k|        }
  129|  41.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  41.3k|            auto rd = make_reader<T, char_type>();
  131|  41.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 41.3k, False: 0]
  ------------------
  132|  41.3k|                return impl(rd, range, value);
  133|  41.3k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  41.3k|        else {
  140|  41.3k|            SCN_EXPECT(false);
  141|  41.3k|            SCN_UNREACHABLE;
  142|  41.3k|        }
  143|  41.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  41.3k|    {
  112|  41.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  41.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  41.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 24, False: 41.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     24|    }                                                  \
  |  |  |  |   70|  41.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  41.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  41.3k|                    .transform_error(make_eof_scan_error));
  115|  41.3k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  41.3k|                               loc);
  117|  41.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  41.3k|    {
  122|  41.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  41.3k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  41.3k|            auto rd = make_reader<T, char_type>();
  127|  41.3k|            return impl(rd, range, value);
  128|  41.3k|        }
  129|  41.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  41.3k|            auto rd = make_reader<T, char_type>();
  131|  41.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 41.3k, False: 0]
  ------------------
  132|  41.3k|                return impl(rd, range, value);
  133|  41.3k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  41.3k|        else {
  140|  41.3k|            SCN_EXPECT(false);
  141|  41.3k|            SCN_UNREACHABLE;
  142|  41.3k|        }
  143|  41.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  41.3k|    {
  112|  41.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  41.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  41.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 24, False: 41.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     24|    }                                                  \
  |  |  |  |   70|  41.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  41.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  41.3k|                    .transform_error(make_eof_scan_error));
  115|  41.3k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  41.3k|                               loc);
  117|  41.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  41.3k|    {
  122|  41.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  41.3k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  41.3k|            auto rd = make_reader<T, char_type>();
  127|  41.3k|            return impl(rd, range, value);
  128|  41.3k|        }
  129|  41.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  41.3k|            auto rd = make_reader<T, char_type>();
  131|  41.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 41.3k, False: 0]
  ------------------
  132|  41.3k|                return impl(rd, range, value);
  133|  41.3k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  41.3k|        else {
  140|  41.3k|            SCN_EXPECT(false);
  141|  41.3k|            SCN_UNREACHABLE;
  142|  41.3k|        }
  143|  41.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  41.3k|    {
  112|  41.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  41.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  41.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 24, False: 41.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     24|    }                                                  \
  |  |  |  |   70|  41.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  41.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  41.3k|                    .transform_error(make_eof_scan_error));
  115|  41.3k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  41.3k|                               loc);
  117|  41.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  41.3k|    {
  122|  41.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  41.3k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  41.3k|            auto rd = make_reader<T, char_type>();
  127|  41.3k|            return impl(rd, range, value);
  128|  41.3k|        }
  129|  41.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  41.3k|            auto rd = make_reader<T, char_type>();
  131|  41.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 41.3k, False: 0]
  ------------------
  132|  41.3k|                return impl(rd, range, value);
  133|  41.3k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  41.3k|        else {
  140|  41.3k|            SCN_EXPECT(false);
  141|  41.3k|            SCN_UNREACHABLE;
  142|  41.3k|        }
  143|  41.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  41.3k|    {
  112|  41.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  41.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  41.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 24, False: 41.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     24|    }                                                  \
  |  |  |  |   70|  41.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  41.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  41.3k|                    .transform_error(make_eof_scan_error));
  115|  41.3k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  41.3k|                               loc);
  117|  41.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  41.3k|    {
  122|  41.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  41.3k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  41.3k|            auto rd = make_reader<T, char_type>();
  127|  41.3k|            return impl(rd, range, value);
  128|  41.3k|        }
  129|  41.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  41.3k|            auto rd = make_reader<T, char_type>();
  131|  41.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 41.3k, False: 0]
  ------------------
  132|  41.3k|                return impl(rd, range, value);
  133|  41.3k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  41.3k|        else {
  140|  41.3k|            SCN_EXPECT(false);
  141|  41.3k|            SCN_UNREACHABLE;
  142|  41.3k|        }
  143|  41.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  41.3k|    {
  112|  41.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  41.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  41.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 24, False: 41.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     24|    }                                                  \
  |  |  |  |   70|  41.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  41.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  41.3k|                    .transform_error(make_eof_scan_error));
  115|  41.3k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  41.3k|                               loc);
  117|  41.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|   165k|    {
  223|   165k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   165k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|   165k|            auto rd = make_reader<T, char_type>();
  228|   165k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|   165k|                return unexpected(e);
  230|   165k|            }
  231|       |
  232|   165k|            return impl(rd, range, value);
  233|   165k|        }
  234|   165k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|   165k|            auto rd = make_reader<T, char_type>();
  236|   165k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 165k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|   165k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 165k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|   165k|                return impl(rd, range, value);
  242|   165k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|   165k|        else {
  250|   165k|            SCN_EXPECT(false);
  251|   165k|            SCN_UNREACHABLE;
  252|   165k|        }
  253|   165k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|   165k|    {
  205|   165k|        SCN_TRY(it,
  ------------------
  |  |   71|   165k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   165k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   165k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 104, False: 165k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    104|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    104|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    104|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    104|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    104|    }                                                  \
  |  |  |  |   70|   165k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   165k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   165k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   165k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   165k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 165k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   165k|        return rd.read_specs(subr, specs, value, loc);
  218|   165k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|   179k|    {
  223|   179k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   179k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|   179k|            auto rd = make_reader<T, char_type>();
  228|   179k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|   179k|                return unexpected(e);
  230|   179k|            }
  231|       |
  232|   179k|            return impl(rd, range, value);
  233|   179k|        }
  234|   179k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|   179k|            auto rd = make_reader<T, char_type>();
  236|   179k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 179k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|   179k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 179k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|   179k|                return impl(rd, range, value);
  242|   179k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|   179k|        else {
  250|   179k|            SCN_EXPECT(false);
  251|   179k|            SCN_UNREACHABLE;
  252|   179k|        }
  253|   179k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|   179k|    {
  205|   179k|        SCN_TRY(it,
  ------------------
  |  |   71|   179k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   179k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   179k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 114, False: 179k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    114|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    114|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    114|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    114|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    114|    }                                                  \
  |  |  |  |   70|   179k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   179k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   179k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   179k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   179k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 179k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   179k|        return rd.read_specs(subr, specs, value, loc);
  218|   179k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|   179k|    {
  223|   179k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   179k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|   179k|            auto rd = make_reader<T, char_type>();
  228|   179k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|   179k|                return unexpected(e);
  230|   179k|            }
  231|       |
  232|   179k|            return impl(rd, range, value);
  233|   179k|        }
  234|   179k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|   179k|            auto rd = make_reader<T, char_type>();
  236|   179k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 179k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|   179k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 179k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|   179k|                return impl(rd, range, value);
  242|   179k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|   179k|        else {
  250|   179k|            SCN_EXPECT(false);
  251|   179k|            SCN_UNREACHABLE;
  252|   179k|        }
  253|   179k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|   179k|    {
  205|   179k|        SCN_TRY(it,
  ------------------
  |  |   71|   179k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   179k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   179k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 114, False: 179k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    114|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    114|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    114|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    114|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    114|    }                                                  \
  |  |  |  |   70|   179k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   179k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   179k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   179k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   179k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 179k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   179k|        return rd.read_specs(subr, specs, value, loc);
  218|   179k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|   165k|    {
  223|   165k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   165k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|   165k|            auto rd = make_reader<T, char_type>();
  228|   165k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|   165k|                return unexpected(e);
  230|   165k|            }
  231|       |
  232|   165k|            return impl(rd, range, value);
  233|   165k|        }
  234|   165k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|   165k|            auto rd = make_reader<T, char_type>();
  236|   165k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 165k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|   165k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 165k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|   165k|                return impl(rd, range, value);
  242|   165k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|   165k|        else {
  250|   165k|            SCN_EXPECT(false);
  251|   165k|            SCN_UNREACHABLE;
  252|   165k|        }
  253|   165k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|   165k|    {
  205|   165k|        SCN_TRY(it,
  ------------------
  |  |   71|   165k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   165k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   165k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 106, False: 165k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    106|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    106|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    106|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    106|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    106|    }                                                  \
  |  |  |  |   70|   165k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   165k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   165k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   165k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   165k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 165k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   165k|        return rd.read_specs(subr, specs, value, loc);
  218|   165k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|   179k|    {
  223|   179k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   179k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|   179k|            auto rd = make_reader<T, char_type>();
  228|   179k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|   179k|                return unexpected(e);
  230|   179k|            }
  231|       |
  232|   179k|            return impl(rd, range, value);
  233|   179k|        }
  234|   179k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|   179k|            auto rd = make_reader<T, char_type>();
  236|   179k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 179k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|   179k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 179k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|   179k|                return impl(rd, range, value);
  242|   179k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|   179k|        else {
  250|   179k|            SCN_EXPECT(false);
  251|   179k|            SCN_UNREACHABLE;
  252|   179k|        }
  253|   179k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|   179k|    {
  205|   179k|        SCN_TRY(it,
  ------------------
  |  |   71|   179k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   179k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   179k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 114, False: 179k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    114|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    114|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    114|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    114|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    114|    }                                                  \
  |  |  |  |   70|   179k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   179k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   179k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   179k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   179k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 179k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   179k|        return rd.read_specs(subr, specs, value, loc);
  218|   179k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|   179k|    {
  223|   179k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   179k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|   179k|            auto rd = make_reader<T, char_type>();
  228|   179k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|   179k|                return unexpected(e);
  230|   179k|            }
  231|       |
  232|   179k|            return impl(rd, range, value);
  233|   179k|        }
  234|   179k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|   179k|            auto rd = make_reader<T, char_type>();
  236|   179k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 179k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|   179k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 179k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|   179k|                return impl(rd, range, value);
  242|   179k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|   179k|        else {
  250|   179k|            SCN_EXPECT(false);
  251|   179k|            SCN_UNREACHABLE;
  252|   179k|        }
  253|   179k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|   179k|    {
  205|   179k|        SCN_TRY(it,
  ------------------
  |  |   71|   179k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   179k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   179k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 114, False: 179k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    114|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    114|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    114|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    114|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    114|    }                                                  \
  |  |  |  |   70|   179k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   179k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   179k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   179k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   179k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 179k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   179k|        return rd.read_specs(subr, specs, value, loc);
  218|   179k|    }

_ZN3scn2v24impl39code_point_length_by_starting_code_unitIcEEmT_:
  109|  1.67M|{
  110|  1.67M|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|  1.67M|}
_ZN3scn2v24impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   88|   579k|{
   89|   579k|    if (input.empty()) {
  ------------------
  |  Branch (89:9): [True: 0, False: 579k]
  ------------------
   90|      0|        return true;
   91|      0|    }
   92|       |
   93|   579k|    constexpr auto enc = get_encoding<CharT>();
   94|   579k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (94:19): [Folded - Ignored]
  ------------------
   95|   579k|        return simdutf::validate_utf8(input.data(), input.size());
   96|   579k|    }
   97|   579k|    else if constexpr (enc == encoding::utf16) {
   98|   579k|        return simdutf::validate_utf16(
   99|   579k|            reinterpret_cast<const char16_t*>(input.data()), input.size());
  100|   579k|    }
  101|   579k|    else if constexpr (enc == encoding::utf32) {
  102|   579k|        return simdutf::validate_utf32(
  103|   579k|            reinterpret_cast<const char32_t*>(input.data()), input.size());
  104|   579k|    }
  105|   579k|}
_ZN3scn2v24impl26transcode_possibly_invalidIcDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EE:
  448|   289k|{
  449|   289k|    if (input.empty()) {
  ------------------
  |  Branch (449:9): [True: 0, False: 289k]
  ------------------
  450|      0|        return 0;
  451|      0|    }
  452|       |
  453|   289k|    if constexpr (get_encoding<SourceCharT>() == get_encoding<DestCharT>()) {
  ------------------
  |  Branch (453:19): [Folded - Ignored]
  ------------------
  454|   289k|        SCN_EXPECT(output.size() >= input.size());
  455|   289k|        std::memcpy(output.data(), input.data(),
  456|   289k|                    input.size() * sizeof(SourceCharT));
  457|   289k|        return input.size();
  458|   289k|    }
  459|       |
  460|   289k|    const auto result = [&]() {
  461|   289k|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|   289k|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|   289k|        if constexpr (src_enc == encoding::utf8) {
  465|   289k|            if constexpr (dest_enc == encoding::utf16) {
  466|   289k|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|   289k|                    input.data(), input.size(),
  468|   289k|                    reinterpret_cast<char16_t*>(output.data()));
  469|   289k|            }
  470|   289k|            else {
  471|   289k|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|   289k|                    input.data(), input.size(),
  473|   289k|                    reinterpret_cast<char32_t*>(output.data()));
  474|   289k|            }
  475|   289k|        }
  476|   289k|        else if constexpr (src_enc == encoding::utf16) {
  477|   289k|            if constexpr (dest_enc == encoding::utf8) {
  478|   289k|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|   289k|                    reinterpret_cast<const char16_t*>(input.data()),
  480|   289k|                    input.size(), output.data());
  481|   289k|            }
  482|   289k|            else {
  483|   289k|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|   289k|                    reinterpret_cast<const char16_t*>(input.data()),
  485|   289k|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|   289k|            }
  487|   289k|        }
  488|   289k|        else if constexpr (src_enc == encoding::utf32) {
  489|   289k|            if constexpr (dest_enc == encoding::utf8) {
  490|   289k|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|   289k|                    reinterpret_cast<const char32_t*>(input.data()),
  492|   289k|                    input.size(), output.data());
  493|   289k|            }
  494|   289k|            else {
  495|   289k|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|   289k|                    reinterpret_cast<const char32_t*>(input.data()),
  497|   289k|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|   289k|            }
  499|   289k|        }
  500|   289k|    }();
  501|       |
  502|   289k|    if (SCN_UNLIKELY(result.error != simdutf::SUCCESS)) {
  ------------------
  |  |  153|   289k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 289k]
  |  |  ------------------
  ------------------
  503|      0|        return std::nullopt;
  504|      0|    }
  505|   289k|    SCN_ENSURE(result.count <= output.size());
  ------------------
  |  |  243|   289k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|   289k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  506|      0|    return result.count;
  507|   289k|}
_ZZN3scn2v24impl26transcode_possibly_invalidIcDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EEENKUlvE_clEv:
  460|   289k|    const auto result = [&]() {
  461|   289k|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|   289k|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|   289k|        if constexpr (src_enc == encoding::utf8) {
  ------------------
  |  Branch (464:23): [Folded - Ignored]
  ------------------
  465|   289k|            if constexpr (dest_enc == encoding::utf16) {
  ------------------
  |  Branch (465:27): [Folded - Ignored]
  ------------------
  466|   289k|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|   289k|                    input.data(), input.size(),
  468|   289k|                    reinterpret_cast<char16_t*>(output.data()));
  469|   289k|            }
  470|   289k|            else {
  471|   289k|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|   289k|                    input.data(), input.size(),
  473|   289k|                    reinterpret_cast<char32_t*>(output.data()));
  474|   289k|            }
  475|   289k|        }
  476|   289k|        else if constexpr (src_enc == encoding::utf16) {
  477|   289k|            if constexpr (dest_enc == encoding::utf8) {
  478|   289k|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|   289k|                    reinterpret_cast<const char16_t*>(input.data()),
  480|   289k|                    input.size(), output.data());
  481|   289k|            }
  482|   289k|            else {
  483|   289k|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|   289k|                    reinterpret_cast<const char16_t*>(input.data()),
  485|   289k|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|   289k|            }
  487|   289k|        }
  488|   289k|        else if constexpr (src_enc == encoding::utf32) {
  489|   289k|            if constexpr (dest_enc == encoding::utf8) {
  490|   289k|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|   289k|                    reinterpret_cast<const char32_t*>(input.data()),
  492|   289k|                    input.size(), output.data());
  493|   289k|            }
  494|   289k|            else {
  495|   289k|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|   289k|                    reinterpret_cast<const char32_t*>(input.data()),
  497|   289k|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|   289k|            }
  499|   289k|        }
  500|   289k|    }();
_ZN3scn2v24impl28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
  115|   579k|{
  116|   579k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|   579k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   579k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  117|       |
  118|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  119|   579k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|   579k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 579k]
  |  |  ------------------
  ------------------
  120|      0|        return detail::invalid_code_point;
  121|      0|    }
  122|       |
  123|   579k|    constexpr auto enc = get_encoding<CharT>();
  124|   579k|    char32_t output{};
  125|   579k|    size_t ret{};
  126|   579k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|   579k|#ifndef NDEBUG
  128|   579k|        if (validate_unicode(input)) {
  ------------------
  |  Branch (128:13): [True: 579k, False: 0]
  ------------------
  129|   579k|            auto len =
  130|   579k|                simdutf::utf32_length_from_utf8(input.data(), input.size());
  131|   579k|            SCN_EXPECT(len == 1);
  ------------------
  |  |  242|   579k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   579k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  132|   579k|        }
  133|      0|#endif
  134|      0|        ret = simdutf::convert_utf8_to_utf32(input.data(), len, &output);
  135|   579k|    }
  136|      0|    else if constexpr (enc == encoding::utf16) {
  137|      0|#ifndef NDEBUG
  138|      0|        if (validate_unicode(input)) {
  139|      0|            auto len = simdutf::utf32_length_from_utf16(
  140|      0|                reinterpret_cast<const char16_t*>(input.data()), input.size());
  141|      0|            SCN_EXPECT(len == 1);
  142|      0|        }
  143|      0|#endif
  144|      0|        ret = simdutf::convert_utf16_to_utf32(
  145|      0|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  146|      0|    }
  147|      0|    else if constexpr (enc == encoding::utf32) {
  148|      0|        output = static_cast<char32_t>(input[0]);
  149|      0|        ret = output < detail::invalid_code_point;
  150|      0|    }
  151|       |
  152|   579k|    if (SCN_UNLIKELY(ret != 1)) {
  ------------------
  |  |  153|   579k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 579k]
  |  |  ------------------
  ------------------
  153|      0|        return detail::invalid_code_point;
  154|      0|    }
  155|   579k|    return static_cast<char32_t>(output);
  156|   579k|}
_ZN3scn2v24impl19get_next_code_pointIcEENS1_21iterator_value_resultIDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEEEEDiEESC_:
  262|   116k|{
  263|   116k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|   116k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   116k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  264|       |
  265|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  266|   116k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 33.8k, False: 82.4k]
  |  |  ------------------
  ------------------
  267|  33.8k|        return {get_start_of_next_code_point(input),
  268|  33.8k|                detail::invalid_code_point};
  269|  33.8k|    }
  270|  82.4k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  153|  82.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 660, False: 81.7k]
  |  |  ------------------
  ------------------
  271|    660|        return {input.end(), detail::invalid_code_point};
  272|    660|    }
  273|       |
  274|  81.7k|    constexpr auto enc = get_encoding<CharT>();
  275|  81.7k|    std::size_t result{1};
  276|  81.7k|    char32_t output{};
  277|  81.7k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (277:19): [Folded - Ignored]
  ------------------
  278|  81.7k|        result = simdutf::convert_utf8_to_utf32(
  279|  81.7k|            reinterpret_cast<const char*>(input.data()), len, &output);
  280|  81.7k|    }
  281|  81.7k|    else if constexpr (enc == encoding::utf16) {
  282|  81.7k|        result = simdutf::convert_utf16_to_utf32(
  283|  81.7k|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  284|  81.7k|    }
  285|  81.7k|    else if constexpr (enc == encoding::utf32) {
  286|  81.7k|        SCN_EXPECT(len == 1);
  287|  81.7k|        output = static_cast<char32_t>(input[0]);
  288|  81.7k|    }
  289|       |
  290|  81.7k|    if (SCN_UNLIKELY(result != 1)) {
  ------------------
  |  |  153|  81.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.76k, False: 77.0k]
  |  |  ------------------
  ------------------
  291|  4.76k|        return {get_start_of_next_code_point(input.substr(1)),
  292|  4.76k|                detail::invalid_code_point};
  293|  4.76k|    }
  294|       |
  295|  77.0k|    return {input.begin() + len, output};
  296|  81.7k|}
_ZN3scn2v24impl28get_start_of_next_code_pointIcEEDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEEESB_:
  247|  38.6k|{
  248|  38.6k|    auto it = input.begin();
  249|   143k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (249:12): [True: 113k, False: 29.9k]
  ------------------
  250|   113k|        if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (250:13): [True: 8.65k, False: 104k]
  ------------------
  251|  8.65k|            break;
  252|  8.65k|        }
  253|   113k|    }
  254|       |
  255|  38.6k|    return it;
  256|  38.6k|}
_ZN3scn2v24impl39code_point_length_by_starting_code_unitIwEEmT_:
  109|  88.2M|{
  110|  88.2M|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|  88.2M|}
_ZN3scn2v24impl26transcode_possibly_invalidIwDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EE:
  448|  6.35M|{
  449|  6.35M|    if (input.empty()) {
  ------------------
  |  Branch (449:9): [True: 0, False: 6.35M]
  ------------------
  450|      0|        return 0;
  451|      0|    }
  452|       |
  453|  6.35M|    if constexpr (get_encoding<SourceCharT>() == get_encoding<DestCharT>()) {
  ------------------
  |  Branch (453:19): [Folded - Ignored]
  ------------------
  454|  6.35M|        SCN_EXPECT(output.size() >= input.size());
  ------------------
  |  |  242|  6.35M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.35M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|        std::memcpy(output.data(), input.data(),
  456|  6.35M|                    input.size() * sizeof(SourceCharT));
  457|  6.35M|        return input.size();
  458|  6.35M|    }
  459|       |
  460|      0|    const auto result = [&]() {
  461|      0|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|      0|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|      0|        if constexpr (src_enc == encoding::utf8) {
  465|      0|            if constexpr (dest_enc == encoding::utf16) {
  466|      0|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|      0|                    input.data(), input.size(),
  468|      0|                    reinterpret_cast<char16_t*>(output.data()));
  469|      0|            }
  470|      0|            else {
  471|      0|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|      0|                    input.data(), input.size(),
  473|      0|                    reinterpret_cast<char32_t*>(output.data()));
  474|      0|            }
  475|      0|        }
  476|      0|        else if constexpr (src_enc == encoding::utf16) {
  477|      0|            if constexpr (dest_enc == encoding::utf8) {
  478|      0|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  480|      0|                    input.size(), output.data());
  481|      0|            }
  482|      0|            else {
  483|      0|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  485|      0|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|      0|            }
  487|      0|        }
  488|      0|        else if constexpr (src_enc == encoding::utf32) {
  489|      0|            if constexpr (dest_enc == encoding::utf8) {
  490|      0|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  492|      0|                    input.size(), output.data());
  493|      0|            }
  494|      0|            else {
  495|      0|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  497|      0|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|      0|            }
  499|      0|        }
  500|      0|    }();
  501|       |
  502|      0|    if (SCN_UNLIKELY(result.error != simdutf::SUCCESS)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  503|      0|        return std::nullopt;
  504|      0|    }
  505|      0|    SCN_ENSURE(result.count <= output.size());
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  506|      0|    return result.count;
  507|      0|}
_ZN3scn2v24impl28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
  115|  5.18M|{
  116|  5.18M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|  5.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  117|       |
  118|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  119|  5.18M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|  5.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.18M]
  |  |  ------------------
  ------------------
  120|      0|        return detail::invalid_code_point;
  121|      0|    }
  122|       |
  123|  5.18M|    constexpr auto enc = get_encoding<CharT>();
  124|  5.18M|    char32_t output{};
  125|  5.18M|    size_t ret{};
  126|  5.18M|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|  5.18M|#ifndef NDEBUG
  128|  5.18M|        if (validate_unicode(input)) {
  129|  5.18M|            auto len =
  130|  5.18M|                simdutf::utf32_length_from_utf8(input.data(), input.size());
  131|  5.18M|            SCN_EXPECT(len == 1);
  132|  5.18M|        }
  133|  5.18M|#endif
  134|  5.18M|        ret = simdutf::convert_utf8_to_utf32(input.data(), len, &output);
  135|  5.18M|    }
  136|  5.18M|    else if constexpr (enc == encoding::utf16) {
  ------------------
  |  Branch (136:24): [Folded - Ignored]
  ------------------
  137|  5.18M|#ifndef NDEBUG
  138|  5.18M|        if (validate_unicode(input)) {
  139|  5.18M|            auto len = simdutf::utf32_length_from_utf16(
  140|  5.18M|                reinterpret_cast<const char16_t*>(input.data()), input.size());
  141|  5.18M|            SCN_EXPECT(len == 1);
  142|  5.18M|        }
  143|  5.18M|#endif
  144|  5.18M|        ret = simdutf::convert_utf16_to_utf32(
  145|  5.18M|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  146|  5.18M|    }
  147|  5.18M|    else if constexpr (enc == encoding::utf32) {
  ------------------
  |  Branch (147:24): [Folded - Ignored]
  ------------------
  148|  5.18M|        output = static_cast<char32_t>(input[0]);
  149|  5.18M|        ret = output < detail::invalid_code_point;
  150|  5.18M|    }
  151|       |
  152|  5.18M|    if (SCN_UNLIKELY(ret != 1)) {
  ------------------
  |  |  153|  5.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.18M]
  |  |  ------------------
  ------------------
  153|      0|        return detail::invalid_code_point;
  154|      0|    }
  155|  5.18M|    return static_cast<char32_t>(output);
  156|  5.18M|}

_ZN3scn2v24impl11is_cp_spaceEDi:
   28|  17.6M|{
   29|       |    // Pattern_White_Space property
   30|  17.6M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (30:13): [True: 17.6M, False: 24.2k]
  |  Branch (30:27): [True: 10.6M, False: 6.98M]
  ------------------
   31|  17.6M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (31:12): [True: 65.7k, False: 6.94M]
  ------------------
   32|  17.6M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (32:12): [True: 224k, False: 6.72M]
  ------------------
   33|  17.6M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (33:12): [True: 3.06k, False: 6.71M]
  ------------------
   34|  17.6M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (34:12): [True: 2.41k, False: 6.71M]
  ------------------
   35|  17.6M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (35:12): [True: 3.49k, False: 6.71M]
  ------------------
   36|  17.6M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (36:12): [True: 0, False: 6.71M]
  ------------------
   37|  17.6M|}

_ZN3scn2v24impl14is_ascii_spaceEc:
   57|  11.1M|{
   58|  11.1M|    return is_ascii_space_lookup[static_cast<size_t>(
   59|  11.1M|        static_cast<unsigned char>(ch))];
   60|  11.1M|}

_ZN3scn2v24impl16has_byte_greaterEmh:
   91|  5.67M|{
   92|  5.67M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
   93|  5.67M|}

_ZN3scn2v24impl29basic_contiguous_scan_contextIcEC2IRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
   56|  3.79M|    {
   57|  3.79M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5beginEv:
   60|  11.0M|    {
   61|  11.0M|        return m_current;
   62|  11.0M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE3endEv:
   65|  7.25M|    {
   66|  7.25M|        return m_range.end();
   67|  7.25M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
   80|  3.54M|    {
   81|  3.54M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|  3.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  3.54M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  3.54M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 3.54M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  3.54M|        }
   87|  3.54M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  3.54M|    static_cast<    \
  |  |  247|  3.54M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  3.54M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5rangeEv:
   70|  3.71M|    {
   71|  3.71M|        return ranges::subrange{begin(), end()};
   72|  3.71M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwEC2IRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
   56|  3.91M|    {
   57|  3.91M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5beginEv:
   60|  10.7M|    {
   61|  10.7M|        return m_current;
   62|  10.7M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE3endEv:
   65|  6.83M|    {
   66|  6.83M|        return m_range.end();
   67|  6.83M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
   80|  3.16M|    {
   81|  3.16M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|  3.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  3.16M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  3.16M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 3.16M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  3.16M|        }
   87|  3.16M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  3.16M|    static_cast<    \
  |  |  247|  3.16M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  3.16M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5rangeEv:
   70|  3.66M|    {
   71|  3.66M|        return ranges::subrange{begin(), end()};
   72|  3.66M|    }

_ZNK3scn2v24impl12function_refIFbcES3_EclEc:
  204|   799k|    {
  205|   799k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|   799k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   799k|    }
_ZN3scn2v24impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|   289k|    {
  196|   289k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  185|   399k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   399k|              cvref<T> obj = *get<T>(fn);
  187|   399k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   399k|                  obj(static_cast<decltype(args)>(args)...);
  189|   399k|              }
  190|   399k|              else {
  191|   399k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   399k|              }
  193|   399k|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  125|   399k|    {
  126|   399k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   399k|            return static_cast<T*>(s.m_cp);
  128|   399k|        }
  129|   399k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   399k|            return static_cast<T*>(s.m_p);
  131|   399k|        }
  132|   399k|        else {
  133|   399k|            return reinterpret_cast<T*>(s.m_fp);
  134|   399k|        }
  135|   399k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  103|   289k|        {
  104|   289k|        }
_ZNK3scn2v24impl12function_refIFbDiES3_EclEDi:
  204|  35.0M|    {
  205|  35.0M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  35.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  35.0M|    }
_ZN3scn2v24impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|  6.63M|    {
  196|  6.63M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  185|  17.5M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  17.5M|              cvref<T> obj = *get<T>(fn);
  187|  17.5M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  17.5M|                  obj(static_cast<decltype(args)>(args)...);
  189|  17.5M|              }
  190|  17.5M|              else {
  191|  17.5M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  17.5M|              }
  193|  17.5M|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  125|  17.5M|    {
  126|  17.5M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  17.5M|            return static_cast<T*>(s.m_cp);
  128|  17.5M|        }
  129|  17.5M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  17.5M|            return static_cast<T*>(s.m_p);
  131|  17.5M|        }
  132|  17.5M|        else {
  133|  17.5M|            return reinterpret_cast<T*>(s.m_fp);
  134|  17.5M|        }
  135|  17.5M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  103|  6.63M|        {
  104|  6.63M|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_:
  195|   289k|    {
  196|   289k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  185|   868k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   868k|              cvref<T> obj = *get<T>(fn);
  187|   868k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   868k|                  obj(static_cast<decltype(args)>(args)...);
  189|   868k|              }
  190|   868k|              else {
  191|   868k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   868k|              }
  193|   868k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_EUlDiE_EEDaNS3_7storageE:
  125|   868k|    {
  126|   868k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   868k|            return static_cast<T*>(s.m_cp);
  128|   868k|        }
  129|   868k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   868k|            return static_cast<T*>(s.m_p);
  131|   868k|        }
  132|   868k|        else {
  133|   868k|            return reinterpret_cast<T*>(s.m_fp);
  134|   868k|        }
  135|   868k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_LPv0EEEPSL_:
  103|   289k|        {
  104|   289k|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_SO_LPv0EEEOSK_:
  195|   289k|    {
  196|   289k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_SO_LPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEcE_clEST_c:
  185|   399k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   399k|              cvref<T> obj = *get<T>(fn);
  187|   399k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   399k|                  obj(static_cast<decltype(args)>(args)...);
  189|   399k|              }
  190|   399k|              else {
  191|   399k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   399k|              }
  193|   399k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_iEUlcE_EEDaNS3_7storageE:
  125|   399k|    {
  126|   399k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   399k|            return static_cast<T*>(s.m_cp);
  128|   399k|        }
  129|   399k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   399k|            return static_cast<T*>(s.m_p);
  131|   399k|        }
  132|   399k|        else {
  133|   399k|            return reinterpret_cast<T*>(s.m_fp);
  134|   399k|        }
  135|   399k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_LPv0EEEPSK_:
  103|   289k|        {
  104|   289k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_:
  195|  5.04M|    {
  196|  5.04M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  185|  10.1M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  10.1M|              cvref<T> obj = *get<T>(fn);
  187|  10.1M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  10.1M|                  obj(static_cast<decltype(args)>(args)...);
  189|  10.1M|              }
  190|  10.1M|              else {
  191|  10.1M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  10.1M|              }
  193|  10.1M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_EUlDiE_EEDaNS3_7storageE:
  125|  10.1M|    {
  126|  10.1M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  10.1M|            return static_cast<T*>(s.m_cp);
  128|  10.1M|        }
  129|  10.1M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  10.1M|            return static_cast<T*>(s.m_p);
  131|  10.1M|        }
  132|  10.1M|        else {
  133|  10.1M|            return reinterpret_cast<T*>(s.m_fp);
  134|  10.1M|        }
  135|  10.1M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_LPv0EEEPSI_:
  103|  5.04M|        {
  104|  5.04M|        }
_ZNK3scn2v24impl12function_refIFbwES3_EclEw:
  204|  5.34M|    {
  205|  5.34M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  5.34M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  5.34M|    }
_ZN3scn2v24impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|  1.10M|    {
  196|  1.10M|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  185|  2.67M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  2.67M|              cvref<T> obj = *get<T>(fn);
  187|  2.67M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  2.67M|                  obj(static_cast<decltype(args)>(args)...);
  189|  2.67M|              }
  190|  2.67M|              else {
  191|  2.67M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  2.67M|              }
  193|  2.67M|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  125|  2.67M|    {
  126|  2.67M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  2.67M|            return static_cast<T*>(s.m_cp);
  128|  2.67M|        }
  129|  2.67M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  2.67M|            return static_cast<T*>(s.m_p);
  131|  2.67M|        }
  132|  2.67M|        else {
  133|  2.67M|            return reinterpret_cast<T*>(s.m_fp);
  134|  2.67M|        }
  135|  2.67M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  103|  1.10M|        {
  104|  1.10M|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_:
  195|  1.29M|    {
  196|  1.29M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  185|  6.47M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  6.47M|              cvref<T> obj = *get<T>(fn);
  187|  6.47M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  6.47M|                  obj(static_cast<decltype(args)>(args)...);
  189|  6.47M|              }
  190|  6.47M|              else {
  191|  6.47M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  6.47M|              }
  193|  6.47M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_EUlDiE_EEDaNS3_7storageE:
  125|  6.47M|    {
  126|  6.47M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  6.47M|            return static_cast<T*>(s.m_cp);
  128|  6.47M|        }
  129|  6.47M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.47M|            return static_cast<T*>(s.m_p);
  131|  6.47M|        }
  132|  6.47M|        else {
  133|  6.47M|            return reinterpret_cast<T*>(s.m_fp);
  134|  6.47M|        }
  135|  6.47M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_LPv0EEEPSL_:
  103|  1.29M|        {
  104|  1.29M|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_SO_LPv0EEEOSK_:
  195|  1.10M|    {
  196|  1.10M|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_SO_LPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEwE_clEST_w:
  185|  2.67M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  2.67M|              cvref<T> obj = *get<T>(fn);
  187|  2.67M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  2.67M|                  obj(static_cast<decltype(args)>(args)...);
  189|  2.67M|              }
  190|  2.67M|              else {
  191|  2.67M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  2.67M|              }
  193|  2.67M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_iEUlwE_EEDaNS3_7storageE:
  125|  2.67M|    {
  126|  2.67M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  2.67M|            return static_cast<T*>(s.m_cp);
  128|  2.67M|        }
  129|  2.67M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  2.67M|            return static_cast<T*>(s.m_p);
  131|  2.67M|        }
  132|  2.67M|        else {
  133|  2.67M|            return reinterpret_cast<T*>(s.m_fp);
  134|  2.67M|        }
  135|  2.67M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_LPv0EEEPSK_:
  103|  1.10M|        {
  104|  1.10M|        }

_ZN3scn2v24impl19make_eof_scan_errorENS1_9eof_errorE:
   43|  63.6k|{
   44|  63.6k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  242|  63.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  63.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   45|      0|    return scan_error{scan_error::end_of_range, "EOF"};
   46|  63.6k|}
_ZN3scn2v24implntENS1_9eof_errorE:
   29|  50.2M|{
   30|  50.2M|    return e != eof_error::good;
   31|  50.2M|}
_ZN3scn2v24impl20make_eof_parse_errorENS1_9eof_errorE:
   90|   169k|{
   91|   169k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  242|   169k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   169k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   92|      0|    return parse_error::eof;
   93|   169k|}
_ZN3scn2v24impleqENS1_11parse_errorES2_:
   68|  12.6M|    {
   69|  12.6M|        return a.m_code == b.m_code;
   70|  12.6M|    }
_ZN3scn2v24impl11parse_errorC2ENS2_4codeE:
   54|  57.0M|    {
   55|  57.0M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|  57.0M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   56|  57.0M|    }
_ZZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  114|   661k|    return [code, msg](parse_error err) {
  115|   661k|        return make_scan_error_from_parse_error(err, code, msg);
  116|   661k|    };
_ZN3scn2v24impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
   99|   661k|{
  100|   661k|    if (err == parse_error::good) {
  ------------------
  |  Branch (100:9): [True: 0, False: 661k]
  ------------------
  101|      0|        return {};
  102|      0|    }
  103|       |
  104|   661k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (104:9): [True: 0, False: 661k]
  ------------------
  105|      0|        return scan_error{scan_error::end_of_range, "EOF"};
  106|      0|    }
  107|       |
  108|   661k|    return scan_error{code, msg};
  109|   661k|}
_ZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  113|  1.39M|{
  114|  1.39M|    return [code, msg](parse_error err) {
  115|  1.39M|        return make_scan_error_from_parse_error(err, code, msg);
  116|  1.39M|    };
  117|  1.39M|}

_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  586|  2.38M|{
  587|  2.38M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  588|  2.38M|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  594|   248k|{
  595|   248k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  596|   248k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   248k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 110k, False: 137k]
  |  |  ------------------
  ------------------
  597|   110k|        source.sync(*n);
  598|   110k|    }
  599|   137k|    else {
  600|   137k|        source.sync_all();
  601|   137k|    }
  602|   248k|    return n;
  603|   248k|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  610|  2.42M|{
  611|  2.42M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  612|  2.42M|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  618|   730k|{
  619|   730k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  620|   730k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   730k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 317k, False: 413k]
  |  |  ------------------
  ------------------
  621|   317k|        source.sync(*n);
  622|   317k|    }
  623|   413k|    else {
  624|   413k|        source.sync_all();
  625|   413k|    }
  626|   730k|    return n;
  627|   730k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  543|  2.38M|{
  544|  2.38M|    return vscan_internal(source, format, args);
  545|  2.38M|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  549|   248k|{
  550|   248k|    auto n = vscan_internal(source, format, args);
  551|   248k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   248k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 110k, False: 137k]
  |  |  ------------------
  ------------------
  552|   110k|        source.sync(*n);
  553|   110k|    }
  554|   137k|    else {
  555|   137k|        source.sync_all();
  556|   137k|    }
  557|   248k|    return n;
  558|   248k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  563|  2.42M|{
  564|  2.42M|    return vscan_internal(source, format, args);
  565|  2.42M|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  569|   730k|{
  570|   730k|    auto n = vscan_internal(source, format, args);
  571|   730k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   730k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 317k, False: 413k]
  |  |  ------------------
  ------------------
  572|   317k|        source.sync(*n);
  573|   317k|    }
  574|   413k|    else {
  575|   413k|        source.sync_all();
  576|   413k|    }
  577|   730k|    return n;
  578|   730k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  653|   492k|{
  654|   492k|    return vscan_value_internal(source, arg);
  655|   492k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  658|  27.5k|{
  659|  27.5k|    auto n = vscan_value_internal(source, arg);
  660|  27.5k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  27.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 13.7k, False: 13.7k]
  |  |  ------------------
  ------------------
  661|  13.7k|        source.sync(*n);
  662|  13.7k|    }
  663|  13.7k|    else {
  664|  13.7k|        source.sync_all();
  665|  13.7k|    }
  666|  27.5k|    return n;
  667|  27.5k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  672|   469k|{
  673|   469k|    return vscan_value_internal(source, arg);
  674|   469k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  678|  82.7k|{
  679|  82.7k|    auto n = vscan_value_internal(source, arg);
  680|  82.7k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  82.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 41.3k, False: 41.3k]
  |  |  ------------------
  ------------------
  681|  41.3k|        source.sync(*n);
  682|  41.3k|    }
  683|  41.3k|    else {
  684|  41.3k|        source.sync_all();
  685|  41.3k|    }
  686|  82.7k|    return n;
  687|  82.7k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|   496k|{
  476|   496k|    const auto argcount = args.size();
  477|   496k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 55.1k, False: 441k]
  |  Branch (477:60): [True: 55.1k, False: 0]
  ------------------
  478|  55.1k|        auto arg = args.get(0);
  479|  55.1k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  55.1k|    static_cast<    \
  |  |  247|  55.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  55.1k|    }
  481|       |
  482|   441k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 441k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|   441k|    SCN_UNLIKELY_ATTR
  490|   441k|    {
  491|   441k|        auto handler = format_handler<false, CharT>{
  492|   441k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   441k|    static_cast<    \
  |  |  247|   441k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   441k|    static_cast<    \
  |  |  247|   441k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|   441k|        return vscan_parse_format_string(format, handler);
  494|   441k|    }
  495|   441k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  5.27M|{
   36|  5.27M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 4.23M, False: 1.03M]
  ------------------
   37|  4.23M|        return false;
   38|  4.23M|    }
   39|  1.03M|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 1.03M, False: 0]
  |  Branch (39:39): [True: 1.03M, False: 0]
  ------------------
   40|  5.27M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|  82.7k|{
   69|  82.7k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  82.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 82.7k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|  82.7k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  152|  82.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 82.7k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|  82.7k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|  82.7k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  246|  82.7k|    static_cast<    \
  |  |  247|  82.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|  82.7k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  82.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  82.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  82.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  82.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 41.3k, False: 41.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  41.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  41.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  41.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  41.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  41.3k|    }                                                  \
  |  |  |  |   70|  82.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|  41.3k|    return it.position();
   86|  82.7k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIcNSF_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
  313|  3.79M|    {
  314|  3.79M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_baseC2Em:
  132|  9.44M|    {
  133|  9.44M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  153|  9.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 9.44M]
  |  |  ------------------
  ------------------
  134|      0|            visited_args_upper.resize((args_count - 64) / 8);
  135|      0|        }
  136|  9.44M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcEC2EN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
  263|  3.79M|    {
  264|  3.79M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  3.79M|{
  441|  3.79M|    const auto beg = handler.get_ctx().begin();
  442|  3.79M|    detail::parse_format_string<false>(format, handler);
  443|  3.79M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  3.79M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 248k, False: 3.54M]
  |  |  ------------------
  ------------------
  444|   248k|        return unexpected(handler.error);
  445|   248k|    }
  446|  3.54M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  3.79M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
  424|  25.8M|    {
  425|  25.8M|        return ctx.get();
  426|  25.8M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
  267|  25.8M|    {
  268|  25.8M|        return contiguous_ctx;
  269|  25.8M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
  317|  7.33M|    {
  318|  7.33M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 7.33M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  7.33M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
   91|  3.79M|{
   92|  3.79M|    auto arg = ctx.arg(id);
   93|  3.79M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  3.79M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.79M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  3.79M|    return arg;
   97|  3.79M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
  207|  9.44M|    {
  208|  9.44M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|  9.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 9.44M]
  |  |  ------------------
  ------------------
  209|      0|            on_error("Invalid out-of-range argument ID");
  210|      0|            return;
  211|      0|        }
  212|       |
  213|  9.44M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  153|  9.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 9.44M]
  |  |  ------------------
  ------------------
  214|      0|            return on_error("Argument with this ID has already been scanned");
  215|      0|        }
  216|       |
  217|  9.44M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|  9.44M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 9.44M, False: 0]
  |  |  ------------------
  ------------------
  218|  9.44M|            visited_args_lower64 |= (1ull << id);
  219|  9.44M|            return;
  220|  9.44M|        }
  221|       |
  222|      0|        id -= 64;
  223|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
  224|      0|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
  192|  9.44M|    {
  193|  9.44M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|  9.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 9.44M]
  |  |  ------------------
  ------------------
  194|      0|            on_error("Invalid out-of-range argument ID");
  195|      0|            return false;
  196|      0|        }
  197|       |
  198|  9.44M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|  9.44M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 9.44M, False: 0]
  |  |  ------------------
  ------------------
  199|  9.44M|            return (visited_args_lower64 >> id) & 1ull;
  200|  9.44M|        }
  201|       |
  202|      0|        id -= 64;
  203|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
  204|  9.44M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
  176|  1.32M|    {
  177|  1.32M|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  153|  1.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.32M, False: 0]
  |  |  ------------------
  ------------------
  178|  1.32M|            error = err;
  179|  1.32M|        }
  180|  1.32M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
  346|  3.79M|    {
  347|  3.79M|        return parse_ctx.next_arg_id();
  348|  3.79M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
  387|  3.79M|    {
  388|  3.79M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  3.79M|        set_arg_as_visited(arg_id);
  390|       |
  391|  3.79M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 3.79M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  3.79M|        auto specs = detail::format_specs{};
  401|  3.79M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  3.79M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  3.79M|            arg.type()};
  404|       |
  405|  3.79M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  3.79M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 3.79M]
  |  Branch (406:29): [True: 55.1k, False: 3.73M]
  ------------------
  407|  55.1k|            SCN_UNLIKELY_ATTR
  408|  55.1k|            on_error("Missing '}' in format string");
  409|  55.1k|            return parse_ctx.begin();
  410|  55.1k|        }
  411|  3.73M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  3.73M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 27.5k, False: 3.71M]
  |  |  ------------------
  ------------------
  412|  27.5k|            return parse_ctx.begin();
  413|  27.5k|        }
  414|  3.71M|        parse_ctx.advance_to(begin);
  415|       |
  416|  3.71M|        on_visit_scan_arg(
  417|  3.71M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  3.71M|                                           get_ctx().locale()},
  419|  3.71M|            arg);
  420|  3.71M|        return parse_ctx.begin();
  421|  3.73M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
  111|  3.79M|    {
  112|  3.79M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  358|  3.71M|    {
  359|  3.71M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 3.71M]
  |  Branch (359:23): [True: 0, False: 3.71M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  3.71M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  3.71M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  3.71M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  3.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 165k, False: 3.54M]
  |  |  ------------------
  ------------------
  366|   165k|            on_error(r.error());
  367|   165k|        }
  368|  3.54M|        else {
  369|  3.54M|            get_ctx().advance_to(*r);
  370|  3.54M|        }
  371|  3.71M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorEPKc:
  171|  1.10M|    {
  172|  1.10M|        SCN_UNLIKELY_ATTR
  173|  1.10M|        error = scan_error{scan_error::invalid_format_string, msg};
  174|  1.10M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
  139|  9.44M|    {
  140|  9.44M|        {
  141|  9.44M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (141:45): [True: 0, False: 9.44M]
  ------------------
  142|  9.44M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (142:35): [True: 0, False: 9.44M]
  ------------------
  143|  9.44M|                                      ? std::numeric_limits<uint64_t>::max()
  144|  9.44M|                                      : (1ull << args_count_lower64) - 1;
  145|       |
  146|  9.44M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (146:17): [True: 0, False: 9.44M]
  ------------------
  147|      0|                return on_error("Argument list not exhausted");
  148|      0|            }
  149|  9.44M|        }
  150|       |
  151|  9.44M|        if (args_count < 64) {
  ------------------
  |  Branch (151:13): [True: 9.44M, False: 0]
  ------------------
  152|  9.44M|            return;
  153|  9.44M|        }
  154|       |
  155|      0|        auto last_args_count = args_count - 64;
  156|      0|        for (auto it = visited_args_upper.begin();
  157|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (157:14): [True: 0, False: 0]
  ------------------
  158|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (158:17): [True: 0, False: 0]
  ------------------
  159|      0|                return on_error("Argument list not exhausted");
  160|      0|            }
  161|      0|            last_args_count -= 8;
  162|      0|        }
  163|       |
  164|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
  165|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (165:13): [True: 0, False: 0]
  ------------------
  166|      0|            return on_error("Argument list not exhausted");
  167|      0|        }
  168|      0|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_base9get_errorEv:
  187|  9.44M|    {
  188|  9.44M|        return error;
  189|  9.44M|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_basecvbEv:
  183|  27.6M|    {
  184|  27.6M|        return static_cast<bool>(error);
  185|  27.6M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
  313|   441k|    {
  314|   441k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
  240|   441k|    {
  241|   441k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   441k|{
  441|   441k|    const auto beg = handler.get_ctx().begin();
  442|   441k|    detail::parse_format_string<false>(format, handler);
  443|   441k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   441k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 248k, False: 193k]
  |  |  ------------------
  ------------------
  444|   248k|        return unexpected(handler.error);
  445|   248k|    }
  446|   193k|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   441k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
  424|  2.42M|    {
  425|  2.42M|        return ctx.get();
  426|  2.42M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcE3getEv:
  244|  2.42M|    {
  245|  2.42M|        return ctx;
  246|  2.42M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
  317|   634k|    {
  318|   634k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 634k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|   634k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
   91|   441k|{
   92|   441k|    auto arg = ctx.arg(id);
   93|   441k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   441k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 441k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   441k|    return arg;
   97|   441k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
  346|   441k|    {
  347|   441k|        return parse_ctx.next_arg_id();
  348|   441k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
  387|   441k|    {
  388|   441k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   441k|        set_arg_as_visited(arg_id);
  390|       |
  391|   441k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 441k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   441k|        auto specs = detail::format_specs{};
  401|   441k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   441k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   441k|            arg.type()};
  404|       |
  405|   441k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   441k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 441k]
  |  Branch (406:29): [True: 55.1k, False: 386k]
  ------------------
  407|  55.1k|            SCN_UNLIKELY_ATTR
  408|  55.1k|            on_error("Missing '}' in format string");
  409|  55.1k|            return parse_ctx.begin();
  410|  55.1k|        }
  411|   386k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   386k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 27.5k, False: 358k]
  |  |  ------------------
  ------------------
  412|  27.5k|            return parse_ctx.begin();
  413|  27.5k|        }
  414|   358k|        parse_ctx.advance_to(begin);
  415|       |
  416|   358k|        on_visit_scan_arg(
  417|   358k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   358k|                                           get_ctx().locale()},
  419|   358k|            arg);
  420|   358k|        return parse_ctx.begin();
  421|   386k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
  111|   441k|    {
  112|   441k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|   358k|    {
  359|   358k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 358k]
  |  Branch (359:23): [True: 0, False: 358k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   358k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|   358k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   358k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   358k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 165k, False: 193k]
  |  |  ------------------
  ------------------
  366|   165k|            on_error(r.error());
  367|   165k|        }
  368|   193k|        else {
  369|   193k|            get_ctx().advance_to(*r);
  370|   193k|        }
  371|   358k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  4.77M|{
  456|  4.77M|    const auto argcount = args.size();
  457|  4.77M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 984k, False: 3.79M]
  |  Branch (457:60): [True: 984k, False: 0]
  ------------------
  458|   984k|        auto arg = args.get(0);
  459|   984k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|   984k|    static_cast<    \
  |  |  247|   984k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|   984k|    }
  461|       |
  462|  3.79M|    auto handler = format_handler<true, CharT>{
  463|  3.79M|        ranges::subrange<const CharT*>{source.data(),
  464|  3.79M|                                       source.data() + source.size()},
  465|  3.79M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  3.79M|    static_cast<    \
  |  |  247|  3.79M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  3.79M|    static_cast<    \
  |  |  247|  3.79M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  3.79M|    return vscan_parse_format_string(format, handler);
  467|  4.77M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|  1.47M|{
   49|  1.47M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  1.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.47M]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|  1.47M|    auto reader =
   55|  1.47M|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|  1.47M|            ranges::subrange<const CharT*>{source.data(),
   57|  1.47M|                                           source.data() + source.size()},
   58|  1.47M|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|  1.47M|    static_cast<    \
  |  |  247|  1.47M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.47M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  1.47M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.47M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.47M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 41.3k, False: 1.43M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  41.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  41.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  41.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  41.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  41.3k|    }                                                  \
  |  |  |  |   70|  1.47M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|  1.43M|    return ranges::distance(source.data(), it);
   61|  1.47M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  4.85M|{
  456|  4.85M|    const auto argcount = args.size();
  457|  4.85M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 938k, False: 3.91M]
  |  Branch (457:60): [True: 938k, False: 0]
  ------------------
  458|   938k|        auto arg = args.get(0);
  459|   938k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|   938k|    static_cast<    \
  |  |  247|   938k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|   938k|    }
  461|       |
  462|  3.91M|    auto handler = format_handler<true, CharT>{
  463|  3.91M|        ranges::subrange<const CharT*>{source.data(),
  464|  3.91M|                                       source.data() + source.size()},
  465|  3.91M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  3.91M|    static_cast<    \
  |  |  247|  3.91M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  3.91M|    static_cast<    \
  |  |  247|  3.91M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  3.91M|    return vscan_parse_format_string(format, handler);
  467|  4.85M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  6.31M|{
   36|  6.31M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 5.21M, False: 1.10M]
  ------------------
   37|  5.21M|        return false;
   38|  5.21M|    }
   39|  1.10M|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 1.10M, False: 0]
  |  Branch (39:39): [True: 1.10M, False: 0]
  ------------------
   40|  6.31M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|  1.40M|{
   49|  1.40M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  1.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.40M]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|  1.40M|    auto reader =
   55|  1.40M|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|  1.40M|            ranges::subrange<const CharT*>{source.data(),
   57|  1.40M|                                           source.data() + source.size()},
   58|  1.40M|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|  1.40M|    static_cast<    \
  |  |  247|  1.40M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.40M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  1.40M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.40M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.40M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 124k, False: 1.28M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|   124k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|   124k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   124k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|   124k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|   124k|    }                                                  \
  |  |  |  |   70|  1.40M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|  1.28M|    return ranges::distance(source.data(), it);
   61|  1.40M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIwNSF_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
  313|  3.91M|    {
  314|  3.91M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwEC2EN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
  263|  3.91M|    {
  264|  3.91M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  3.91M|{
  441|  3.91M|    const auto beg = handler.get_ctx().begin();
  442|  3.91M|    detail::parse_format_string<false>(format, handler);
  443|  3.91M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  3.91M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 744k, False: 3.16M]
  |  |  ------------------
  ------------------
  444|   744k|        return unexpected(handler.error);
  445|   744k|    }
  446|  3.16M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  3.91M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
  424|  25.4M|    {
  425|  25.4M|        return ctx.get();
  426|  25.4M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
  267|  25.4M|    {
  268|  25.4M|        return contiguous_ctx;
  269|  25.4M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
  317|  7.08M|    {
  318|  7.08M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 7.08M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  7.08M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
   91|  3.91M|{
   92|  3.91M|    auto arg = ctx.arg(id);
   93|  3.91M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  3.91M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.91M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  3.91M|    return arg;
   97|  3.91M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
  346|  3.91M|    {
  347|  3.91M|        return parse_ctx.next_arg_id();
  348|  3.91M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
  387|  3.91M|    {
  388|  3.91M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  3.91M|        set_arg_as_visited(arg_id);
  390|       |
  391|  3.91M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 3.91M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  3.91M|        auto specs = detail::format_specs{};
  401|  3.91M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  3.91M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  3.91M|            arg.type()};
  404|       |
  405|  3.91M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  3.91M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 3.91M]
  |  Branch (406:29): [True: 165k, False: 3.74M]
  ------------------
  407|   165k|            SCN_UNLIKELY_ATTR
  408|   165k|            on_error("Missing '}' in format string");
  409|   165k|            return parse_ctx.begin();
  410|   165k|        }
  411|  3.74M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  3.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 82.7k, False: 3.66M]
  |  |  ------------------
  ------------------
  412|  82.7k|            return parse_ctx.begin();
  413|  82.7k|        }
  414|  3.66M|        parse_ctx.advance_to(begin);
  415|       |
  416|  3.66M|        on_visit_scan_arg(
  417|  3.66M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  3.66M|                                           get_ctx().locale()},
  419|  3.66M|            arg);
  420|  3.66M|        return parse_ctx.begin();
  421|  3.74M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
  111|  3.91M|    {
  112|  3.91M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  358|  3.66M|    {
  359|  3.66M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 3.66M]
  |  Branch (359:23): [True: 0, False: 3.66M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  3.66M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  3.66M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  3.66M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  3.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 496k, False: 3.16M]
  |  |  ------------------
  ------------------
  366|   496k|            on_error(r.error());
  367|   496k|        }
  368|  3.16M|        else {
  369|  3.16M|            get_ctx().advance_to(*r);
  370|  3.16M|        }
  371|  3.66M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|  1.46M|{
  476|  1.46M|    const auto argcount = args.size();
  477|  1.46M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 165k, False: 1.29M]
  |  Branch (477:60): [True: 165k, False: 0]
  ------------------
  478|   165k|        auto arg = args.get(0);
  479|   165k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  246|   165k|    static_cast<    \
  |  |  247|   165k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|   165k|    }
  481|       |
  482|  1.29M|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 1.29M]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|  1.29M|    SCN_UNLIKELY_ATTR
  490|  1.29M|    {
  491|  1.29M|        auto handler = format_handler<false, CharT>{
  492|  1.29M|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  1.29M|    static_cast<    \
  |  |  247|  1.29M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  1.29M|    static_cast<    \
  |  |  247|  1.29M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|  1.29M|        return vscan_parse_format_string(format, handler);
  494|  1.29M|    }
  495|  1.29M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|   248k|{
   69|   248k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 248k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|   248k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  152|   248k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 248k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|   248k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|   248k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  246|   248k|    static_cast<    \
  |  |  247|   248k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|   248k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|   248k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   248k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   248k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 124k, False: 124k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|   124k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|   124k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   124k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|   124k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|   124k|    }                                                  \
  |  |  |  |   70|   248k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|   124k|    return it.position();
   86|   248k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
  313|  1.29M|    {
  314|  1.29M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
  240|  1.29M|    {
  241|  1.29M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  1.29M|{
  441|  1.29M|    const auto beg = handler.get_ctx().begin();
  442|  1.29M|    detail::parse_format_string<false>(format, handler);
  443|  1.29M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  1.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 744k, False: 551k]
  |  |  ------------------
  ------------------
  444|   744k|        return unexpected(handler.error);
  445|   744k|    }
  446|   551k|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  1.29M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
  424|  7.08M|    {
  425|  7.08M|        return ctx.get();
  426|  7.08M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwE3getEv:
  244|  7.08M|    {
  245|  7.08M|        return ctx;
  246|  7.08M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
  317|  1.84M|    {
  318|  1.84M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 1.84M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  1.84M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
   91|  1.29M|{
   92|  1.29M|    auto arg = ctx.arg(id);
   93|  1.29M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  1.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.29M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  1.29M|    return arg;
   97|  1.29M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
  346|  1.29M|    {
  347|  1.29M|        return parse_ctx.next_arg_id();
  348|  1.29M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
  387|  1.29M|    {
  388|  1.29M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  1.29M|        set_arg_as_visited(arg_id);
  390|       |
  391|  1.29M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 1.29M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  1.29M|        auto specs = detail::format_specs{};
  401|  1.29M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  1.29M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  1.29M|            arg.type()};
  404|       |
  405|  1.29M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  1.29M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 1.29M]
  |  Branch (406:29): [True: 165k, False: 1.13M]
  ------------------
  407|   165k|            SCN_UNLIKELY_ATTR
  408|   165k|            on_error("Missing '}' in format string");
  409|   165k|            return parse_ctx.begin();
  410|   165k|        }
  411|  1.13M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 82.7k, False: 1.04M]
  |  |  ------------------
  ------------------
  412|  82.7k|            return parse_ctx.begin();
  413|  82.7k|        }
  414|  1.04M|        parse_ctx.advance_to(begin);
  415|       |
  416|  1.04M|        on_visit_scan_arg(
  417|  1.04M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  1.04M|                                           get_ctx().locale()},
  419|  1.04M|            arg);
  420|  1.04M|        return parse_ctx.begin();
  421|  1.13M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
  111|  1.29M|    {
  112|  1.29M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|  1.04M|    {
  359|  1.04M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 1.04M]
  |  Branch (359:23): [True: 0, False: 1.04M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  1.04M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  1.04M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 496k, False: 551k]
  |  |  ------------------
  ------------------
  366|   496k|            on_error(r.error());
  367|   496k|        }
  368|   551k|        else {
  369|   551k|            get_ctx().advance_to(*r);
  370|   551k|        }
  371|  1.04M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   492k|{
  502|   492k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|   492k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   492k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  27.5k|{
  502|  27.5k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  27.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  27.5k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   469k|{
  502|   469k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|   469k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   469k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  82.7k|{
  502|  82.7k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  82.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  82.7k|}

_ZN3scn4fuzz16make_input_viewsENS_2v24spanIKhEE:
   53|  2.29k|{
   54|  2.29k|    SCN_EXPECT(data.size() <= max_input_bytes);
  ------------------
  |  |  242|  2.29k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.29k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   55|       |
   56|       |    // narrow
   57|      0|    string_buffer.resize(data.size());
   58|  2.29k|    std::copy(data.begin(), data.end(),
   59|  2.29k|              reinterpret_cast<uint8_t*>(&string_buffer[0]));
   60|  2.29k|    auto sv = std::string_view{string_buffer};
   61|       |
   62|       |    // wide, direct copy
   63|  2.29k|    wstring_buffer_direct.resize(data.size());
   64|  2.29k|    std::copy(data.begin(), data.end(),
   65|  2.29k|              reinterpret_cast<uint8_t*>(&wstring_buffer_direct[0]));
   66|  2.29k|    auto wsv_direct = std::wstring_view{wstring_buffer_direct};
   67|       |
   68|       |    // wide, bitwise reinterpret
   69|  2.29k|    const auto wsv_reinterpret_size =
   70|  2.29k|        data.size() < sizeof(wchar_t) ? 1 : (data.size() / sizeof(wchar_t));
  ------------------
  |  Branch (70:9): [True: 131, False: 2.16k]
  ------------------
   71|  2.29k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   72|  2.29k|    std::memcpy(wstring_buffer_reinterpreted.data(), data.data(), data.size());
   73|  2.29k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   74|       |
   75|       |    // wide, transcode to correct encoding (utf16 or utf32)
   76|  2.29k|    std::wstring_view wsv_transcoded;
   77|  2.29k|    if (!simdutf::validate_utf8(sv.data(), sv.size())) {
  ------------------
  |  Branch (77:9): [True: 491, False: 1.80k]
  ------------------
   78|    491|        wsv_transcoded = {wstring_buffer_direct};
   79|    491|    }
   80|  1.80k|    else {
   81|  1.80k|        if constexpr (sizeof(wchar_t) == 2) {
  ------------------
  |  Branch (81:23): [Folded - Ignored]
  ------------------
   82|      0|            auto size = simdutf::utf16_length_from_utf8(sv.data(), sv.size());
   83|      0|            wstring_buffer_transcoded_wide.resize(size);
   84|      0|            (void)simdutf::convert_valid_utf8_to_utf16(
   85|      0|                sv.data(), sv.size(),
   86|      0|                reinterpret_cast<char16_t*>(
   87|      0|                    wstring_buffer_transcoded_wide.data()));
   88|      0|        }
   89|  1.80k|        else {
   90|  1.80k|            auto size = simdutf::utf32_length_from_utf8(sv.data(), sv.size());
   91|  1.80k|            wstring_buffer_transcoded_wide.resize(size);
   92|  1.80k|            (void)simdutf::convert_valid_utf8_to_utf32(
   93|  1.80k|                sv.data(), sv.size(),
   94|  1.80k|                reinterpret_cast<char32_t*>(
   95|  1.80k|                    wstring_buffer_transcoded_wide.data()));
   96|  1.80k|        }
   97|  1.80k|        wsv_transcoded = {wstring_buffer_transcoded_wide};
   98|  1.80k|    }
   99|       |
  100|  2.29k|    return std::make_tuple(sv, wsv_direct, wsv_reintepreted, wsv_transcoded);
  101|  2.29k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  150|  2.29k|{
  151|  2.29k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  152|  2.29k|    auto& buf = get_format_string_view_buffer<CharT>();
  153|  2.29k|    buf.resize(sizeof...(Args));
  154|  2.29k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  155|  2.29k|    return {buf.data(), buf.size()};
  156|  2.29k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  136|  2.29k|{
  137|  2.29k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (137:19): [Folded - Ignored]
  ------------------
  138|  2.29k|        return format_string_view_buffer;
  139|  2.29k|    }
  140|  2.29k|    else {
  141|  2.29k|        return wformat_string_view_buffer;
  142|  2.29k|    }
  143|  2.29k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  210|  2.29k|{
  211|  2.29k|    do_basic_run_for_source<CharT>(data, format_strings);
  212|  2.29k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  213|  2.29k|                                   format_strings);
  214|  2.29k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  2.29k|{
  162|       |    // Regular scan
  163|  22.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 22.9k, False: 2.29k]
  ------------------
  164|  22.9k|        auto it = scn::ranges::begin(source);
  165|   324k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   324k|            auto result = scn::scan<T>(
  167|   324k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   324k|                scn::runtime_format(f));
  169|   324k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 22.9k, False: 301k]
  ------------------
  170|  22.9k|                break;
  171|  22.9k|            }
  172|   301k|            it = result->begin();
  173|   301k|        }
  174|  22.9k|    }
  175|       |
  176|       |    // scan localized
  177|  22.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 22.9k, False: 2.29k]
  ------------------
  178|  22.9k|        auto it = scn::ranges::begin(source);
  179|   324k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   324k|            auto result = scn::scan<T>(
  181|   324k|                global_locale,
  182|   324k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   324k|                scn::runtime_format(f));
  184|   324k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 22.9k, False: 301k]
  ------------------
  185|  22.9k|                break;
  186|  22.9k|            }
  187|   301k|            it = result->begin();
  188|   301k|        }
  189|  22.9k|    }
  190|       |
  191|       |    // scan_value
  192|  2.29k|    {
  193|  2.29k|        auto it = scn::ranges::begin(source);
  194|  72.6k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  72.6k|            auto result = scn::scan_value<T>(
  196|  72.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  72.6k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.29k, False: 70.3k]
  ------------------
  198|  2.29k|                break;
  199|  2.29k|            }
  200|  70.3k|            it = result->begin();
  201|  70.3k|        }
  202|  2.29k|    }
  203|  2.29k|}
_ZN3scn4fuzz21do_basic_run_for_typeIchNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  2.29k|{
  162|       |    // Regular scan
  163|  22.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 22.9k, False: 2.29k]
  ------------------
  164|  22.9k|        auto it = scn::ranges::begin(source);
  165|   315k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   315k|            auto result = scn::scan<T>(
  167|   315k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   315k|                scn::runtime_format(f));
  169|   315k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 22.9k, False: 292k]
  ------------------
  170|  22.9k|                break;
  171|  22.9k|            }
  172|   292k|            it = result->begin();
  173|   292k|        }
  174|  22.9k|    }
  175|       |
  176|       |    // scan localized
  177|  22.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 22.9k, False: 2.29k]
  ------------------
  178|  22.9k|        auto it = scn::ranges::begin(source);
  179|   315k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   315k|            auto result = scn::scan<T>(
  181|   315k|                global_locale,
  182|   315k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   315k|                scn::runtime_format(f));
  184|   315k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 22.9k, False: 292k]
  ------------------
  185|  22.9k|                break;
  186|  22.9k|            }
  187|   292k|            it = result->begin();
  188|   292k|        }
  189|  22.9k|    }
  190|       |
  191|       |    // scan_value
  192|  2.29k|    {
  193|  2.29k|        auto it = scn::ranges::begin(source);
  194|  67.9k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  67.9k|            auto result = scn::scan_value<T>(
  196|  67.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  67.9k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.29k, False: 65.6k]
  ------------------
  198|  2.29k|                break;
  199|  2.29k|            }
  200|  65.6k|            it = result->begin();
  201|  65.6k|        }
  202|  2.29k|    }
  203|  2.29k|}
_ZN3scn4fuzz21do_basic_run_for_typeIciNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  2.29k|{
  162|       |    // Regular scan
  163|  22.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 22.9k, False: 2.29k]
  ------------------
  164|  22.9k|        auto it = scn::ranges::begin(source);
  165|   466k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   466k|            auto result = scn::scan<T>(
  167|   466k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   466k|                scn::runtime_format(f));
  169|   466k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 22.9k, False: 443k]
  ------------------
  170|  22.9k|                break;
  171|  22.9k|            }
  172|   443k|            it = result->begin();
  173|   443k|        }
  174|  22.9k|    }
  175|       |
  176|       |    // scan localized
  177|  22.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 22.9k, False: 2.29k]
  ------------------
  178|  22.9k|        auto it = scn::ranges::begin(source);
  179|   466k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   466k|            auto result = scn::scan<T>(
  181|   466k|                global_locale,
  182|   466k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   466k|                scn::runtime_format(f));
  184|   466k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 22.9k, False: 443k]
  ------------------
  185|  22.9k|                break;
  186|  22.9k|            }
  187|   443k|            it = result->begin();
  188|   443k|        }
  189|  22.9k|    }
  190|       |
  191|       |    // scan_value
  192|  2.29k|    {
  193|  2.29k|        auto it = scn::ranges::begin(source);
  194|  93.0k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  93.0k|            auto result = scn::scan_value<T>(
  196|  93.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  93.0k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.29k, False: 90.7k]
  ------------------
  198|  2.29k|                break;
  199|  2.29k|            }
  200|  90.7k|            it = result->begin();
  201|  90.7k|        }
  202|  2.29k|    }
  203|  2.29k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  2.29k|{
  162|       |    // Regular scan
  163|  22.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 22.9k, False: 2.29k]
  ------------------
  164|  22.9k|        auto it = scn::ranges::begin(source);
  165|   386k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   386k|            auto result = scn::scan<T>(
  167|   386k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   386k|                scn::runtime_format(f));
  169|   386k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 22.9k, False: 363k]
  ------------------
  170|  22.9k|                break;
  171|  22.9k|            }
  172|   363k|            it = result->begin();
  173|   363k|        }
  174|  22.9k|    }
  175|       |
  176|       |    // scan localized
  177|  22.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 22.9k, False: 2.29k]
  ------------------
  178|  22.9k|        auto it = scn::ranges::begin(source);
  179|   386k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   386k|            auto result = scn::scan<T>(
  181|   386k|                global_locale,
  182|   386k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   386k|                scn::runtime_format(f));
  184|   386k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 22.9k, False: 363k]
  ------------------
  185|  22.9k|                break;
  186|  22.9k|            }
  187|   363k|            it = result->begin();
  188|   363k|        }
  189|  22.9k|    }
  190|       |
  191|       |    // scan_value
  192|  2.29k|    {
  193|  2.29k|        auto it = scn::ranges::begin(source);
  194|  78.4k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  78.4k|            auto result = scn::scan_value<T>(
  196|  78.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  78.4k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.29k, False: 76.1k]
  ------------------
  198|  2.29k|                break;
  199|  2.29k|            }
  200|  76.1k|            it = result->begin();
  201|  76.1k|        }
  202|  2.29k|    }
  203|  2.29k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  2.29k|{
  162|       |    // Regular scan
  163|  22.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 22.9k, False: 2.29k]
  ------------------
  164|  22.9k|        auto it = scn::ranges::begin(source);
  165|   496k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   496k|            auto result = scn::scan<T>(
  167|   496k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   496k|                scn::runtime_format(f));
  169|   496k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 22.9k, False: 473k]
  ------------------
  170|  22.9k|                break;
  171|  22.9k|            }
  172|   473k|            it = result->begin();
  173|   473k|        }
  174|  22.9k|    }
  175|       |
  176|       |    // scan localized
  177|  22.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 22.9k, False: 2.29k]
  ------------------
  178|  22.9k|        auto it = scn::ranges::begin(source);
  179|   496k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   496k|            auto result = scn::scan<T>(
  181|   496k|                global_locale,
  182|   496k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   496k|                scn::runtime_format(f));
  184|   496k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 22.9k, False: 473k]
  ------------------
  185|  22.9k|                break;
  186|  22.9k|            }
  187|   473k|            it = result->begin();
  188|   473k|        }
  189|  22.9k|    }
  190|       |
  191|       |    // scan_value
  192|  2.29k|    {
  193|  2.29k|        auto it = scn::ranges::begin(source);
  194|  99.3k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  99.3k|            auto result = scn::scan_value<T>(
  196|  99.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  99.3k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.29k, False: 97.0k]
  ------------------
  198|  2.29k|                break;
  199|  2.29k|            }
  200|  97.0k|            it = result->begin();
  201|  97.0k|        }
  202|  2.29k|    }
  203|  2.29k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  2.29k|{
  162|       |    // Regular scan
  163|  22.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 22.9k, False: 2.29k]
  ------------------
  164|  22.9k|        auto it = scn::ranges::begin(source);
  165|   400k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   400k|            auto result = scn::scan<T>(
  167|   400k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   400k|                scn::runtime_format(f));
  169|   400k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 22.9k, False: 377k]
  ------------------
  170|  22.9k|                break;
  171|  22.9k|            }
  172|   377k|            it = result->begin();
  173|   377k|        }
  174|  22.9k|    }
  175|       |
  176|       |    // scan localized
  177|  22.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 22.9k, False: 2.29k]
  ------------------
  178|  22.9k|        auto it = scn::ranges::begin(source);
  179|   400k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   400k|            auto result = scn::scan<T>(
  181|   400k|                global_locale,
  182|   400k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   400k|                scn::runtime_format(f));
  184|   400k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 22.9k, False: 377k]
  ------------------
  185|  22.9k|                break;
  186|  22.9k|            }
  187|   377k|            it = result->begin();
  188|   377k|        }
  189|  22.9k|    }
  190|       |
  191|       |    // scan_value
  192|  2.29k|    {
  193|  2.29k|        auto it = scn::ranges::begin(source);
  194|  80.7k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  80.7k|            auto result = scn::scan_value<T>(
  196|  80.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  80.7k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.29k, False: 78.4k]
  ------------------
  198|  2.29k|                break;
  199|  2.29k|            }
  200|  78.4k|            it = result->begin();
  201|  78.4k|        }
  202|  2.29k|    }
  203|  2.29k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  2.29k|{
  162|       |    // Regular scan
  163|  22.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 22.9k, False: 2.29k]
  ------------------
  164|  22.9k|        auto it = scn::ranges::begin(source);
  165|  41.3k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  41.3k|            auto result = scn::scan<T>(
  167|  41.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  41.3k|                scn::runtime_format(f));
  169|  41.3k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 22.9k, False: 18.3k]
  ------------------
  170|  22.9k|                break;
  171|  22.9k|            }
  172|  18.3k|            it = result->begin();
  173|  18.3k|        }
  174|  22.9k|    }
  175|       |
  176|       |    // scan localized
  177|  22.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 22.9k, False: 2.29k]
  ------------------
  178|  22.9k|        auto it = scn::ranges::begin(source);
  179|  41.3k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  41.3k|            auto result = scn::scan<T>(
  181|  41.3k|                global_locale,
  182|  41.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  41.3k|                scn::runtime_format(f));
  184|  41.3k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 22.9k, False: 18.3k]
  ------------------
  185|  22.9k|                break;
  186|  22.9k|            }
  187|  18.3k|            it = result->begin();
  188|  18.3k|        }
  189|  22.9k|    }
  190|       |
  191|       |    // scan_value
  192|  2.29k|    {
  193|  2.29k|        auto it = scn::ranges::begin(source);
  194|  4.59k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  4.59k|            auto result = scn::scan_value<T>(
  196|  4.59k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  4.59k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.29k, False: 2.29k]
  ------------------
  198|  2.29k|                break;
  199|  2.29k|            }
  200|  2.29k|            it = result->begin();
  201|  2.29k|        }
  202|  2.29k|    }
  203|  2.29k|}
_ZN3scn4fuzz21do_basic_run_for_typeIchKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  2.29k|{
  162|       |    // Regular scan
  163|  22.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 22.9k, False: 2.29k]
  ------------------
  164|  22.9k|        auto it = scn::ranges::begin(source);
  165|  41.3k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  41.3k|            auto result = scn::scan<T>(
  167|  41.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  41.3k|                scn::runtime_format(f));
  169|  41.3k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 22.9k, False: 18.3k]
  ------------------
  170|  22.9k|                break;
  171|  22.9k|            }
  172|  18.3k|            it = result->begin();
  173|  18.3k|        }
  174|  22.9k|    }
  175|       |
  176|       |    // scan localized
  177|  22.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 22.9k, False: 2.29k]
  ------------------
  178|  22.9k|        auto it = scn::ranges::begin(source);
  179|  41.3k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  41.3k|            auto result = scn::scan<T>(
  181|  41.3k|                global_locale,
  182|  41.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  41.3k|                scn::runtime_format(f));
  184|  41.3k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 22.9k, False: 18.3k]
  ------------------
  185|  22.9k|                break;
  186|  22.9k|            }
  187|  18.3k|            it = result->begin();
  188|  18.3k|        }
  189|  22.9k|    }
  190|       |
  191|       |    // scan_value
  192|  2.29k|    {
  193|  2.29k|        auto it = scn::ranges::begin(source);
  194|  4.59k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  4.59k|            auto result = scn::scan_value<T>(
  196|  4.59k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  4.59k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.29k, False: 2.29k]
  ------------------
  198|  2.29k|                break;
  199|  2.29k|            }
  200|  2.29k|            it = result->begin();
  201|  2.29k|        }
  202|  2.29k|    }
  203|  2.29k|}
_ZN3scn4fuzz21do_basic_run_for_typeIciKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  2.29k|{
  162|       |    // Regular scan
  163|  22.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 22.9k, False: 2.29k]
  ------------------
  164|  22.9k|        auto it = scn::ranges::begin(source);
  165|  41.3k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  41.3k|            auto result = scn::scan<T>(
  167|  41.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  41.3k|                scn::runtime_format(f));
  169|  41.3k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 22.9k, False: 18.3k]
  ------------------
  170|  22.9k|                break;
  171|  22.9k|            }
  172|  18.3k|            it = result->begin();
  173|  18.3k|        }
  174|  22.9k|    }
  175|       |
  176|       |    // scan localized
  177|  22.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 22.9k, False: 2.29k]
  ------------------
  178|  22.9k|        auto it = scn::ranges::begin(source);
  179|  41.3k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  41.3k|            auto result = scn::scan<T>(
  181|  41.3k|                global_locale,
  182|  41.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  41.3k|                scn::runtime_format(f));
  184|  41.3k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 22.9k, False: 18.3k]
  ------------------
  185|  22.9k|                break;
  186|  22.9k|            }
  187|  18.3k|            it = result->begin();
  188|  18.3k|        }
  189|  22.9k|    }
  190|       |
  191|       |    // scan_value
  192|  2.29k|    {
  193|  2.29k|        auto it = scn::ranges::begin(source);
  194|  4.59k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  4.59k|            auto result = scn::scan_value<T>(
  196|  4.59k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  4.59k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.29k, False: 2.29k]
  ------------------
  198|  2.29k|                break;
  199|  2.29k|            }
  200|  2.29k|            it = result->begin();
  201|  2.29k|        }
  202|  2.29k|    }
  203|  2.29k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  2.29k|{
  162|       |    // Regular scan
  163|  22.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 22.9k, False: 2.29k]
  ------------------
  164|  22.9k|        auto it = scn::ranges::begin(source);
  165|  41.3k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  41.3k|            auto result = scn::scan<T>(
  167|  41.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  41.3k|                scn::runtime_format(f));
  169|  41.3k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 22.9k, False: 18.3k]
  ------------------
  170|  22.9k|                break;
  171|  22.9k|            }
  172|  18.3k|            it = result->begin();
  173|  18.3k|        }
  174|  22.9k|    }
  175|       |
  176|       |    // scan localized
  177|  22.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 22.9k, False: 2.29k]
  ------------------
  178|  22.9k|        auto it = scn::ranges::begin(source);
  179|  41.3k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  41.3k|            auto result = scn::scan<T>(
  181|  41.3k|                global_locale,
  182|  41.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  41.3k|                scn::runtime_format(f));
  184|  41.3k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 22.9k, False: 18.3k]
  ------------------
  185|  22.9k|                break;
  186|  22.9k|            }
  187|  18.3k|            it = result->begin();
  188|  18.3k|        }
  189|  22.9k|    }
  190|       |
  191|       |    // scan_value
  192|  2.29k|    {
  193|  2.29k|        auto it = scn::ranges::begin(source);
  194|  4.59k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  4.59k|            auto result = scn::scan_value<T>(
  196|  4.59k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  4.59k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.29k, False: 2.29k]
  ------------------
  198|  2.29k|                break;
  199|  2.29k|            }
  200|  2.29k|            it = result->begin();
  201|  2.29k|        }
  202|  2.29k|    }
  203|  2.29k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  2.29k|{
  162|       |    // Regular scan
  163|  22.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 22.9k, False: 2.29k]
  ------------------
  164|  22.9k|        auto it = scn::ranges::begin(source);
  165|  41.3k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  41.3k|            auto result = scn::scan<T>(
  167|  41.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  41.3k|                scn::runtime_format(f));
  169|  41.3k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 22.9k, False: 18.3k]
  ------------------
  170|  22.9k|                break;
  171|  22.9k|            }
  172|  18.3k|            it = result->begin();
  173|  18.3k|        }
  174|  22.9k|    }
  175|       |
  176|       |    // scan localized
  177|  22.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 22.9k, False: 2.29k]
  ------------------
  178|  22.9k|        auto it = scn::ranges::begin(source);
  179|  41.3k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  41.3k|            auto result = scn::scan<T>(
  181|  41.3k|                global_locale,
  182|  41.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  41.3k|                scn::runtime_format(f));
  184|  41.3k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 22.9k, False: 18.3k]
  ------------------
  185|  22.9k|                break;
  186|  22.9k|            }
  187|  18.3k|            it = result->begin();
  188|  18.3k|        }
  189|  22.9k|    }
  190|       |
  191|       |    // scan_value
  192|  2.29k|    {
  193|  2.29k|        auto it = scn::ranges::begin(source);
  194|  4.59k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  4.59k|            auto result = scn::scan_value<T>(
  196|  4.59k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  4.59k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.29k, False: 2.29k]
  ------------------
  198|  2.29k|                break;
  199|  2.29k|            }
  200|  2.29k|            it = result->begin();
  201|  2.29k|        }
  202|  2.29k|    }
  203|  2.29k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  2.29k|{
  162|       |    // Regular scan
  163|  22.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 22.9k, False: 2.29k]
  ------------------
  164|  22.9k|        auto it = scn::ranges::begin(source);
  165|  41.3k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  41.3k|            auto result = scn::scan<T>(
  167|  41.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  41.3k|                scn::runtime_format(f));
  169|  41.3k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 22.9k, False: 18.3k]
  ------------------
  170|  22.9k|                break;
  171|  22.9k|            }
  172|  18.3k|            it = result->begin();
  173|  18.3k|        }
  174|  22.9k|    }
  175|       |
  176|       |    // scan localized
  177|  22.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 22.9k, False: 2.29k]
  ------------------
  178|  22.9k|        auto it = scn::ranges::begin(source);
  179|  41.3k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  41.3k|            auto result = scn::scan<T>(
  181|  41.3k|                global_locale,
  182|  41.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  41.3k|                scn::runtime_format(f));
  184|  41.3k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 22.9k, False: 18.3k]
  ------------------
  185|  22.9k|                break;
  186|  22.9k|            }
  187|  18.3k|            it = result->begin();
  188|  18.3k|        }
  189|  22.9k|    }
  190|       |
  191|       |    // scan_value
  192|  2.29k|    {
  193|  2.29k|        auto it = scn::ranges::begin(source);
  194|  4.59k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  4.59k|            auto result = scn::scan_value<T>(
  196|  4.59k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  4.59k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.29k, False: 2.29k]
  ------------------
  198|  2.29k|                break;
  199|  2.29k|            }
  200|  2.29k|            it = result->begin();
  201|  2.29k|        }
  202|  2.29k|    }
  203|  2.29k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
  119|  2.29k|{
  120|  2.29k|    using char_type = ranges::range_value_t<Source>;
  121|  2.29k|    auto& deque = get_noncontiguous_buffer<char_type>();
  122|  2.29k|    std::copy(ranges::begin(source), ranges::end(source),
  123|  2.29k|              std::back_inserter(deque));
  124|  2.29k|    return deque;
  125|  2.29k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
  108|  2.29k|{
  109|  2.29k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (109:19): [Folded - Ignored]
  ------------------
  110|  2.29k|        return noncontiguous_buffer;
  111|  2.29k|    }
  112|  2.29k|    else {
  113|  2.29k|        return wnoncontiguous_buffer;
  114|  2.29k|    }
  115|  2.29k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  150|  2.29k|{
  151|  2.29k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  152|  2.29k|    auto& buf = get_format_string_view_buffer<CharT>();
  153|  2.29k|    buf.resize(sizeof...(Args));
  154|  2.29k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  155|  2.29k|    return {buf.data(), buf.size()};
  156|  2.29k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  136|  2.29k|{
  137|  2.29k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (137:19): [Folded - Ignored]
  ------------------
  138|  2.29k|        return format_string_view_buffer;
  139|  2.29k|    }
  140|  2.29k|    else {
  141|  2.29k|        return wformat_string_view_buffer;
  142|  2.29k|    }
  143|  2.29k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  210|  6.89k|{
  211|  6.89k|    do_basic_run_for_source<CharT>(data, format_strings);
  212|  6.89k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  213|  6.89k|                                   format_strings);
  214|  6.89k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  6.89k|{
  162|       |    // Regular scan
  163|  68.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 68.9k, False: 6.89k]
  ------------------
  164|  68.9k|        auto it = scn::ranges::begin(source);
  165|   336k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   336k|            auto result = scn::scan<T>(
  167|   336k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   336k|                scn::runtime_format(f));
  169|   336k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 68.9k, False: 267k]
  ------------------
  170|  68.9k|                break;
  171|  68.9k|            }
  172|   267k|            it = result->begin();
  173|   267k|        }
  174|  68.9k|    }
  175|       |
  176|       |    // scan localized
  177|  68.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 68.9k, False: 6.89k]
  ------------------
  178|  68.9k|        auto it = scn::ranges::begin(source);
  179|   336k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   336k|            auto result = scn::scan<T>(
  181|   336k|                global_locale,
  182|   336k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   336k|                scn::runtime_format(f));
  184|   336k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 68.9k, False: 267k]
  ------------------
  185|  68.9k|                break;
  186|  68.9k|            }
  187|   267k|            it = result->begin();
  188|   267k|        }
  189|  68.9k|    }
  190|       |
  191|       |    // scan_value
  192|  6.89k|    {
  193|  6.89k|        auto it = scn::ranges::begin(source);
  194|  69.3k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  69.3k|            auto result = scn::scan_value<T>(
  196|  69.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  69.3k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 6.89k, False: 62.4k]
  ------------------
  198|  6.89k|                break;
  199|  6.89k|            }
  200|  62.4k|            it = result->begin();
  201|  62.4k|        }
  202|  6.89k|    }
  203|  6.89k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  6.89k|{
  162|       |    // Regular scan
  163|  68.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 68.9k, False: 6.89k]
  ------------------
  164|  68.9k|        auto it = scn::ranges::begin(source);
  165|   333k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   333k|            auto result = scn::scan<T>(
  167|   333k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   333k|                scn::runtime_format(f));
  169|   333k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 68.9k, False: 264k]
  ------------------
  170|  68.9k|                break;
  171|  68.9k|            }
  172|   264k|            it = result->begin();
  173|   264k|        }
  174|  68.9k|    }
  175|       |
  176|       |    // scan localized
  177|  68.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 68.9k, False: 6.89k]
  ------------------
  178|  68.9k|        auto it = scn::ranges::begin(source);
  179|   333k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   333k|            auto result = scn::scan<T>(
  181|   333k|                global_locale,
  182|   333k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   333k|                scn::runtime_format(f));
  184|   333k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 68.9k, False: 264k]
  ------------------
  185|  68.9k|                break;
  186|  68.9k|            }
  187|   264k|            it = result->begin();
  188|   264k|        }
  189|  68.9k|    }
  190|       |
  191|       |    // scan_value
  192|  6.89k|    {
  193|  6.89k|        auto it = scn::ranges::begin(source);
  194|  66.2k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  66.2k|            auto result = scn::scan_value<T>(
  196|  66.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  66.2k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 6.89k, False: 59.3k]
  ------------------
  198|  6.89k|                break;
  199|  6.89k|            }
  200|  59.3k|            it = result->begin();
  201|  59.3k|        }
  202|  6.89k|    }
  203|  6.89k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  6.89k|{
  162|       |    // Regular scan
  163|  68.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 68.9k, False: 6.89k]
  ------------------
  164|  68.9k|        auto it = scn::ranges::begin(source);
  165|   461k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   461k|            auto result = scn::scan<T>(
  167|   461k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   461k|                scn::runtime_format(f));
  169|   461k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 68.9k, False: 392k]
  ------------------
  170|  68.9k|                break;
  171|  68.9k|            }
  172|   392k|            it = result->begin();
  173|   392k|        }
  174|  68.9k|    }
  175|       |
  176|       |    // scan localized
  177|  68.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 68.9k, False: 6.89k]
  ------------------
  178|  68.9k|        auto it = scn::ranges::begin(source);
  179|   461k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   461k|            auto result = scn::scan<T>(
  181|   461k|                global_locale,
  182|   461k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   461k|                scn::runtime_format(f));
  184|   461k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 68.9k, False: 392k]
  ------------------
  185|  68.9k|                break;
  186|  68.9k|            }
  187|   392k|            it = result->begin();
  188|   392k|        }
  189|  68.9k|    }
  190|       |
  191|       |    // scan_value
  192|  6.89k|    {
  193|  6.89k|        auto it = scn::ranges::begin(source);
  194|  87.4k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  87.4k|            auto result = scn::scan_value<T>(
  196|  87.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  87.4k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 6.89k, False: 80.5k]
  ------------------
  198|  6.89k|                break;
  199|  6.89k|            }
  200|  80.5k|            it = result->begin();
  201|  80.5k|        }
  202|  6.89k|    }
  203|  6.89k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  6.89k|{
  162|       |    // Regular scan
  163|  68.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 68.9k, False: 6.89k]
  ------------------
  164|  68.9k|        auto it = scn::ranges::begin(source);
  165|   396k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   396k|            auto result = scn::scan<T>(
  167|   396k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   396k|                scn::runtime_format(f));
  169|   396k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 68.9k, False: 327k]
  ------------------
  170|  68.9k|                break;
  171|  68.9k|            }
  172|   327k|            it = result->begin();
  173|   327k|        }
  174|  68.9k|    }
  175|       |
  176|       |    // scan localized
  177|  68.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 68.9k, False: 6.89k]
  ------------------
  178|  68.9k|        auto it = scn::ranges::begin(source);
  179|   396k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   396k|            auto result = scn::scan<T>(
  181|   396k|                global_locale,
  182|   396k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   396k|                scn::runtime_format(f));
  184|   396k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 68.9k, False: 327k]
  ------------------
  185|  68.9k|                break;
  186|  68.9k|            }
  187|   327k|            it = result->begin();
  188|   327k|        }
  189|  68.9k|    }
  190|       |
  191|       |    // scan_value
  192|  6.89k|    {
  193|  6.89k|        auto it = scn::ranges::begin(source);
  194|  75.5k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  75.5k|            auto result = scn::scan_value<T>(
  196|  75.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  75.5k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 6.89k, False: 68.6k]
  ------------------
  198|  6.89k|                break;
  199|  6.89k|            }
  200|  68.6k|            it = result->begin();
  201|  68.6k|        }
  202|  6.89k|    }
  203|  6.89k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  6.89k|{
  162|       |    // Regular scan
  163|  68.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 68.9k, False: 6.89k]
  ------------------
  164|  68.9k|        auto it = scn::ranges::begin(source);
  165|   487k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   487k|            auto result = scn::scan<T>(
  167|   487k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   487k|                scn::runtime_format(f));
  169|   487k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 68.9k, False: 418k]
  ------------------
  170|  68.9k|                break;
  171|  68.9k|            }
  172|   418k|            it = result->begin();
  173|   418k|        }
  174|  68.9k|    }
  175|       |
  176|       |    // scan localized
  177|  68.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 68.9k, False: 6.89k]
  ------------------
  178|  68.9k|        auto it = scn::ranges::begin(source);
  179|   487k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   487k|            auto result = scn::scan<T>(
  181|   487k|                global_locale,
  182|   487k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   487k|                scn::runtime_format(f));
  184|   487k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 68.9k, False: 418k]
  ------------------
  185|  68.9k|                break;
  186|  68.9k|            }
  187|   418k|            it = result->begin();
  188|   418k|        }
  189|  68.9k|    }
  190|       |
  191|       |    // scan_value
  192|  6.89k|    {
  193|  6.89k|        auto it = scn::ranges::begin(source);
  194|  93.0k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  93.0k|            auto result = scn::scan_value<T>(
  196|  93.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  93.0k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 6.89k, False: 86.1k]
  ------------------
  198|  6.89k|                break;
  199|  6.89k|            }
  200|  86.1k|            it = result->begin();
  201|  86.1k|        }
  202|  6.89k|    }
  203|  6.89k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  6.89k|{
  162|       |    // Regular scan
  163|  68.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 68.9k, False: 6.89k]
  ------------------
  164|  68.9k|        auto it = scn::ranges::begin(source);
  165|   409k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   409k|            auto result = scn::scan<T>(
  167|   409k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   409k|                scn::runtime_format(f));
  169|   409k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 68.9k, False: 340k]
  ------------------
  170|  68.9k|                break;
  171|  68.9k|            }
  172|   340k|            it = result->begin();
  173|   340k|        }
  174|  68.9k|    }
  175|       |
  176|       |    // scan localized
  177|  68.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 68.9k, False: 6.89k]
  ------------------
  178|  68.9k|        auto it = scn::ranges::begin(source);
  179|   409k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   409k|            auto result = scn::scan<T>(
  181|   409k|                global_locale,
  182|   409k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   409k|                scn::runtime_format(f));
  184|   409k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 68.9k, False: 340k]
  ------------------
  185|  68.9k|                break;
  186|  68.9k|            }
  187|   340k|            it = result->begin();
  188|   340k|        }
  189|  68.9k|    }
  190|       |
  191|       |    // scan_value
  192|  6.89k|    {
  193|  6.89k|        auto it = scn::ranges::begin(source);
  194|  77.8k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  77.8k|            auto result = scn::scan_value<T>(
  196|  77.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  77.8k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 6.89k, False: 70.9k]
  ------------------
  198|  6.89k|                break;
  199|  6.89k|            }
  200|  70.9k|            it = result->begin();
  201|  70.9k|        }
  202|  6.89k|    }
  203|  6.89k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  6.89k|{
  162|       |    // Regular scan
  163|  68.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 68.9k, False: 6.89k]
  ------------------
  164|  68.9k|        auto it = scn::ranges::begin(source);
  165|   117k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   117k|            auto result = scn::scan<T>(
  167|   117k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   117k|                scn::runtime_format(f));
  169|   117k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 68.9k, False: 48.2k]
  ------------------
  170|  68.9k|                break;
  171|  68.9k|            }
  172|  48.2k|            it = result->begin();
  173|  48.2k|        }
  174|  68.9k|    }
  175|       |
  176|       |    // scan localized
  177|  68.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 68.9k, False: 6.89k]
  ------------------
  178|  68.9k|        auto it = scn::ranges::begin(source);
  179|   117k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   117k|            auto result = scn::scan<T>(
  181|   117k|                global_locale,
  182|   117k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   117k|                scn::runtime_format(f));
  184|   117k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 68.9k, False: 48.2k]
  ------------------
  185|  68.9k|                break;
  186|  68.9k|            }
  187|  48.2k|            it = result->begin();
  188|  48.2k|        }
  189|  68.9k|    }
  190|       |
  191|       |    // scan_value
  192|  6.89k|    {
  193|  6.89k|        auto it = scn::ranges::begin(source);
  194|  13.7k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  13.7k|            auto result = scn::scan_value<T>(
  196|  13.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  13.7k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 6.89k, False: 6.89k]
  ------------------
  198|  6.89k|                break;
  199|  6.89k|            }
  200|  6.89k|            it = result->begin();
  201|  6.89k|        }
  202|  6.89k|    }
  203|  6.89k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  6.89k|{
  162|       |    // Regular scan
  163|  68.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 68.9k, False: 6.89k]
  ------------------
  164|  68.9k|        auto it = scn::ranges::begin(source);
  165|   117k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   117k|            auto result = scn::scan<T>(
  167|   117k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   117k|                scn::runtime_format(f));
  169|   117k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 68.9k, False: 48.2k]
  ------------------
  170|  68.9k|                break;
  171|  68.9k|            }
  172|  48.2k|            it = result->begin();
  173|  48.2k|        }
  174|  68.9k|    }
  175|       |
  176|       |    // scan localized
  177|  68.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 68.9k, False: 6.89k]
  ------------------
  178|  68.9k|        auto it = scn::ranges::begin(source);
  179|   117k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   117k|            auto result = scn::scan<T>(
  181|   117k|                global_locale,
  182|   117k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   117k|                scn::runtime_format(f));
  184|   117k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 68.9k, False: 48.2k]
  ------------------
  185|  68.9k|                break;
  186|  68.9k|            }
  187|  48.2k|            it = result->begin();
  188|  48.2k|        }
  189|  68.9k|    }
  190|       |
  191|       |    // scan_value
  192|  6.89k|    {
  193|  6.89k|        auto it = scn::ranges::begin(source);
  194|  13.7k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  13.7k|            auto result = scn::scan_value<T>(
  196|  13.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  13.7k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 6.89k, False: 6.89k]
  ------------------
  198|  6.89k|                break;
  199|  6.89k|            }
  200|  6.89k|            it = result->begin();
  201|  6.89k|        }
  202|  6.89k|    }
  203|  6.89k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  6.89k|{
  162|       |    // Regular scan
  163|  68.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 68.9k, False: 6.89k]
  ------------------
  164|  68.9k|        auto it = scn::ranges::begin(source);
  165|   124k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   124k|            auto result = scn::scan<T>(
  167|   124k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   124k|                scn::runtime_format(f));
  169|   124k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 68.9k, False: 55.1k]
  ------------------
  170|  68.9k|                break;
  171|  68.9k|            }
  172|  55.1k|            it = result->begin();
  173|  55.1k|        }
  174|  68.9k|    }
  175|       |
  176|       |    // scan localized
  177|  68.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 68.9k, False: 6.89k]
  ------------------
  178|  68.9k|        auto it = scn::ranges::begin(source);
  179|   124k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   124k|            auto result = scn::scan<T>(
  181|   124k|                global_locale,
  182|   124k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   124k|                scn::runtime_format(f));
  184|   124k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 68.9k, False: 55.1k]
  ------------------
  185|  68.9k|                break;
  186|  68.9k|            }
  187|  55.1k|            it = result->begin();
  188|  55.1k|        }
  189|  68.9k|    }
  190|       |
  191|       |    // scan_value
  192|  6.89k|    {
  193|  6.89k|        auto it = scn::ranges::begin(source);
  194|  13.7k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  13.7k|            auto result = scn::scan_value<T>(
  196|  13.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  13.7k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 6.89k, False: 6.89k]
  ------------------
  198|  6.89k|                break;
  199|  6.89k|            }
  200|  6.89k|            it = result->begin();
  201|  6.89k|        }
  202|  6.89k|    }
  203|  6.89k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  6.89k|{
  162|       |    // Regular scan
  163|  68.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 68.9k, False: 6.89k]
  ------------------
  164|  68.9k|        auto it = scn::ranges::begin(source);
  165|   124k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   124k|            auto result = scn::scan<T>(
  167|   124k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   124k|                scn::runtime_format(f));
  169|   124k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 68.9k, False: 55.1k]
  ------------------
  170|  68.9k|                break;
  171|  68.9k|            }
  172|  55.1k|            it = result->begin();
  173|  55.1k|        }
  174|  68.9k|    }
  175|       |
  176|       |    // scan localized
  177|  68.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 68.9k, False: 6.89k]
  ------------------
  178|  68.9k|        auto it = scn::ranges::begin(source);
  179|   124k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   124k|            auto result = scn::scan<T>(
  181|   124k|                global_locale,
  182|   124k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   124k|                scn::runtime_format(f));
  184|   124k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 68.9k, False: 55.1k]
  ------------------
  185|  68.9k|                break;
  186|  68.9k|            }
  187|  55.1k|            it = result->begin();
  188|  55.1k|        }
  189|  68.9k|    }
  190|       |
  191|       |    // scan_value
  192|  6.89k|    {
  193|  6.89k|        auto it = scn::ranges::begin(source);
  194|  13.7k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  13.7k|            auto result = scn::scan_value<T>(
  196|  13.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  13.7k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 6.89k, False: 6.89k]
  ------------------
  198|  6.89k|                break;
  199|  6.89k|            }
  200|  6.89k|            it = result->begin();
  201|  6.89k|        }
  202|  6.89k|    }
  203|  6.89k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  6.89k|{
  162|       |    // Regular scan
  163|  68.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 68.9k, False: 6.89k]
  ------------------
  164|  68.9k|        auto it = scn::ranges::begin(source);
  165|   124k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   124k|            auto result = scn::scan<T>(
  167|   124k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   124k|                scn::runtime_format(f));
  169|   124k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 68.9k, False: 55.1k]
  ------------------
  170|  68.9k|                break;
  171|  68.9k|            }
  172|  55.1k|            it = result->begin();
  173|  55.1k|        }
  174|  68.9k|    }
  175|       |
  176|       |    // scan localized
  177|  68.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 68.9k, False: 6.89k]
  ------------------
  178|  68.9k|        auto it = scn::ranges::begin(source);
  179|   124k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   124k|            auto result = scn::scan<T>(
  181|   124k|                global_locale,
  182|   124k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   124k|                scn::runtime_format(f));
  184|   124k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 68.9k, False: 55.1k]
  ------------------
  185|  68.9k|                break;
  186|  68.9k|            }
  187|  55.1k|            it = result->begin();
  188|  55.1k|        }
  189|  68.9k|    }
  190|       |
  191|       |    // scan_value
  192|  6.89k|    {
  193|  6.89k|        auto it = scn::ranges::begin(source);
  194|  13.7k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  13.7k|            auto result = scn::scan_value<T>(
  196|  13.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  13.7k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 6.89k, False: 6.89k]
  ------------------
  198|  6.89k|                break;
  199|  6.89k|            }
  200|  6.89k|            it = result->begin();
  201|  6.89k|        }
  202|  6.89k|    }
  203|  6.89k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  6.89k|{
  162|       |    // Regular scan
  163|  68.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 68.9k, False: 6.89k]
  ------------------
  164|  68.9k|        auto it = scn::ranges::begin(source);
  165|   124k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   124k|            auto result = scn::scan<T>(
  167|   124k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   124k|                scn::runtime_format(f));
  169|   124k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 68.9k, False: 55.1k]
  ------------------
  170|  68.9k|                break;
  171|  68.9k|            }
  172|  55.1k|            it = result->begin();
  173|  55.1k|        }
  174|  68.9k|    }
  175|       |
  176|       |    // scan localized
  177|  68.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 68.9k, False: 6.89k]
  ------------------
  178|  68.9k|        auto it = scn::ranges::begin(source);
  179|   124k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   124k|            auto result = scn::scan<T>(
  181|   124k|                global_locale,
  182|   124k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   124k|                scn::runtime_format(f));
  184|   124k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 68.9k, False: 55.1k]
  ------------------
  185|  68.9k|                break;
  186|  68.9k|            }
  187|  55.1k|            it = result->begin();
  188|  55.1k|        }
  189|  68.9k|    }
  190|       |
  191|       |    // scan_value
  192|  6.89k|    {
  193|  6.89k|        auto it = scn::ranges::begin(source);
  194|  13.7k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  13.7k|            auto result = scn::scan_value<T>(
  196|  13.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  13.7k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 6.89k, False: 6.89k]
  ------------------
  198|  6.89k|                break;
  199|  6.89k|            }
  200|  6.89k|            it = result->begin();
  201|  6.89k|        }
  202|  6.89k|    }
  203|  6.89k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
  119|  6.89k|{
  120|  6.89k|    using char_type = ranges::range_value_t<Source>;
  121|  6.89k|    auto& deque = get_noncontiguous_buffer<char_type>();
  122|  6.89k|    std::copy(ranges::begin(source), ranges::end(source),
  123|  6.89k|              std::back_inserter(deque));
  124|  6.89k|    return deque;
  125|  6.89k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
  108|  6.89k|{
  109|  6.89k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (109:19): [Folded - Ignored]
  ------------------
  110|  6.89k|        return noncontiguous_buffer;
  111|  6.89k|    }
  112|  6.89k|    else {
  113|  6.89k|        return wnoncontiguous_buffer;
  114|  6.89k|    }
  115|  6.89k|}

LLVMFuzzerTestOneInput:
   59|  2.29k|{
   60|  2.29k|    scn::fuzz::run({data, size});
   61|  2.29k|    return 0;
   62|  2.29k|}
int_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runENS_2v24spanIKhEE:
   35|  2.29k|{
   36|  2.29k|    if (data.size() > max_input_bytes || data.size() == 0) {
  ------------------
  |  Branch (36:9): [True: 0, False: 2.29k]
  |  Branch (36:42): [True: 0, False: 2.29k]
  ------------------
   37|      0|        return;
   38|      0|    }
   39|       |
   40|  2.29k|    auto [sv, wsv_direct, wsv_reinterpret, wsv_transcode] =
   41|  2.29k|        make_input_views(data);
   42|       |
   43|  2.29k|    auto f =
   44|  2.29k|        get_format_strings<char>("{}", "{:i}", "{:d}", "{:L}", "{:x}", "{:b}",
   45|  2.29k|                                 "{:o}", "{:B36}", "{:'}", "{:'L}");
   46|  2.29k|    do_basic_run(sv, f);
   47|       |
   48|  2.29k|    auto wf = get_format_strings<wchar_t>(L"{}", L"{:i}", L"{:d}", L"{:L}",
   49|  2.29k|                                          L"{:x}", L"{:b}", L"{:o}", L"{:B36}",
   50|  2.29k|                                          L"{:'}", L"{:'L}");
   51|  2.29k|    do_basic_run(wsv_direct, wf);
   52|  2.29k|    do_basic_run(wsv_reinterpret, wf);
   53|  2.29k|    do_basic_run(wsv_transcode, wf);
   54|  2.29k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  2.29k|{
   25|  2.29k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  2.29k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  2.29k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  2.29k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  2.29k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  2.29k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  2.29k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  2.29k|{
   25|  2.29k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  2.29k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  2.29k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  2.29k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  2.29k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  2.29k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  2.29k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  6.89k|{
   25|  6.89k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  6.89k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  6.89k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  6.89k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  6.89k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  6.89k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  6.89k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  6.89k|{
   25|  6.89k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  6.89k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  6.89k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  6.89k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  6.89k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  6.89k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  6.89k|}

