_ZNK7simdutf14implementation25required_instruction_setsEv:
 1445|      2|  virtual uint32_t required_instruction_sets() const { return _required_instruction_sets; }
_ZN7simdutf14implementationC2ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_j:
 2455|      7|  {
 2456|      7|  }
_ZN7simdutf8internal29available_implementation_listC2Ev:
 2485|      1|  simdutf_really_inline available_implementation_list() {}
_ZN7simdutf14implementationD2Ev:
 2457|      5|  virtual ~implementation()=default;
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEaSEPS3_:
 2551|      1|  atomic_ptr& operator=(T *_ptr) { ptr = _ptr; return *this; }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEcvPS3_Ev:
 2548|      1|  operator T*() { return ptr.load(); }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEC2EPS3_:
 2531|      1|  atomic_ptr(T *_ptr) : ptr{_ptr} {}
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEptEv:
 2550|   126k|  T* operator->() { return ptr.load(); }

simdutf.cpp:_ZN7simdutf8internalL30detect_supported_architecturesEv:
  170|      1|static inline uint32_t detect_supported_architectures() {
  171|      1|  uint32_t eax;
  172|      1|  uint32_t ebx = 0;
  173|      1|  uint32_t ecx = 0;
  174|      1|  uint32_t edx = 0;
  175|      1|  uint32_t host_isa = 0x0;
  176|       |
  177|       |  // EBX for EAX=0x1
  178|      1|  eax = 0x1;
  179|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  180|       |
  181|      1|  if (ecx & cpuid_bit::sse42) {
  ------------------
  |  Branch (181:7): [True: 1, False: 0]
  ------------------
  182|      1|    host_isa |= instruction_set::SSE42;
  183|      1|  }
  184|       |
  185|      1|  if (ecx & cpuid_bit::pclmulqdq) {
  ------------------
  |  Branch (185:7): [True: 1, False: 0]
  ------------------
  186|      1|    host_isa |= instruction_set::PCLMULQDQ;
  187|      1|  }
  188|       |
  189|      1|  if ((ecx & cpuid_bit::osxsave) != cpuid_bit::osxsave) {
  ------------------
  |  Branch (189:7): [True: 0, False: 1]
  ------------------
  190|      0|    return host_isa;
  191|      0|  }
  192|       |
  193|       |  // xgetbv for checking if the OS saves registers
  194|      1|  uint64_t xcr0 = xgetbv();
  195|       |
  196|      1|  if ((xcr0 & cpuid_bit::xcr0_bit::avx256_saved) == 0) {
  ------------------
  |  Branch (196:7): [True: 0, False: 1]
  ------------------
  197|      0|    return host_isa;
  198|      0|  }
  199|       |  // ECX for EAX=0x7
  200|      1|  eax = 0x7;
  201|      1|  ecx = 0x0; // Sub-leaf = 0
  202|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  203|      1|  if (ebx & cpuid_bit::ebx::avx2) {
  ------------------
  |  Branch (203:7): [True: 1, False: 0]
  ------------------
  204|      1|    host_isa |= instruction_set::AVX2;
  205|      1|  }
  206|      1|  if (ebx & cpuid_bit::ebx::bmi1) {
  ------------------
  |  Branch (206:7): [True: 1, False: 0]
  ------------------
  207|      1|    host_isa |= instruction_set::BMI1;
  208|      1|  }
  209|      1|  if (ebx & cpuid_bit::ebx::bmi2) {
  ------------------
  |  Branch (209:7): [True: 1, False: 0]
  ------------------
  210|      1|    host_isa |= instruction_set::BMI2;
  211|      1|  }
  212|      1|  if (!((xcr0 & cpuid_bit::xcr0_bit::avx512_saved) == cpuid_bit::xcr0_bit::avx512_saved)) {
  ------------------
  |  Branch (212:7): [True: 1, False: 0]
  ------------------
  213|      1|    return host_isa;
  214|      1|  }
  215|      0|  if (ebx & cpuid_bit::ebx::avx512f) {
  ------------------
  |  Branch (215:7): [True: 0, False: 0]
  ------------------
  216|      0|    host_isa |= instruction_set::AVX512F;
  217|      0|  }
  218|      0|  if (ebx & cpuid_bit::ebx::avx512bw) {
  ------------------
  |  Branch (218:7): [True: 0, False: 0]
  ------------------
  219|      0|    host_isa |= instruction_set::AVX512BW;
  220|      0|  }
  221|      0|  if (ebx & cpuid_bit::ebx::avx512cd) {
  ------------------
  |  Branch (221:7): [True: 0, False: 0]
  ------------------
  222|      0|    host_isa |= instruction_set::AVX512CD;
  223|      0|  }
  224|      0|  if (ebx & cpuid_bit::ebx::avx512dq) {
  ------------------
  |  Branch (224:7): [True: 0, False: 0]
  ------------------
  225|      0|    host_isa |= instruction_set::AVX512DQ;
  226|      0|  }
  227|      0|  if (ebx & cpuid_bit::ebx::avx512vl) {
  ------------------
  |  Branch (227:7): [True: 0, False: 0]
  ------------------
  228|      0|    host_isa |= instruction_set::AVX512VL;
  229|      0|  }
  230|      0|  if (ecx & cpuid_bit::ecx::avx512vbmi2) {
  ------------------
  |  Branch (230:7): [True: 0, False: 0]
  ------------------
  231|      0|    host_isa |= instruction_set::AVX512VBMI2;
  232|      0|  }
  233|      0|  if (ecx & cpuid_bit::ecx::avx512vpopcnt) {
  ------------------
  |  Branch (233:7): [True: 0, False: 0]
  ------------------
  234|      0|    host_isa |= instruction_set::AVX512VPOPCNTDQ;
  235|      0|  }
  236|      0|  return host_isa;
  237|      1|}
simdutf.cpp:_ZN7simdutf8internalL5cpuidEPjS1_S1_S1_:
  139|      2|                         uint32_t *edx) {
  140|       |#if defined(_MSC_VER)
  141|       |  int cpu_info[4];
  142|       |  __cpuidex(cpu_info, *eax, *ecx);
  143|       |  *eax = cpu_info[0];
  144|       |  *ebx = cpu_info[1];
  145|       |  *ecx = cpu_info[2];
  146|       |  *edx = cpu_info[3];
  147|       |#elif defined(HAVE_GCC_GET_CPUID) && defined(USE_GCC_GET_CPUID)
  148|       |  uint32_t level = *eax;
  149|       |  __get_cpuid(level, eax, ebx, ecx, edx);
  150|       |#else
  151|      2|  uint32_t a = *eax, b, c = *ecx, d;
  152|      2|  asm volatile("cpuid\n\t" : "+a"(a), "=b"(b), "+c"(c), "=d"(d));
  153|      2|  *eax = a;
  154|      2|  *ebx = b;
  155|      2|  *ecx = c;
  156|      2|  *edx = d;
  157|      2|#endif
  158|      2|}
simdutf.cpp:_ZN7simdutf8internalL6xgetbvEv:
  160|      1|static inline uint64_t xgetbv() {
  161|       | #if defined(_MSC_VER)
  162|       |   return _xgetbv(0);
  163|       | #else
  164|      1|   uint32_t xcr0_lo, xcr0_hi;
  165|      1|   asm volatile("xgetbv\n\t" : "=a" (xcr0_lo), "=d" (xcr0_hi) : "c" (0));
  166|      1|   return xcr0_lo | ((uint64_t)xcr0_hi << 32);
  167|      1| #endif
  168|      1| }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EEC2EPKhm:
   62|  3.01k|simdutf_really_inline buf_block_reader<STEP_SIZE>::buf_block_reader(const uint8_t *_buf, size_t _len) : buf{_buf}, len{_len}, lenminusstep{len < STEP_SIZE ? 0 : len - STEP_SIZE}, idx{0} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE14has_full_blockEv:
   68|  12.9k|simdutf_really_inline bool buf_block_reader<STEP_SIZE>::has_full_block() const {
   69|  12.9k|  return idx < lenminusstep;
   70|  12.9k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE10full_blockEv:
   73|  9.94k|simdutf_really_inline const uint8_t *buf_block_reader<STEP_SIZE>::full_block() const {
   74|  9.94k|  return &buf[idx];
   75|  9.94k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE7advanceEv:
   86|  12.9k|simdutf_really_inline void buf_block_reader<STEP_SIZE>::advance() {
   87|  12.9k|  idx += STEP_SIZE;
   88|  12.9k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE13get_remainderEPh:
   78|  3.01k|simdutf_really_inline size_t buf_block_reader<STEP_SIZE>::get_remainder(uint8_t *dst) const {
   79|  3.01k|  if(len == idx) { return 0; } // memcpy(dst, null, 0) will trigger an error with some sanitizers
  ------------------
  |  Branch (79:6): [True: 0, False: 3.01k]
  ------------------
   80|  3.01k|  std::memset(dst, 0x20, STEP_SIZE); // std::memset STEP_SIZE because it's more efficient to write out 8 or 16 bytes at once.
   81|  3.01k|  std::memcpy(dst, buf + idx, len - idx);
   82|  3.01k|  return len - idx;
   83|  3.01k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14utf817count_code_pointsEPKcm:
   10|  2.33k|simdutf_really_inline size_t count_code_points(const char* in, size_t size) {
   11|  2.33k|    size_t pos = 0;
   12|  2.33k|    size_t count = 0;
   13|  10.1k|    for(;pos + 64 <= size; pos += 64) {
  ------------------
  |  Branch (13:10): [True: 7.78k, False: 2.33k]
  ------------------
   14|  7.78k|      simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
   15|  7.78k|      uint64_t utf8_continuation_mask = input.gt(-65);
   16|  7.78k|      count += count_ones(utf8_continuation_mask);
   17|  7.78k|    }
   18|  2.33k|    return count + scalar::utf8::count_code_points(in + pos, size - pos);
   19|  2.33k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoderC2Ev:
  115|   118k|    validating_transcoder() : error(uint8_t(0)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder7convertEPKcmPDi:
  129|   118k|    simdutf_really_inline size_t convert(const char* in, size_t size, char32_t* utf32_output) {
  130|   118k|      size_t pos = 0;
  131|   118k|      char32_t* start{utf32_output};
  132|       |      // In the worst case, we have the haswell kernel which can cause an overflow of
  133|       |      // 8 bytes when calling convert_masked_utf8_to_utf32. If you skip the last 16 bytes,
  134|       |      // and if the data is valid, then it is entirely safe because 16 UTF-8 bytes generate
  135|       |      // much more than 8 bytes. However, you cannot generally assume that you have valid
  136|       |      // UTF-8 input, so we are going to go back from the end counting 4 leading bytes,
  137|       |      // to give us a good margin.
  138|   118k|      size_t leading_byte = 0;
  139|   118k|      size_t margin = size;
  140|   260k|      for(; margin > 0 && leading_byte < 4; margin--) {
  ------------------
  |  Branch (140:13): [True: 141k, False: 118k]
  |  Branch (140:27): [True: 141k, False: 0]
  ------------------
  141|   141k|        leading_byte += (int8_t(in[margin-1]) > -65);
  142|   141k|      }
  143|       |      // If the input is long enough, then we have that margin-1 is the fourth last leading byte.
  144|   118k|      const size_t safety_margin = size - margin + 1; // to avoid overruns!
  145|   118k|      while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (145:13): [True: 0, False: 118k]
  ------------------
  146|      0|        simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
  147|      0|        if(input.is_ascii()) {
  ------------------
  |  Branch (147:12): [True: 0, False: 0]
  ------------------
  148|      0|          input.store_ascii_as_utf32(utf32_output);
  149|      0|          utf32_output += 64;
  150|      0|          pos += 64;
  151|      0|        } else {
  152|       |          // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  153|      0|          static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  154|      0|              "We support either two or four chunks per 64-byte block.");
  155|      0|          auto zero = simd8<uint8_t>{uint8_t(0)};
  156|      0|          if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (156:14): [Folded - Ignored]
  ------------------
  157|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  158|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  159|      0|          } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (159:21): [Folded - Ignored]
  ------------------
  160|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  161|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|      0|            this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  163|      0|            this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  164|      0|          }
  165|      0|          uint64_t utf8_continuation_mask = input.lt(-65 + 1);
  166|      0|          uint64_t utf8_leading_mask = ~utf8_continuation_mask;
  167|      0|          uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
  168|       |          // We process in blocks of up to 12 bytes except possibly
  169|       |          // for fast paths which may process up to 16 bytes. For the
  170|       |          // slow path to work, we should have at least 12 input bytes left.
  171|      0|          size_t max_starting_point = (pos + 64) - 12;
  172|       |          // Next loop is going to run at least five times.
  173|      0|          while(pos < max_starting_point) {
  ------------------
  |  Branch (173:17): [True: 0, False: 0]
  ------------------
  174|       |            // Performance note: our ability to compute 'consumed' and
  175|       |            // then shift and recompute is critical. If there is a
  176|       |            // latency of, say, 4 cycles on getting 'consumed', then
  177|       |            // the inner loop might have a total latency of about 6 cycles.
  178|       |            // Yet we process between 6 to 12 inputs bytes, thus we get
  179|       |            // a speed limit between 1 cycle/byte and 0.5 cycle/byte
  180|       |            // for this section of the code. Hence, there is a limit
  181|       |            // to how much we can further increase this latency before
  182|       |            // it seriously harms performance.
  183|      0|            size_t consumed = convert_masked_utf8_to_utf32(in + pos,
  184|      0|                            utf8_end_of_code_point_mask, utf32_output);
  185|      0|            pos += consumed;
  186|      0|            utf8_end_of_code_point_mask >>= consumed;
  187|      0|          }
  188|       |          // At this point there may remain between 0 and 12 bytes in the
  189|       |          // 64-byte block. These bytes will be processed again. So we have an
  190|       |          // 80% efficiency (in the worst case). In practice we expect an
  191|       |          // 85% to 90% efficiency.
  192|      0|        }
  193|      0|      }
  194|   118k|      if(errors()) { return 0; }
  ------------------
  |  Branch (194:10): [True: 0, False: 118k]
  ------------------
  195|   118k|      if(pos < size) {
  ------------------
  |  Branch (195:10): [True: 118k, False: 0]
  ------------------
  196|   118k|        size_t howmany  = scalar::utf8_to_utf32::convert(in + pos, size - pos, utf32_output);
  197|   118k|        if(howmany == 0) { return 0; }
  ------------------
  |  Branch (197:12): [True: 6.45k, False: 112k]
  ------------------
  198|   112k|        utf32_output += howmany;
  199|   112k|      }
  200|   112k|      return utf32_output - start;
  201|   118k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder6errorsEv:
  290|   118k|    simdutf_really_inline bool errors() const {
  291|   118k|      return this->error.any_bits_set_anywhere();
  292|   118k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
   12|  2.33k|    char32_t* utf32_output) noexcept {
   13|  2.33k|  size_t pos = 0;
   14|  2.33k|  char32_t* start{utf32_output};
   15|  2.33k|  const size_t safety_margin = 16; // to avoid overruns!
   16|  9.90k|  while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (16:9): [True: 7.57k, False: 2.33k]
  ------------------
   17|  7.57k|    simd8x64<int8_t> in(reinterpret_cast<const int8_t *>(input + pos));
   18|  7.57k|    if(in.is_ascii()) {
  ------------------
  |  Branch (18:8): [True: 6.54k, False: 1.02k]
  ------------------
   19|  6.54k|      in.store_ascii_as_utf32(utf32_output);
   20|  6.54k|      utf32_output += 64;
   21|  6.54k|      pos += 64;
   22|  6.54k|    } else {
   23|       |    // -65 is 0b10111111 in two-complement's, so largest possible continuation byte
   24|  1.02k|    uint64_t utf8_continuation_mask = in.lt(-65 + 1);
   25|  1.02k|    uint64_t utf8_leading_mask = ~utf8_continuation_mask;
   26|  1.02k|    uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
   27|  1.02k|    size_t max_starting_point = (pos + 64) - 12;
   28|  6.54k|    while(pos < max_starting_point) {
  ------------------
  |  Branch (28:11): [True: 5.52k, False: 1.02k]
  ------------------
   29|  5.52k|      size_t consumed = convert_masked_utf8_to_utf32(input + pos,
   30|  5.52k|                          utf8_end_of_code_point_mask, utf32_output);
   31|  5.52k|      pos += consumed;
   32|  5.52k|      utf8_end_of_code_point_mask >>= consumed;
   33|  5.52k|      }
   34|  1.02k|    }
   35|  7.57k|  }
   36|  2.33k|  utf32_output += scalar::utf8_to_utf32::convert_valid(input + pos, size - pos, utf32_output);
   37|  2.33k|  return utf32_output - start;
   38|  2.33k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_next_inputERKNS1_4simd8simd8x64IhEE:
  152|  12.9k|    simdutf_really_inline void check_next_input(const simd8x64<uint8_t>& input) {
  153|  12.9k|      if(simdutf_likely(is_ascii(input))) {
  ------------------
  |  |   70|  12.9k|  #define simdutf_likely(x) __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (70:29): [True: 11.0k, False: 1.92k]
  |  |  ------------------
  ------------------
  154|  11.0k|        this->error |= this->prev_incomplete;
  155|  11.0k|      } else {
  156|       |        // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  157|  1.92k|        static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  158|  1.92k|            "We support either two or four chunks per 64-byte block.");
  159|  1.92k|        if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (159:12): [Folded - Ignored]
  ------------------
  160|  1.92k|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  161|  1.92k|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|  1.92k|        } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (162:19): [Folded - Ignored]
  ------------------
  163|      0|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  164|      0|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  165|      0|          this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  166|      0|          this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  167|      0|        }
  168|  1.92k|        this->prev_incomplete = is_incomplete(input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1]);
  169|  1.92k|        this->prev_input_block = input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1];
  170|       |
  171|  1.92k|      }
  172|  12.9k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_utf8_bytesENS1_4simd5simd8IhEES6_:
  135|  3.85k|    simdutf_really_inline void check_utf8_bytes(const simd8<uint8_t> input, const simd8<uint8_t> prev_input) {
  136|       |      // Flip prev1...prev3 so we can easily determine if they are 2+, 3+ or 4+ lead bytes
  137|       |      // (2, 3, 4-byte leads become large positive numbers instead of small negative numbers)
  138|  3.85k|      simd8<uint8_t> prev1 = input.prev<1>(prev_input);
  139|  3.85k|      simd8<uint8_t> sc = check_special_cases(input, prev1);
  140|  3.85k|      this->error |= check_multibyte_lengths(input, prev_input, sc);
  141|  3.85k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation19check_special_casesENS1_4simd5simd8IhEES5_:
    8|  3.85k|  simdutf_really_inline simd8<uint8_t> check_special_cases(const simd8<uint8_t> input, const simd8<uint8_t> prev1) {
    9|       |// Bit 0 = Too Short (lead byte/ASCII followed by lead byte/ASCII)
   10|       |// Bit 1 = Too Long (ASCII followed by continuation)
   11|       |// Bit 2 = Overlong 3-byte
   12|       |// Bit 4 = Surrogate
   13|       |// Bit 5 = Overlong 2-byte
   14|       |// Bit 7 = Two Continuations
   15|  3.85k|    constexpr const uint8_t TOO_SHORT   = 1<<0; // 11______ 0_______
   16|       |                                                // 11______ 11______
   17|  3.85k|    constexpr const uint8_t TOO_LONG    = 1<<1; // 0_______ 10______
   18|  3.85k|    constexpr const uint8_t OVERLONG_3  = 1<<2; // 11100000 100_____
   19|  3.85k|    constexpr const uint8_t SURROGATE   = 1<<4; // 11101101 101_____
   20|  3.85k|    constexpr const uint8_t OVERLONG_2  = 1<<5; // 1100000_ 10______
   21|  3.85k|    constexpr const uint8_t TWO_CONTS   = 1<<7; // 10______ 10______
   22|  3.85k|    constexpr const uint8_t TOO_LARGE   = 1<<3; // 11110100 1001____
   23|       |                                                // 11110100 101_____
   24|       |                                                // 11110101 1001____
   25|       |                                                // 11110101 101_____
   26|       |                                                // 1111011_ 1001____
   27|       |                                                // 1111011_ 101_____
   28|       |                                                // 11111___ 1001____
   29|       |                                                // 11111___ 101_____
   30|  3.85k|    constexpr const uint8_t TOO_LARGE_1000 = 1<<6;
   31|       |                                                // 11110101 1000____
   32|       |                                                // 1111011_ 1000____
   33|       |                                                // 11111___ 1000____
   34|  3.85k|    constexpr const uint8_t OVERLONG_4  = 1<<6; // 11110000 1000____
   35|       |
   36|  3.85k|    const simd8<uint8_t> byte_1_high = prev1.shr<4>().lookup_16<uint8_t>(
   37|       |      // 0_______ ________ <ASCII in byte 1>
   38|  3.85k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   39|  3.85k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   40|       |      // 10______ ________ <continuation in byte 1>
   41|  3.85k|      TWO_CONTS, TWO_CONTS, TWO_CONTS, TWO_CONTS,
   42|       |      // 1100____ ________ <two byte lead in byte 1>
   43|  3.85k|      TOO_SHORT | OVERLONG_2,
   44|       |      // 1101____ ________ <two byte lead in byte 1>
   45|  3.85k|      TOO_SHORT,
   46|       |      // 1110____ ________ <three byte lead in byte 1>
   47|  3.85k|      TOO_SHORT | OVERLONG_3 | SURROGATE,
   48|       |      // 1111____ ________ <four+ byte lead in byte 1>
   49|  3.85k|      TOO_SHORT | TOO_LARGE | TOO_LARGE_1000 | OVERLONG_4
   50|  3.85k|    );
   51|  3.85k|    constexpr const uint8_t CARRY = TOO_SHORT | TOO_LONG | TWO_CONTS; // These all have ____ in byte 1 .
   52|  3.85k|    const simd8<uint8_t> byte_1_low = (prev1 & 0x0F).lookup_16<uint8_t>(
   53|       |      // ____0000 ________
   54|  3.85k|      CARRY | OVERLONG_3 | OVERLONG_2 | OVERLONG_4,
   55|       |      // ____0001 ________
   56|  3.85k|      CARRY | OVERLONG_2,
   57|       |      // ____001_ ________
   58|  3.85k|      CARRY,
   59|  3.85k|      CARRY,
   60|       |
   61|       |      // ____0100 ________
   62|  3.85k|      CARRY | TOO_LARGE,
   63|       |      // ____0101 ________
   64|  3.85k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   65|       |      // ____011_ ________
   66|  3.85k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   67|  3.85k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   68|       |
   69|       |      // ____1___ ________
   70|  3.85k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   71|  3.85k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   72|  3.85k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   73|  3.85k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   74|  3.85k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   75|       |      // ____1101 ________
   76|  3.85k|      CARRY | TOO_LARGE | TOO_LARGE_1000 | SURROGATE,
   77|  3.85k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   78|  3.85k|      CARRY | TOO_LARGE | TOO_LARGE_1000
   79|  3.85k|    );
   80|  3.85k|    const simd8<uint8_t> byte_2_high = input.shr<4>().lookup_16<uint8_t>(
   81|       |      // ________ 0_______ <ASCII in byte 2>
   82|  3.85k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   83|  3.85k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   84|       |
   85|       |      // ________ 1000____
   86|  3.85k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE_1000 | OVERLONG_4,
   87|       |      // ________ 1001____
   88|  3.85k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE,
   89|       |      // ________ 101_____
   90|  3.85k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   91|  3.85k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   92|       |
   93|       |      // ________ 11______
   94|  3.85k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT
   95|  3.85k|    );
   96|  3.85k|    return (byte_1_high & byte_1_low & byte_2_high);
   97|  3.85k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation23check_multibyte_lengthsENS1_4simd5simd8IhEES5_S5_:
   99|  3.85k|      const simd8<uint8_t> prev_input, const simd8<uint8_t> sc) {
  100|  3.85k|    simd8<uint8_t> prev2 = input.prev<2>(prev_input);
  101|  3.85k|    simd8<uint8_t> prev3 = input.prev<3>(prev_input);
  102|  3.85k|    simd8<uint8_t> must23 = simd8<uint8_t>(must_be_2_3_continuation(prev2, prev3));
  103|  3.85k|    simd8<uint8_t> must23_80 = must23 & uint8_t(0x80);
  104|  3.85k|    return must23_80 ^ sc;
  105|  3.85k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation13is_incompleteENS1_4simd5simd8IhEE:
  111|  1.92k|  simdutf_really_inline simd8<uint8_t> is_incomplete(const simd8<uint8_t> input) {
  112|       |    // If the previous input's last 3 bytes match this, they're too short (they ended at EOF):
  113|       |    // ... 1111____ 111_____ 11______
  114|  1.92k|    static const uint8_t max_array[32] = {
  115|  1.92k|      255, 255, 255, 255, 255, 255, 255, 255,
  116|  1.92k|      255, 255, 255, 255, 255, 255, 255, 255,
  117|  1.92k|      255, 255, 255, 255, 255, 255, 255, 255,
  118|  1.92k|      255, 255, 255, 255, 255, 0b11110000u-1, 0b11100000u-1, 0b11000000u-1
  119|  1.92k|    };
  120|  1.92k|    const simd8<uint8_t> max_value(&max_array[sizeof(max_array)-sizeof(simd8<uint8_t>)]);
  121|  1.92k|    return input.gt_bits(max_value);
  122|  1.92k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker9check_eofEv:
  146|  3.01k|    simdutf_really_inline void check_eof() {
  147|       |      // If the previous block had incomplete UTF-8 characters at the end, an ASCII block can't
  148|       |      // possibly finish them.
  149|  3.01k|      this->error |= this->prev_incomplete;
  150|  3.01k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker6errorsEv:
  175|  3.01k|    simdutf_really_inline bool errors() const {
  176|  3.01k|      return this->error.any_bits_set_anywhere();
  177|  3.01k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8EPKcm:
   27|  3.01k|bool generic_validate_utf8(const char * input, size_t length) {
   28|  3.01k|  return generic_validate_utf8<utf8_checker>(reinterpret_cast<const uint8_t *>(input),length);
   29|  3.01k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8INS2_12utf8_checkerEEEbPKhm:
   10|  3.01k|bool generic_validate_utf8(const uint8_t * input, size_t length) {
   11|  3.01k|    checker c{};
   12|  3.01k|    buf_block_reader<64> reader(input, length);
   13|  12.9k|    while (reader.has_full_block()) {
  ------------------
  |  Branch (13:12): [True: 9.94k, False: 3.01k]
  ------------------
   14|  9.94k|      simd::simd8x64<uint8_t> in(reader.full_block());
   15|  9.94k|      c.check_next_input(in);
   16|  9.94k|      reader.advance();
   17|  9.94k|    }
   18|  3.01k|    uint8_t block[64]{};
   19|  3.01k|    reader.get_remainder(block);
   20|  3.01k|    simd::simd8x64<uint8_t> in(block);
   21|  3.01k|    c.check_next_input(in);
   22|  3.01k|    reader.advance();
   23|  3.01k|    c.check_eof();
   24|  3.01k|    return !c.errors();
   25|  3.01k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_128convert_masked_utf8_to_utf32EPKcmRPDi:
   10|  5.52k|                           char32_t *&utf32_output) {
   11|       |  // we use an approach where we try to process up to 12 input bytes.
   12|       |  // Why 12 input bytes and not 16? Because we are concerned with the size of
   13|       |  // the lookup tables. Also 12 is nicely divisible by two and three.
   14|       |  //
   15|       |  //
   16|       |  // Optimization note: our main path below is load-latency dependent. Thus it is maybe
   17|       |  // beneficial to have fast paths that depend on branch prediction but have less latency.
   18|       |  // This results in more instructions but, potentially, also higher speeds.
   19|       |  //
   20|       |  // We first try a few fast paths.
   21|  5.52k|  const __m128i in = _mm_loadu_si128((__m128i *)input);
   22|  5.52k|  const uint16_t input_utf8_end_of_code_point_mask =
   23|  5.52k|      utf8_end_of_code_point_mask & 0xfff;
   24|  5.52k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xffff)) {
  ------------------
  |  Branch (24:6): [True: 2.30k, False: 3.22k]
  ------------------
   25|       |    // We process the data in chunks of 16 bytes.
   26|  2.30k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output), _mm256_cvtepu8_epi32(in));
   27|  2.30k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output+8), _mm256_cvtepu8_epi32(_mm_srli_si128(in,8)));
   28|  2.30k|    utf32_output += 16; // We wrote 16 32-bit characters.
   29|  2.30k|    return 16; // We consumed 16 bytes.
   30|  2.30k|  }
   31|  3.22k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xaaaa)) {
  ------------------
  |  Branch (31:6): [True: 33, False: 3.18k]
  ------------------
   32|       |    // We want to take 8 2-byte UTF-8 code units and turn them into 8 4-byte UTF-32 code units.
   33|       |    // There is probably a more efficient sequence, but the following might do.
   34|     33|    const __m128i sh = _mm_setr_epi8(1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14);
   35|     33|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   36|     33|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   37|     33|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   38|     33|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   39|     33|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   40|     33|    utf32_output += 8; // We wrote 16 bytes, 8 code points.
   41|     33|    return 16;
   42|     33|  }
   43|  3.18k|  if(input_utf8_end_of_code_point_mask == 0x924) {
  ------------------
  |  Branch (43:6): [True: 14, False: 3.17k]
  ------------------
   44|       |    // We want to take 4 3-byte UTF-8 code units and turn them into 4 4-byte UTF-32 code units.
   45|       |    // There is probably a more efficient sequence, but the following might do.
   46|     14|    const __m128i sh = _mm_setr_epi8(2, 1, 0, -1, 5, 4, 3, -1, 8, 7, 6, -1, 11, 10, 9, -1);
   47|     14|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   48|     14|    const __m128i ascii =
   49|     14|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   50|     14|    const __m128i middlebyte =
   51|     14|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   52|     14|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   53|     14|    const __m128i highbyte =
   54|     14|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   55|     14|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   56|     14|    const __m128i composed =
   57|     14|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   58|     14|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   59|     14|    utf32_output += 4;
   60|     14|    return 12;
   61|     14|  }
   62|       |  /// We do not have a fast path available, so we fallback.
   63|       |
   64|  3.17k|  const uint8_t idx =
   65|  3.17k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][0];
   66|  3.17k|  const uint8_t consumed =
   67|  3.17k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][1];
   68|  3.17k|  if (idx < 64) {
  ------------------
  |  Branch (68:7): [True: 2.60k, False: 567]
  ------------------
   69|       |    // SIX (6) input code-code units
   70|       |    // this is a relatively easy scenario
   71|       |    // we process SIX (6) input code-code units. The max length in bytes of six code
   72|       |    // code units spanning between 1 and 2 bytes each is 12 bytes. On processors
   73|       |    // where pdep/pext is fast, we might be able to use a small lookup table.
   74|  2.60k|    const __m128i sh =
   75|  2.60k|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   76|  2.60k|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   77|  2.60k|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   78|  2.60k|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   79|  2.60k|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   80|  2.60k|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   81|  2.60k|    utf32_output += 6; // We wrote 24 bytes, 6 code points. There is a potential
   82|       |    // overflow of 32 - 24 = 8 bytes.
   83|  2.60k|  } else if (idx < 145) {
  ------------------
  |  Branch (83:14): [True: 365, False: 202]
  ------------------
   84|       |    // FOUR (4) input code-code units
   85|    365|    const __m128i sh =
   86|    365|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   87|    365|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   88|    365|    const __m128i ascii =
   89|    365|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   90|    365|    const __m128i middlebyte =
   91|    365|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   92|    365|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   93|    365|    const __m128i highbyte =
   94|    365|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   95|    365|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   96|    365|    const __m128i composed =
   97|    365|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   98|    365|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   99|    365|    utf32_output += 4;
  100|    365|  } else if (idx < 209) {
  ------------------
  |  Branch (100:14): [True: 202, False: 0]
  ------------------
  101|       |    // TWO (2) input code-code units
  102|    202|    const __m128i sh =
  103|    202|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
  104|    202|    const __m128i perm = _mm_shuffle_epi8(in, sh);
  105|    202|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi32(0x7f));
  106|    202|    const __m128i middlebyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f00));
  107|    202|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
  108|    202|    __m128i middlehighbyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f0000));
  109|       |    // correct for spurious high bit
  110|    202|    const __m128i correct =
  111|    202|        _mm_srli_epi32(_mm_and_si128(perm, _mm_set1_epi32(0x400000)), 1);
  112|    202|    middlehighbyte = _mm_xor_si128(correct, middlehighbyte);
  113|    202|    const __m128i middlehighbyte_shifted = _mm_srli_epi32(middlehighbyte, 4);
  114|    202|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi32(0x07000000));
  115|    202|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 6);
  116|    202|    const __m128i composed =
  117|    202|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted),
  118|    202|                     _mm_or_si128(highbyte_shifted, middlehighbyte_shifted));
  119|    202|    _mm_storeu_si128((__m128i *)utf32_output, composed);
  120|    202|    utf32_output += 3; // We wrote 3 * 4 bytes, there is a potential overflow of 4 bytes.
  121|    202|  } else {
  122|       |    // here we know that there is an error but we do not handle errors
  123|      0|  }
  124|  3.17k|  return consumed;
  125|  3.18k|}

_ZNK7simdutf7haswell14implementation13validate_utf8EPKcm:
  104|  3.01k|simdutf_warn_unused bool implementation::validate_utf8(const char *buf, size_t len) const noexcept {
  105|  3.01k|  return haswell::utf8_validation::generic_validate_utf8(buf,len);
  106|  3.01k|}
_ZNK7simdutf7haswell14implementation21convert_utf8_to_utf32EPKcmPDi:
  274|   118k|simdutf_warn_unused size_t implementation::convert_utf8_to_utf32(const char* buf, size_t len, char32_t* utf32_output) const noexcept {
  275|   118k|  utf8_to_utf32::validating_transcoder converter;
  276|   118k|  return converter.convert(buf, len, utf32_output);
  277|   118k|}
_ZNK7simdutf7haswell14implementation27convert_valid_utf8_to_utf32EPKcmPDi:
  285|  2.33k|    char32_t* utf32_output) const noexcept {
  286|  2.33k|  return utf8_to_utf32::convert_valid(input, size,  utf32_output);
  287|  2.33k|}
_ZNK7simdutf7haswell14implementation22utf32_length_from_utf8EPKcm:
  776|  2.33k|simdutf_warn_unused size_t implementation::utf32_length_from_utf8(const char * input, size_t length) const noexcept {
  777|  2.33k|  return utf8::count_code_points(input, length);
  778|  2.33k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_18is_asciiERKNS1_4simd8simd8x64IhEE:
   23|  12.9k|simdutf_really_inline bool is_ascii(const simd8x64<uint8_t>& input) {
   24|  12.9k|  return input.reduce_or().is_ascii();
   25|  12.9k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_124must_be_2_3_continuationENS1_4simd5simd8IhEES4_:
   35|  3.85k|simdutf_really_inline simd8<bool> must_be_2_3_continuation(const simd8<uint8_t> prev2, const simd8<uint8_t> prev3) {
   36|  3.85k|  simd8<uint8_t> is_third_byte  = prev2.saturating_sub(0b11100000u-1); // Only 111_____ will be > 0
   37|  3.85k|  simd8<uint8_t> is_fourth_byte = prev3.saturating_sub(0b11110000u-1); // Only 1111____ will be > 0
   38|       |  // Caller requires a bool (all 1's). All values resulting from the subtraction will be <= 64, so signed comparison is fine.
   39|  3.85k|  return simd8<int8_t>(is_third_byte | is_fourth_byte) > int8_t(0);
   40|  3.85k|}

_ZNK7simdutf8internal29available_implementation_list21detect_best_supportedEv:
  768|      1|const implementation *available_implementation_list::detect_best_supported() const noexcept {
  769|       |  // They are prelisted in priority order, so we just go down the list
  770|      1|  uint32_t supported_instruction_sets = internal::detect_supported_architectures();
  771|      2|  for (const implementation *impl : internal::get_available_implementation_pointers()) {
  ------------------
  |  Branch (771:35): [True: 2, False: 0]
  ------------------
  772|      2|    uint32_t required_instruction_sets = impl->required_instruction_sets();
  773|      2|    if ((supported_instruction_sets & required_instruction_sets) == required_instruction_sets) { return impl; }
  ------------------
  |  Branch (773:9): [True: 1, False: 1]
  ------------------
  774|      2|  }
  775|      0|  return &unsupported_singleton; // this should never happen?
  776|      1|}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use8set_bestEv:
  778|      1|const implementation *detect_best_supported_implementation_on_first_use::set_best() const noexcept {
  779|      1|  SIMDUTF_PUSH_DISABLE_WARNINGS
  780|       |  SIMDUTF_DISABLE_DEPRECATED_WARNING // Disable CRT_SECURE warning on MSVC: manually verified this is safe
  781|      1|  char *force_implementation_name = getenv("SIMDUTF_FORCE_IMPLEMENTATION");
  782|      1|  SIMDUTF_POP_DISABLE_WARNINGS
  783|       |
  784|      1|  if (force_implementation_name) {
  ------------------
  |  Branch (784:7): [True: 0, False: 1]
  ------------------
  785|      0|    auto force_implementation = get_available_implementations()[force_implementation_name];
  786|      0|    if (force_implementation) {
  ------------------
  |  Branch (786:9): [True: 0, False: 0]
  ------------------
  787|      0|      return get_active_implementation() = force_implementation;
  788|      0|    } else {
  789|       |      // Note: abort() and stderr usage within the library is forbidden.
  790|      0|      return get_active_implementation() = &unsupported_singleton;
  791|      0|    }
  792|      0|  }
  793|      1|  return get_active_implementation() = get_available_implementations().detect_best_supported();
  794|      1|}
_ZN7simdutf29get_available_implementationsEv:
  803|      1|SIMDUTF_DLLIMPORTEXPORT const internal::available_implementation_list& get_available_implementations() {
  804|      1|  static const internal::available_implementation_list available_implementations{};
  805|      1|  return available_implementations;
  806|      1|}
_ZN7simdutf25get_active_implementationEv:
  811|   126k|SIMDUTF_DLLIMPORTEXPORT internal::atomic_ptr<const implementation>& get_active_implementation() {
  812|   126k|    static const internal::detect_best_supported_implementation_on_first_use detect_best_supported_implementation_on_first_use_singleton;
  813|   126k|    static internal::atomic_ptr<const implementation> active_implementation{&detect_best_supported_implementation_on_first_use_singleton};
  814|   126k|    return active_implementation;
  815|   126k|}
_ZN7simdutf13validate_utf8EPKcm:
  817|  3.01k|simdutf_warn_unused bool validate_utf8(const char *buf, size_t len) noexcept {
  818|  3.01k|  return get_active_implementation()->validate_utf8(buf, len);
  819|  3.01k|}
_ZN7simdutf21convert_utf8_to_utf32EPKcmPDi:
  876|   118k|simdutf_warn_unused size_t convert_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_output) noexcept {
  877|   118k|  return get_active_implementation()->convert_utf8_to_utf32(input, length, utf32_output);
  878|   118k|}
_ZN7simdutf27convert_valid_utf8_to_utf32EPKcmPDi:
  927|  2.33k|simdutf_warn_unused size_t convert_valid_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_buffer) noexcept {
  928|  2.33k|  return get_active_implementation()->convert_valid_utf8_to_utf32(input, length, utf32_buffer);
  929|  2.33k|}
_ZN7simdutf22utf32_length_from_utf8EPKcm:
 1174|  2.33k|simdutf_warn_unused size_t utf32_length_from_utf8(const char * input, size_t length) noexcept {
 1175|  2.33k|  return get_active_implementation()->utf32_length_from_utf8(input, length);
 1176|  2.33k|}
_ZN7simdutf8internal26unsupported_implementationC2Ev:
  754|      2|  unsupported_implementation() : implementation("unsupported", "Unsupported CPU (no detected SIMD instructions)", 0) {}
simdutf.cpp:_ZN7simdutf8internalL37get_available_implementation_pointersEv:
  423|      1|static const std::initializer_list<const implementation *>& get_available_implementation_pointers() {
  424|      1|  static const std::initializer_list<const implementation *> available_implementation_pointers {
  425|      1|#if SIMDUTF_IMPLEMENTATION_ICELAKE
  426|      1|    get_icelake_singleton(),
  427|      1|#endif
  428|      1|#if SIMDUTF_IMPLEMENTATION_HASWELL
  429|      1|    get_haswell_singleton(),
  430|      1|#endif
  431|      1|#if SIMDUTF_IMPLEMENTATION_WESTMERE
  432|      1|    get_westmere_singleton(),
  433|      1|#endif
  434|       |#if SIMDUTF_IMPLEMENTATION_ARM64
  435|       |    get_arm64_singleton(),
  436|       |#endif
  437|       |#if SIMDUTF_IMPLEMENTATION_PPC64
  438|       |    get_ppc64_singleton(),
  439|       |#endif
  440|      1|#if SIMDUTF_IMPLEMENTATION_FALLBACK
  441|      1|    get_fallback_singleton(),
  442|      1|#endif
  443|      1|  }; // available_implementation_pointers
  444|      1|  return available_implementation_pointers;
  445|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_icelake_singletonEv:
   72|      1|static const icelake::implementation* get_icelake_singleton() {
   73|      1|  static const icelake::implementation icelake_singleton{};
   74|      1|  return &icelake_singleton;
   75|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_haswell_singletonEv:
   78|      1|static const haswell::implementation* get_haswell_singleton() {
   79|      1|  static const haswell::implementation haswell_singleton{};
   80|      1|  return &haswell_singleton;
   81|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_westmere_singletonEv:
   84|      1|static const westmere::implementation* get_westmere_singleton() {
   85|      1|  static const westmere::implementation westmere_singleton{};
   86|      1|  return &westmere_singleton;
   87|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_fallback_singletonEv:
  102|      1|static const fallback::implementation* get_fallback_singleton() {
  103|      1|  static const fallback::implementation fallback_singleton{};
  104|      1|  return &fallback_singleton;
  105|      1|}
_ZN7simdutf8internal49detect_best_supported_implementation_on_first_useC2Ev:
  417|      1|  simdutf_really_inline detect_best_supported_implementation_on_first_use() noexcept : implementation("best_supported_detector", "Detects the best supported implementation and sets it", 0) {}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use13validate_utf8EPKcm:
  121|      1|  simdutf_warn_unused bool validate_utf8(const char * buf, size_t len) const noexcept final override {
  122|      1|    return set_best()->validate_utf8(buf, len);
  123|      1|  }

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_14utf817count_code_pointsEPKcm:
  168|  2.33k|inline size_t count_code_points(const char* buf, size_t len) {
  169|  2.33k|    const int8_t * p = reinterpret_cast<const int8_t *>(buf);
  170|  2.33k|    size_t counter{0};
  171|  61.7k|    for(size_t i = 0; i < len; i++) {
  ------------------
  |  Branch (171:23): [True: 59.4k, False: 2.33k]
  ------------------
  172|       |        // -65 is 0b10111111, anything larger in two-complement's should start a new code point.
  173|  59.4k|        if(p[i] > -65) { counter++; }
  ------------------
  |  Branch (173:12): [True: 58.8k, False: 545]
  ------------------
  174|  59.4k|    }
  175|  2.33k|    return counter;
  176|  2.33k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf327convertEPKcmPDi:
    9|   118k|inline size_t convert(const char* buf, size_t len, char32_t* utf32_output) {
   10|   118k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|   118k|  size_t pos = 0;
   12|   118k|  char32_t* start{utf32_output};
   13|   230k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 118k, False: 112k]
  ------------------
   14|       |    // try to convert the next block of 16 ASCII bytes
   15|   118k|    if (pos + 16 <= len) { // if it is safe to read 16 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 0, False: 118k]
  ------------------
   16|      0|      uint64_t v1;
   17|      0|      ::memcpy(&v1, data + pos, sizeof(uint64_t));
   18|      0|      uint64_t v2;
   19|      0|      ::memcpy(&v2, data + pos + sizeof(uint64_t), sizeof(uint64_t));
   20|      0|      uint64_t v{v1 | v2};
   21|      0|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (21:11): [True: 0, False: 0]
  ------------------
   22|      0|        size_t final_pos = pos + 16;
   23|      0|        while(pos < final_pos) {
  ------------------
  |  Branch (23:15): [True: 0, False: 0]
  ------------------
   24|      0|          *utf32_output++ = char32_t(buf[pos]);
   25|      0|          pos++;
   26|      0|        }
   27|      0|        continue;
   28|      0|      }
   29|      0|    }
   30|   118k|    uint8_t leading_byte = data[pos]; // leading byte
   31|   118k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (31:9): [True: 106k, False: 12.5k]
  ------------------
   32|       |      // converting one ASCII byte !!!
   33|   106k|      *utf32_output++ = char32_t(leading_byte);
   34|   106k|      pos++;
   35|   106k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (35:16): [True: 5.95k, False: 6.62k]
  ------------------
   36|       |      // We have a two-byte UTF-8
   37|  5.95k|      if(pos + 1 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (37:10): [True: 0, False: 5.95k]
  ------------------
   38|  5.95k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (38:11): [True: 2.45k, False: 3.50k]
  ------------------
   39|       |      // range check
   40|  3.50k|      uint32_t code_point = (leading_byte & 0b00011111) << 6 | (data[pos + 1] & 0b00111111);
   41|  3.50k|      if (code_point < 0x80 || 0x7ff < code_point) { return 0; }
  ------------------
  |  Branch (41:11): [True: 141, False: 3.36k]
  |  Branch (41:32): [True: 0, False: 3.36k]
  ------------------
   42|  3.36k|      *utf32_output++ = char32_t(code_point);
   43|  3.36k|      pos += 2;
   44|  6.62k|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (44:16): [True: 2.87k, False: 3.75k]
  ------------------
   45|       |      // We have a three-byte UTF-8
   46|  2.87k|      if(pos + 2 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (46:10): [True: 0, False: 2.87k]
  ------------------
   47|       |
   48|  2.87k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (48:11): [True: 530, False: 2.34k]
  ------------------
   49|  2.34k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (49:11): [True: 157, False: 2.18k]
  ------------------
   50|       |      // range check
   51|  2.18k|      uint32_t code_point = (leading_byte & 0b00001111) << 12 |
   52|  2.18k|                   (data[pos + 1] & 0b00111111) << 6 |
   53|  2.18k|                   (data[pos + 2] & 0b00111111);
   54|  2.18k|      if (code_point < 0x800 || 0xffff < code_point ||
  ------------------
  |  Branch (54:11): [True: 264, False: 1.92k]
  |  Branch (54:33): [True: 0, False: 1.92k]
  ------------------
   55|  2.18k|          (0xd7ff < code_point && code_point < 0xe000)) {
  ------------------
  |  Branch (55:12): [True: 277, False: 1.64k]
  |  Branch (55:35): [True: 136, False: 141]
  ------------------
   56|    400|        return 0;
   57|    400|      }
   58|  1.78k|      *utf32_output++ = char32_t(code_point);
   59|  1.78k|      pos += 3;
   60|  3.75k|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (60:16): [True: 3.75k, False: 0]
  ------------------
   61|       |      // we have a 4-byte UTF-8 word.
   62|  3.75k|      if(pos + 3 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (62:10): [True: 0, False: 3.75k]
  ------------------
   63|  3.75k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (63:11): [True: 1.95k, False: 1.79k]
  ------------------
   64|  1.79k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (64:11): [True: 141, False: 1.65k]
  ------------------
   65|  1.65k|      if ((data[pos + 3] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (65:11): [True: 141, False: 1.51k]
  ------------------
   66|       |
   67|       |      // range check
   68|  1.51k|      uint32_t code_point =
   69|  1.51k|          (leading_byte & 0b00000111) << 18 | (data[pos + 1] & 0b00111111) << 12 |
   70|  1.51k|          (data[pos + 2] & 0b00111111) << 6 | (data[pos + 3] & 0b00111111);
   71|  1.51k|      if (code_point <= 0xffff || 0x10ffff < code_point) { return 0; }
  ------------------
  |  Branch (71:11): [True: 262, False: 1.25k]
  |  Branch (71:35): [True: 269, False: 986]
  ------------------
   72|    986|      *utf32_output++ = char32_t(code_point);
   73|    986|      pos += 4;
   74|    986|    } else {
   75|      0|      return 0;
   76|      0|    }
   77|   118k|  }
   78|   112k|  return utf32_output - start;
   79|   118k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
    9|  2.33k|inline size_t convert_valid(const char* buf, size_t len, char32_t* utf32_output) {
   10|  2.33k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|  2.33k|  size_t pos = 0;
   12|  2.33k|  char32_t* start{utf32_output};
   13|  20.0k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 17.7k, False: 2.33k]
  ------------------
   14|       |    // try to convert the next block of 8 ASCII bytes
   15|  17.7k|    if (pos + 8 <= len) { // if it is safe to read 8 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 9.56k, False: 8.19k]
  ------------------
   16|  9.56k|      uint64_t v;
   17|  9.56k|      ::memcpy(&v, data + pos, sizeof(uint64_t));
   18|  9.56k|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (18:11): [True: 9.00k, False: 565]
  ------------------
   19|  9.00k|        size_t final_pos = pos + 8;
   20|  81.0k|        while(pos < final_pos) {
  ------------------
  |  Branch (20:15): [True: 72.0k, False: 9.00k]
  ------------------
   21|  72.0k|          *utf32_output++ = char32_t(buf[pos]);
   22|  72.0k|          pos++;
   23|  72.0k|        }
   24|  9.00k|        continue;
   25|  9.00k|      }
   26|  9.56k|    }
   27|  8.76k|    uint8_t leading_byte = data[pos]; // leading byte
   28|  8.76k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (28:9): [True: 8.41k, False: 350]
  ------------------
   29|       |      // converting one ASCII byte !!!
   30|  8.41k|      *utf32_output++ = char32_t(leading_byte);
   31|  8.41k|      pos++;
   32|  8.41k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (32:16): [True: 194, False: 156]
  ------------------
   33|       |      // We have a two-byte UTF-8
   34|    194|      if(pos + 1 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (34:10): [True: 0, False: 194]
  ------------------
   35|    194|      *utf32_output++ = char32_t(((leading_byte &0b00011111) << 6) | (data[pos + 1] &0b00111111));
   36|    194|      pos += 2;
   37|    194|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (37:16): [True: 98, False: 58]
  ------------------
   38|       |      // We have a three-byte UTF-8
   39|     98|      if(pos + 2 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (39:10): [True: 0, False: 98]
  ------------------
   40|     98|      *utf32_output++ = char32_t(((leading_byte &0b00001111) << 12) | ((data[pos + 1] &0b00111111) << 6) | (data[pos + 2] &0b00111111));
   41|     98|      pos += 3;
   42|     98|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (42:16): [True: 58, False: 0]
  ------------------
   43|       |      // we have a 4-byte UTF-8 word.
   44|     58|      if(pos + 3 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (44:10): [True: 0, False: 58]
  ------------------
   45|     58|      uint32_t code_word = ((leading_byte & 0b00000111) << 18 )| ((data[pos + 1] &0b00111111) << 12)
   46|     58|                           | ((data[pos + 2] &0b00111111) << 6) | (data[pos + 3] &0b00111111);
   47|     58|      *utf32_output++ = char32_t(code_word);
   48|     58|      pos += 4;
   49|     58|    } else {
   50|       |      // we may have a continuation but we do not do error checking
   51|      0|      return 0;
   52|      0|    }
   53|  8.76k|  }
   54|  2.33k|  return utf32_output - start;
   55|  2.33k|}

_ZN7simdutf8fallback14implementationC2Ev:
   19|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_110count_onesEm:
   14|  7.78k|simdutf_really_inline long long int count_ones(uint64_t input_num) {
   15|  7.78k|  return _popcnt64(input_num);
   16|  7.78k|}

_ZN7simdutf7haswell14implementationC2Ev:
   18|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ev:
  195|  9.04k|    simdutf_really_inline simd8() : base8_numeric<uint8_t>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2Ev:
  112|  9.04k|    simdutf_really_inline base8_numeric() : base8<T>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2Ev:
   61|  9.04k|    simdutf_really_inline base8() : base<simd8<T>>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2Ev:
   16|  9.04k|    simdutf_really_inline base() : value{__m256i()} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhEC2EPKh:
  276|  12.9k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE4loadEPKh:
   96|  27.8k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  27.8k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  27.8k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EDv4_x:
  196|   287k|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<uint8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2EDv4_x:
  113|   287k|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2EDv4_x:
   62|   287k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2EDv4_x:
   19|   287k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhE9reduce_orEv:
  295|  12.9k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|  12.9k|      return this->chunks[0] | this->chunks[1];
  297|  12.9k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEorES5_:
   43|  34.7k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRKDv4_xEv:
   21|   452k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE8is_asciiEv:
  248|  12.9k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEoRES5_:
   47|  17.9k|    simdutf_really_inline Child& operator|=(const Child other) { auto this_cast = static_cast<Child*>(this); *this_cast = *this_cast | other; return *this_cast; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi1EEENS4_IhEES8_:
   70|  3.85k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  3.85k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  3.85k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE3shrILi4EEES4_v:
  254|  7.71k|    simdutf_really_inline simd8<uint8_t> shr() const { return simd8<uint8_t>(_mm256_srli_epi16(*this, N)) & uint8_t(0xFFu >> N); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_:
  138|  11.5k|        L replace12, L replace13, L replace14, L replace15) const {
  139|  11.5k|      return lookup_16(simd8<L>::repeat_16(
  140|  11.5k|        replace0,  replace1,  replace2,  replace3,
  141|  11.5k|        replace4,  replace5,  replace6,  replace7,
  142|  11.5k|        replace8,  replace9,  replace10, replace11,
  143|  11.5k|        replace12, replace13, replace14, replace15
  144|  11.5k|      ));
  145|  11.5k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES8_:
  129|  11.5k|    simdutf_really_inline simd8<L> lookup_16(simd8<L> lookup_table) const {
  130|  11.5k|      return _mm256_shuffle_epi8(lookup_table, *this);
  131|  11.5k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRDv4_xEv:
   22|  15.4k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE9repeat_16Ehhhhhhhhhhhhhhhh:
  217|  11.5k|    ) {
  218|  11.5k|      return simd8<uint8_t>(
  219|  11.5k|        v0, v1, v2, v3, v4, v5, v6, v7,
  220|  11.5k|        v8, v9, v10,v11,v12,v13,v14,v15,
  221|  11.5k|        v0, v1, v2, v3, v4, v5, v6, v7,
  222|  11.5k|        v8, v9, v10,v11,v12,v13,v14,v15
  223|  11.5k|      );
  224|  11.5k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ehhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh:
  212|  11.5k|    )) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEanES5_:
   44|  23.1k|    simdutf_really_inline Child operator&(const Child other) const { return _mm256_and_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Eh:
  198|   141k|    simdutf_really_inline simd8(uint8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE5splatEh:
   94|   141k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi2EEENS4_IhEES8_:
   70|  3.85k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  3.85k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  3.85k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi3EEENS4_IhEES8_:
   70|  3.85k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  3.85k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  3.85k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE14saturating_subES4_:
  229|  9.64k|    simdutf_really_inline simd8<uint8_t> saturating_sub(const simd8<uint8_t> other) const { return _mm256_subs_epu8(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2EDv4_x:
  153|  54.8k|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<int8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaEC2EDv4_x:
  113|  54.8k|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IaNS2_5simd8IbEEEC2EDv4_x:
   62|  54.8k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEC2EDv4_x:
   19|  54.8k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEgtES4_:
  188|  19.4k|    simdutf_really_inline simd8<bool> operator>(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEcvRKDv4_xEv:
   21|   118k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IbEC2EDv4_x:
   81|  21.4k|    simdutf_really_inline simd8<bool>(const __m256i _value) : base8<bool>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IbNS2_5simd8IbEEEC2EDv4_x:
   62|  21.4k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEC2EDv4_x:
   19|  21.4k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2Ea:
  156|  3.85k|    simdutf_really_inline simd8(int8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE5splatEa:
   94|  12.6k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRDv4_xEv:
   22|  3.85k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEeoES5_:
   45|  3.85k|    simdutf_really_inline Child operator^(const Child other) const { return _mm256_xor_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EPKh:
  200|  1.92k|    simdutf_really_inline simd8(const uint8_t values[32]) : simd8(load(values)) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE7gt_bitsES4_:
  235|  1.92k|    simdutf_really_inline simd8<uint8_t> gt_bits(const simd8<uint8_t> other) const { return this->saturating_sub(other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21any_bits_set_anywhereEv:
  250|   121k|    simdutf_really_inline bool any_bits_set_anywhere() const { return !bits_not_set_anywhere(); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21bits_not_set_anywhereEv:
  249|   121k|    simdutf_really_inline bool bits_not_set_anywhere() const { return _mm256_testz_si256(*this, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaEC2EPKa:
  276|  15.3k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE4loadEPKa:
   96|  30.7k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  30.7k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  30.7k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE8is_asciiEv:
  299|  7.57k|    simdutf_really_inline bool is_ascii() const {
  300|  7.57k|      return this->reduce_or().is_ascii();
  301|  7.57k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE9reduce_orEv:
  295|  7.57k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|  7.57k|      return this->chunks[0] | this->chunks[1];
  297|  7.57k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEorES5_:
   43|  7.57k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaE8is_asciiEv:
  184|  7.57k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2ltEa:
  362|  1.02k|    simdutf_really_inline uint64_t lt(const T m) const {
  363|  1.02k|      const simd8<T> mask = simd8<T>::splat(m);
  364|  1.02k|      return  simd8x64<bool>(
  365|  1.02k|        this->chunks[0] < mask,
  366|  1.02k|        this->chunks[1] < mask
  367|  1.02k|      ).to_bitmask();
  368|  1.02k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEltES4_:
  189|  2.05k|    simdutf_really_inline simd8<bool> operator<(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(other, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbEC2ENS2_5simd8IbEES6_:
  275|  8.81k|    simdutf_really_inline simd8x64(const simd8<T> chunk0, const simd8<T> chunk1) : chunks{chunk0, chunk1} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbE10to_bitmaskEv:
  283|  8.81k|    simdutf_really_inline uint64_t to_bitmask() const {
  284|  8.81k|      uint64_t r_lo = uint32_t(this->chunks[0].to_bitmask());
  285|  8.81k|      uint64_t r_hi =                       this->chunks[1].to_bitmask();
  286|  8.81k|      return r_lo | (r_hi << 32);
  287|  8.81k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IbE10to_bitmaskEv:
   85|  17.6k|    simdutf_really_inline uint32_t to_bitmask() const { return uint32_t(_mm256_movemask_epi8(*this)); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRKDv4_xEv:
   21|  17.6k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE20store_ascii_as_utf32EPDi:
  309|  6.54k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
  310|  6.54k|      this->chunks[0].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*0);
  311|  6.54k|      this->chunks[1].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*1);
  312|  6.54k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEE20store_ascii_as_utf32EPDi:
   36|  13.0k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
   37|  13.0k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(*this)));
   38|  13.0k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr+8), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(_mm256_srli_si256(*this,8))));
   39|  13.0k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 16), _mm256_cvtepu8_epi32(_mm256_extractf128_si256(*this,1)));
   40|  13.0k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 24), _mm256_cvtepu8_epi32(_mm_srli_si128(_mm256_extractf128_si256(*this,1),8)));
   41|  13.0k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2gtEa:
  370|  7.78k|    simdutf_really_inline uint64_t gt(const T m) const {
  371|  7.78k|      const simd8<T> mask = simd8<T>::splat(m);
  372|  7.78k|      return  simd8x64<bool>(
  373|  7.78k|        this->chunks[0] > mask,
  374|  7.78k|        this->chunks[1] > mask
  375|  7.78k|      ).to_bitmask();
  376|  7.78k|    }

_ZN7simdutf7icelake14implementationC2Ev:
   18|      1|      internal::instruction_set::AVX2 | internal::instruction_set::BMI1 | internal::instruction_set::BMI2 | internal::instruction_set::AVX512BW | internal::instruction_set::AVX512CD | internal::instruction_set::AVX512VL | internal::instruction_set::AVX512VBMI2 | internal::instruction_set::AVX512VPOPCNTDQ ) {}

_ZN7simdutf8westmere14implementationC2Ev:
   16|      1|  simdutf_really_inline implementation() : simdutf::implementation("westmere", "Intel/AMD SSE4.2", internal::instruction_set::SSE42) {}

_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJaEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.07M|{
  619|  1.07M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.07M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.07M|    static_cast<    \
  |  |  247|  1.07M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.07M|}
_ZN3scn2v26detail20check_scan_arg_typesIJaEEEvv:
  386|  2.43M|{
  387|  2.43M|    static_assert(
  388|  2.43M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  2.43M|        "Scan argument types must be default constructible");
  390|  2.43M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  2.43M|                  "Scan argument types must be Destructible");
  392|  2.43M|    static_assert(
  393|  2.43M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  2.43M|        "Scan argument types must not be references");
  395|  2.43M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEEC2EONSt3__15tupleIJaEEE:
  563|  1.07M|    {
  564|  1.07M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEE15make_data_arrayIJaEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.07M|    {
  574|  1.07M|        return {
  575|  1.07M|            detail::make_arg<base::is_packed, Context,
  576|  1.07M|                             detail::mapped_type_constant<
  577|  1.07M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.07M|                args)...};
  579|  1.07M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE1EavEENS1_9arg_valueERT2_:
  414|  1.07M|{
  415|  1.07M|    return make_value<Context>(value);
  416|  1.07M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEaEEDaRT0_:
  371|  1.19M|{
  372|  1.19M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.19M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.19M|                                  needs_context_tag>) {
  376|  1.19M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.19M|    }
  378|  1.19M|    else {
  379|  1.19M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.19M|            value, context_tag<Context>{}));
  381|  1.19M|    }
  382|  1.19M|}
_ZN3scn2v26detail10arg_mapperIcE3mapERa:
  216|  1.19M|    {                                                                        \
  217|  1.19M|        return val;                                                          \
  218|  1.19M|    }
_ZN3scn2v26detail15make_value_implIRaEEDaOT_:
  340|  2.43M|{
  341|  2.43M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  2.43M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  2.43M|    constexpr bool scannable_char =
  345|  2.43M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  2.43M|    static_assert(scannable_char,
  347|  2.43M|                  "Cannot scan an argument of an unsupported character "
  348|  2.43M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  2.43M|    constexpr bool scannable_const =
  351|  2.43M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  2.43M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  2.43M|    constexpr bool scannable_disabled =
  355|  2.43M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  2.43M|    static_assert(scannable_disabled,
  357|  2.43M|                  "Cannot scan an argument that has been disabled by "
  358|  2.43M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  2.43M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  2.43M|    static_assert(
  362|  2.43M|        scannable,
  363|  2.43M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  2.43M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  2.43M|    return arg_value{arg};
  367|  2.43M|}
_ZN3scn2v26detail9arg_valueC2IaEERT_:
  159|  2.43M|    {
  160|  2.43M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJaEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.07M|    {
  647|  1.07M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPNS0_6detail9arg_valueE:
  693|  8.23M|    {
  694|  8.23M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEE4argsEv:
  553|   955k|    {
  554|   955k|        return m_args;
  555|   955k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEaEENS0_14basic_scan_argIT_EERT0_:
  399|   119k|{
  400|   119k|    check_scan_arg_types<T>();
  401|       |
  402|   119k|    basic_scan_arg<Context> arg;
  403|   119k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|   119k|    arg.m_value = make_value<Context>(value);
  405|   119k|    return arg;
  406|   119k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
  476|  9.07M|    constexpr basic_scan_arg() = default;
_ZN3scn2v26detail9arg_valueC2Ev:
  155|  18.2M|        arg_value() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJhEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.10M|{
  619|  1.10M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.10M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.10M|    static_cast<    \
  |  |  247|  1.10M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.10M|}
_ZN3scn2v26detail20check_scan_arg_typesIJhEEEvv:
  386|  2.48M|{
  387|  2.48M|    static_assert(
  388|  2.48M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  2.48M|        "Scan argument types must be default constructible");
  390|  2.48M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  2.48M|                  "Scan argument types must be Destructible");
  392|  2.48M|    static_assert(
  393|  2.48M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  2.48M|        "Scan argument types must not be references");
  395|  2.48M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEEC2EONSt3__15tupleIJhEEE:
  563|  1.10M|    {
  564|  1.10M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEE15make_data_arrayIJhEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.10M|    {
  574|  1.10M|        return {
  575|  1.10M|            detail::make_arg<base::is_packed, Context,
  576|  1.10M|                             detail::mapped_type_constant<
  577|  1.10M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.10M|                args)...};
  579|  1.10M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE6EhvEENS1_9arg_valueERT2_:
  414|  1.10M|{
  415|  1.10M|    return make_value<Context>(value);
  416|  1.10M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEhEEDaRT0_:
  371|  1.21M|{
  372|  1.21M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.21M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.21M|                                  needs_context_tag>) {
  376|  1.21M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.21M|    }
  378|  1.21M|    else {
  379|  1.21M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.21M|            value, context_tag<Context>{}));
  381|  1.21M|    }
  382|  1.21M|}
_ZN3scn2v26detail10arg_mapperIcE3mapERh:
  216|  1.21M|    {                                                                        \
  217|  1.21M|        return val;                                                          \
  218|  1.21M|    }
_ZN3scn2v26detail15make_value_implIRhEEDaOT_:
  340|  2.48M|{
  341|  2.48M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  2.48M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  2.48M|    constexpr bool scannable_char =
  345|  2.48M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  2.48M|    static_assert(scannable_char,
  347|  2.48M|                  "Cannot scan an argument of an unsupported character "
  348|  2.48M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  2.48M|    constexpr bool scannable_const =
  351|  2.48M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  2.48M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  2.48M|    constexpr bool scannable_disabled =
  355|  2.48M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  2.48M|    static_assert(scannable_disabled,
  357|  2.48M|                  "Cannot scan an argument that has been disabled by "
  358|  2.48M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  2.48M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  2.48M|    static_assert(
  362|  2.48M|        scannable,
  363|  2.48M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  2.48M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  2.48M|    return arg_value{arg};
  367|  2.48M|}
_ZN3scn2v26detail9arg_valueC2IhEERT_:
  159|  2.48M|    {
  160|  2.48M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJhEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.10M|    {
  647|  1.10M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEE4argsEv:
  553|   982k|    {
  554|   982k|        return m_args;
  555|   982k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEhEENS0_14basic_scan_argIT_EERT0_:
  399|   116k|{
  400|   116k|    check_scan_arg_types<T>();
  401|       |
  402|   116k|    basic_scan_arg<Context> arg;
  403|   116k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|   116k|    arg.m_value = make_value<Context>(value);
  405|   116k|    return arg;
  406|   116k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.62M|{
  619|  1.62M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.62M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.62M|    static_cast<    \
  |  |  247|  1.62M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.62M|}
_ZN3scn2v26detail20check_scan_arg_typesIJiEEEvv:
  386|  3.54M|{
  387|  3.54M|    static_assert(
  388|  3.54M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  3.54M|        "Scan argument types must be default constructible");
  390|  3.54M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  3.54M|                  "Scan argument types must be Destructible");
  392|  3.54M|    static_assert(
  393|  3.54M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  3.54M|        "Scan argument types must not be references");
  395|  3.54M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2EONSt3__15tupleIJiEEE:
  563|  1.62M|    {
  564|  1.62M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEE15make_data_arrayIJiEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.62M|    {
  574|  1.62M|        return {
  575|  1.62M|            detail::make_arg<base::is_packed, Context,
  576|  1.62M|                             detail::mapped_type_constant<
  577|  1.62M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.62M|                args)...};
  579|  1.62M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEENS1_9arg_valueERT2_:
  414|  1.62M|{
  415|  1.62M|    return make_value<Context>(value);
  416|  1.62M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
  371|  1.78M|{
  372|  1.78M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.78M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.78M|                                  needs_context_tag>) {
  376|  1.78M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.78M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.78M|    }
  378|  1.78M|    else {
  379|  1.78M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.78M|            value, context_tag<Context>{}));
  381|  1.78M|    }
  382|  1.78M|}
_ZN3scn2v26detail10arg_mapperIcE3mapERi:
  216|  1.78M|    {                                                                        \
  217|  1.78M|        return val;                                                          \
  218|  1.78M|    }
_ZN3scn2v26detail15make_value_implIRiEEDaOT_:
  340|  3.54M|{
  341|  3.54M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  3.54M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  3.54M|    constexpr bool scannable_char =
  345|  3.54M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  3.54M|    static_assert(scannable_char,
  347|  3.54M|                  "Cannot scan an argument of an unsupported character "
  348|  3.54M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  3.54M|    constexpr bool scannable_const =
  351|  3.54M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  3.54M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  3.54M|    constexpr bool scannable_disabled =
  355|  3.54M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  3.54M|    static_assert(scannable_disabled,
  357|  3.54M|                  "Cannot scan an argument that has been disabled by "
  358|  3.54M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  3.54M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  3.54M|    static_assert(
  362|  3.54M|        scannable,
  363|  3.54M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  3.54M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  3.54M|    return arg_value{arg};
  367|  3.54M|}
_ZN3scn2v26detail9arg_valueC2IiEERT_:
  159|  3.54M|    {
  160|  3.54M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.62M|    {
  647|  1.62M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
  553|  1.50M|    {
  554|  1.50M|        return m_args;
  555|  1.50M|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEiEENS0_14basic_scan_argIT_EERT0_:
  399|   163k|{
  400|   163k|    check_scan_arg_types<T>();
  401|       |
  402|   163k|    basic_scan_arg<Context> arg;
  403|   163k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|   163k|    arg.m_value = make_value<Context>(value);
  405|   163k|    return arg;
  406|   163k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.35M|{
  619|  1.35M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.35M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.35M|    static_cast<    \
  |  |  247|  1.35M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.35M|}
_ZN3scn2v26detail20check_scan_arg_typesIJjEEEvv:
  386|  3.02M|{
  387|  3.02M|    static_assert(
  388|  3.02M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  3.02M|        "Scan argument types must be default constructible");
  390|  3.02M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  3.02M|                  "Scan argument types must be Destructible");
  392|  3.02M|    static_assert(
  393|  3.02M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  3.02M|        "Scan argument types must not be references");
  395|  3.02M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2EONSt3__15tupleIJjEEE:
  563|  1.35M|    {
  564|  1.35M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEE15make_data_arrayIJjEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.35M|    {
  574|  1.35M|        return {
  575|  1.35M|            detail::make_arg<base::is_packed, Context,
  576|  1.35M|                             detail::mapped_type_constant<
  577|  1.35M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.35M|                args)...};
  579|  1.35M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEENS1_9arg_valueERT2_:
  414|  1.35M|{
  415|  1.35M|    return make_value<Context>(value);
  416|  1.35M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
  371|  1.49M|{
  372|  1.49M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.49M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.49M|                                  needs_context_tag>) {
  376|  1.49M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.49M|    }
  378|  1.49M|    else {
  379|  1.49M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.49M|            value, context_tag<Context>{}));
  381|  1.49M|    }
  382|  1.49M|}
_ZN3scn2v26detail10arg_mapperIcE3mapERj:
  216|  1.49M|    {                                                                        \
  217|  1.49M|        return val;                                                          \
  218|  1.49M|    }
_ZN3scn2v26detail15make_value_implIRjEEDaOT_:
  340|  3.02M|{
  341|  3.02M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  3.02M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  3.02M|    constexpr bool scannable_char =
  345|  3.02M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  3.02M|    static_assert(scannable_char,
  347|  3.02M|                  "Cannot scan an argument of an unsupported character "
  348|  3.02M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  3.02M|    constexpr bool scannable_const =
  351|  3.02M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  3.02M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  3.02M|    constexpr bool scannable_disabled =
  355|  3.02M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  3.02M|    static_assert(scannable_disabled,
  357|  3.02M|                  "Cannot scan an argument that has been disabled by "
  358|  3.02M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  3.02M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  3.02M|    static_assert(
  362|  3.02M|        scannable,
  363|  3.02M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  3.02M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  3.02M|    return arg_value{arg};
  367|  3.02M|}
_ZN3scn2v26detail9arg_valueC2IjEERT_:
  159|  3.02M|    {
  160|  3.02M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.35M|    {
  647|  1.35M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
  553|  1.23M|    {
  554|  1.23M|        return m_args;
  555|  1.23M|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEjEENS0_14basic_scan_argIT_EERT0_:
  399|   138k|{
  400|   138k|    check_scan_arg_types<T>();
  401|       |
  402|   138k|    basic_scan_arg<Context> arg;
  403|   138k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|   138k|    arg.m_value = make_value<Context>(value);
  405|   138k|    return arg;
  406|   138k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJxEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.67M|{
  619|  1.67M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.67M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.67M|    static_cast<    \
  |  |  247|  1.67M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.67M|}
_ZN3scn2v26detail20check_scan_arg_typesIJxEEEvv:
  386|  3.64M|{
  387|  3.64M|    static_assert(
  388|  3.64M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  3.64M|        "Scan argument types must be default constructible");
  390|  3.64M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  3.64M|                  "Scan argument types must be Destructible");
  392|  3.64M|    static_assert(
  393|  3.64M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  3.64M|        "Scan argument types must not be references");
  395|  3.64M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEEC2EONSt3__15tupleIJxEEE:
  563|  1.67M|    {
  564|  1.67M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEE15make_data_arrayIJxEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.67M|    {
  574|  1.67M|        return {
  575|  1.67M|            detail::make_arg<base::is_packed, Context,
  576|  1.67M|                             detail::mapped_type_constant<
  577|  1.67M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.67M|                args)...};
  579|  1.67M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE5ExvEENS1_9arg_valueERT2_:
  414|  1.67M|{
  415|  1.67M|    return make_value<Context>(value);
  416|  1.67M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEExEEDaRT0_:
  371|  1.84M|{
  372|  1.84M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.84M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.84M|                                  needs_context_tag>) {
  376|  1.84M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.84M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.84M|    }
  378|  1.84M|    else {
  379|  1.84M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.84M|            value, context_tag<Context>{}));
  381|  1.84M|    }
  382|  1.84M|}
_ZN3scn2v26detail10arg_mapperIcE3mapERx:
  216|  1.84M|    {                                                                        \
  217|  1.84M|        return val;                                                          \
  218|  1.84M|    }
_ZN3scn2v26detail15make_value_implIRxEEDaOT_:
  340|  3.64M|{
  341|  3.64M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  3.64M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  3.64M|    constexpr bool scannable_char =
  345|  3.64M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  3.64M|    static_assert(scannable_char,
  347|  3.64M|                  "Cannot scan an argument of an unsupported character "
  348|  3.64M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  3.64M|    constexpr bool scannable_const =
  351|  3.64M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  3.64M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  3.64M|    constexpr bool scannable_disabled =
  355|  3.64M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  3.64M|    static_assert(scannable_disabled,
  357|  3.64M|                  "Cannot scan an argument that has been disabled by "
  358|  3.64M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  3.64M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  3.64M|    static_assert(
  362|  3.64M|        scannable,
  363|  3.64M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  3.64M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  3.64M|    return arg_value{arg};
  367|  3.64M|}
_ZN3scn2v26detail9arg_valueC2IxEERT_:
  159|  3.64M|    {
  160|  3.64M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJxEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.67M|    {
  647|  1.67M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEE4argsEv:
  553|  1.55M|    {
  554|  1.55M|        return m_args;
  555|  1.55M|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEExEENS0_14basic_scan_argIT_EERT0_:
  399|   169k|{
  400|   169k|    check_scan_arg_types<T>();
  401|       |
  402|   169k|    basic_scan_arg<Context> arg;
  403|   169k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|   169k|    arg.m_value = make_value<Context>(value);
  405|   169k|    return arg;
  406|   169k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJyEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.38M|{
  619|  1.38M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.38M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.38M|    static_cast<    \
  |  |  247|  1.38M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.38M|}
_ZN3scn2v26detail20check_scan_arg_typesIJyEEEvv:
  386|  3.08M|{
  387|  3.08M|    static_assert(
  388|  3.08M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  3.08M|        "Scan argument types must be default constructible");
  390|  3.08M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  3.08M|                  "Scan argument types must be Destructible");
  392|  3.08M|    static_assert(
  393|  3.08M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  3.08M|        "Scan argument types must not be references");
  395|  3.08M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEEC2EONSt3__15tupleIJyEEE:
  563|  1.38M|    {
  564|  1.38M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEE15make_data_arrayIJyEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.38M|    {
  574|  1.38M|        return {
  575|  1.38M|            detail::make_arg<base::is_packed, Context,
  576|  1.38M|                             detail::mapped_type_constant<
  577|  1.38M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.38M|                args)...};
  579|  1.38M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE10EyvEENS1_9arg_valueERT2_:
  414|  1.38M|{
  415|  1.38M|    return make_value<Context>(value);
  416|  1.38M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEyEEDaRT0_:
  371|  1.53M|{
  372|  1.53M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.53M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.53M|                                  needs_context_tag>) {
  376|  1.53M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.53M|    }
  378|  1.53M|    else {
  379|  1.53M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.53M|            value, context_tag<Context>{}));
  381|  1.53M|    }
  382|  1.53M|}
_ZN3scn2v26detail10arg_mapperIcE3mapERy:
  216|  1.53M|    {                                                                        \
  217|  1.53M|        return val;                                                          \
  218|  1.53M|    }
_ZN3scn2v26detail15make_value_implIRyEEDaOT_:
  340|  3.08M|{
  341|  3.08M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  3.08M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  3.08M|    constexpr bool scannable_char =
  345|  3.08M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  3.08M|    static_assert(scannable_char,
  347|  3.08M|                  "Cannot scan an argument of an unsupported character "
  348|  3.08M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  3.08M|    constexpr bool scannable_const =
  351|  3.08M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  3.08M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  3.08M|    constexpr bool scannable_disabled =
  355|  3.08M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  3.08M|    static_assert(scannable_disabled,
  357|  3.08M|                  "Cannot scan an argument that has been disabled by "
  358|  3.08M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  3.08M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  3.08M|    static_assert(
  362|  3.08M|        scannable,
  363|  3.08M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  3.08M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  3.08M|    return arg_value{arg};
  367|  3.08M|}
_ZN3scn2v26detail9arg_valueC2IyEERT_:
  159|  3.08M|    {
  160|  3.08M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJyEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.38M|    {
  647|  1.38M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEE4argsEv:
  553|  1.26M|    {
  554|  1.26M|        return m_args;
  555|  1.26M|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEyEENS0_14basic_scan_argIT_EERT0_:
  399|   140k|{
  400|   140k|    check_scan_arg_types<T>();
  401|       |
  402|   140k|    basic_scan_arg<Context> arg;
  403|   140k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|   140k|    arg.m_value = make_value<Context>(value);
  405|   140k|    return arg;
  406|   140k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJaEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.13M|{
  619|  1.13M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.13M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.13M|    static_cast<    \
  |  |  247|  1.13M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.13M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEEC2EONSt3__15tupleIJaEEE:
  563|  1.13M|    {
  564|  1.13M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEE15make_data_arrayIJaEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.13M|    {
  574|  1.13M|        return {
  575|  1.13M|            detail::make_arg<base::is_packed, Context,
  576|  1.13M|                             detail::mapped_type_constant<
  577|  1.13M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.13M|                args)...};
  579|  1.13M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE1EavEENS1_9arg_valueERT2_:
  414|  1.13M|{
  415|  1.13M|    return make_value<Context>(value);
  416|  1.13M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEaEEDaRT0_:
  371|  1.24M|{
  372|  1.24M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.24M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.24M|                                  needs_context_tag>) {
  376|  1.24M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.24M|    }
  378|  1.24M|    else {
  379|  1.24M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.24M|            value, context_tag<Context>{}));
  381|  1.24M|    }
  382|  1.24M|}
_ZN3scn2v26detail10arg_mapperIwE3mapERa:
  216|  1.24M|    {                                                                        \
  217|  1.24M|        return val;                                                          \
  218|  1.24M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJaEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.13M|    {
  647|  1.13M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPNS0_6detail9arg_valueE:
  693|  8.37M|    {
  694|  8.37M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEE4argsEv:
  553|   772k|    {
  554|   772k|        return m_args;
  555|   772k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEaEENS0_14basic_scan_argIT_EERT0_:
  399|   109k|{
  400|   109k|    check_scan_arg_types<T>();
  401|       |
  402|   109k|    basic_scan_arg<Context> arg;
  403|   109k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|   109k|    arg.m_value = make_value<Context>(value);
  405|   109k|    return arg;
  406|   109k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
  476|  9.14M|    constexpr basic_scan_arg() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJhEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.15M|{
  619|  1.15M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.15M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.15M|    static_cast<    \
  |  |  247|  1.15M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.15M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEEC2EONSt3__15tupleIJhEEE:
  563|  1.15M|    {
  564|  1.15M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEE15make_data_arrayIJhEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.15M|    {
  574|  1.15M|        return {
  575|  1.15M|            detail::make_arg<base::is_packed, Context,
  576|  1.15M|                             detail::mapped_type_constant<
  577|  1.15M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.15M|                args)...};
  579|  1.15M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE6EhvEENS1_9arg_valueERT2_:
  414|  1.15M|{
  415|  1.15M|    return make_value<Context>(value);
  416|  1.15M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEhEEDaRT0_:
  371|  1.26M|{
  372|  1.26M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.26M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.26M|                                  needs_context_tag>) {
  376|  1.26M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.26M|    }
  378|  1.26M|    else {
  379|  1.26M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.26M|            value, context_tag<Context>{}));
  381|  1.26M|    }
  382|  1.26M|}
_ZN3scn2v26detail10arg_mapperIwE3mapERh:
  216|  1.26M|    {                                                                        \
  217|  1.26M|        return val;                                                          \
  218|  1.26M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJhEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.15M|    {
  647|  1.15M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEE4argsEv:
  553|   796k|    {
  554|   796k|        return m_args;
  555|   796k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEhEENS0_14basic_scan_argIT_EERT0_:
  399|   107k|{
  400|   107k|    check_scan_arg_types<T>();
  401|       |
  402|   107k|    basic_scan_arg<Context> arg;
  403|   107k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|   107k|    arg.m_value = make_value<Context>(value);
  405|   107k|    return arg;
  406|   107k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.61M|{
  619|  1.61M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.61M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.61M|    static_cast<    \
  |  |  247|  1.61M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.61M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2EONSt3__15tupleIJiEEE:
  563|  1.61M|    {
  564|  1.61M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEE15make_data_arrayIJiEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.61M|    {
  574|  1.61M|        return {
  575|  1.61M|            detail::make_arg<base::is_packed, Context,
  576|  1.61M|                             detail::mapped_type_constant<
  577|  1.61M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.61M|                args)...};
  579|  1.61M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEENS1_9arg_valueERT2_:
  414|  1.61M|{
  415|  1.61M|    return make_value<Context>(value);
  416|  1.61M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
  371|  1.75M|{
  372|  1.75M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.75M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.75M|                                  needs_context_tag>) {
  376|  1.75M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.75M|    }
  378|  1.75M|    else {
  379|  1.75M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.75M|            value, context_tag<Context>{}));
  381|  1.75M|    }
  382|  1.75M|}
_ZN3scn2v26detail10arg_mapperIwE3mapERi:
  216|  1.75M|    {                                                                        \
  217|  1.75M|        return val;                                                          \
  218|  1.75M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.61M|    {
  647|  1.61M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
  553|  1.25M|    {
  554|  1.25M|        return m_args;
  555|  1.25M|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEiEENS0_14basic_scan_argIT_EERT0_:
  399|   147k|{
  400|   147k|    check_scan_arg_types<T>();
  401|       |
  402|   147k|    basic_scan_arg<Context> arg;
  403|   147k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|   147k|    arg.m_value = make_value<Context>(value);
  405|   147k|    return arg;
  406|   147k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.39M|{
  619|  1.39M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.39M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.39M|    static_cast<    \
  |  |  247|  1.39M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.39M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2EONSt3__15tupleIJjEEE:
  563|  1.39M|    {
  564|  1.39M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEE15make_data_arrayIJjEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.39M|    {
  574|  1.39M|        return {
  575|  1.39M|            detail::make_arg<base::is_packed, Context,
  576|  1.39M|                             detail::mapped_type_constant<
  577|  1.39M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.39M|                args)...};
  579|  1.39M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEENS1_9arg_valueERT2_:
  414|  1.39M|{
  415|  1.39M|    return make_value<Context>(value);
  416|  1.39M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
  371|  1.52M|{
  372|  1.52M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.52M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.52M|                                  needs_context_tag>) {
  376|  1.52M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.52M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.52M|    }
  378|  1.52M|    else {
  379|  1.52M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.52M|            value, context_tag<Context>{}));
  381|  1.52M|    }
  382|  1.52M|}
_ZN3scn2v26detail10arg_mapperIwE3mapERj:
  216|  1.52M|    {                                                                        \
  217|  1.52M|        return val;                                                          \
  218|  1.52M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.39M|    {
  647|  1.39M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
  553|  1.03M|    {
  554|  1.03M|        return m_args;
  555|  1.03M|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEjEENS0_14basic_scan_argIT_EERT0_:
  399|   126k|{
  400|   126k|    check_scan_arg_types<T>();
  401|       |
  402|   126k|    basic_scan_arg<Context> arg;
  403|   126k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|   126k|    arg.m_value = make_value<Context>(value);
  405|   126k|    return arg;
  406|   126k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJxEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.65M|{
  619|  1.65M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.65M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.65M|    static_cast<    \
  |  |  247|  1.65M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.65M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEEC2EONSt3__15tupleIJxEEE:
  563|  1.65M|    {
  564|  1.65M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEE15make_data_arrayIJxEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.65M|    {
  574|  1.65M|        return {
  575|  1.65M|            detail::make_arg<base::is_packed, Context,
  576|  1.65M|                             detail::mapped_type_constant<
  577|  1.65M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.65M|                args)...};
  579|  1.65M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE5ExvEENS1_9arg_valueERT2_:
  414|  1.65M|{
  415|  1.65M|    return make_value<Context>(value);
  416|  1.65M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEExEEDaRT0_:
  371|  1.80M|{
  372|  1.80M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.80M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.80M|                                  needs_context_tag>) {
  376|  1.80M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.80M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.80M|    }
  378|  1.80M|    else {
  379|  1.80M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.80M|            value, context_tag<Context>{}));
  381|  1.80M|    }
  382|  1.80M|}
_ZN3scn2v26detail10arg_mapperIwE3mapERx:
  216|  1.80M|    {                                                                        \
  217|  1.80M|        return val;                                                          \
  218|  1.80M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJxEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.65M|    {
  647|  1.65M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEE4argsEv:
  553|  1.28M|    {
  554|  1.28M|        return m_args;
  555|  1.28M|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEExEENS0_14basic_scan_argIT_EERT0_:
  399|   151k|{
  400|   151k|    check_scan_arg_types<T>();
  401|       |
  402|   151k|    basic_scan_arg<Context> arg;
  403|   151k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|   151k|    arg.m_value = make_value<Context>(value);
  405|   151k|    return arg;
  406|   151k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJyEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.42M|{
  619|  1.42M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.42M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.42M|    static_cast<    \
  |  |  247|  1.42M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.42M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEEC2EONSt3__15tupleIJyEEE:
  563|  1.42M|    {
  564|  1.42M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEE15make_data_arrayIJyEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.42M|    {
  574|  1.42M|        return {
  575|  1.42M|            detail::make_arg<base::is_packed, Context,
  576|  1.42M|                             detail::mapped_type_constant<
  577|  1.42M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.42M|                args)...};
  579|  1.42M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE10EyvEENS1_9arg_valueERT2_:
  414|  1.42M|{
  415|  1.42M|    return make_value<Context>(value);
  416|  1.42M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEyEEDaRT0_:
  371|  1.55M|{
  372|  1.55M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.55M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.55M|                                  needs_context_tag>) {
  376|  1.55M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.55M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.55M|    }
  378|  1.55M|    else {
  379|  1.55M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.55M|            value, context_tag<Context>{}));
  381|  1.55M|    }
  382|  1.55M|}
_ZN3scn2v26detail10arg_mapperIwE3mapERy:
  216|  1.55M|    {                                                                        \
  217|  1.55M|        return val;                                                          \
  218|  1.55M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJyEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.42M|    {
  647|  1.42M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEE4argsEv:
  553|  1.06M|    {
  554|  1.06M|        return m_args;
  555|  1.06M|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEyEENS0_14basic_scan_argIT_EERT0_:
  399|   128k|{
  400|   128k|    check_scan_arg_types<T>();
  401|       |
  402|   128k|    basic_scan_arg<Context> arg;
  403|   128k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|   128k|    arg.m_value = make_value<Context>(value);
  405|   128k|    return arg;
  406|   128k|}
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
  681|  8.23M|    {
  682|  8.23M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  8.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 8.23M]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|  8.23M|        return static_cast<std::size_t>(m_desc &
  687|  8.23M|                                        ((1 << detail::packed_arg_bits) - 1));
  688|  8.23M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
  701|  16.4M|    {
  702|  16.4M|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|  16.4M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
  654|  8.23M|    {
  655|  8.23M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  8.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 8.23M]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  8.23M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  8.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 8.23M]
  |  |  ------------------
  ------------------
  663|      0|            return {};
  664|      0|        }
  665|       |
  666|  8.23M|        const auto t = type(id);
  667|  8.23M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  8.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 8.23M]
  |  |  ------------------
  ------------------
  668|      0|            return {};
  669|      0|        }
  670|       |
  671|  8.23M|        basic_scan_arg<Context> arg;
  672|  8.23M|        arg.m_type = t;
  673|  8.23M|        arg.m_value = m_values[id];
  674|  8.23M|        return arg;
  675|  8.23M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
  706|  8.23M|    {
  707|       |        // First (0th) index is size, types start after that
  708|  8.23M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  8.23M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  8.23M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  8.23M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
  482|  15.3M|    {
  483|  15.3M|        return m_type != detail::arg_type::none_type;
  484|  15.3M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
  487|  13.0M|    {
  488|  13.0M|        return m_type;
  489|  13.0M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
  681|  8.37M|    {
  682|  8.37M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  8.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 8.37M]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|  8.37M|        return static_cast<std::size_t>(m_desc &
  687|  8.37M|                                        ((1 << detail::packed_arg_bits) - 1));
  688|  8.37M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
  701|  16.7M|    {
  702|  16.7M|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|  16.7M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
  654|  8.37M|    {
  655|  8.37M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  8.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 8.37M]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  8.37M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  8.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 8.37M]
  |  |  ------------------
  ------------------
  663|      0|            return {};
  664|      0|        }
  665|       |
  666|  8.37M|        const auto t = type(id);
  667|  8.37M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  8.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 8.37M]
  |  |  ------------------
  ------------------
  668|      0|            return {};
  669|      0|        }
  670|       |
  671|  8.37M|        basic_scan_arg<Context> arg;
  672|  8.37M|        arg.m_type = t;
  673|  8.37M|        arg.m_value = m_values[id];
  674|  8.37M|        return arg;
  675|  8.37M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
  706|  8.37M|    {
  707|       |        // First (0th) index is size, types start after that
  708|  8.37M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  8.37M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  8.37M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  8.37M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
  482|  15.3M|    {
  483|  15.3M|        return m_type != detail::arg_type::none_type;
  484|  15.3M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
  487|  13.6M|    {
  488|  13.6M|        return m_type;
  489|  13.6M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
  634|   847k|    constexpr basic_scan_args() = default;
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
  634|   770k|    constexpr basic_scan_args() = default;

_ZN3scn2v218basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|   361k|    {
  109|   361k|    }
_ZN3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
   59|  6.53M|    {
   60|  6.53M|    }
_ZNK3scn2v218basic_scan_contextIcE5beginEv:
  123|   651k|    {
  124|   651k|        return m_current;
  125|   651k|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
   42|  6.53M|    {
   43|  6.53M|        return m_args.get(id);
   44|  6.53M|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
   52|  6.31M|    {
   53|  6.31M|        return m_locale;
   54|  6.31M|    }
_ZNK3scn2v218basic_scan_contextIcE3endEv:
  131|   253k|    {
  132|   253k|        return ranges_std::default_sentinel;
  133|   253k|    }
_ZN3scn2v218basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
  145|  36.1k|    {
  146|  36.1k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  36.1k|    static_cast<    \
  |  |  247|  36.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  147|  36.1k|    }
_ZNK3scn2v218basic_scan_contextIcE5rangeEv:
  139|   253k|    {
  140|   253k|        return ranges::subrange{begin(), end()};
  141|   253k|    }
_ZN3scn2v218basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|  1.04M|    {
  109|  1.04M|    }
_ZN3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
   59|  6.83M|    {
   60|  6.83M|    }
_ZNK3scn2v218basic_scan_contextIwE5beginEv:
  123|  1.84M|    {
  124|  1.84M|        return m_current;
  125|  1.84M|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
   42|  6.83M|    {
   43|  6.83M|        return m_args.get(id);
   44|  6.83M|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
   52|  6.18M|    {
   53|  6.18M|        return m_locale;
   54|  6.18M|    }
_ZNK3scn2v218basic_scan_contextIwE3endEv:
  131|   723k|    {
  132|   723k|        return ranges_std::default_sentinel;
  133|   723k|    }
_ZN3scn2v218basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
  145|  72.3k|    {
  146|  72.3k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  72.3k|    static_cast<    \
  |  |  247|  72.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  147|  72.3k|    }
_ZNK3scn2v218basic_scan_contextIwE5rangeEv:
  139|   723k|    {
  140|   723k|        return ranges::subrange{begin(), end()};
  141|   723k|    }

_ZN3scn2v210scan_errorC2ENS1_4codeEPKc:
   68|  4.19M|    {
   69|  4.19M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|  4.19M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   70|  4.19M|    }
_ZNK3scn2v210scan_errorcvbEv:
   74|  64.5M|    {
   75|  64.5M|        return m_code == good;
   76|  64.5M|    }
_ZNK3scn2v210scan_error4codeEv:
   85|  1.73M|    {
   86|  1.73M|        return m_code;
   87|  1.73M|    }
_ZN3scn2v2eqENS0_10scan_errorENS1_4codeE:
  110|  1.73M|{
  111|  1.73M|    return a.code() == b;
  112|  1.73M|}
_ZN3scn2v2neENS0_10scan_errorENS1_4codeE:
  115|  1.73M|{
  116|  1.73M|    return !(a == b);
  117|  1.73M|}
_ZN3scn2v210scan_errorC2Ev:
   62|  39.2M|    constexpr scan_error() SCN_NOEXCEPT = default;

_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|  1.00M|    {
  675|  1.00M|        return m_str;
  676|  1.00M|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  384|  8.23M|{
  385|  8.23M|    return s;
  386|  8.23M|}
_ZN3scn2v26detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
  361|  8.23M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  1.00M|    {
  671|  1.00M|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|  1.03M|    {
  675|  1.03M|        return m_str;
  676|  1.03M|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  1.03M|    {
  671|  1.03M|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|  1.55M|    {
  675|  1.55M|        return m_str;
  676|  1.55M|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  1.55M|    {
  671|  1.55M|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|  1.29M|    {
  675|  1.29M|        return m_str;
  676|  1.29M|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  1.29M|    {
  671|  1.29M|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|  1.61M|    {
  675|  1.61M|        return m_str;
  676|  1.61M|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  1.61M|    {
  671|  1.61M|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|  1.32M|    {
  675|  1.32M|        return m_str;
  676|  1.32M|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  1.32M|    {
  671|  1.32M|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  66.3k|    {
  675|  66.3k|        return m_str;
  676|  66.3k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  66.3k|    {
  671|  66.3k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  66.3k|    {
  675|  66.3k|        return m_str;
  676|  66.3k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  66.3k|    {
  671|  66.3k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  66.3k|    {
  675|  66.3k|        return m_str;
  676|  66.3k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  66.3k|    {
  671|  66.3k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  66.3k|    {
  675|  66.3k|        return m_str;
  676|  66.3k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  66.3k|    {
  671|  66.3k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  66.3k|    {
  675|  66.3k|        return m_str;
  676|  66.3k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  66.3k|    {
  671|  66.3k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  66.3k|    {
  675|  66.3k|        return m_str;
  676|  66.3k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  66.3k|    {
  671|  66.3k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   953k|    {
  675|   953k|        return m_str;
  676|   953k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
  389|  8.37M|{
  390|  8.37M|    return s;
  391|  8.37M|}
_ZN3scn2v26detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
  361|  8.37M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   953k|    {
  671|   953k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   977k|    {
  675|   977k|        return m_str;
  676|   977k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   977k|    {
  671|   977k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|  1.41M|    {
  675|  1.41M|        return m_str;
  676|  1.41M|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  1.41M|    {
  671|  1.41M|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|  1.19M|    {
  675|  1.19M|        return m_str;
  676|  1.19M|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  1.19M|    {
  671|  1.19M|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|  1.45M|    {
  675|  1.45M|        return m_str;
  676|  1.45M|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  1.45M|    {
  671|  1.45M|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|  1.22M|    {
  675|  1.22M|        return m_str;
  676|  1.22M|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  1.22M|    {
  671|  1.22M|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   180k|    {
  675|   180k|        return m_str;
  676|   180k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   180k|    {
  671|   180k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   180k|    {
  675|   180k|        return m_str;
  676|   180k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   180k|    {
  671|   180k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   198k|    {
  675|   198k|        return m_str;
  676|   198k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   198k|    {
  671|   198k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   198k|    {
  675|   198k|        return m_str;
  676|   198k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   198k|    {
  671|   198k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   198k|    {
  675|   198k|        return m_str;
  676|   198k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   198k|    {
  671|   198k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   198k|    {
  675|   198k|        return m_str;
  676|   198k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   198k|    {
  671|   198k|    }

_ZNK3scn2v26detail12format_specs8get_baseEi:
  195|  12.4M|    {
  196|  12.4M|        SCN_GCC_COMPAT_PUSH
  197|  12.4M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
  198|  12.4M|        switch (type) {
  199|  3.21M|            case presentation_type::none:
  ------------------
  |  Branch (199:13): [True: 3.21M, False: 9.22M]
  ------------------
  200|  6.44M|            case presentation_type::int_generic:
  ------------------
  |  Branch (200:13): [True: 3.22M, False: 9.21M]
  ------------------
  201|  6.44M|                return default_base;
  202|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (202:13): [True: 0, False: 12.4M]
  ------------------
  203|      0|                return arbitrary_base;
  204|       |
  205|   468k|            case presentation_type::int_binary:
  ------------------
  |  Branch (205:13): [True: 468k, False: 11.9M]
  ------------------
  206|   468k|                return 2;
  207|   805k|            case presentation_type::int_octal:
  ------------------
  |  Branch (207:13): [True: 805k, False: 11.6M]
  ------------------
  208|   805k|                return 8;
  209|  2.34M|            case presentation_type::int_decimal:
  ------------------
  |  Branch (209:13): [True: 2.34M, False: 10.0M]
  ------------------
  210|  2.34M|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (210:13): [True: 0, False: 12.4M]
  ------------------
  211|  2.34M|                return 10;
  212|  2.37M|            case presentation_type::int_hex:
  ------------------
  |  Branch (212:13): [True: 2.37M, False: 10.0M]
  ------------------
  213|  2.37M|                return 16;
  214|       |
  215|      0|            default:
  ------------------
  |  Branch (215:13): [True: 0, False: 12.4M]
  ------------------
  216|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  217|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  218|  12.4M|        }
  219|  12.4M|        SCN_GCC_COMPAT_POP
  220|  12.4M|    }
_ZN3scn2v26detail12specs_setterC2ERNS1_12format_specsE:
  232|  13.3M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v26detail12specs_setter12on_localizedEv:
  244|  3.23M|    {
  245|  3.23M|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  126|  3.23M|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (245:23): [Folded - Ignored]
  ------------------
  246|  3.23M|            m_specs.localized = true;
  247|  3.23M|        }
  248|      0|        else {
  249|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
  250|      0|        }
  251|  3.23M|    }
_ZN3scn2v26detail12specs_setter7on_typeENS1_17presentation_typeE:
  259|  9.55M|    {
  260|  9.55M|        m_specs.type = type;
  261|  9.55M|    }
_ZN3scn2v26detail12specs_setter8on_errorEPKc:
  321|   578k|    {
  322|   578k|        SCN_UNLIKELY_ATTR
  323|   578k|        m_error = scan_error{scan_error::invalid_format_string, msg};
  324|   578k|    }
_ZNK3scn2v26detail12specs_settercvbEv:
  332|  12.7M|    {
  333|  12.7M|        return static_cast<bool>(m_error);
  334|  12.7M|    }
_ZN3scn2v26detail25get_category_for_arg_typeENS1_8arg_typeE:
  980|  3.23M|{
  981|  3.23M|    switch (type) {
  982|      0|        case arg_type::none_type:
  ------------------
  |  Branch (982:9): [True: 0, False: 3.23M]
  ------------------
  983|      0|            return arg_type_category::none;
  984|       |
  985|   458k|        case arg_type::schar_type:
  ------------------
  |  Branch (985:9): [True: 458k, False: 2.77M]
  ------------------
  986|   458k|        case arg_type::short_type:
  ------------------
  |  Branch (986:9): [True: 0, False: 3.23M]
  ------------------
  987|  1.07M|        case arg_type::int_type:
  ------------------
  |  Branch (987:9): [True: 621k, False: 2.61M]
  ------------------
  988|  1.07M|        case arg_type::long_type:
  ------------------
  |  Branch (988:9): [True: 0, False: 3.23M]
  ------------------
  989|  1.71M|        case arg_type::llong_type:
  ------------------
  |  Branch (989:9): [True: 639k, False: 2.59M]
  ------------------
  990|  1.71M|            return arg_type_category::integer;
  991|       |
  992|   447k|        case arg_type::uchar_type:
  ------------------
  |  Branch (992:9): [True: 447k, False: 2.78M]
  ------------------
  993|   447k|        case arg_type::ushort_type:
  ------------------
  |  Branch (993:9): [True: 0, False: 3.23M]
  ------------------
  994|   975k|        case arg_type::uint_type:
  ------------------
  |  Branch (994:9): [True: 528k, False: 2.70M]
  ------------------
  995|   975k|        case arg_type::ulong_type:
  ------------------
  |  Branch (995:9): [True: 0, False: 3.23M]
  ------------------
  996|  1.51M|        case arg_type::ullong_type:
  ------------------
  |  Branch (996:9): [True: 538k, False: 2.69M]
  ------------------
  997|  1.51M|            return arg_type_category::unsigned_integer;
  998|       |
  999|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (999:9): [True: 0, False: 3.23M]
  ------------------
 1000|      0|            return arg_type_category::pointer;
 1001|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (1001:9): [True: 0, False: 3.23M]
  ------------------
 1002|      0|            return arg_type_category::boolean;
 1003|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (1003:9): [True: 0, False: 3.23M]
  ------------------
 1004|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (1004:9): [True: 0, False: 3.23M]
  ------------------
 1005|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (1005:9): [True: 0, False: 3.23M]
  ------------------
 1006|      0|            return arg_type_category::character;
 1007|       |
 1008|      0|        case arg_type::float_type:
  ------------------
  |  Branch (1008:9): [True: 0, False: 3.23M]
  ------------------
 1009|      0|        case arg_type::double_type:
  ------------------
  |  Branch (1009:9): [True: 0, False: 3.23M]
  ------------------
 1010|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (1010:9): [True: 0, False: 3.23M]
  ------------------
 1011|      0|            return arg_type_category::floating;
 1012|       |
 1013|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (1013:9): [True: 0, False: 3.23M]
  ------------------
 1014|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (1014:9): [True: 0, False: 3.23M]
  ------------------
 1015|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (1015:9): [True: 0, False: 3.23M]
  ------------------
 1016|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (1016:9): [True: 0, False: 3.23M]
  ------------------
 1017|      0|            return arg_type_category::string;
 1018|       |
 1019|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (1019:9): [True: 0, False: 3.23M]
  ------------------
 1020|      0|            return arg_type_category::custom;
 1021|       |
 1022|      0|            SCN_CLANG_PUSH
 1023|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 1024|      0|        default:
  ------------------
  |  Branch (1024:9): [True: 0, False: 3.23M]
  ------------------
 1025|      0|            SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1026|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1027|  3.23M|            SCN_CLANG_POP
 1028|  3.23M|    }
 1029|       |
 1030|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1031|  3.23M|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  961|  6.17M|{
  962|  6.17M|    parse_format_string_impl<IsConstexpr>(format, handler);
  963|  6.17M|    handler.check_args_exhausted();
  964|  6.17M|    return handler.get_error();
  965|  6.17M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  927|  6.17M|{
  928|       |    // TODO: memchr fast path with a larger (> 32) format string
  929|       |
  930|  6.17M|    auto begin = format.data();
  931|  6.17M|    auto it = begin;
  932|  6.17M|    const auto end = format.data() + format.size();
  933|       |
  934|  12.0M|    while (it != end) {
  ------------------
  |  Branch (934:12): [True: 6.17M, False: 5.84M]
  ------------------
  935|  6.17M|        const auto ch = *it++;
  936|  6.17M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (936:13): [True: 6.17M, False: 0]
  ------------------
  937|  6.17M|            handler.on_literal_text(begin, it - 1);
  938|       |
  939|  6.17M|            begin = it = parse_replacement_field(it - 1, end, handler);
  940|  6.17M|            if (!handler) {
  ------------------
  |  Branch (940:17): [True: 325k, False: 5.84M]
  ------------------
  941|   325k|                return;
  942|   325k|            }
  943|  6.17M|        }
  944|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (944:18): [True: 0, False: 0]
  ------------------
  945|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  946|      0|                handler.on_error("Unmatched '}' in format string");
  947|      0|                return;
  948|      0|            }
  949|       |
  950|      0|            handler.on_literal_text(begin, it);
  951|      0|            begin = ++it;
  952|      0|        }
  953|  6.17M|    }
  954|       |
  955|  5.84M|    handler.on_literal_text(begin, end);
  956|  5.84M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
  859|  6.17M|{
  860|  6.17M|    struct id_adapter {
  861|  6.17M|        constexpr void operator()()
  862|  6.17M|        {
  863|  6.17M|            arg_id = handler.on_arg_id();
  864|  6.17M|        }
  865|  6.17M|        constexpr void operator()(std::size_t id)
  866|  6.17M|        {
  867|  6.17M|            arg_id = handler.on_arg_id(id);
  868|  6.17M|        }
  869|       |
  870|  6.17M|        constexpr void on_error(const char* msg)
  871|  6.17M|        {
  872|  6.17M|            SCN_UNLIKELY_ATTR
  873|  6.17M|            handler.on_error(msg);
  874|  6.17M|        }
  875|       |
  876|  6.17M|        Handler& handler;
  877|  6.17M|        std::size_t arg_id;
  878|  6.17M|    };
  879|       |
  880|  6.17M|    ++begin;
  881|  6.17M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  6.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 6.17M]
  |  |  ------------------
  ------------------
  882|      0|        handler.on_error("Unexpected end of replacement field");
  883|      0|        return begin;
  884|      0|    }
  885|       |
  886|  6.17M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (886:9): [True: 0, False: 6.17M]
  ------------------
  887|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  888|      0|    }
  889|  6.17M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (889:14): [True: 0, False: 6.17M]
  ------------------
  890|      0|        handler.on_literal_text(begin, begin + 1);
  891|      0|    }
  892|  6.17M|    else {
  893|  6.17M|        auto adapter = id_adapter{handler, 0};
  894|  6.17M|        begin = parse_arg_id(begin, end, adapter);
  895|       |
  896|  6.17M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  6.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 6.17M]
  |  |  ------------------
  ------------------
  897|      0|            handler.on_error("Missing '}' in format string");
  898|      0|            return begin;
  899|      0|        }
  900|       |
  901|  6.17M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (901:13): [True: 0, False: 6.17M]
  ------------------
  902|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  903|      0|        }
  904|  6.17M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (904:18): [True: 6.17M, False: 0]
  ------------------
  905|  6.17M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  6.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 6.17M]
  |  |  ------------------
  ------------------
  906|      0|                handler.on_error("Unexpected end of replacement field");
  907|      0|                return begin;
  908|      0|            }
  909|  6.17M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  910|  6.17M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  12.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 108k, False: 6.06M]
  |  |  |  Branch (153:45): [True: 0, False: 6.17M]
  |  |  |  Branch (153:45): [True: 108k, False: 6.06M]
  |  |  ------------------
  ------------------
  911|   108k|                handler.on_error("Unknown format specifier");
  912|   108k|                return begin;
  913|   108k|            }
  914|  6.17M|        }
  915|      0|        else {
  916|      0|            SCN_UNLIKELY_ATTR
  917|      0|            handler.on_error("Missing '}' in format string");
  918|      0|            return begin;
  919|      0|        }
  920|  6.17M|    }
  921|  6.06M|    return begin + 1;
  922|  6.17M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  6.17M|{
  400|  6.17M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  6.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  6.17M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 6.17M, False: 0]
  |  Branch (401:26): [True: 0, False: 6.17M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  6.17M|    handler();
  406|  6.17M|    return begin;
  407|  6.17M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  862|  6.17M|        {
  863|  6.17M|            arg_id = handler.on_arg_id();
  864|  6.17M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1039|  6.17M|    {
 1040|  6.17M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  6.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1041|  6.17M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  788|  6.17M|{
  789|  6.17M|    auto do_presentation = [&]() -> const CharT* {
  790|  6.17M|        if (*begin == CharT{'['}) {
  791|  6.17M|            auto set = parse_presentation_set(begin, end, handler);
  792|  6.17M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  793|       |                // clang-format off
  794|  6.17M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|  6.17M|                return begin;
  797|  6.17M|            }
  798|  6.17M|            handler.on_character_set_string(set);
  799|  6.17M|            return begin;
  800|  6.17M|        }
  801|  6.17M|        if (*begin == CharT{'/'}) {
  802|  6.17M|            return parse_presentation_regex(begin, end, handler);
  803|  6.17M|        }
  804|  6.17M|        presentation_type type = parse_presentation_type(*begin++);
  805|  6.17M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  806|  6.17M|            handler.on_error("Invalid type specifier in format string");
  807|  6.17M|            return begin;
  808|  6.17M|        }
  809|  6.17M|        handler.on_type(type);
  810|  6.17M|        return begin;
  811|  6.17M|    };
  812|       |
  813|  6.17M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (813:9): [True: 6.17M, False: 0]
  |  Branch (813:28): [True: 6.10M, False: 72.3k]
  ------------------
  814|  6.17M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (814:9): [True: 6.06M, False: 36.1k]
  |  Branch (814:36): [True: 4.40M, False: 1.65M]
  ------------------
  815|  4.40M|        return do_presentation();
  816|  4.40M|    }
  817|       |
  818|  1.76M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.76M]
  |  |  ------------------
  ------------------
  819|      0|        handler.on_error("Unexpected end of format string");
  820|      0|        return begin;
  821|      0|    }
  822|       |
  823|  1.76M|    begin = parse_align(begin, end, handler);
  824|  1.76M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.76M]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|  1.76M|    begin = parse_width(begin, end, handler);
  830|  1.76M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.76M]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|  1.76M|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (835:9): [True: 1.65M, False: 108k]
  ------------------
  836|  1.65M|        handler.on_localized();
  837|  1.65M|        ++begin;
  838|  1.65M|    }
  839|  1.76M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.76M]
  |  |  ------------------
  ------------------
  840|      0|        handler.on_error("Unexpected end of format string");
  841|      0|        return begin;
  842|      0|    }
  843|       |
  844|  1.76M|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (844:9): [True: 1.76M, False: 0]
  |  Branch (844:25): [True: 108k, False: 1.65M]
  ------------------
  845|   108k|        do_presentation();
  846|   108k|    }
  847|  1.76M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.76M]
  |  |  ------------------
  ------------------
  848|      0|        handler.on_error("Unexpected end of format string");
  849|      0|        return begin;
  850|      0|    }
  851|       |
  852|  1.76M|    return begin;
  853|  1.76M|}
_ZN3scn2v26detail15is_ascii_letterIcEEbT_:
  463|  6.38M|{
  464|  6.38M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 4.62M, False: 1.76M]
  |  Branch (464:33): [True: 4.62M, False: 0]
  ------------------
  465|  6.38M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 1.69M, False: 72.3k]
  |  Branch (465:33): [True: 1.69M, False: 0]
  ------------------
  466|  6.38M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  789|  4.51M|    auto do_presentation = [&]() -> const CharT* {
  790|  4.51M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (790:13): [True: 0, False: 4.51M]
  ------------------
  791|      0|            auto set = parse_presentation_set(begin, end, handler);
  792|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  793|       |                // clang-format off
  794|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|      0|                return begin;
  797|      0|            }
  798|      0|            handler.on_character_set_string(set);
  799|      0|            return begin;
  800|      0|        }
  801|  4.51M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (801:13): [True: 0, False: 4.51M]
  ------------------
  802|      0|            return parse_presentation_regex(begin, end, handler);
  803|      0|        }
  804|  4.51M|        presentation_type type = parse_presentation_type(*begin++);
  805|  4.51M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  4.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 72.3k, False: 4.44M]
  |  |  ------------------
  ------------------
  806|  72.3k|            handler.on_error("Invalid type specifier in format string");
  807|  72.3k|            return begin;
  808|  72.3k|        }
  809|  4.44M|        handler.on_type(type);
  810|  4.44M|        return begin;
  811|  4.51M|    };
_ZN3scn2v26detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
  411|  4.84M|{
  412|  4.84M|    switch (type) {
  413|   167k|        case 'b':
  ------------------
  |  Branch (413:9): [True: 167k, False: 4.67M]
  ------------------
  414|   239k|        case 'B':
  ------------------
  |  Branch (414:9): [True: 72.3k, False: 4.76M]
  ------------------
  415|   239k|            return presentation_type::int_binary;
  416|  1.21M|        case 'd':
  ------------------
  |  Branch (416:9): [True: 1.21M, False: 3.62M]
  ------------------
  417|  1.21M|            return presentation_type::int_decimal;
  418|  1.69M|        case 'i':
  ------------------
  |  Branch (418:9): [True: 1.69M, False: 3.14M]
  ------------------
  419|  1.69M|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 4.84M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|   350k|        case 'o':
  ------------------
  |  Branch (422:9): [True: 350k, False: 4.48M]
  ------------------
  423|   350k|            return presentation_type::int_octal;
  424|  1.19M|        case 'x':
  ------------------
  |  Branch (424:9): [True: 1.19M, False: 3.64M]
  ------------------
  425|  1.19M|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 4.84M]
  ------------------
  426|  1.19M|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 4.84M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 4.84M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|      0|        case 'a':
  ------------------
  |  Branch (430:9): [True: 0, False: 4.84M]
  ------------------
  431|      0|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 4.84M]
  ------------------
  432|      0|            return presentation_type::float_hex;
  433|      0|        case 'e':
  ------------------
  |  Branch (433:9): [True: 0, False: 4.84M]
  ------------------
  434|      0|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 4.84M]
  ------------------
  435|      0|            return presentation_type::float_scientific;
  436|      0|        case 'f':
  ------------------
  |  Branch (436:9): [True: 0, False: 4.84M]
  ------------------
  437|      0|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 4.84M]
  ------------------
  438|      0|            return presentation_type::float_fixed;
  439|      0|        case 'g':
  ------------------
  |  Branch (439:9): [True: 0, False: 4.84M]
  ------------------
  440|      0|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 4.84M]
  ------------------
  441|      0|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 4.84M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 4.84M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 4.84M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 4.84M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 4.84M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 4.84M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|   144k|        default:
  ------------------
  |  Branch (456:9): [True: 144k, False: 4.69M]
  ------------------
  457|   144k|            return presentation_type::none;
  458|  4.84M|    }
  459|  4.84M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  488|  1.76M|{
  489|  1.76M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.76M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.76M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|  1.76M|        switch (ch) {
  493|  1.76M|            case L'<':
  494|  1.76M|                return align_type::left;
  495|  1.76M|            case L'>':
  496|  1.76M|                return align_type::right;
  497|  1.76M|            case L'^':
  498|  1.76M|                return align_type::center;
  499|  1.76M|            default:
  500|  1.76M|                return align_type::none;
  501|  1.76M|        }
  502|  1.76M|    };
  503|       |
  504|  1.76M|    auto potential_fill_len = code_point_length(begin, end);
  505|  1.76M|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|  3.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.76M]
  |  |  |  Branch (153:45): [True: 0, False: 1.76M]
  |  |  |  Branch (153:45): [True: 0, False: 1.76M]
  |  |  ------------------
  ------------------
  506|  1.76M|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|  1.76M|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|  1.76M|    auto potential_fill = std::basic_string_view<CharT>{
  514|  1.76M|        begin, static_cast<size_t>(potential_fill_len)};
  515|  1.76M|    const auto begin_before_fill = begin;
  516|  1.76M|    begin += potential_fill_len;
  517|       |
  518|  1.76M|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 1.76M]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|  1.76M|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|  1.76M|    const auto begin_after_fill = begin;
  524|  1.76M|    ++begin;
  525|       |
  526|  1.76M|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 1.76M, False: 0]
  ------------------
  527|  1.76M|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|  1.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.76M]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|  1.76M|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 1.76M]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|  1.76M|    }
  535|       |
  536|  1.76M|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 1.76M, False: 0]
  ------------------
  537|  1.76M|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 1.76M]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|  1.76M|        return begin_before_fill;
  542|  1.76M|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|  1.76M|}
_ZN3scn2v26detail17code_point_lengthIcEEiPKT_S5_:
  470|  1.91M|{
  471|  1.91M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.91M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.91M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|  1.91M|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|  1.91M|        return 1;
  474|  1.91M|    }
  475|  1.91M|    else {
  476|  1.91M|        const auto lengths =
  477|  1.91M|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|  1.91M|            "\3\4";
  479|  1.91M|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|  1.91M|        return len;
  481|  1.91M|    }
  482|  1.91M|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|  3.53M|    auto check_align = [](wchar_t ch) {
  492|  3.53M|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 3.53M]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 3.53M]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 3.53M]
  ------------------
  498|      0|                return align_type::center;
  499|  3.53M|            default:
  ------------------
  |  Branch (499:13): [True: 3.53M, False: 0]
  ------------------
  500|  3.53M|                return align_type::none;
  501|  3.53M|        }
  502|  3.53M|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  553|  1.76M|{
  554|  1.76M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.76M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.76M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|  1.76M|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 1.69M, False: 72.3k]
  |  Branch (556:33): [True: 0, False: 1.69M]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|  1.76M|    return begin;
  567|  1.76M|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 1044|  1.65M|    {
 1045|  1.65M|        const auto cat = get_category_for_arg_type(m_arg_type);
 1046|  1.65M|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1046:13): [True: 772k, False: 885k]
  ------------------
 1047|  1.65M|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1047:13): [True: 0, False: 772k]
  ------------------
 1048|  1.65M|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1048:13): [True: 0, False: 0]
  ------------------
 1049|  1.65M|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1049:13): [True: 0, False: 0]
  ------------------
 1050|      0|            SCN_UNLIKELY_ATTR
 1051|       |            // clang-format off
 1052|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1053|       |            // clang-format on
 1054|      0|        }
 1055|       |
 1056|  1.65M|        Handler::on_localized();
 1057|  1.65M|    }
_ZN3scn2v26detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 1066|  12.5M|{
 1067|  12.5M|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  153|  12.5M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 12.5M]
  |  |  ------------------
  ------------------
 1068|      0|        return handler.on_error("Invalid type specifier for integer type");
 1069|      0|    }
 1070|  12.5M|    if (specs.localized) {
  ------------------
  |  Branch (1070:9): [True: 3.23M, False: 9.26M]
  ------------------
 1071|  3.23M|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  153|  3.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.23M]
  |  |  ------------------
  ------------------
 1072|       |            // clang-format off
 1073|      0|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 1074|       |            // clang-format on
 1075|      0|            return;
 1076|      0|        }
 1077|  3.23M|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  153|  3.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.23M]
  |  |  ------------------
  ------------------
 1078|       |            // clang-format off
 1079|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 1080|       |            // clang-format on
 1081|      0|        }
 1082|  3.23M|    }
 1083|  12.5M|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  961|   361k|{
  962|   361k|    parse_format_string_impl<IsConstexpr>(format, handler);
  963|   361k|    handler.check_args_exhausted();
  964|   361k|    return handler.get_error();
  965|   361k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  927|   361k|{
  928|       |    // TODO: memchr fast path with a larger (> 32) format string
  929|       |
  930|   361k|    auto begin = format.data();
  931|   361k|    auto it = begin;
  932|   361k|    const auto end = format.data() + format.size();
  933|       |
  934|   397k|    while (it != end) {
  ------------------
  |  Branch (934:12): [True: 361k, False: 36.1k]
  ------------------
  935|   361k|        const auto ch = *it++;
  936|   361k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (936:13): [True: 361k, False: 0]
  ------------------
  937|   361k|            handler.on_literal_text(begin, it - 1);
  938|       |
  939|   361k|            begin = it = parse_replacement_field(it - 1, end, handler);
  940|   361k|            if (!handler) {
  ------------------
  |  Branch (940:17): [True: 325k, False: 36.1k]
  ------------------
  941|   325k|                return;
  942|   325k|            }
  943|   361k|        }
  944|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (944:18): [True: 0, False: 0]
  ------------------
  945|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  946|      0|                handler.on_error("Unmatched '}' in format string");
  947|      0|                return;
  948|      0|            }
  949|       |
  950|      0|            handler.on_literal_text(begin, it);
  951|      0|            begin = ++it;
  952|      0|        }
  953|   361k|    }
  954|       |
  955|  36.1k|    handler.on_literal_text(begin, end);
  956|  36.1k|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
  859|   361k|{
  860|   361k|    struct id_adapter {
  861|   361k|        constexpr void operator()()
  862|   361k|        {
  863|   361k|            arg_id = handler.on_arg_id();
  864|   361k|        }
  865|   361k|        constexpr void operator()(std::size_t id)
  866|   361k|        {
  867|   361k|            arg_id = handler.on_arg_id(id);
  868|   361k|        }
  869|       |
  870|   361k|        constexpr void on_error(const char* msg)
  871|   361k|        {
  872|   361k|            SCN_UNLIKELY_ATTR
  873|   361k|            handler.on_error(msg);
  874|   361k|        }
  875|       |
  876|   361k|        Handler& handler;
  877|   361k|        std::size_t arg_id;
  878|   361k|    };
  879|       |
  880|   361k|    ++begin;
  881|   361k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 361k]
  |  |  ------------------
  ------------------
  882|      0|        handler.on_error("Unexpected end of replacement field");
  883|      0|        return begin;
  884|      0|    }
  885|       |
  886|   361k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (886:9): [True: 0, False: 361k]
  ------------------
  887|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  888|      0|    }
  889|   361k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (889:14): [True: 0, False: 361k]
  ------------------
  890|      0|        handler.on_literal_text(begin, begin + 1);
  891|      0|    }
  892|   361k|    else {
  893|   361k|        auto adapter = id_adapter{handler, 0};
  894|   361k|        begin = parse_arg_id(begin, end, adapter);
  895|       |
  896|   361k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 361k]
  |  |  ------------------
  ------------------
  897|      0|            handler.on_error("Missing '}' in format string");
  898|      0|            return begin;
  899|      0|        }
  900|       |
  901|   361k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (901:13): [True: 0, False: 361k]
  ------------------
  902|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  903|      0|        }
  904|   361k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (904:18): [True: 361k, False: 0]
  ------------------
  905|   361k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 361k]
  |  |  ------------------
  ------------------
  906|      0|                handler.on_error("Unexpected end of replacement field");
  907|      0|                return begin;
  908|      0|            }
  909|   361k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  910|   361k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|   723k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 108k, False: 253k]
  |  |  |  Branch (153:45): [True: 0, False: 361k]
  |  |  |  Branch (153:45): [True: 108k, False: 253k]
  |  |  ------------------
  ------------------
  911|   108k|                handler.on_error("Unknown format specifier");
  912|   108k|                return begin;
  913|   108k|            }
  914|   361k|        }
  915|      0|        else {
  916|      0|            SCN_UNLIKELY_ATTR
  917|      0|            handler.on_error("Missing '}' in format string");
  918|      0|            return begin;
  919|      0|        }
  920|   361k|    }
  921|   253k|    return begin + 1;
  922|   361k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   361k|{
  400|   361k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   361k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   361k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   361k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 361k, False: 0]
  |  Branch (401:26): [True: 0, False: 361k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   361k|    handler();
  406|   361k|    return begin;
  407|   361k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  862|   361k|        {
  863|   361k|            arg_id = handler.on_arg_id();
  864|   361k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1039|   361k|    {
 1040|   361k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|   361k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   361k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1041|   361k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  788|   361k|{
  789|   361k|    auto do_presentation = [&]() -> const CharT* {
  790|   361k|        if (*begin == CharT{'['}) {
  791|   361k|            auto set = parse_presentation_set(begin, end, handler);
  792|   361k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  793|       |                // clang-format off
  794|   361k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|   361k|                return begin;
  797|   361k|            }
  798|   361k|            handler.on_character_set_string(set);
  799|   361k|            return begin;
  800|   361k|        }
  801|   361k|        if (*begin == CharT{'/'}) {
  802|   361k|            return parse_presentation_regex(begin, end, handler);
  803|   361k|        }
  804|   361k|        presentation_type type = parse_presentation_type(*begin++);
  805|   361k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  806|   361k|            handler.on_error("Invalid type specifier in format string");
  807|   361k|            return begin;
  808|   361k|        }
  809|   361k|        handler.on_type(type);
  810|   361k|        return begin;
  811|   361k|    };
  812|       |
  813|   361k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (813:9): [True: 361k, False: 0]
  |  Branch (813:28): [True: 289k, False: 72.3k]
  ------------------
  814|   361k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (814:9): [True: 253k, False: 36.1k]
  |  Branch (814:36): [True: 217k, False: 36.1k]
  ------------------
  815|   217k|        return do_presentation();
  816|   217k|    }
  817|       |
  818|   144k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 144k]
  |  |  ------------------
  ------------------
  819|      0|        handler.on_error("Unexpected end of format string");
  820|      0|        return begin;
  821|      0|    }
  822|       |
  823|   144k|    begin = parse_align(begin, end, handler);
  824|   144k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 144k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   144k|    begin = parse_width(begin, end, handler);
  830|   144k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 144k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   144k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (835:9): [True: 36.1k, False: 108k]
  ------------------
  836|  36.1k|        handler.on_localized();
  837|  36.1k|        ++begin;
  838|  36.1k|    }
  839|   144k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 144k]
  |  |  ------------------
  ------------------
  840|      0|        handler.on_error("Unexpected end of format string");
  841|      0|        return begin;
  842|      0|    }
  843|       |
  844|   144k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (844:9): [True: 144k, False: 0]
  |  Branch (844:25): [True: 108k, False: 36.1k]
  ------------------
  845|   108k|        do_presentation();
  846|   108k|    }
  847|   144k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 144k]
  |  |  ------------------
  ------------------
  848|      0|        handler.on_error("Unexpected end of format string");
  849|      0|        return begin;
  850|      0|    }
  851|       |
  852|   144k|    return begin;
  853|   144k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  789|   325k|    auto do_presentation = [&]() -> const CharT* {
  790|   325k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (790:13): [True: 0, False: 325k]
  ------------------
  791|      0|            auto set = parse_presentation_set(begin, end, handler);
  792|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  793|       |                // clang-format off
  794|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|      0|                return begin;
  797|      0|            }
  798|      0|            handler.on_character_set_string(set);
  799|      0|            return begin;
  800|      0|        }
  801|   325k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (801:13): [True: 0, False: 325k]
  ------------------
  802|      0|            return parse_presentation_regex(begin, end, handler);
  803|      0|        }
  804|   325k|        presentation_type type = parse_presentation_type(*begin++);
  805|   325k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 72.3k, False: 253k]
  |  |  ------------------
  ------------------
  806|  72.3k|            handler.on_error("Invalid type specifier in format string");
  807|  72.3k|            return begin;
  808|  72.3k|        }
  809|   253k|        handler.on_type(type);
  810|   253k|        return begin;
  811|   325k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  488|   144k|{
  489|   144k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   144k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   144k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   144k|        switch (ch) {
  493|   144k|            case L'<':
  494|   144k|                return align_type::left;
  495|   144k|            case L'>':
  496|   144k|                return align_type::right;
  497|   144k|            case L'^':
  498|   144k|                return align_type::center;
  499|   144k|            default:
  500|   144k|                return align_type::none;
  501|   144k|        }
  502|   144k|    };
  503|       |
  504|   144k|    auto potential_fill_len = code_point_length(begin, end);
  505|   144k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   289k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 144k]
  |  |  |  Branch (153:45): [True: 0, False: 144k]
  |  |  |  Branch (153:45): [True: 0, False: 144k]
  |  |  ------------------
  ------------------
  506|   144k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   144k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   144k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   144k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   144k|    const auto begin_before_fill = begin;
  516|   144k|    begin += potential_fill_len;
  517|       |
  518|   144k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 144k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   144k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   144k|    const auto begin_after_fill = begin;
  524|   144k|    ++begin;
  525|       |
  526|   144k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 144k, False: 0]
  ------------------
  527|   144k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 144k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   144k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 144k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   144k|    }
  535|       |
  536|   144k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 144k, False: 0]
  ------------------
  537|   144k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 144k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   144k|        return begin_before_fill;
  542|   144k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   144k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|   289k|    auto check_align = [](wchar_t ch) {
  492|   289k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 289k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 289k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 289k]
  ------------------
  498|      0|                return align_type::center;
  499|   289k|            default:
  ------------------
  |  Branch (499:13): [True: 289k, False: 0]
  ------------------
  500|   289k|                return align_type::none;
  501|   289k|        }
  502|   289k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  553|   144k|{
  554|   144k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   144k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   144k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   144k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 72.3k, False: 72.3k]
  |  Branch (556:33): [True: 0, False: 72.3k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   144k|    return begin;
  567|   144k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 1044|  36.1k|    {
 1045|  36.1k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1046|  36.1k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1046:13): [True: 18.0k, False: 18.0k]
  ------------------
 1047|  36.1k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1047:13): [True: 0, False: 18.0k]
  ------------------
 1048|  36.1k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1048:13): [True: 0, False: 0]
  ------------------
 1049|  36.1k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1049:13): [True: 0, False: 0]
  ------------------
 1050|      0|            SCN_UNLIKELY_ATTR
 1051|       |            // clang-format off
 1052|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1053|       |            // clang-format on
 1054|      0|        }
 1055|       |
 1056|  36.1k|        Handler::on_localized();
 1057|  36.1k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  961|  5.78M|{
  962|  5.78M|    parse_format_string_impl<IsConstexpr>(format, handler);
  963|  5.78M|    handler.check_args_exhausted();
  964|  5.78M|    return handler.get_error();
  965|  5.78M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  927|  5.78M|{
  928|       |    // TODO: memchr fast path with a larger (> 32) format string
  929|       |
  930|  5.78M|    auto begin = format.data();
  931|  5.78M|    auto it = begin;
  932|  5.78M|    const auto end = format.data() + format.size();
  933|       |
  934|  10.5M|    while (it != end) {
  ------------------
  |  Branch (934:12): [True: 5.78M, False: 4.80M]
  ------------------
  935|  5.78M|        const auto ch = *it++;
  936|  5.78M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (936:13): [True: 5.78M, False: 0]
  ------------------
  937|  5.78M|            handler.on_literal_text(begin, it - 1);
  938|       |
  939|  5.78M|            begin = it = parse_replacement_field(it - 1, end, handler);
  940|  5.78M|            if (!handler) {
  ------------------
  |  Branch (940:17): [True: 976k, False: 4.80M]
  ------------------
  941|   976k|                return;
  942|   976k|            }
  943|  5.78M|        }
  944|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (944:18): [True: 0, False: 0]
  ------------------
  945|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  946|      0|                handler.on_error("Unmatched '}' in format string");
  947|      0|                return;
  948|      0|            }
  949|       |
  950|      0|            handler.on_literal_text(begin, it);
  951|      0|            begin = ++it;
  952|      0|        }
  953|  5.78M|    }
  954|       |
  955|  4.80M|    handler.on_literal_text(begin, end);
  956|  4.80M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
  859|  5.78M|{
  860|  5.78M|    struct id_adapter {
  861|  5.78M|        constexpr void operator()()
  862|  5.78M|        {
  863|  5.78M|            arg_id = handler.on_arg_id();
  864|  5.78M|        }
  865|  5.78M|        constexpr void operator()(std::size_t id)
  866|  5.78M|        {
  867|  5.78M|            arg_id = handler.on_arg_id(id);
  868|  5.78M|        }
  869|       |
  870|  5.78M|        constexpr void on_error(const char* msg)
  871|  5.78M|        {
  872|  5.78M|            SCN_UNLIKELY_ATTR
  873|  5.78M|            handler.on_error(msg);
  874|  5.78M|        }
  875|       |
  876|  5.78M|        Handler& handler;
  877|  5.78M|        std::size_t arg_id;
  878|  5.78M|    };
  879|       |
  880|  5.78M|    ++begin;
  881|  5.78M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  5.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.78M]
  |  |  ------------------
  ------------------
  882|      0|        handler.on_error("Unexpected end of replacement field");
  883|      0|        return begin;
  884|      0|    }
  885|       |
  886|  5.78M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (886:9): [True: 0, False: 5.78M]
  ------------------
  887|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  888|      0|    }
  889|  5.78M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (889:14): [True: 0, False: 5.78M]
  ------------------
  890|      0|        handler.on_literal_text(begin, begin + 1);
  891|      0|    }
  892|  5.78M|    else {
  893|  5.78M|        auto adapter = id_adapter{handler, 0};
  894|  5.78M|        begin = parse_arg_id(begin, end, adapter);
  895|       |
  896|  5.78M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  5.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.78M]
  |  |  ------------------
  ------------------
  897|      0|            handler.on_error("Missing '}' in format string");
  898|      0|            return begin;
  899|      0|        }
  900|       |
  901|  5.78M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (901:13): [True: 0, False: 5.78M]
  ------------------
  902|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  903|      0|        }
  904|  5.78M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (904:18): [True: 5.78M, False: 0]
  ------------------
  905|  5.78M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  5.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.78M]
  |  |  ------------------
  ------------------
  906|      0|                handler.on_error("Unexpected end of replacement field");
  907|      0|                return begin;
  908|      0|            }
  909|  5.78M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  910|  5.78M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  11.5M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 325k, False: 5.46M]
  |  |  |  Branch (153:45): [True: 0, False: 5.78M]
  |  |  |  Branch (153:45): [True: 325k, False: 5.46M]
  |  |  ------------------
  ------------------
  911|   325k|                handler.on_error("Unknown format specifier");
  912|   325k|                return begin;
  913|   325k|            }
  914|  5.78M|        }
  915|      0|        else {
  916|      0|            SCN_UNLIKELY_ATTR
  917|      0|            handler.on_error("Missing '}' in format string");
  918|      0|            return begin;
  919|      0|        }
  920|  5.78M|    }
  921|  5.46M|    return begin + 1;
  922|  5.78M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  5.78M|{
  400|  5.78M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  5.78M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.78M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  5.78M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 5.78M, False: 0]
  |  Branch (401:26): [True: 0, False: 5.78M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  5.78M|    handler();
  406|  5.78M|    return begin;
  407|  5.78M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  862|  5.78M|        {
  863|  5.78M|            arg_id = handler.on_arg_id();
  864|  5.78M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1039|  5.78M|    {
 1040|  5.78M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  5.78M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.78M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1041|  5.78M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  788|  5.78M|{
  789|  5.78M|    auto do_presentation = [&]() -> const CharT* {
  790|  5.78M|        if (*begin == CharT{'['}) {
  791|  5.78M|            auto set = parse_presentation_set(begin, end, handler);
  792|  5.78M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  793|       |                // clang-format off
  794|  5.78M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|  5.78M|                return begin;
  797|  5.78M|            }
  798|  5.78M|            handler.on_character_set_string(set);
  799|  5.78M|            return begin;
  800|  5.78M|        }
  801|  5.78M|        if (*begin == CharT{'/'}) {
  802|  5.78M|            return parse_presentation_regex(begin, end, handler);
  803|  5.78M|        }
  804|  5.78M|        presentation_type type = parse_presentation_type(*begin++);
  805|  5.78M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  806|  5.78M|            handler.on_error("Invalid type specifier in format string");
  807|  5.78M|            return begin;
  808|  5.78M|        }
  809|  5.78M|        handler.on_type(type);
  810|  5.78M|        return begin;
  811|  5.78M|    };
  812|       |
  813|  5.78M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (813:9): [True: 5.78M, False: 0]
  |  Branch (813:28): [True: 5.56M, False: 217k]
  ------------------
  814|  5.78M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (814:9): [True: 5.46M, False: 108k]
  |  Branch (814:36): [True: 4.02M, False: 1.43M]
  ------------------
  815|  4.02M|        return do_presentation();
  816|  4.02M|    }
  817|       |
  818|  1.75M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.75M]
  |  |  ------------------
  ------------------
  819|      0|        handler.on_error("Unexpected end of format string");
  820|      0|        return begin;
  821|      0|    }
  822|       |
  823|  1.75M|    begin = parse_align(begin, end, handler);
  824|  1.75M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.75M]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|  1.75M|    begin = parse_width(begin, end, handler);
  830|  1.75M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.75M]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|  1.75M|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (835:9): [True: 1.43M, False: 325k]
  ------------------
  836|  1.43M|        handler.on_localized();
  837|  1.43M|        ++begin;
  838|  1.43M|    }
  839|  1.75M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.75M]
  |  |  ------------------
  ------------------
  840|      0|        handler.on_error("Unexpected end of format string");
  841|      0|        return begin;
  842|      0|    }
  843|       |
  844|  1.75M|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (844:9): [True: 1.75M, False: 0]
  |  Branch (844:25): [True: 325k, False: 1.43M]
  ------------------
  845|   325k|        do_presentation();
  846|   325k|    }
  847|  1.75M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.75M]
  |  |  ------------------
  ------------------
  848|      0|        handler.on_error("Unexpected end of format string");
  849|      0|        return begin;
  850|      0|    }
  851|       |
  852|  1.75M|    return begin;
  853|  1.75M|}
_ZN3scn2v26detail15is_ascii_letterIwEEbT_:
  463|  6.40M|{
  464|  6.40M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 4.64M, False: 1.75M]
  |  Branch (464:33): [True: 4.64M, False: 0]
  ------------------
  465|  6.40M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 1.53M, False: 217k]
  |  Branch (465:33): [True: 1.53M, False: 0]
  ------------------
  466|  6.40M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  789|  4.35M|    auto do_presentation = [&]() -> const CharT* {
  790|  4.35M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (790:13): [True: 0, False: 4.35M]
  ------------------
  791|      0|            auto set = parse_presentation_set(begin, end, handler);
  792|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  793|       |                // clang-format off
  794|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|      0|                return begin;
  797|      0|            }
  798|      0|            handler.on_character_set_string(set);
  799|      0|            return begin;
  800|      0|        }
  801|  4.35M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (801:13): [True: 0, False: 4.35M]
  ------------------
  802|      0|            return parse_presentation_regex(begin, end, handler);
  803|      0|        }
  804|  4.35M|        presentation_type type = parse_presentation_type(*begin++);
  805|  4.35M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  4.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 217k, False: 4.13M]
  |  |  ------------------
  ------------------
  806|   217k|            handler.on_error("Invalid type specifier in format string");
  807|   217k|            return begin;
  808|   217k|        }
  809|  4.13M|        handler.on_type(type);
  810|  4.13M|        return begin;
  811|  4.35M|    };
_ZN3scn2v26detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
  411|  5.29M|{
  412|  5.29M|    switch (type) {
  413|   303k|        case 'b':
  ------------------
  |  Branch (413:9): [True: 303k, False: 4.99M]
  ------------------
  414|   520k|        case 'B':
  ------------------
  |  Branch (414:9): [True: 217k, False: 5.07M]
  ------------------
  415|   520k|            return presentation_type::int_binary;
  416|  1.14M|        case 'd':
  ------------------
  |  Branch (416:9): [True: 1.14M, False: 4.14M]
  ------------------
  417|  1.14M|            return presentation_type::int_decimal;
  418|  1.54M|        case 'i':
  ------------------
  |  Branch (418:9): [True: 1.54M, False: 3.75M]
  ------------------
  419|  1.54M|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 5.29M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|   459k|        case 'o':
  ------------------
  |  Branch (422:9): [True: 459k, False: 4.83M]
  ------------------
  423|   459k|            return presentation_type::int_octal;
  424|  1.19M|        case 'x':
  ------------------
  |  Branch (424:9): [True: 1.19M, False: 4.10M]
  ------------------
  425|  1.19M|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 5.29M]
  ------------------
  426|  1.19M|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 5.29M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 5.29M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|      0|        case 'a':
  ------------------
  |  Branch (430:9): [True: 0, False: 5.29M]
  ------------------
  431|      0|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 5.29M]
  ------------------
  432|      0|            return presentation_type::float_hex;
  433|      0|        case 'e':
  ------------------
  |  Branch (433:9): [True: 0, False: 5.29M]
  ------------------
  434|      0|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 5.29M]
  ------------------
  435|      0|            return presentation_type::float_scientific;
  436|      0|        case 'f':
  ------------------
  |  Branch (436:9): [True: 0, False: 5.29M]
  ------------------
  437|      0|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 5.29M]
  ------------------
  438|      0|            return presentation_type::float_fixed;
  439|      0|        case 'g':
  ------------------
  |  Branch (439:9): [True: 0, False: 5.29M]
  ------------------
  440|      0|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 5.29M]
  ------------------
  441|      0|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 5.29M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 5.29M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 5.29M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 5.29M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 5.29M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 5.29M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|   434k|        default:
  ------------------
  |  Branch (456:9): [True: 434k, False: 4.86M]
  ------------------
  457|   434k|            return presentation_type::none;
  458|  5.29M|    }
  459|  5.29M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  488|  1.75M|{
  489|  1.75M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|  1.75M|        switch (ch) {
  493|  1.75M|            case L'<':
  494|  1.75M|                return align_type::left;
  495|  1.75M|            case L'>':
  496|  1.75M|                return align_type::right;
  497|  1.75M|            case L'^':
  498|  1.75M|                return align_type::center;
  499|  1.75M|            default:
  500|  1.75M|                return align_type::none;
  501|  1.75M|        }
  502|  1.75M|    };
  503|       |
  504|  1.75M|    auto potential_fill_len = code_point_length(begin, end);
  505|  1.75M|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|  3.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.75M]
  |  |  |  Branch (153:45): [True: 0, False: 1.75M]
  |  |  |  Branch (153:45): [True: 0, False: 1.75M]
  |  |  ------------------
  ------------------
  506|  1.75M|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|  1.75M|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|  1.75M|    auto potential_fill = std::basic_string_view<CharT>{
  514|  1.75M|        begin, static_cast<size_t>(potential_fill_len)};
  515|  1.75M|    const auto begin_before_fill = begin;
  516|  1.75M|    begin += potential_fill_len;
  517|       |
  518|  1.75M|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 1.75M]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|  1.75M|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|  1.75M|    const auto begin_after_fill = begin;
  524|  1.75M|    ++begin;
  525|       |
  526|  1.75M|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 1.75M, False: 0]
  ------------------
  527|  1.75M|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.75M]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|  1.75M|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 1.75M]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|  1.75M|    }
  535|       |
  536|  1.75M|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 1.75M, False: 0]
  ------------------
  537|  1.75M|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 1.75M]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|  1.75M|        return begin_before_fill;
  542|  1.75M|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|  1.75M|}
_ZN3scn2v26detail17code_point_lengthIwEEiPKT_S5_:
  470|  2.19M|{
  471|  2.19M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  2.19M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.19M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|  2.19M|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|  2.19M|        return 1;
  474|  2.19M|    }
  475|  2.19M|    else {
  476|  2.19M|        const auto lengths =
  477|  2.19M|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|  2.19M|            "\3\4";
  479|  2.19M|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|  2.19M|        return len;
  481|  2.19M|    }
  482|  2.19M|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|  3.51M|    auto check_align = [](wchar_t ch) {
  492|  3.51M|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 3.51M]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 3.51M]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 3.51M]
  ------------------
  498|      0|                return align_type::center;
  499|  3.51M|            default:
  ------------------
  |  Branch (499:13): [True: 3.51M, False: 0]
  ------------------
  500|  3.51M|                return align_type::none;
  501|  3.51M|        }
  502|  3.51M|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  553|  1.75M|{
  554|  1.75M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|  1.75M|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 1.53M, False: 217k]
  |  Branch (556:33): [True: 0, False: 1.53M]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|  1.75M|    return begin;
  567|  1.75M|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 1044|  1.43M|    {
 1045|  1.43M|        const auto cat = get_category_for_arg_type(m_arg_type);
 1046|  1.43M|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1046:13): [True: 669k, False: 761k]
  ------------------
 1047|  1.43M|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1047:13): [True: 0, False: 669k]
  ------------------
 1048|  1.43M|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1048:13): [True: 0, False: 0]
  ------------------
 1049|  1.43M|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1049:13): [True: 0, False: 0]
  ------------------
 1050|      0|            SCN_UNLIKELY_ATTR
 1051|       |            // clang-format off
 1052|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1053|       |            // clang-format on
 1054|      0|        }
 1055|       |
 1056|  1.43M|        Handler::on_localized();
 1057|  1.43M|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  961|  1.04M|{
  962|  1.04M|    parse_format_string_impl<IsConstexpr>(format, handler);
  963|  1.04M|    handler.check_args_exhausted();
  964|  1.04M|    return handler.get_error();
  965|  1.04M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  927|  1.04M|{
  928|       |    // TODO: memchr fast path with a larger (> 32) format string
  929|       |
  930|  1.04M|    auto begin = format.data();
  931|  1.04M|    auto it = begin;
  932|  1.04M|    const auto end = format.data() + format.size();
  933|       |
  934|  1.12M|    while (it != end) {
  ------------------
  |  Branch (934:12): [True: 1.04M, False: 72.3k]
  ------------------
  935|  1.04M|        const auto ch = *it++;
  936|  1.04M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (936:13): [True: 1.04M, False: 0]
  ------------------
  937|  1.04M|            handler.on_literal_text(begin, it - 1);
  938|       |
  939|  1.04M|            begin = it = parse_replacement_field(it - 1, end, handler);
  940|  1.04M|            if (!handler) {
  ------------------
  |  Branch (940:17): [True: 976k, False: 72.3k]
  ------------------
  941|   976k|                return;
  942|   976k|            }
  943|  1.04M|        }
  944|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (944:18): [True: 0, False: 0]
  ------------------
  945|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  946|      0|                handler.on_error("Unmatched '}' in format string");
  947|      0|                return;
  948|      0|            }
  949|       |
  950|      0|            handler.on_literal_text(begin, it);
  951|      0|            begin = ++it;
  952|      0|        }
  953|  1.04M|    }
  954|       |
  955|  72.3k|    handler.on_literal_text(begin, end);
  956|  72.3k|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
  859|  1.04M|{
  860|  1.04M|    struct id_adapter {
  861|  1.04M|        constexpr void operator()()
  862|  1.04M|        {
  863|  1.04M|            arg_id = handler.on_arg_id();
  864|  1.04M|        }
  865|  1.04M|        constexpr void operator()(std::size_t id)
  866|  1.04M|        {
  867|  1.04M|            arg_id = handler.on_arg_id(id);
  868|  1.04M|        }
  869|       |
  870|  1.04M|        constexpr void on_error(const char* msg)
  871|  1.04M|        {
  872|  1.04M|            SCN_UNLIKELY_ATTR
  873|  1.04M|            handler.on_error(msg);
  874|  1.04M|        }
  875|       |
  876|  1.04M|        Handler& handler;
  877|  1.04M|        std::size_t arg_id;
  878|  1.04M|    };
  879|       |
  880|  1.04M|    ++begin;
  881|  1.04M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.04M]
  |  |  ------------------
  ------------------
  882|      0|        handler.on_error("Unexpected end of replacement field");
  883|      0|        return begin;
  884|      0|    }
  885|       |
  886|  1.04M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (886:9): [True: 0, False: 1.04M]
  ------------------
  887|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  888|      0|    }
  889|  1.04M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (889:14): [True: 0, False: 1.04M]
  ------------------
  890|      0|        handler.on_literal_text(begin, begin + 1);
  891|      0|    }
  892|  1.04M|    else {
  893|  1.04M|        auto adapter = id_adapter{handler, 0};
  894|  1.04M|        begin = parse_arg_id(begin, end, adapter);
  895|       |
  896|  1.04M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.04M]
  |  |  ------------------
  ------------------
  897|      0|            handler.on_error("Missing '}' in format string");
  898|      0|            return begin;
  899|      0|        }
  900|       |
  901|  1.04M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (901:13): [True: 0, False: 1.04M]
  ------------------
  902|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  903|      0|        }
  904|  1.04M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (904:18): [True: 1.04M, False: 0]
  ------------------
  905|  1.04M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.04M]
  |  |  ------------------
  ------------------
  906|      0|                handler.on_error("Unexpected end of replacement field");
  907|      0|                return begin;
  908|      0|            }
  909|  1.04M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  910|  1.04M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  2.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 325k, False: 723k]
  |  |  |  Branch (153:45): [True: 0, False: 1.04M]
  |  |  |  Branch (153:45): [True: 325k, False: 723k]
  |  |  ------------------
  ------------------
  911|   325k|                handler.on_error("Unknown format specifier");
  912|   325k|                return begin;
  913|   325k|            }
  914|  1.04M|        }
  915|      0|        else {
  916|      0|            SCN_UNLIKELY_ATTR
  917|      0|            handler.on_error("Missing '}' in format string");
  918|      0|            return begin;
  919|      0|        }
  920|  1.04M|    }
  921|   723k|    return begin + 1;
  922|  1.04M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  1.04M|{
  400|  1.04M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  1.04M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 1.04M, False: 0]
  |  Branch (401:26): [True: 0, False: 1.04M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  1.04M|    handler();
  406|  1.04M|    return begin;
  407|  1.04M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  862|  1.04M|        {
  863|  1.04M|            arg_id = handler.on_arg_id();
  864|  1.04M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1039|  1.04M|    {
 1040|  1.04M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  1.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1041|  1.04M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  788|  1.04M|{
  789|  1.04M|    auto do_presentation = [&]() -> const CharT* {
  790|  1.04M|        if (*begin == CharT{'['}) {
  791|  1.04M|            auto set = parse_presentation_set(begin, end, handler);
  792|  1.04M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  793|       |                // clang-format off
  794|  1.04M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|  1.04M|                return begin;
  797|  1.04M|            }
  798|  1.04M|            handler.on_character_set_string(set);
  799|  1.04M|            return begin;
  800|  1.04M|        }
  801|  1.04M|        if (*begin == CharT{'/'}) {
  802|  1.04M|            return parse_presentation_regex(begin, end, handler);
  803|  1.04M|        }
  804|  1.04M|        presentation_type type = parse_presentation_type(*begin++);
  805|  1.04M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  806|  1.04M|            handler.on_error("Invalid type specifier in format string");
  807|  1.04M|            return begin;
  808|  1.04M|        }
  809|  1.04M|        handler.on_type(type);
  810|  1.04M|        return begin;
  811|  1.04M|    };
  812|       |
  813|  1.04M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (813:9): [True: 1.04M, False: 0]
  |  Branch (813:28): [True: 831k, False: 217k]
  ------------------
  814|  1.04M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (814:9): [True: 723k, False: 108k]
  |  Branch (814:36): [True: 614k, False: 108k]
  ------------------
  815|   614k|        return do_presentation();
  816|   614k|    }
  817|       |
  818|   434k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   434k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 434k]
  |  |  ------------------
  ------------------
  819|      0|        handler.on_error("Unexpected end of format string");
  820|      0|        return begin;
  821|      0|    }
  822|       |
  823|   434k|    begin = parse_align(begin, end, handler);
  824|   434k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   434k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 434k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   434k|    begin = parse_width(begin, end, handler);
  830|   434k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   434k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 434k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   434k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (835:9): [True: 108k, False: 325k]
  ------------------
  836|   108k|        handler.on_localized();
  837|   108k|        ++begin;
  838|   108k|    }
  839|   434k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   434k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 434k]
  |  |  ------------------
  ------------------
  840|      0|        handler.on_error("Unexpected end of format string");
  841|      0|        return begin;
  842|      0|    }
  843|       |
  844|   434k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (844:9): [True: 434k, False: 0]
  |  Branch (844:25): [True: 325k, False: 108k]
  ------------------
  845|   325k|        do_presentation();
  846|   325k|    }
  847|   434k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   434k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 434k]
  |  |  ------------------
  ------------------
  848|      0|        handler.on_error("Unexpected end of format string");
  849|      0|        return begin;
  850|      0|    }
  851|       |
  852|   434k|    return begin;
  853|   434k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  789|   940k|    auto do_presentation = [&]() -> const CharT* {
  790|   940k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (790:13): [True: 0, False: 940k]
  ------------------
  791|      0|            auto set = parse_presentation_set(begin, end, handler);
  792|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  793|       |                // clang-format off
  794|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|      0|                return begin;
  797|      0|            }
  798|      0|            handler.on_character_set_string(set);
  799|      0|            return begin;
  800|      0|        }
  801|   940k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (801:13): [True: 0, False: 940k]
  ------------------
  802|      0|            return parse_presentation_regex(begin, end, handler);
  803|      0|        }
  804|   940k|        presentation_type type = parse_presentation_type(*begin++);
  805|   940k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|   940k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 217k, False: 723k]
  |  |  ------------------
  ------------------
  806|   217k|            handler.on_error("Invalid type specifier in format string");
  807|   217k|            return begin;
  808|   217k|        }
  809|   723k|        handler.on_type(type);
  810|   723k|        return begin;
  811|   940k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  488|   434k|{
  489|   434k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   434k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   434k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   434k|        switch (ch) {
  493|   434k|            case L'<':
  494|   434k|                return align_type::left;
  495|   434k|            case L'>':
  496|   434k|                return align_type::right;
  497|   434k|            case L'^':
  498|   434k|                return align_type::center;
  499|   434k|            default:
  500|   434k|                return align_type::none;
  501|   434k|        }
  502|   434k|    };
  503|       |
  504|   434k|    auto potential_fill_len = code_point_length(begin, end);
  505|   434k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   868k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 434k]
  |  |  |  Branch (153:45): [True: 0, False: 434k]
  |  |  |  Branch (153:45): [True: 0, False: 434k]
  |  |  ------------------
  ------------------
  506|   434k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   434k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   434k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   434k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   434k|    const auto begin_before_fill = begin;
  516|   434k|    begin += potential_fill_len;
  517|       |
  518|   434k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 434k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   434k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   434k|    const auto begin_after_fill = begin;
  524|   434k|    ++begin;
  525|       |
  526|   434k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 434k, False: 0]
  ------------------
  527|   434k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   434k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 434k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   434k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 434k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   434k|    }
  535|       |
  536|   434k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 434k, False: 0]
  ------------------
  537|   434k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 434k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   434k|        return begin_before_fill;
  542|   434k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   434k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|   868k|    auto check_align = [](wchar_t ch) {
  492|   868k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 868k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 868k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 868k]
  ------------------
  498|      0|                return align_type::center;
  499|   868k|            default:
  ------------------
  |  Branch (499:13): [True: 868k, False: 0]
  ------------------
  500|   868k|                return align_type::none;
  501|   868k|        }
  502|   868k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  553|   434k|{
  554|   434k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   434k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   434k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   434k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 217k, False: 217k]
  |  Branch (556:33): [True: 0, False: 217k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   434k|    return begin;
  567|   434k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 1044|   108k|    {
 1045|   108k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1046|   108k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1046:13): [True: 54.2k, False: 54.2k]
  ------------------
 1047|   108k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1047:13): [True: 0, False: 54.2k]
  ------------------
 1048|   108k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1048:13): [True: 0, False: 0]
  ------------------
 1049|   108k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1049:13): [True: 0, False: 0]
  ------------------
 1050|      0|            SCN_UNLIKELY_ATTR
 1051|       |            // clang-format off
 1052|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1053|       |            // clang-format on
 1054|      0|        }
 1055|       |
 1056|   108k|        Handler::on_localized();
 1057|   108k|    }

_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  8.66M|{
  226|  8.66M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  8.66M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  8.66M|                  "\n"
  230|  8.66M|                  "Unsupported range type given as input to a scanning "
  231|  8.66M|                  "function.\n"
  232|  8.66M|                  "A range needs to have a character type (value type) "
  233|  8.66M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  8.66M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  8.66M|                  "to be included.\n"
  236|  8.66M|                  "See the scnlib documentation for more details.");
  237|  8.66M|    static_assert(
  238|  8.66M|        !std::is_same_v<T, custom_char_traits>,
  239|  8.66M|        "\n"
  240|  8.66M|        "Unsupported range type given as input to a scanning "
  241|  8.66M|        "function.\n"
  242|  8.66M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  8.66M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  8.66M|        "not supported.");
  245|  8.66M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  8.66M|                  "\n"
  247|  8.66M|                  "Unsupported range type given as input to a scanning "
  248|  8.66M|                  "function.\n"
  249|  8.66M|                  "file_marker_found cannot be used as an "
  250|  8.66M|                  "source range type to scn::scan.\n"
  251|  8.66M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  8.66M|                  "and do not provide an explicit source range, "
  253|  8.66M|                  "or use scn::scan with a FILE* directly.");
  254|  8.66M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  8.66M|                  "\n"
  256|  8.66M|                  "Unsupported range type given as input to a scanning "
  257|  8.66M|                  "function.\n"
  258|  8.66M|                  "In order to be scannable, a range needs to satisfy "
  259|  8.66M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  8.66M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  8.66M|                  "\n"
  262|  8.66M|                  "Unsupported range type given as input to a scanning "
  263|  8.66M|                  "function.\n"
  264|  8.66M|                  "A range needs to model forward_range and have a valid "
  265|  8.66M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  8.66M|                  "Examples of scannable ranges are std::string, "
  267|  8.66M|                  "std::string_view, "
  268|  8.66M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  8.66M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  8.66M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  8.66M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  8.66M|{
  153|  8.66M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  8.66M|        return std::basic_string_view{ranges::data(r),
  155|  8.66M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  8.66M|    }
  162|  8.66M|    else {
  163|  8.66M|        return invalid_char_type{};
  164|  8.66M|    }
  165|  8.66M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|   415k|{
  226|   415k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   415k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   415k|                  "\n"
  230|   415k|                  "Unsupported range type given as input to a scanning "
  231|   415k|                  "function.\n"
  232|   415k|                  "A range needs to have a character type (value type) "
  233|   415k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   415k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   415k|                  "to be included.\n"
  236|   415k|                  "See the scnlib documentation for more details.");
  237|   415k|    static_assert(
  238|   415k|        !std::is_same_v<T, custom_char_traits>,
  239|   415k|        "\n"
  240|   415k|        "Unsupported range type given as input to a scanning "
  241|   415k|        "function.\n"
  242|   415k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   415k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   415k|        "not supported.");
  245|   415k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   415k|                  "\n"
  247|   415k|                  "Unsupported range type given as input to a scanning "
  248|   415k|                  "function.\n"
  249|   415k|                  "file_marker_found cannot be used as an "
  250|   415k|                  "source range type to scn::scan.\n"
  251|   415k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   415k|                  "and do not provide an explicit source range, "
  253|   415k|                  "or use scn::scan with a FILE* directly.");
  254|   415k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   415k|                  "\n"
  256|   415k|                  "Unsupported range type given as input to a scanning "
  257|   415k|                  "function.\n"
  258|   415k|                  "In order to be scannable, a range needs to satisfy "
  259|   415k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   415k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   415k|                  "\n"
  262|   415k|                  "Unsupported range type given as input to a scanning "
  263|   415k|                  "function.\n"
  264|   415k|                  "A range needs to model forward_range and have a valid "
  265|   415k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   415k|                  "Examples of scannable ranges are std::string, "
  267|   415k|                  "std::string_view, "
  268|   415k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   415k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   415k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   415k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|   415k|{
  196|   415k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|   415k|        return file_marker_found{};
  198|   415k|    }
  199|   415k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|   415k|        if constexpr (ranges::input_range<Range>) {
  201|   415k|            return insufficient_range{};
  202|   415k|        }
  203|   415k|        else {
  204|   415k|            return invalid_input_range{};
  205|   415k|        }
  206|   415k|    }
  207|   415k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|   415k|        return invalid_char_type{};
  209|   415k|    }
  210|   415k|    else {
  211|   415k|        return make_forward_scan_buffer(r);
  212|   415k|    }
  213|   415k|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  7.93M|{
  226|  7.93M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  7.93M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  7.93M|                  "\n"
  230|  7.93M|                  "Unsupported range type given as input to a scanning "
  231|  7.93M|                  "function.\n"
  232|  7.93M|                  "A range needs to have a character type (value type) "
  233|  7.93M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  7.93M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  7.93M|                  "to be included.\n"
  236|  7.93M|                  "See the scnlib documentation for more details.");
  237|  7.93M|    static_assert(
  238|  7.93M|        !std::is_same_v<T, custom_char_traits>,
  239|  7.93M|        "\n"
  240|  7.93M|        "Unsupported range type given as input to a scanning "
  241|  7.93M|        "function.\n"
  242|  7.93M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  7.93M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  7.93M|        "not supported.");
  245|  7.93M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  7.93M|                  "\n"
  247|  7.93M|                  "Unsupported range type given as input to a scanning "
  248|  7.93M|                  "function.\n"
  249|  7.93M|                  "file_marker_found cannot be used as an "
  250|  7.93M|                  "source range type to scn::scan.\n"
  251|  7.93M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  7.93M|                  "and do not provide an explicit source range, "
  253|  7.93M|                  "or use scn::scan with a FILE* directly.");
  254|  7.93M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  7.93M|                  "\n"
  256|  7.93M|                  "Unsupported range type given as input to a scanning "
  257|  7.93M|                  "function.\n"
  258|  7.93M|                  "In order to be scannable, a range needs to satisfy "
  259|  7.93M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  7.93M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  7.93M|                  "\n"
  262|  7.93M|                  "Unsupported range type given as input to a scanning "
  263|  7.93M|                  "function.\n"
  264|  7.93M|                  "A range needs to model forward_range and have a valid "
  265|  7.93M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  7.93M|                  "Examples of scannable ranges are std::string, "
  267|  7.93M|                  "std::string_view, "
  268|  7.93M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  7.93M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  7.93M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  7.93M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  7.93M|{
  153|  7.93M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  7.93M|        return std::basic_string_view{ranges::data(r),
  155|  7.93M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  7.93M|    }
  162|  7.93M|    else {
  163|  7.93M|        return invalid_char_type{};
  164|  7.93M|    }
  165|  7.93M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  1.21M|{
  226|  1.21M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  1.21M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  1.21M|                  "\n"
  230|  1.21M|                  "Unsupported range type given as input to a scanning "
  231|  1.21M|                  "function.\n"
  232|  1.21M|                  "A range needs to have a character type (value type) "
  233|  1.21M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  1.21M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  1.21M|                  "to be included.\n"
  236|  1.21M|                  "See the scnlib documentation for more details.");
  237|  1.21M|    static_assert(
  238|  1.21M|        !std::is_same_v<T, custom_char_traits>,
  239|  1.21M|        "\n"
  240|  1.21M|        "Unsupported range type given as input to a scanning "
  241|  1.21M|        "function.\n"
  242|  1.21M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  1.21M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  1.21M|        "not supported.");
  245|  1.21M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  1.21M|                  "\n"
  247|  1.21M|                  "Unsupported range type given as input to a scanning "
  248|  1.21M|                  "function.\n"
  249|  1.21M|                  "file_marker_found cannot be used as an "
  250|  1.21M|                  "source range type to scn::scan.\n"
  251|  1.21M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  1.21M|                  "and do not provide an explicit source range, "
  253|  1.21M|                  "or use scn::scan with a FILE* directly.");
  254|  1.21M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  1.21M|                  "\n"
  256|  1.21M|                  "Unsupported range type given as input to a scanning "
  257|  1.21M|                  "function.\n"
  258|  1.21M|                  "In order to be scannable, a range needs to satisfy "
  259|  1.21M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  1.21M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  1.21M|                  "\n"
  262|  1.21M|                  "Unsupported range type given as input to a scanning "
  263|  1.21M|                  "function.\n"
  264|  1.21M|                  "A range needs to model forward_range and have a valid "
  265|  1.21M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  1.21M|                  "Examples of scannable ranges are std::string, "
  267|  1.21M|                  "std::string_view, "
  268|  1.21M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  1.21M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  1.21M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  1.21M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|  1.21M|{
  196|  1.21M|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|  1.21M|        return file_marker_found{};
  198|  1.21M|    }
  199|  1.21M|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|  1.21M|        if constexpr (ranges::input_range<Range>) {
  201|  1.21M|            return insufficient_range{};
  202|  1.21M|        }
  203|  1.21M|        else {
  204|  1.21M|            return invalid_input_range{};
  205|  1.21M|        }
  206|  1.21M|    }
  207|  1.21M|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|  1.21M|        return invalid_char_type{};
  209|  1.21M|    }
  210|  1.21M|    else {
  211|  1.21M|        return make_forward_scan_buffer(r);
  212|  1.21M|    }
  213|  1.21M|}

_ZN3scn2v26detail10locale_refC2Ev:
   29|  13.1M|    constexpr locale_ref() = default;

_ZN3scn2v224basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
   44|  6.53M|    {
   45|  6.53M|    }
_ZN3scn2v224basic_scan_parse_contextIcE11next_arg_idEv:
   65|  6.53M|    {
   66|  6.53M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  6.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 6.53M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  6.53M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  6.53M|        do_check_arg_id(id);
   74|  6.53M|        return id;
   75|  6.53M|    }
_ZN3scn2v224basic_scan_parse_contextIcE15do_check_arg_idEm:
  209|  6.53M|{
  210|  6.53M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  6.53M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  6.53M|}
_ZN3scn2v224basic_scan_parse_contextIcE10advance_toEPKc:
   60|  6.31M|    {
   61|  6.31M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  6.31M|    }
_ZNK3scn2v224basic_scan_parse_contextIcE5beginEv:
   49|  12.8M|    {
   50|  12.8M|        return m_format.data();
   51|  12.8M|    }
_ZN3scn2v224basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
   44|  6.83M|    {
   45|  6.83M|    }
_ZN3scn2v224basic_scan_parse_contextIwE11next_arg_idEv:
   65|  6.83M|    {
   66|  6.83M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  6.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 6.83M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  6.83M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  6.83M|        do_check_arg_id(id);
   74|  6.83M|        return id;
   75|  6.83M|    }
_ZN3scn2v224basic_scan_parse_contextIwE15do_check_arg_idEm:
  209|  6.83M|{
  210|  6.83M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  6.83M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  6.83M|}
_ZN3scn2v224basic_scan_parse_contextIwE10advance_toEPKw:
   60|  6.18M|    {
   61|  6.18M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  6.18M|    }
_ZNK3scn2v224basic_scan_parse_contextIwE5beginEv:
   49|  13.0M|    {
   50|  13.0M|        return m_format.data();
   51|  13.0M|    }

_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIccEEDaSH_SR_:
  153|   524k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSE_T0_E_clIwcEEDaSE_SO_:
  153|  25.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIwcEEDaSH_SR_:
  153|  1.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  17.1M|    {
  482|  17.1M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  17.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  17.1M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmNSH_13make_unsignedISR_E4typeEE4typeE_EEOSK_:
  472|  17.1M|    {
  473|  17.1M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  17.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  17.1M|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  7.93M|    {
  482|  7.93M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  7.93M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  7.93M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmNSH_13make_unsignedISR_E4typeEE4typeE_EEOSK_:
  472|  7.93M|    {
  473|  7.93M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  7.93M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  7.93M|    }
_ZNK3scn2v24r_pf19prev_backtrack_impl2fnclIPKcEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm2EEEEEET_SB_:
  593|  2.53M|    {
  594|  2.53M|        return fn::impl(it, beg, detail::priority_tag<2>{});
  595|  2.53M|    }
_ZN3scn2v24r_pf19prev_backtrack_impl2fn4implIPKcEENSt3__19enable_ifIXsr10ranges_stdE22bidirectional_iteratorIT_EES9_E4typeES9_S9_NS0_6detail12priority_tagILm2EEE:
  563|  2.53M|    {
  564|  2.53M|        return ranges::prev(it);
  565|  2.53M|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  4.98M|    {
  482|  4.98M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  4.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  4.98M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|  4.98M|    {
  473|  4.98M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  4.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  4.98M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclIPKcEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_l:
  512|  5.74M|    {
  513|  5.74M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  5.74M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implIPKcEEDaT_lNS0_6detail12priority_tagILm0EEE:
  504|  5.74M|    {
  505|  5.74M|        return ranges::next(it, n);
  506|  5.74M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKcS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  5.87M|    {
  549|  5.87M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  5.87M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKcS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  5.87M|    {
  541|  5.87M|        return ranges::distance(lhs, rhs);
  542|  5.87M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|   867k|    {
  513|   867k|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|   867k|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcldtfp_13batch_advancefp0_Efp_EE4typeEE4typeET_lNS5_12priority_tagILm1EEE:
  497|   867k|    {
  498|   867k|        it.batch_advance(n);
  499|   867k|        return it;
  500|   867k|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_T0_:
  548|  36.1k|    {
  549|  36.1k|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  36.1k|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTmicldtfp0_8positionEcldtfp_8positionEEE4typeEE4typeET_SH_NS5_12priority_tagILm1EEE:
  533|  36.1k|    {
  534|  36.1k|        return rhs.position() - lhs.position();
  535|  36.1k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  4.59M|    {
  482|  4.59M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  4.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  4.59M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|  4.59M|    {
  473|  4.59M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  4.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  4.59M|    }
_ZNK3scn2v24r_pf19prev_backtrack_impl2fnclIPKwEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm2EEEEEET_SB_:
  593|  2.07M|    {
  594|  2.07M|        return fn::impl(it, beg, detail::priority_tag<2>{});
  595|  2.07M|    }
_ZN3scn2v24r_pf19prev_backtrack_impl2fn4implIPKwEENSt3__19enable_ifIXsr10ranges_stdE22bidirectional_iteratorIT_EES9_E4typeES9_S9_NS0_6detail12priority_tagILm2EEE:
  563|  2.07M|    {
  564|  2.07M|        return ranges::prev(it);
  565|  2.07M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclIPKwEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_l:
  512|  4.72M|    {
  513|  4.72M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  4.72M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implIPKwEEDaT_lNS0_6detail12priority_tagILm0EEE:
  504|  4.72M|    {
  505|  4.72M|        return ranges::next(it, n);
  506|  4.72M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKwS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  4.84M|    {
  549|  4.84M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  4.84M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKwS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  4.84M|    {
  541|  4.84M|        return ranges::distance(lhs, rhs);
  542|  4.84M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|  2.49M|    {
  513|  2.49M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  2.49M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcldtfp_13batch_advancefp0_Efp_EE4typeEE4typeET_lNS5_12priority_tagILm1EEE:
  497|  2.49M|    {
  498|  2.49M|        it.batch_advance(n);
  499|  2.49M|        return it;
  500|  2.49M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_T0_:
  548|  72.3k|    {
  549|  72.3k|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  72.3k|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTmicldtfp0_8positionEcldtfp_8positionEEE4typeEE4typeET_SH_NS5_12priority_tagILm1EEE:
  533|  72.3k|    {
  534|  72.3k|        return rhs.position() - lhs.position();
  535|  72.3k|    }

_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  8.28M|{
  343|  8.28M|    return {ranges::next(ranges::begin(source), n),
  344|  8.28M|            make_vscan_result_range_end(source)};
  345|  8.28M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  8.28M|{
  330|  8.28M|    return ranges::end(source);
  331|  8.28M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEC2ES9_ONSt3__15tupleIJaEEE:
  252|  1.06M|    {
  253|  1.06M|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  8.28M|    {
  104|  8.28M|    }
_ZN3scn2v26detail25scan_result_value_storageIJaEEC2EONSt3__15tupleIJaEEE:
   38|  1.93M|    {
   39|  1.93M|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  8.28M|    {
  121|  8.28M|        return ranges::begin(m_range);
  122|  8.28M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEC2ES9_ONSt3__15tupleIJhEEE:
  252|  1.08M|    {
  253|  1.08M|    }
_ZN3scn2v26detail25scan_result_value_storageIJhEEC2EONSt3__15tupleIJhEEE:
   38|  1.97M|    {
   39|  1.97M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEC2ES9_ONSt3__15tupleIJiEEE:
  252|  1.65M|    {
  253|  1.65M|    }
_ZN3scn2v26detail25scan_result_value_storageIJiEEC2EONSt3__15tupleIJiEEE:
   38|  3.04M|    {
   39|  3.04M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEC2ES9_ONSt3__15tupleIJjEEE:
  252|  1.36M|    {
  253|  1.36M|    }
_ZN3scn2v26detail25scan_result_value_storageIJjEEC2EONSt3__15tupleIJjEEE:
   38|  2.51M|    {
   39|  2.51M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEC2ES9_ONSt3__15tupleIJxEEE:
  252|  1.71M|    {
  253|  1.71M|    }
_ZN3scn2v26detail25scan_result_value_storageIJxEEC2EONSt3__15tupleIJxEEE:
   38|  3.14M|    {
   39|  3.14M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEC2ES9_ONSt3__15tupleIJyEEE:
  252|  1.39M|    {
  253|  1.39M|    }
_ZN3scn2v26detail25scan_result_value_storageIJyEEC2EONSt3__15tupleIJyEEE:
   38|  2.57M|    {
   39|  2.57M|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_l:
  342|  36.1k|{
  343|  36.1k|    return {ranges::next(ranges::begin(source), n),
  344|  36.1k|            make_vscan_result_range_end(source)};
  345|  36.1k|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  36.1k|{
  330|  36.1k|    return ranges::end(source);
  331|  36.1k|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEC2ESF_ONS6_5tupleIJaEEE:
  252|  6.02k|    {
  253|  6.02k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEC2EOSG_:
  103|  36.1k|    {
  104|  36.1k|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  36.1k|    {
  121|  36.1k|        return ranges::begin(m_range);
  122|  36.1k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEC2ESF_ONS6_5tupleIJhEEE:
  252|  6.02k|    {
  253|  6.02k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEC2ESF_ONS6_5tupleIJiEEE:
  252|  6.02k|    {
  253|  6.02k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEC2ESF_ONS6_5tupleIJjEEE:
  252|  6.02k|    {
  253|  6.02k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEC2ESF_ONS6_5tupleIJxEEE:
  252|  6.02k|    {
  253|  6.02k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEC2ESF_ONS6_5tupleIJyEEE:
  252|  6.02k|    {
  253|  6.02k|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  6.79M|{
  343|  6.79M|    return {ranges::next(ranges::begin(source), n),
  344|  6.79M|            make_vscan_result_range_end(source)};
  345|  6.79M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  6.79M|{
  330|  6.79M|    return ranges::end(source);
  331|  6.79M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEC2ES9_ONSt3__15tupleIJaEEE:
  252|   864k|    {
  253|   864k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  6.79M|    {
  104|  6.79M|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  6.79M|    {
  121|  6.79M|        return ranges::begin(m_range);
  122|  6.79M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEC2ES9_ONSt3__15tupleIJhEEE:
  252|   886k|    {
  253|   886k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEC2ES9_ONSt3__15tupleIJiEEE:
  252|  1.36M|    {
  253|  1.36M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEC2ES9_ONSt3__15tupleIJjEEE:
  252|  1.12M|    {
  253|  1.12M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEC2ES9_ONSt3__15tupleIJxEEE:
  252|  1.40M|    {
  253|  1.40M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEC2ES9_ONSt3__15tupleIJyEEE:
  252|  1.15M|    {
  253|  1.15M|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_l:
  342|  72.3k|{
  343|  72.3k|    return {ranges::next(ranges::begin(source), n),
  344|  72.3k|            make_vscan_result_range_end(source)};
  345|  72.3k|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  72.3k|{
  330|  72.3k|    return ranges::end(source);
  331|  72.3k|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEC2ESF_ONS6_5tupleIJaEEE:
  252|      2|    {
  253|      2|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEC2EOSG_:
  103|  72.3k|    {
  104|  72.3k|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  72.3k|    {
  121|  72.3k|        return ranges::begin(m_range);
  122|  72.3k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEC2ESF_ONS6_5tupleIJhEEE:
  252|      4|    {
  253|      4|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEC2ESF_ONS6_5tupleIJiEEE:
  252|  18.0k|    {
  253|  18.0k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEC2ESF_ONS6_5tupleIJjEEE:
  252|  18.0k|    {
  253|  18.0k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEC2ESF_ONS6_5tupleIJxEEE:
  252|  18.0k|    {
  253|  18.0k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEC2ESF_ONS6_5tupleIJyEEE:
  252|  18.0k|    {
  253|  18.0k|    }

_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   504k|{
  117|   504k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   504k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   504k|}
_ZN3scn2v26detail9scan_implIcJaEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JaEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   504k|{
   77|   504k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   504k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   504k|    static_cast<    \
  |  |  247|   504k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   504k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   504k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   504k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   504k|    static_cast<    \
  |  |  247|   504k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   504k|    static_cast<    \
  |  |  247|   504k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   504k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  1.00M|{
   55|  1.00M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 60.2k, False: 949k]
  |  |  ------------------
  ------------------
   56|  60.2k|        return unexpected(result.error());
   57|  60.2k|    }
   58|   949k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   949k|    static_cast<    \
  |  |  247|   949k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   949k|    static_cast<    \
  |  |  247|   949k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.00M|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   504k|{
  201|   504k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   504k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   504k|                                                      format, {});
  203|   504k|}
_ZN3scn2v26detail19scan_localized_implIcJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   504k|{
  163|   504k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   504k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   504k|    static_cast<    \
  |  |  247|   504k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   504k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   504k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   504k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   504k|    static_cast<    \
  |  |  247|   504k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   504k|    static_cast<    \
  |  |  247|   504k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   504k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|   116k|{
  248|   116k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|   116k|}
_ZN3scn2v26detail15scan_value_implIcaN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|   116k|{
  229|   116k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|   116k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|   116k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   116k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   116k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.01k, False: 113k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.01k|    }                                                  \
  |  |  |  |   70|   116k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|   113k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   113k|    static_cast<    \
  |  |  247|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   113k|    static_cast<    \
  |  |  247|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|   116k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   518k|{
  117|   518k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   518k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   518k|}
_ZN3scn2v26detail9scan_implIcJhEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JhEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   518k|{
   77|   518k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   518k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   518k|    static_cast<    \
  |  |  247|   518k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   518k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   518k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   518k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   518k|    static_cast<    \
  |  |  247|   518k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   518k|    static_cast<    \
  |  |  247|   518k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   518k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  1.03M|{
   55|  1.03M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 60.2k, False: 976k]
  |  |  ------------------
  ------------------
   56|  60.2k|        return unexpected(result.error());
   57|  60.2k|    }
   58|   976k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   976k|    static_cast<    \
  |  |  247|   976k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   976k|    static_cast<    \
  |  |  247|   976k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.03M|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   518k|{
  201|   518k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   518k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   518k|                                                      format, {});
  203|   518k|}
_ZN3scn2v26detail19scan_localized_implIcJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   518k|{
  163|   518k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   518k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   518k|    static_cast<    \
  |  |  247|   518k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   518k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   518k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   518k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   518k|    static_cast<    \
  |  |  247|   518k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   518k|    static_cast<    \
  |  |  247|   518k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   518k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|   113k|{
  248|   113k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|   113k|}
_ZN3scn2v26detail15scan_value_implIchN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|   113k|{
  229|   113k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|   113k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|   113k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   113k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   113k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.01k, False: 110k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.01k|    }                                                  \
  |  |  |  |   70|   113k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|   110k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   110k|    static_cast<    \
  |  |  247|   110k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   110k|    static_cast<    \
  |  |  247|   110k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|   113k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   778k|{
  117|   778k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   778k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   778k|}
_ZN3scn2v26detail9scan_implIcJiEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JiEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   778k|{
   77|   778k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   778k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   778k|    static_cast<    \
  |  |  247|   778k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   778k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   778k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   778k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   778k|    static_cast<    \
  |  |  247|   778k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   778k|    static_cast<    \
  |  |  247|   778k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   778k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  1.55M|{
   55|  1.55M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 60.2k, False: 1.49M]
  |  |  ------------------
  ------------------
   56|  60.2k|        return unexpected(result.error());
   57|  60.2k|    }
   58|  1.49M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.49M|    static_cast<    \
  |  |  247|  1.49M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.49M|    static_cast<    \
  |  |  247|  1.49M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.55M|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   778k|{
  201|   778k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   778k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   778k|                                                      format, {});
  203|   778k|}
_ZN3scn2v26detail19scan_localized_implIcJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   778k|{
  163|   778k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   778k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   778k|    static_cast<    \
  |  |  247|   778k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   778k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   778k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   778k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   778k|    static_cast<    \
  |  |  247|   778k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   778k|    static_cast<    \
  |  |  247|   778k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   778k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|   160k|{
  248|   160k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|   160k|}
_ZN3scn2v26detail15scan_value_implIciN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|   160k|{
  229|   160k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|   160k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|   160k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   160k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   160k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.01k, False: 157k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.01k|    }                                                  \
  |  |  |  |   70|   160k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|   157k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   157k|    static_cast<    \
  |  |  247|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   157k|    static_cast<    \
  |  |  247|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|   160k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   646k|{
  117|   646k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   646k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   646k|}
_ZN3scn2v26detail9scan_implIcJjEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JjEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   646k|{
   77|   646k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   646k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   646k|    static_cast<    \
  |  |  247|   646k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   646k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   646k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   646k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   646k|    static_cast<    \
  |  |  247|   646k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   646k|    static_cast<    \
  |  |  247|   646k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   646k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  1.29M|{
   55|  1.29M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 60.2k, False: 1.23M]
  |  |  ------------------
  ------------------
   56|  60.2k|        return unexpected(result.error());
   57|  60.2k|    }
   58|  1.23M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.23M|    static_cast<    \
  |  |  247|  1.23M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.23M|    static_cast<    \
  |  |  247|  1.23M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.29M|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   646k|{
  201|   646k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   646k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   646k|                                                      format, {});
  203|   646k|}
_ZN3scn2v26detail19scan_localized_implIcJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   646k|{
  163|   646k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   646k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   646k|    static_cast<    \
  |  |  247|   646k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   646k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   646k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   646k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   646k|    static_cast<    \
  |  |  247|   646k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   646k|    static_cast<    \
  |  |  247|   646k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   646k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|   135k|{
  248|   135k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|   135k|}
_ZN3scn2v26detail15scan_value_implIcjN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|   135k|{
  229|   135k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|   135k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|   135k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   135k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   135k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.01k, False: 132k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.01k|    }                                                  \
  |  |  |  |   70|   135k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   132k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|   132k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   132k|    static_cast<    \
  |  |  247|   132k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   132k|    static_cast<    \
  |  |  247|   132k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|   135k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   805k|{
  117|   805k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   805k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   805k|}
_ZN3scn2v26detail9scan_implIcJxEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JxEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   805k|{
   77|   805k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   805k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   805k|    static_cast<    \
  |  |  247|   805k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   805k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   805k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   805k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   805k|    static_cast<    \
  |  |  247|   805k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   805k|    static_cast<    \
  |  |  247|   805k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   805k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  1.61M|{
   55|  1.61M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 60.2k, False: 1.55M]
  |  |  ------------------
  ------------------
   56|  60.2k|        return unexpected(result.error());
   57|  60.2k|    }
   58|  1.55M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.55M|    static_cast<    \
  |  |  247|  1.55M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.55M|    static_cast<    \
  |  |  247|  1.55M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.61M|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   805k|{
  201|   805k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   805k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   805k|                                                      format, {});
  203|   805k|}
_ZN3scn2v26detail19scan_localized_implIcJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   805k|{
  163|   805k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   805k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   805k|    static_cast<    \
  |  |  247|   805k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   805k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   805k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   805k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   805k|    static_cast<    \
  |  |  247|   805k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   805k|    static_cast<    \
  |  |  247|   805k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   805k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|   166k|{
  248|   166k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|   166k|}
_ZN3scn2v26detail15scan_value_implIcxN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|   166k|{
  229|   166k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|   166k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|   166k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   166k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   166k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.01k, False: 163k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.01k|    }                                                  \
  |  |  |  |   70|   166k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   163k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|   163k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   163k|    static_cast<    \
  |  |  247|   163k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   163k|    static_cast<    \
  |  |  247|   163k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|   166k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   661k|{
  117|   661k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   661k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   661k|}
_ZN3scn2v26detail9scan_implIcJyEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JyEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   661k|{
   77|   661k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   661k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   661k|    static_cast<    \
  |  |  247|   661k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   661k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   661k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   661k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   661k|    static_cast<    \
  |  |  247|   661k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   661k|    static_cast<    \
  |  |  247|   661k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   661k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  1.32M|{
   55|  1.32M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 60.2k, False: 1.26M]
  |  |  ------------------
  ------------------
   56|  60.2k|        return unexpected(result.error());
   57|  60.2k|    }
   58|  1.26M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.26M|    static_cast<    \
  |  |  247|  1.26M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.26M|    static_cast<    \
  |  |  247|  1.26M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.32M|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   661k|{
  201|   661k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   661k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   661k|                                                      format, {});
  203|   661k|}
_ZN3scn2v26detail19scan_localized_implIcJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   661k|{
  163|   661k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   661k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   661k|    static_cast<    \
  |  |  247|   661k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   661k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   661k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   661k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   661k|    static_cast<    \
  |  |  247|   661k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   661k|    static_cast<    \
  |  |  247|   661k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   661k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|   137k|{
  248|   137k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|   137k|}
_ZN3scn2v26detail15scan_value_implIcyN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|   137k|{
  229|   137k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|   137k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|   137k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   137k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   137k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.01k, False: 134k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.01k|    }                                                  \
  |  |  |  |   70|   137k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|   134k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   134k|    static_cast<    \
  |  |  247|   134k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   134k|    static_cast<    \
  |  |  247|   134k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|   137k|}
_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  33.1k|{
  117|  33.1k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  33.1k|}
_ZN3scn2v26detail9scan_implIcJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  33.1k|{
   77|  33.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  33.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  33.1k|    static_cast<    \
  |  |  247|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  33.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  33.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.1k|    static_cast<    \
  |  |  247|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.1k|    static_cast<    \
  |  |  247|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  33.1k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  66.3k|{
   55|  66.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  66.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 60.2k, False: 6.02k]
  |  |  ------------------
  ------------------
   56|  60.2k|        return unexpected(result.error());
   57|  60.2k|    }
   58|  6.02k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  6.02k|    static_cast<    \
  |  |  247|  6.02k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  6.02k|    static_cast<    \
  |  |  247|  6.02k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  66.3k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  33.1k|{
  201|  33.1k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  33.1k|                                                      format, {});
  203|  33.1k|}
_ZN3scn2v26detail19scan_localized_implIcJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  33.1k|{
  163|  33.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  33.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  33.1k|    static_cast<    \
  |  |  247|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  33.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  33.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.1k|    static_cast<    \
  |  |  247|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.1k|    static_cast<    \
  |  |  247|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  33.1k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  3.01k|{
  248|  3.01k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  3.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  3.01k|}
_ZN3scn2v26detail15scan_value_implIcaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  3.01k|{
  229|  3.01k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  3.01k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  3.01k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.01k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.01k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.01k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.01k|    }                                                  \
  |  |  |  |   70|  3.01k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  3.01k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  33.1k|{
  117|  33.1k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  33.1k|}
_ZN3scn2v26detail9scan_implIcJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  33.1k|{
   77|  33.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  33.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  33.1k|    static_cast<    \
  |  |  247|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  33.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  33.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.1k|    static_cast<    \
  |  |  247|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.1k|    static_cast<    \
  |  |  247|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  33.1k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  66.3k|{
   55|  66.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  66.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 60.2k, False: 6.02k]
  |  |  ------------------
  ------------------
   56|  60.2k|        return unexpected(result.error());
   57|  60.2k|    }
   58|  6.02k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  6.02k|    static_cast<    \
  |  |  247|  6.02k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  6.02k|    static_cast<    \
  |  |  247|  6.02k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  66.3k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  33.1k|{
  201|  33.1k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  33.1k|                                                      format, {});
  203|  33.1k|}
_ZN3scn2v26detail19scan_localized_implIcJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  33.1k|{
  163|  33.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  33.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  33.1k|    static_cast<    \
  |  |  247|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  33.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  33.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.1k|    static_cast<    \
  |  |  247|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.1k|    static_cast<    \
  |  |  247|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  33.1k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  3.01k|{
  248|  3.01k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  3.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  3.01k|}
_ZN3scn2v26detail15scan_value_implIchN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  3.01k|{
  229|  3.01k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  3.01k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  3.01k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.01k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.01k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.01k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.01k|    }                                                  \
  |  |  |  |   70|  3.01k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  3.01k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  33.1k|{
  117|  33.1k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  33.1k|}
_ZN3scn2v26detail9scan_implIcJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  33.1k|{
   77|  33.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  33.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  33.1k|    static_cast<    \
  |  |  247|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  33.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  33.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.1k|    static_cast<    \
  |  |  247|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.1k|    static_cast<    \
  |  |  247|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  33.1k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  66.3k|{
   55|  66.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  66.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 60.2k, False: 6.02k]
  |  |  ------------------
  ------------------
   56|  60.2k|        return unexpected(result.error());
   57|  60.2k|    }
   58|  6.02k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  6.02k|    static_cast<    \
  |  |  247|  6.02k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  6.02k|    static_cast<    \
  |  |  247|  6.02k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  66.3k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  33.1k|{
  201|  33.1k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  33.1k|                                                      format, {});
  203|  33.1k|}
_ZN3scn2v26detail19scan_localized_implIcJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  33.1k|{
  163|  33.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  33.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  33.1k|    static_cast<    \
  |  |  247|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  33.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  33.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.1k|    static_cast<    \
  |  |  247|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.1k|    static_cast<    \
  |  |  247|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  33.1k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  3.01k|{
  248|  3.01k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  3.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  3.01k|}
_ZN3scn2v26detail15scan_value_implIciN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  3.01k|{
  229|  3.01k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  3.01k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  3.01k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.01k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.01k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.01k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.01k|    }                                                  \
  |  |  |  |   70|  3.01k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  3.01k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  33.1k|{
  117|  33.1k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  33.1k|}
_ZN3scn2v26detail9scan_implIcJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  33.1k|{
   77|  33.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  33.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  33.1k|    static_cast<    \
  |  |  247|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  33.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  33.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.1k|    static_cast<    \
  |  |  247|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.1k|    static_cast<    \
  |  |  247|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  33.1k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  66.3k|{
   55|  66.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  66.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 60.2k, False: 6.02k]
  |  |  ------------------
  ------------------
   56|  60.2k|        return unexpected(result.error());
   57|  60.2k|    }
   58|  6.02k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  6.02k|    static_cast<    \
  |  |  247|  6.02k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  6.02k|    static_cast<    \
  |  |  247|  6.02k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  66.3k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  33.1k|{
  201|  33.1k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  33.1k|                                                      format, {});
  203|  33.1k|}
_ZN3scn2v26detail19scan_localized_implIcJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  33.1k|{
  163|  33.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  33.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  33.1k|    static_cast<    \
  |  |  247|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  33.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  33.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.1k|    static_cast<    \
  |  |  247|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.1k|    static_cast<    \
  |  |  247|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  33.1k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  3.01k|{
  248|  3.01k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  3.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  3.01k|}
_ZN3scn2v26detail15scan_value_implIcjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  3.01k|{
  229|  3.01k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  3.01k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  3.01k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.01k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.01k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.01k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.01k|    }                                                  \
  |  |  |  |   70|  3.01k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  3.01k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  33.1k|{
  117|  33.1k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  33.1k|}
_ZN3scn2v26detail9scan_implIcJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  33.1k|{
   77|  33.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  33.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  33.1k|    static_cast<    \
  |  |  247|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  33.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  33.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.1k|    static_cast<    \
  |  |  247|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.1k|    static_cast<    \
  |  |  247|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  33.1k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  66.3k|{
   55|  66.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  66.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 60.2k, False: 6.02k]
  |  |  ------------------
  ------------------
   56|  60.2k|        return unexpected(result.error());
   57|  60.2k|    }
   58|  6.02k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  6.02k|    static_cast<    \
  |  |  247|  6.02k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  6.02k|    static_cast<    \
  |  |  247|  6.02k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  66.3k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  33.1k|{
  201|  33.1k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  33.1k|                                                      format, {});
  203|  33.1k|}
_ZN3scn2v26detail19scan_localized_implIcJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  33.1k|{
  163|  33.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  33.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  33.1k|    static_cast<    \
  |  |  247|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  33.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  33.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.1k|    static_cast<    \
  |  |  247|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.1k|    static_cast<    \
  |  |  247|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  33.1k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  3.01k|{
  248|  3.01k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  3.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  3.01k|}
_ZN3scn2v26detail15scan_value_implIcxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  3.01k|{
  229|  3.01k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  3.01k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  3.01k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.01k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.01k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.01k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.01k|    }                                                  \
  |  |  |  |   70|  3.01k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  3.01k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  33.1k|{
  117|  33.1k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  33.1k|}
_ZN3scn2v26detail9scan_implIcJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  33.1k|{
   77|  33.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  33.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  33.1k|    static_cast<    \
  |  |  247|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  33.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  33.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.1k|    static_cast<    \
  |  |  247|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.1k|    static_cast<    \
  |  |  247|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  33.1k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  66.3k|{
   55|  66.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  66.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 60.2k, False: 6.02k]
  |  |  ------------------
  ------------------
   56|  60.2k|        return unexpected(result.error());
   57|  60.2k|    }
   58|  6.02k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  6.02k|    static_cast<    \
  |  |  247|  6.02k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  6.02k|    static_cast<    \
  |  |  247|  6.02k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  66.3k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  33.1k|{
  201|  33.1k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  33.1k|                                                      format, {});
  203|  33.1k|}
_ZN3scn2v26detail19scan_localized_implIcJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  33.1k|{
  163|  33.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  33.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  33.1k|    static_cast<    \
  |  |  247|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  33.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  33.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.1k|    static_cast<    \
  |  |  247|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  33.1k|    static_cast<    \
  |  |  247|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  33.1k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  3.01k|{
  248|  3.01k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  3.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  3.01k|}
_ZN3scn2v26detail15scan_value_implIcyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  3.01k|{
  229|  3.01k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  3.01k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  3.01k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.01k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.01k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.01k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.01k|    }                                                  \
  |  |  |  |   70|  3.01k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  3.01k|}
_ZN3scn2v26detail9scan_implIwJaEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JaEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   476k|{
   77|   476k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   476k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   476k|    static_cast<    \
  |  |  247|   476k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   476k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   476k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   476k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   476k|    static_cast<    \
  |  |  247|   476k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   476k|    static_cast<    \
  |  |  247|   476k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   476k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   953k|{
   55|   953k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   953k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 180k, False: 772k]
  |  |  ------------------
  ------------------
   56|   180k|        return unexpected(result.error());
   57|   180k|    }
   58|   772k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   772k|    static_cast<    \
  |  |  247|   772k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   772k|    static_cast<    \
  |  |  247|   772k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   953k|}
_ZN3scn2v26detail19scan_localized_implIwJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   476k|{
  163|   476k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   476k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   476k|    static_cast<    \
  |  |  247|   476k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   476k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   476k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   476k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   476k|    static_cast<    \
  |  |  247|   476k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   476k|    static_cast<    \
  |  |  247|   476k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   476k|}
_ZN3scn2v26detail15scan_value_implIwaN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|   100k|{
  229|   100k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|   100k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.04k, False: 91.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.04k|    }                                                  \
  |  |  |  |   70|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  91.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  91.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  91.8k|    static_cast<    \
  |  |  247|  91.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  91.8k|    static_cast<    \
  |  |  247|  91.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|   100k|}
_ZN3scn2v26detail9scan_implIwJhEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JhEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   488k|{
   77|   488k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   488k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   488k|    static_cast<    \
  |  |  247|   488k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   488k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   488k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   488k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   488k|    static_cast<    \
  |  |  247|   488k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   488k|    static_cast<    \
  |  |  247|   488k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   488k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   977k|{
   55|   977k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   977k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 180k, False: 796k]
  |  |  ------------------
  ------------------
   56|   180k|        return unexpected(result.error());
   57|   180k|    }
   58|   796k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   796k|    static_cast<    \
  |  |  247|   796k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   796k|    static_cast<    \
  |  |  247|   796k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   977k|}
_ZN3scn2v26detail19scan_localized_implIwJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   488k|{
  163|   488k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   488k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   488k|    static_cast<    \
  |  |  247|   488k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   488k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   488k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   488k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   488k|    static_cast<    \
  |  |  247|   488k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   488k|    static_cast<    \
  |  |  247|   488k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   488k|}
_ZN3scn2v26detail15scan_value_implIwhN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  98.4k|{
  229|  98.4k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  98.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  98.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  98.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  98.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  98.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.04k, False: 89.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.04k|    }                                                  \
  |  |  |  |   70|  98.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  89.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  89.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  89.4k|    static_cast<    \
  |  |  247|  89.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  89.4k|    static_cast<    \
  |  |  247|  89.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  98.4k|}
_ZN3scn2v26detail9scan_implIwJiEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JiEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   706k|{
   77|   706k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   706k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   706k|    static_cast<    \
  |  |  247|   706k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   706k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   706k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   706k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   706k|    static_cast<    \
  |  |  247|   706k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   706k|    static_cast<    \
  |  |  247|   706k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   706k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  1.41M|{
   55|  1.41M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 180k, False: 1.23M]
  |  |  ------------------
  ------------------
   56|   180k|        return unexpected(result.error());
   57|   180k|    }
   58|  1.23M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.23M|    static_cast<    \
  |  |  247|  1.23M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.23M|    static_cast<    \
  |  |  247|  1.23M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.41M|}
_ZN3scn2v26detail19scan_localized_implIwJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   706k|{
  163|   706k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   706k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   706k|    static_cast<    \
  |  |  247|   706k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   706k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   706k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   706k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   706k|    static_cast<    \
  |  |  247|   706k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   706k|    static_cast<    \
  |  |  247|   706k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   706k|}
_ZN3scn2v26detail15scan_value_implIwiN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|   138k|{
  229|   138k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|   138k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|   138k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   138k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   138k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.04k, False: 129k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.04k|    }                                                  \
  |  |  |  |   70|   138k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   129k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|   129k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   129k|    static_cast<    \
  |  |  247|   129k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   129k|    static_cast<    \
  |  |  247|   129k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|   138k|}
_ZN3scn2v26detail9scan_implIwJjEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JjEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   599k|{
   77|   599k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   599k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   599k|    static_cast<    \
  |  |  247|   599k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   599k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   599k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   599k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   599k|    static_cast<    \
  |  |  247|   599k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   599k|    static_cast<    \
  |  |  247|   599k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   599k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  1.19M|{
   55|  1.19M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 180k, False: 1.01M]
  |  |  ------------------
  ------------------
   56|   180k|        return unexpected(result.error());
   57|   180k|    }
   58|  1.01M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.01M|    static_cast<    \
  |  |  247|  1.01M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.01M|    static_cast<    \
  |  |  247|  1.01M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.19M|}
_ZN3scn2v26detail19scan_localized_implIwJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   599k|{
  163|   599k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   599k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   599k|    static_cast<    \
  |  |  247|   599k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   599k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   599k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   599k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   599k|    static_cast<    \
  |  |  247|   599k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   599k|    static_cast<    \
  |  |  247|   599k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   599k|}
_ZN3scn2v26detail15scan_value_implIwjN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|   117k|{
  229|   117k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|   117k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|   117k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   117k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   117k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.04k, False: 108k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.04k|    }                                                  \
  |  |  |  |   70|   117k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|   108k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   108k|    static_cast<    \
  |  |  247|   108k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   108k|    static_cast<    \
  |  |  247|   108k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|   117k|}
_ZN3scn2v26detail9scan_implIwJxEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JxEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   726k|{
   77|   726k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   726k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   726k|    static_cast<    \
  |  |  247|   726k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   726k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   726k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   726k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   726k|    static_cast<    \
  |  |  247|   726k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   726k|    static_cast<    \
  |  |  247|   726k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   726k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  1.45M|{
   55|  1.45M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 180k, False: 1.27M]
  |  |  ------------------
  ------------------
   56|   180k|        return unexpected(result.error());
   57|   180k|    }
   58|  1.27M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.27M|    static_cast<    \
  |  |  247|  1.27M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.27M|    static_cast<    \
  |  |  247|  1.27M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.45M|}
_ZN3scn2v26detail19scan_localized_implIwJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   726k|{
  163|   726k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   726k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   726k|    static_cast<    \
  |  |  247|   726k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   726k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   726k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   726k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   726k|    static_cast<    \
  |  |  247|   726k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   726k|    static_cast<    \
  |  |  247|   726k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   726k|}
_ZN3scn2v26detail15scan_value_implIwxN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|   142k|{
  229|   142k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|   142k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|   142k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   142k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   142k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.04k, False: 133k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.04k|    }                                                  \
  |  |  |  |   70|   142k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|   133k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   133k|    static_cast<    \
  |  |  247|   133k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   133k|    static_cast<    \
  |  |  247|   133k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|   142k|}
_ZN3scn2v26detail9scan_implIwJyEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JyEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   611k|{
   77|   611k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   611k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   611k|    static_cast<    \
  |  |  247|   611k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   611k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   611k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   611k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   611k|    static_cast<    \
  |  |  247|   611k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   611k|    static_cast<    \
  |  |  247|   611k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   611k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  1.22M|{
   55|  1.22M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 180k, False: 1.04M]
  |  |  ------------------
  ------------------
   56|   180k|        return unexpected(result.error());
   57|   180k|    }
   58|  1.04M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.04M|    static_cast<    \
  |  |  247|  1.04M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.04M|    static_cast<    \
  |  |  247|  1.04M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.22M|}
_ZN3scn2v26detail19scan_localized_implIwJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   611k|{
  163|   611k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   611k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   611k|    static_cast<    \
  |  |  247|   611k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   611k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   611k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   611k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   611k|    static_cast<    \
  |  |  247|   611k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   611k|    static_cast<    \
  |  |  247|   611k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   611k|}
_ZN3scn2v26detail15scan_value_implIwyN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|   119k|{
  229|   119k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|   119k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|   119k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   119k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   119k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   119k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.04k, False: 110k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.04k|    }                                                  \
  |  |  |  |   70|   119k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|   110k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   110k|    static_cast<    \
  |  |  247|   110k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   110k|    static_cast<    \
  |  |  247|   110k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|   119k|}
_ZN3scn2v26detail9scan_implIwJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  90.4k|{
   77|  90.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  90.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  90.4k|    static_cast<    \
  |  |  247|  90.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  90.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  90.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  90.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  90.4k|    static_cast<    \
  |  |  247|  90.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  90.4k|    static_cast<    \
  |  |  247|  90.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  90.4k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   180k|{
   55|   180k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   180k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 180k, False: 2]
  |  |  ------------------
  ------------------
   56|   180k|        return unexpected(result.error());
   57|   180k|    }
   58|      2|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      2|    static_cast<    \
  |  |  247|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      2|    static_cast<    \
  |  |  247|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   180k|}
_ZN3scn2v26detail19scan_localized_implIwJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  90.4k|{
  163|  90.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  90.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  90.4k|    static_cast<    \
  |  |  247|  90.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  90.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  90.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  90.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  90.4k|    static_cast<    \
  |  |  247|  90.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  90.4k|    static_cast<    \
  |  |  247|  90.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  90.4k|}
_ZN3scn2v26detail15scan_value_implIwaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  9.04k|{
  229|  9.04k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  9.04k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  9.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  9.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  9.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  9.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.04k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.04k|    }                                                  \
  |  |  |  |   70|  9.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  9.04k|}
_ZN3scn2v26detail9scan_implIwJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  90.4k|{
   77|  90.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  90.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  90.4k|    static_cast<    \
  |  |  247|  90.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  90.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  90.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  90.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  90.4k|    static_cast<    \
  |  |  247|  90.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  90.4k|    static_cast<    \
  |  |  247|  90.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  90.4k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   180k|{
   55|   180k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   180k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 180k, False: 4]
  |  |  ------------------
  ------------------
   56|   180k|        return unexpected(result.error());
   57|   180k|    }
   58|      4|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      4|    static_cast<    \
  |  |  247|      4|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      4|    static_cast<    \
  |  |  247|      4|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   180k|}
_ZN3scn2v26detail19scan_localized_implIwJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  90.4k|{
  163|  90.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  90.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  90.4k|    static_cast<    \
  |  |  247|  90.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  90.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  90.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  90.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  90.4k|    static_cast<    \
  |  |  247|  90.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  90.4k|    static_cast<    \
  |  |  247|  90.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  90.4k|}
_ZN3scn2v26detail15scan_value_implIwhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  9.04k|{
  229|  9.04k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  9.04k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  9.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  9.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  9.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  9.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.04k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.04k|    }                                                  \
  |  |  |  |   70|  9.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  9.04k|}
_ZN3scn2v26detail9scan_implIwJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  99.4k|{
   77|  99.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  99.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  99.4k|    static_cast<    \
  |  |  247|  99.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  99.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  99.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  99.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  99.4k|    static_cast<    \
  |  |  247|  99.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  99.4k|    static_cast<    \
  |  |  247|  99.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  99.4k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   198k|{
   55|   198k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 180k, False: 18.0k]
  |  |  ------------------
  ------------------
   56|   180k|        return unexpected(result.error());
   57|   180k|    }
   58|  18.0k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  18.0k|    static_cast<    \
  |  |  247|  18.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  18.0k|    static_cast<    \
  |  |  247|  18.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   198k|}
_ZN3scn2v26detail19scan_localized_implIwJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  99.4k|{
  163|  99.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  99.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  99.4k|    static_cast<    \
  |  |  247|  99.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  99.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  99.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  99.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  99.4k|    static_cast<    \
  |  |  247|  99.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  99.4k|    static_cast<    \
  |  |  247|  99.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  99.4k|}
_ZN3scn2v26detail15scan_value_implIwiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  9.04k|{
  229|  9.04k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  9.04k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  9.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  9.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  9.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  9.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.04k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.04k|    }                                                  \
  |  |  |  |   70|  9.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  9.04k|}
_ZN3scn2v26detail9scan_implIwJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  99.4k|{
   77|  99.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  99.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  99.4k|    static_cast<    \
  |  |  247|  99.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  99.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  99.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  99.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  99.4k|    static_cast<    \
  |  |  247|  99.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  99.4k|    static_cast<    \
  |  |  247|  99.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  99.4k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   198k|{
   55|   198k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 180k, False: 18.0k]
  |  |  ------------------
  ------------------
   56|   180k|        return unexpected(result.error());
   57|   180k|    }
   58|  18.0k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  18.0k|    static_cast<    \
  |  |  247|  18.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  18.0k|    static_cast<    \
  |  |  247|  18.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   198k|}
_ZN3scn2v26detail19scan_localized_implIwJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  99.4k|{
  163|  99.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  99.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  99.4k|    static_cast<    \
  |  |  247|  99.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  99.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  99.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  99.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  99.4k|    static_cast<    \
  |  |  247|  99.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  99.4k|    static_cast<    \
  |  |  247|  99.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  99.4k|}
_ZN3scn2v26detail15scan_value_implIwjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  9.04k|{
  229|  9.04k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  9.04k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  9.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  9.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  9.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  9.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.04k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.04k|    }                                                  \
  |  |  |  |   70|  9.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  9.04k|}
_ZN3scn2v26detail9scan_implIwJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  99.4k|{
   77|  99.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  99.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  99.4k|    static_cast<    \
  |  |  247|  99.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  99.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  99.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  99.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  99.4k|    static_cast<    \
  |  |  247|  99.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  99.4k|    static_cast<    \
  |  |  247|  99.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  99.4k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   198k|{
   55|   198k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 180k, False: 18.0k]
  |  |  ------------------
  ------------------
   56|   180k|        return unexpected(result.error());
   57|   180k|    }
   58|  18.0k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  18.0k|    static_cast<    \
  |  |  247|  18.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  18.0k|    static_cast<    \
  |  |  247|  18.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   198k|}
_ZN3scn2v26detail19scan_localized_implIwJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  99.4k|{
  163|  99.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  99.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  99.4k|    static_cast<    \
  |  |  247|  99.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  99.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  99.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  99.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  99.4k|    static_cast<    \
  |  |  247|  99.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  99.4k|    static_cast<    \
  |  |  247|  99.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  99.4k|}
_ZN3scn2v26detail15scan_value_implIwxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  9.04k|{
  229|  9.04k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  9.04k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  9.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  9.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  9.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  9.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.04k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.04k|    }                                                  \
  |  |  |  |   70|  9.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  9.04k|}
_ZN3scn2v26detail9scan_implIwJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  99.4k|{
   77|  99.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  99.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  99.4k|    static_cast<    \
  |  |  247|  99.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  99.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  99.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  99.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  99.4k|    static_cast<    \
  |  |  247|  99.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  99.4k|    static_cast<    \
  |  |  247|  99.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  99.4k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   198k|{
   55|   198k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 180k, False: 18.0k]
  |  |  ------------------
  ------------------
   56|   180k|        return unexpected(result.error());
   57|   180k|    }
   58|  18.0k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  18.0k|    static_cast<    \
  |  |  247|  18.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  18.0k|    static_cast<    \
  |  |  247|  18.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   198k|}
_ZN3scn2v26detail19scan_localized_implIwJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  99.4k|{
  163|  99.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  99.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  99.4k|    static_cast<    \
  |  |  247|  99.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  99.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  99.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  99.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  99.4k|    static_cast<    \
  |  |  247|  99.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  99.4k|    static_cast<    \
  |  |  247|  99.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  99.4k|}
_ZN3scn2v26detail15scan_value_implIwyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  9.04k|{
  229|  9.04k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  9.04k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  9.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  9.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  9.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  9.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.04k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.04k|    }                                                  \
  |  |  |  |   70|  9.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  9.04k|}

_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|   415k|{
  486|   415k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  248|   415k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|   415k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|   415k|    {
  378|   415k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIcEC2Ev:
  359|   415k|    {
  360|   415k|    }
_ZN3scn2v26detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
  128|   415k|    {
  129|   415k|    }
_ZN3scn2v26detail17basic_scan_bufferIcED2Ev:
   43|   415k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|   615k|    {
  382|   615k|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 540, False: 614k]
  ------------------
  383|    540|            return false;
  384|    540|        }
  385|   614k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 307k, False: 307k]
  ------------------
  386|   307k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|   307k|                                          this->m_current_view.begin(),
  388|   307k|                                          this->m_current_view.end());
  389|   307k|        }
  390|   614k|        m_latest = *m_cursor;
  391|   614k|        ++m_cursor;
  392|   614k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|   614k|        return true;
  394|   615k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE4syncEl:
   48|   415k|    {
   49|   415k|        SCN_UNUSED(position);
  ------------------
  |  |  227|   415k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|   415k|    }
_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|  1.21M|{
  486|  1.21M|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  248|  1.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|  1.21M|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|  1.21M|    {
  378|  1.21M|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIwEC2Ev:
  359|  1.21M|    {
  360|  1.21M|    }
_ZN3scn2v26detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
  128|  1.21M|    {
  129|  1.21M|    }
_ZN3scn2v26detail17basic_scan_bufferIwED2Ev:
   43|  1.21M|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|  1.98M|    {
  382|  1.98M|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 618, False: 1.98M]
  ------------------
  383|    618|            return false;
  384|    618|        }
  385|  1.98M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 1.10M, False: 886k]
  ------------------
  386|  1.10M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|  1.10M|                                          this->m_current_view.begin(),
  388|  1.10M|                                          this->m_current_view.end());
  389|  1.10M|        }
  390|  1.98M|        m_latest = *m_cursor;
  391|  1.98M|        ++m_cursor;
  392|  1.98M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|  1.98M|        return true;
  394|  1.98M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE4syncEl:
   48|  1.21M|    {
   49|  1.21M|        SCN_UNUSED(position);
  ------------------
  |  |  227|  1.21M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|  1.21M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
  172|  16.9M|    {
  173|  16.9M|        return m_end == nullptr;
  174|  16.9M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
  188|   687k|    {
  189|   687k|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 687k]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|   687k|        return parent()->get_segment_starting_at(position());
  195|   687k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  182|  8.86M|    {
  183|  8.86M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  8.86M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  8.86M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|      0|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  8.86M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE23get_segment_starting_atEl:
   78|   687k|    {
   79|   687k|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|   687k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 36.1k, False: 651k]
  |  |  ------------------
  ------------------
   80|   687k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|  36.1k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|  36.1k|        }
   83|   651k|        const auto start = pos - m_putback_buffer.size();
   84|   651k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  242|   651k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   651k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|      0|        return m_current_view.substr(start);
   86|   687k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  177|   524k|    {
  178|   524k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|   524k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   524k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|      0|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|   524k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator8positionEv:
  167|  1.35M|    {
  168|  1.35M|        return m_position;
  169|  1.35M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE13is_contiguousEv:
  100|  1.24M|    {
  101|  1.24M|        return m_is_contiguous;
  102|  1.24M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
  172|  52.8M|    {
  173|  52.8M|        return m_end == nullptr;
  174|  52.8M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
  188|  1.98M|    {
  189|  1.98M|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 1.98M]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|  1.98M|        return parent()->get_segment_starting_at(position());
  195|  1.98M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  182|  27.8M|    {
  183|  27.8M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  27.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  27.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|      0|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  27.8M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE23get_segment_starting_atEl:
   78|  1.98M|    {
   79|  1.98M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  1.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 108k, False: 1.88M]
  |  |  ------------------
  ------------------
   80|  1.98M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|   108k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|   108k|        }
   83|  1.88M|        const auto start = pos - m_putback_buffer.size();
   84|  1.88M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  242|  1.88M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.88M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|      0|        return m_current_view.substr(start);
   86|  1.98M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  177|  1.53M|    {
  178|  1.53M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  1.53M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.53M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|      0|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|  1.53M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator8positionEv:
  167|  3.88M|    {
  168|  3.88M|        return m_position;
  169|  3.88M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE13is_contiguousEv:
  100|  3.63M|    {
  101|  3.63M|        return m_is_contiguous;
  102|  3.63M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE3getEv:
  321|   415k|{
  322|   415k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 415k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|   415k|    return ranges::subrange{forward_iterator{this, 0},
  327|   415k|                            ranges_std::default_sentinel};
  328|   415k|}
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
  154|   415k|    {
  155|   415k|        SCN_EXPECT(parent);
  ------------------
  |  |  242|   415k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   415k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   415k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  242|   415k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   415k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   415k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|  1.39M|    {
  258|  1.39M|        return x.is_at_end();
  259|  1.39M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
  301|  1.73M|    {
  302|  1.73M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 1.73M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  1.73M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 1.73M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  1.73M|        return !read_at_position();
  309|  1.73M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
  281|  4.30M|    {
  282|  4.30M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  4.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  4.30M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 4.30M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  4.30M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  152|  4.30M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 3.68M, False: 615k]
  |  |  ------------------
  ------------------
  289|  3.68M|            return true;
  290|  3.68M|        }
  291|       |
  292|  1.23M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 615k, False: 614k]
  ------------------
  293|   615k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 540, False: 614k]
  ------------------
  294|    540|                return false;
  295|    540|            }
  296|   615k|        }
  297|   614k|        return true;
  298|   615k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE15chars_availableEv:
   58|  6.05M|    {
   59|  6.05M|        return m_putback_buffer.size() + m_current_view.size();
   60|  6.05M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|   343k|    {
  269|   343k|        return !x.is_at_end();
  270|   343k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iteratordeEv:
  216|  2.02M|    {
  217|  2.02M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  2.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  2.02M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 2.02M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  2.02M|        auto res = read_at_position();
  226|  2.02M|        SCN_EXPECT(res);
  ------------------
  |  |  242|  2.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|      0|        return parent()->get_character_at(m_position);
  228|  2.02M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16get_character_atEl:
   89|  2.02M|    {
   90|  2.02M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  2.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.98M, False: 36.6k]
  |  |  ------------------
  ------------------
   91|  2.02M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  1.98M|            return m_putback_buffer[pos];
   93|  1.98M|        }
   94|  36.6k|        const auto start = pos - m_putback_buffer.size();
   95|  36.6k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  242|  36.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  36.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|      0|        return m_current_view[start];
   97|  2.02M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorppEv:
  202|   542k|    {
  203|   542k|        ++m_position;
  204|   542k|        std::ignore = read_at_position();
  205|   542k|        return *this;
  206|   542k|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  251|   596k|    {
  252|   596k|        return !(lhs == rhs);
  253|   596k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  246|   867k|    {
  247|   867k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 867k, False: 0]
  |  Branch (247:46): [True: 271k, False: 596k]
  ------------------
  248|   867k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator13batch_advanceEl:
  231|   867k|    {
  232|   867k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  242|   867k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   867k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|      0|        m_position += n;
  234|   867k|        return *this;
  235|   867k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE8sync_allEv:
   53|   379k|    {
   54|   379k|        sync(0);
   55|   379k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE3getEv:
  321|  1.21M|{
  322|  1.21M|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 1.21M]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|  1.21M|    return ranges::subrange{forward_iterator{this, 0},
  327|  1.21M|                            ranges_std::default_sentinel};
  328|  1.21M|}
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
  154|  1.21M|    {
  155|  1.21M|        SCN_EXPECT(parent);
  ------------------
  |  |  242|  1.21M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.21M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|  1.21M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  242|  1.21M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.21M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  1.21M|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|  4.03M|    {
  258|  4.03M|        return x.is_at_end();
  259|  4.03M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
  301|  5.24M|    {
  302|  5.24M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 5.24M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  5.24M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 5.24M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  5.24M|        return !read_at_position();
  309|  5.24M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
  281|  13.5M|    {
  282|  13.5M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  13.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  13.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  13.5M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 13.5M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  13.5M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  152|  13.5M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 11.6M, False: 1.98M]
  |  |  ------------------
  ------------------
  289|  11.6M|            return true;
  290|  11.6M|        }
  291|       |
  292|  3.97M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 1.98M, False: 1.98M]
  ------------------
  293|  1.98M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 618, False: 1.98M]
  ------------------
  294|    618|                return false;
  295|    618|            }
  296|  1.98M|        }
  297|  1.98M|        return true;
  298|  1.98M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE15chars_availableEv:
   58|  19.1M|    {
   59|  19.1M|        return m_putback_buffer.size() + m_current_view.size();
   60|  19.1M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|  1.21M|    {
  269|  1.21M|        return !x.is_at_end();
  270|  1.21M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iteratordeEv:
  216|  6.32M|    {
  217|  6.32M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  6.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  6.32M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 6.32M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  6.32M|        auto res = read_at_position();
  226|  6.32M|        SCN_EXPECT(res);
  ------------------
  |  |  242|  6.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|      0|        return parent()->get_character_at(m_position);
  228|  6.32M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16get_character_atEl:
   89|  6.32M|    {
   90|  6.32M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  6.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.00M, False: 325k]
  |  |  ------------------
  ------------------
   91|  6.32M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  6.00M|            return m_putback_buffer[pos];
   93|  6.00M|        }
   94|   325k|        const auto start = pos - m_putback_buffer.size();
   95|   325k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  242|   325k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   325k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|      0|        return m_current_view[start];
   97|  6.32M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorppEv:
  202|  2.02M|    {
  203|  2.02M|        ++m_position;
  204|  2.02M|        std::ignore = read_at_position();
  205|  2.02M|        return *this;
  206|  2.02M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  251|  1.97M|    {
  252|  1.97M|        return !(lhs == rhs);
  253|  1.97M|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  246|  2.74M|    {
  247|  2.74M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 2.74M, False: 0]
  |  Branch (247:46): [True: 777k, False: 1.97M]
  ------------------
  248|  2.74M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator13batch_advanceEl:
  231|  2.49M|    {
  232|  2.49M|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  242|  2.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|      0|        m_position += n;
  234|  2.49M|        return *this;
  235|  2.49M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE8sync_allEv:
   53|  1.13M|    {
   54|  1.13M|        sync(0);
   55|  1.13M|    }

_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIcEEmT_:
   71|   238k|{
   72|   238k|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|   238k|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|   238k|    }
   75|   238k|    else if constexpr (sizeof(U) == 2) {
   76|   238k|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|   238k|    }
   78|   238k|    else {
   79|       |        // utf-32
   80|   238k|        static_assert(sizeof(U) == 4);
   81|   238k|        SCN_UNUSED(ch);
   82|   238k|        return 1;
   83|   238k|    }
   84|   238k|}
_ZN3scn2v26detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
   35|   238k|{
   36|   238k|    static_assert(sizeof(U8) == 1);
   37|       |
   38|   238k|    SCN_GCC_COMPAT_PUSH
   39|   238k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
   40|   238k|    constexpr char lengths[] =
   41|   238k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
   42|   238k|        "\1\1\1\1\1\1\1\1"
   43|   238k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
   44|       |                            // byte
   45|   238k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
   46|   238k|        "\3\3"              // highest bits 1110 -> 3-byte cp
   47|   238k|        "\4";               // highest bits 11110 -> 4-byte cp
   48|   238k|    return lengths[static_cast<unsigned char>(ch) >> 3];
   49|   238k|    SCN_GCC_COMPAT_POP
   50|   238k|}
_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIwEEmT_:
   71|   117M|{
   72|   117M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|   117M|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|   117M|    }
   75|   117M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (75:24): [Folded - Ignored]
  ------------------
   76|   117M|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|   117M|    }
   78|   117M|    else {
   79|       |        // utf-32
   80|   117M|        static_assert(sizeof(U) == 4);
   81|   117M|        SCN_UNUSED(ch);
  ------------------
  |  |  227|   117M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   82|   117M|        return 1;
   83|   117M|    }
   84|   117M|}

_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  2.48M|{
   36|  2.48M|#define SCN_VISIT(Type)                                         \
   37|  2.48M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  2.48M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  2.48M|    }                                                           \
   40|  2.48M|    else {                                                      \
   41|  2.48M|        return vis(monostate_val);                              \
   42|  2.48M|    }
   43|       |
   44|  2.48M|    monostate monostate_val{};
   45|       |
   46|  2.48M|    switch (arg.m_type) {
   47|   349k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 349k, False: 2.13M]
  ------------------
   48|   349k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   349k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   349k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   349k|    }                                                           \
  |  |   40|   349k|    else {                                                      \
  |  |   41|   349k|        return vis(monostate_val);                              \
  |  |   42|   349k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 2.48M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   482k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 482k, False: 2.00M]
  ------------------
   52|   482k|            SCN_VISIT(int);
  ------------------
  |  |   37|   482k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   482k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   482k|    }                                                           \
  |  |   40|   482k|    else {                                                      \
  |  |   41|   482k|        return vis(monostate_val);                              \
  |  |   42|   482k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 2.48M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   498k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 498k, False: 1.99M]
  ------------------
   56|   498k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   498k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   498k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   498k|    }                                                           \
  |  |   40|   498k|    else {                                                      \
  |  |   41|   498k|        return vis(monostate_val);                              \
  |  |   42|   498k|    }
  ------------------
   57|   340k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 340k, False: 2.14M]
  ------------------
   58|   340k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   340k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   340k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   340k|    }                                                           \
  |  |   40|   340k|    else {                                                      \
  |  |   41|   340k|        return vis(monostate_val);                              \
  |  |   42|   340k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 2.48M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   405k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 405k, False: 2.08M]
  ------------------
   62|   405k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   405k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   405k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   405k|    }                                                           \
  |  |   40|   405k|    else {                                                      \
  |  |   41|   405k|        return vis(monostate_val);                              \
  |  |   42|   405k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 2.48M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   413k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 413k, False: 2.07M]
  ------------------
   66|   413k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   413k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   413k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   413k|    }                                                           \
  |  |   40|   413k|    else {                                                      \
  |  |   41|   413k|        return vis(monostate_val);                              \
  |  |   42|   413k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 2.48M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 2.48M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 2.48M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 2.48M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 2.48M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 2.48M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 2.48M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 2.48M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 2.48M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 2.48M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 2.48M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 2.48M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 2.48M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 2.48M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 2.48M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 2.48M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 2.48M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  2.48M|            SCN_CLANG_POP
  114|  2.48M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  2.48M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  54.2k|{
   36|  54.2k|#define SCN_VISIT(Type)                                         \
   37|  54.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  54.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  54.2k|    }                                                           \
   40|  54.2k|    else {                                                      \
   41|  54.2k|        return vis(monostate_val);                              \
   42|  54.2k|    }
   43|       |
   44|  54.2k|    monostate monostate_val{};
   45|       |
   46|  54.2k|    switch (arg.m_type) {
   47|  9.04k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 9.04k, False: 45.2k]
  ------------------
   48|  9.04k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  9.04k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  9.04k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  9.04k|    }                                                           \
  |  |   40|  9.04k|    else {                                                      \
  |  |   41|  9.04k|        return vis(monostate_val);                              \
  |  |   42|  9.04k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 54.2k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  9.04k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 9.04k, False: 45.2k]
  ------------------
   52|  9.04k|            SCN_VISIT(int);
  ------------------
  |  |   37|  9.04k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  9.04k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  9.04k|    }                                                           \
  |  |   40|  9.04k|    else {                                                      \
  |  |   41|  9.04k|        return vis(monostate_val);                              \
  |  |   42|  9.04k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 54.2k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  9.04k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 9.04k, False: 45.2k]
  ------------------
   56|  9.04k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  9.04k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  9.04k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  9.04k|    }                                                           \
  |  |   40|  9.04k|    else {                                                      \
  |  |   41|  9.04k|        return vis(monostate_val);                              \
  |  |   42|  9.04k|    }
  ------------------
   57|  9.04k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 9.04k, False: 45.2k]
  ------------------
   58|  9.04k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  9.04k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  9.04k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  9.04k|    }                                                           \
  |  |   40|  9.04k|    else {                                                      \
  |  |   41|  9.04k|        return vis(monostate_val);                              \
  |  |   42|  9.04k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 54.2k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  9.04k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 9.04k, False: 45.2k]
  ------------------
   62|  9.04k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  9.04k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  9.04k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  9.04k|    }                                                           \
  |  |   40|  9.04k|    else {                                                      \
  |  |   41|  9.04k|        return vis(monostate_val);                              \
  |  |   42|  9.04k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 54.2k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  9.04k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 9.04k, False: 45.2k]
  ------------------
   66|  9.04k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  9.04k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  9.04k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  9.04k|    }                                                           \
  |  |   40|  9.04k|    else {                                                      \
  |  |   41|  9.04k|        return vis(monostate_val);                              \
  |  |   42|  9.04k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 54.2k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 54.2k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 54.2k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 54.2k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 54.2k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 54.2k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 54.2k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 54.2k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 54.2k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 54.2k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 54.2k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 54.2k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 54.2k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 54.2k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 54.2k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 54.2k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 54.2k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  54.2k|            SCN_CLANG_POP
  114|  54.2k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  54.2k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  6.06M|{
   36|  6.06M|#define SCN_VISIT(Type)                                         \
   37|  6.06M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  6.06M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  6.06M|    }                                                           \
   40|  6.06M|    else {                                                      \
   41|  6.06M|        return vis(monostate_val);                              \
   42|  6.06M|    }
   43|       |
   44|  6.06M|    monostate monostate_val{};
   45|       |
   46|  6.06M|    switch (arg.m_type) {
   47|   758k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 758k, False: 5.30M]
  ------------------
   48|   758k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   758k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   758k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   758k|    }                                                           \
  |  |   40|   758k|    else {                                                      \
  |  |   41|   758k|        return vis(monostate_val);                              \
  |  |   42|   758k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 6.06M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  1.21M|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 1.21M, False: 4.84M]
  ------------------
   52|  1.21M|            SCN_VISIT(int);
  ------------------
  |  |   37|  1.21M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  1.21M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  1.21M|    }                                                           \
  |  |   40|  1.21M|    else {                                                      \
  |  |   41|  1.21M|        return vis(monostate_val);                              \
  |  |   42|  1.21M|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 6.06M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  1.26M|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 1.26M, False: 4.80M]
  ------------------
   56|  1.26M|            SCN_VISIT(long long);
  ------------------
  |  |   37|  1.26M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  1.26M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  1.26M|    }                                                           \
  |  |   40|  1.26M|    else {                                                      \
  |  |   41|  1.26M|        return vis(monostate_val);                              \
  |  |   42|  1.26M|    }
  ------------------
   57|   792k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 792k, False: 5.27M]
  ------------------
   58|   792k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   792k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   792k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   792k|    }                                                           \
  |  |   40|   792k|    else {                                                      \
  |  |   41|   792k|        return vis(monostate_val);                              \
  |  |   42|   792k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 6.06M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  1.00M|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 1.00M, False: 5.05M]
  ------------------
   62|  1.00M|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  1.00M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  1.00M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  1.00M|    }                                                           \
  |  |   40|  1.00M|    else {                                                      \
  |  |   41|  1.00M|        return vis(monostate_val);                              \
  |  |   42|  1.00M|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 6.06M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  1.02M|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 1.02M, False: 5.03M]
  ------------------
   66|  1.02M|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  1.02M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  1.02M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  1.02M|    }                                                           \
  |  |   40|  1.02M|    else {                                                      \
  |  |   41|  1.02M|        return vis(monostate_val);                              \
  |  |   42|  1.02M|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 6.06M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 6.06M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 6.06M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 6.06M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 6.06M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 6.06M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 6.06M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 6.06M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 6.06M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 6.06M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 6.06M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 6.06M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 6.06M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 6.06M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 6.06M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 6.06M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 6.06M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  6.06M|            SCN_CLANG_POP
  114|  6.06M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  6.06M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   253k|{
   36|   253k|#define SCN_VISIT(Type)                                         \
   37|   253k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   253k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   253k|    }                                                           \
   40|   253k|    else {                                                      \
   41|   253k|        return vis(monostate_val);                              \
   42|   253k|    }
   43|       |
   44|   253k|    monostate monostate_val{};
   45|       |
   46|   253k|    switch (arg.m_type) {
   47|  42.1k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 42.1k, False: 210k]
  ------------------
   48|  42.1k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  42.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  42.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  42.1k|    }                                                           \
  |  |   40|  42.1k|    else {                                                      \
  |  |   41|  42.1k|        return vis(monostate_val);                              \
  |  |   42|  42.1k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 253k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  42.1k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 42.1k, False: 210k]
  ------------------
   52|  42.1k|            SCN_VISIT(int);
  ------------------
  |  |   37|  42.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  42.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  42.1k|    }                                                           \
  |  |   40|  42.1k|    else {                                                      \
  |  |   41|  42.1k|        return vis(monostate_val);                              \
  |  |   42|  42.1k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 253k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  42.1k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 42.1k, False: 210k]
  ------------------
   56|  42.1k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  42.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  42.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  42.1k|    }                                                           \
  |  |   40|  42.1k|    else {                                                      \
  |  |   41|  42.1k|        return vis(monostate_val);                              \
  |  |   42|  42.1k|    }
  ------------------
   57|  42.1k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 42.1k, False: 210k]
  ------------------
   58|  42.1k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  42.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  42.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  42.1k|    }                                                           \
  |  |   40|  42.1k|    else {                                                      \
  |  |   41|  42.1k|        return vis(monostate_val);                              \
  |  |   42|  42.1k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 253k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  42.1k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 42.1k, False: 210k]
  ------------------
   62|  42.1k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  42.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  42.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  42.1k|    }                                                           \
  |  |   40|  42.1k|    else {                                                      \
  |  |   41|  42.1k|        return vis(monostate_val);                              \
  |  |   42|  42.1k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 253k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  42.1k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 42.1k, False: 210k]
  ------------------
   66|  42.1k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  42.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  42.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  42.1k|    }                                                           \
  |  |   40|  42.1k|    else {                                                      \
  |  |   41|  42.1k|        return vis(monostate_val);                              \
  |  |   42|  42.1k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 253k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 253k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 253k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 253k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 253k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 253k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 253k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 253k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 253k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 253k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 253k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 253k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 253k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 253k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 253k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 253k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 253k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   253k|            SCN_CLANG_POP
  114|   253k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   253k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  2.14M|{
   36|  2.14M|#define SCN_VISIT(Type)                                         \
   37|  2.14M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  2.14M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  2.14M|    }                                                           \
   40|  2.14M|    else {                                                      \
   41|  2.14M|        return vis(monostate_val);                              \
   42|  2.14M|    }
   43|       |
   44|  2.14M|    monostate monostate_val{};
   45|       |
   46|  2.14M|    switch (arg.m_type) {
   47|   302k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 302k, False: 1.84M]
  ------------------
   48|   302k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   302k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   302k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   302k|    }                                                           \
  |  |   40|   302k|    else {                                                      \
  |  |   41|   302k|        return vis(monostate_val);                              \
  |  |   42|   302k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 2.14M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   414k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 414k, False: 1.73M]
  ------------------
   52|   414k|            SCN_VISIT(int);
  ------------------
  |  |   37|   414k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   414k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   414k|    }                                                           \
  |  |   40|   414k|    else {                                                      \
  |  |   41|   414k|        return vis(monostate_val);                              \
  |  |   42|   414k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 2.14M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   426k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 426k, False: 1.72M]
  ------------------
   56|   426k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   426k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   426k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   426k|    }                                                           \
  |  |   40|   426k|    else {                                                      \
  |  |   41|   426k|        return vis(monostate_val);                              \
  |  |   42|   426k|    }
  ------------------
   57|   295k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 295k, False: 1.85M]
  ------------------
   58|   295k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   295k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   295k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   295k|    }                                                           \
  |  |   40|   295k|    else {                                                      \
  |  |   41|   295k|        return vis(monostate_val);                              \
  |  |   42|   295k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 2.14M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   351k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 351k, False: 1.79M]
  ------------------
   62|   351k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   351k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   351k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   351k|    }                                                           \
  |  |   40|   351k|    else {                                                      \
  |  |   41|   351k|        return vis(monostate_val);                              \
  |  |   42|   351k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 2.14M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   358k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 358k, False: 1.79M]
  ------------------
   66|   358k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   358k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   358k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   358k|    }                                                           \
  |  |   40|   358k|    else {                                                      \
  |  |   41|   358k|        return vis(monostate_val);                              \
  |  |   42|   358k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 2.14M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 2.14M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 2.14M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 2.14M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 2.14M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 2.14M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 2.14M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 2.14M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 2.14M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 2.14M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 2.14M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 2.14M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 2.14M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 2.14M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 2.14M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 2.14M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 2.14M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  2.14M|            SCN_CLANG_POP
  114|  2.14M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  2.14M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  5.46M|{
   36|  5.46M|#define SCN_VISIT(Type)                                         \
   37|  5.46M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  5.46M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  5.46M|    }                                                           \
   40|  5.46M|    else {                                                      \
   41|  5.46M|        return vis(monostate_val);                              \
   42|  5.46M|    }
   43|       |
   44|  5.46M|    monostate monostate_val{};
   45|       |
   46|  5.46M|    switch (arg.m_type) {
   47|   697k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 697k, False: 4.76M]
  ------------------
   48|   697k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   697k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   697k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   697k|    }                                                           \
  |  |   40|   697k|    else {                                                      \
  |  |   41|   697k|        return vis(monostate_val);                              \
  |  |   42|   697k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 5.46M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  1.08M|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 1.08M, False: 4.37M]
  ------------------
   52|  1.08M|            SCN_VISIT(int);
  ------------------
  |  |   37|  1.08M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  1.08M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  1.08M|    }                                                           \
  |  |   40|  1.08M|    else {                                                      \
  |  |   41|  1.08M|        return vis(monostate_val);                              \
  |  |   42|  1.08M|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 5.46M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  1.11M|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 1.11M, False: 4.34M]
  ------------------
   56|  1.11M|            SCN_VISIT(long long);
  ------------------
  |  |   37|  1.11M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  1.11M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  1.11M|    }                                                           \
  |  |   40|  1.11M|    else {                                                      \
  |  |   41|  1.11M|        return vis(monostate_val);                              \
  |  |   42|  1.11M|    }
  ------------------
   57|   726k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 726k, False: 4.73M]
  ------------------
   58|   726k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   726k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   726k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   726k|    }                                                           \
  |  |   40|   726k|    else {                                                      \
  |  |   41|   726k|        return vis(monostate_val);                              \
  |  |   42|   726k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 5.46M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   910k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 910k, False: 4.54M]
  ------------------
   62|   910k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   910k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   910k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   910k|    }                                                           \
  |  |   40|   910k|    else {                                                      \
  |  |   41|   910k|        return vis(monostate_val);                              \
  |  |   42|   910k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 5.46M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   930k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 930k, False: 4.53M]
  ------------------
   66|   930k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   930k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   930k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   930k|    }                                                           \
  |  |   40|   930k|    else {                                                      \
  |  |   41|   930k|        return vis(monostate_val);                              \
  |  |   42|   930k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 5.46M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 5.46M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 5.46M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 5.46M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 5.46M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 5.46M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 5.46M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 5.46M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 5.46M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 5.46M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 5.46M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 5.46M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 5.46M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 5.46M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 5.46M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 5.46M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 5.46M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  5.46M|            SCN_CLANG_POP
  114|  5.46M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  5.46M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   162k|{
   36|   162k|#define SCN_VISIT(Type)                                         \
   37|   162k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   162k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   162k|    }                                                           \
   40|   162k|    else {                                                      \
   41|   162k|        return vis(monostate_val);                              \
   42|   162k|    }
   43|       |
   44|   162k|    monostate monostate_val{};
   45|       |
   46|   162k|    switch (arg.m_type) {
   47|  27.1k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 27.1k, False: 135k]
  ------------------
   48|  27.1k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  27.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  27.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  27.1k|    }                                                           \
  |  |   40|  27.1k|    else {                                                      \
  |  |   41|  27.1k|        return vis(monostate_val);                              \
  |  |   42|  27.1k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 162k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  27.1k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 27.1k, False: 135k]
  ------------------
   52|  27.1k|            SCN_VISIT(int);
  ------------------
  |  |   37|  27.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  27.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  27.1k|    }                                                           \
  |  |   40|  27.1k|    else {                                                      \
  |  |   41|  27.1k|        return vis(monostate_val);                              \
  |  |   42|  27.1k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 162k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  27.1k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 27.1k, False: 135k]
  ------------------
   56|  27.1k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  27.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  27.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  27.1k|    }                                                           \
  |  |   40|  27.1k|    else {                                                      \
  |  |   41|  27.1k|        return vis(monostate_val);                              \
  |  |   42|  27.1k|    }
  ------------------
   57|  27.1k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 27.1k, False: 135k]
  ------------------
   58|  27.1k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  27.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  27.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  27.1k|    }                                                           \
  |  |   40|  27.1k|    else {                                                      \
  |  |   41|  27.1k|        return vis(monostate_val);                              \
  |  |   42|  27.1k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 162k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  27.1k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 27.1k, False: 135k]
  ------------------
   62|  27.1k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  27.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  27.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  27.1k|    }                                                           \
  |  |   40|  27.1k|    else {                                                      \
  |  |   41|  27.1k|        return vis(monostate_val);                              \
  |  |   42|  27.1k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 162k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  27.1k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 27.1k, False: 135k]
  ------------------
   66|  27.1k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  27.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  27.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  27.1k|    }                                                           \
  |  |   40|  27.1k|    else {                                                      \
  |  |   41|  27.1k|        return vis(monostate_val);                              \
  |  |   42|  27.1k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 162k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 162k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 162k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 162k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 162k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 162k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 162k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 162k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 162k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 162k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 162k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 162k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 162k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 162k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 162k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 162k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 162k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   162k|            SCN_CLANG_POP
  114|   162k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   162k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   723k|{
   36|   723k|#define SCN_VISIT(Type)                                         \
   37|   723k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   723k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   723k|    }                                                           \
   40|   723k|    else {                                                      \
   41|   723k|        return vis(monostate_val);                              \
   42|   723k|    }
   43|       |
   44|   723k|    monostate monostate_val{};
   45|       |
   46|   723k|    switch (arg.m_type) {
   47|   108k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 108k, False: 614k]
  ------------------
   48|   108k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   108k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   108k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   108k|    }                                                           \
  |  |   40|   108k|    else {                                                      \
  |  |   41|   108k|        return vis(monostate_val);                              \
  |  |   42|   108k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 723k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   126k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 126k, False: 596k]
  ------------------
   52|   126k|            SCN_VISIT(int);
  ------------------
  |  |   37|   126k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   126k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   126k|    }                                                           \
  |  |   40|   126k|    else {                                                      \
  |  |   41|   126k|        return vis(monostate_val);                              \
  |  |   42|   126k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 723k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   126k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 126k, False: 596k]
  ------------------
   56|   126k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   126k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   126k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   126k|    }                                                           \
  |  |   40|   126k|    else {                                                      \
  |  |   41|   126k|        return vis(monostate_val);                              \
  |  |   42|   126k|    }
  ------------------
   57|   108k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 108k, False: 614k]
  ------------------
   58|   108k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   108k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   108k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   108k|    }                                                           \
  |  |   40|   108k|    else {                                                      \
  |  |   41|   108k|        return vis(monostate_val);                              \
  |  |   42|   108k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 723k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   126k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 126k, False: 596k]
  ------------------
   62|   126k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   126k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   126k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   126k|    }                                                           \
  |  |   40|   126k|    else {                                                      \
  |  |   41|   126k|        return vis(monostate_val);                              \
  |  |   42|   126k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 723k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   126k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 126k, False: 596k]
  ------------------
   66|   126k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   126k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   126k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   126k|    }                                                           \
  |  |   40|   126k|    else {                                                      \
  |  |   41|   126k|        return vis(monostate_val);                              \
  |  |   42|   126k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 723k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 723k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 723k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 723k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 723k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 723k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 723k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 723k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 723k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 723k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 723k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 723k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 723k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 723k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 723k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 723k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 723k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   723k|            SCN_CLANG_POP
  114|   723k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   723k|}  // namespace scn

_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|  3.91M|{
  174|  3.91M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  3.91M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|  3.91M|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NSC_17basic_string_viewIT0_NSC_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  110|  3.91M|{
  111|  3.91M|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  3.91M|    auto result = vscan_impl(buffer, format, args);
  114|  3.91M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  3.91M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 180k, False: 3.73M]
  |  |  ------------------
  ------------------
  115|   180k|        return unexpected(result.error());
  116|   180k|    }
  117|  3.73M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  3.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  3.91M|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENSt3__16localeEvEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vINSA_9remove_cvINSA_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEERKT0_OSG_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|  3.91M|{
  192|  3.91M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  3.91M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|  3.91M|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT_OSH_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
  126|  3.91M|{
  127|  3.91M|#if !SCN_DISABLE_LOCALE
  128|  3.91M|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  3.91M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  3.91M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  3.91M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  3.91M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  3.91M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 180k, False: 3.73M]
  |  |  ------------------
  ------------------
  135|   180k|        return unexpected(result.error());
  136|   180k|    }
  137|  3.73M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  3.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  3.91M|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|   829k|{
  205|   829k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  248|   829k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   829k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   829k|{
  151|   829k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   829k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   829k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   829k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 18.0k, False: 811k]
  |  |  ------------------
  ------------------
  155|  18.0k|        return unexpected(result.error());
  156|  18.0k|    }
  157|   811k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   811k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   829k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|   198k|{
  174|   198k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|   198k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS7_17basic_string_viewIT0_NS7_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  110|   198k|{
  111|   198k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   198k|    auto result = vscan_impl(buffer, format, args);
  114|   198k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 180k, False: 18.0k]
  |  |  ------------------
  ------------------
  115|   180k|        return unexpected(result.error());
  116|   180k|    }
  117|  18.0k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   198k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEERKT0_OSL_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|   198k|{
  192|   198k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|   198k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT_OSM_NS3_17basic_string_viewIT1_NS3_11char_traitsIS14_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS14_EEEE:
  126|   198k|{
  127|   198k|#if !SCN_DISABLE_LOCALE
  128|   198k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   198k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   198k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   198k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   198k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 180k, False: 18.0k]
  |  |  ------------------
  ------------------
  135|   180k|        return unexpected(result.error());
  136|   180k|    }
  137|  18.0k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   198k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|  18.0k|{
  205|  18.0k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  248|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  18.0k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  18.0k|{
  151|  18.0k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  18.0k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  18.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 18.0k, False: 0]
  |  |  ------------------
  ------------------
  155|  18.0k|        return unexpected(result.error());
  156|  18.0k|    }
  157|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  18.0k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NSC_17basic_string_viewIT0_NSC_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  110|  3.60M|{
  111|  3.60M|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  3.60M|    auto result = vscan_impl(buffer, format, args);
  114|  3.60M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  3.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 542k, False: 3.06M]
  |  |  ------------------
  ------------------
  115|   542k|        return unexpected(result.error());
  116|   542k|    }
  117|  3.06M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  3.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  3.60M|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT_OSH_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
  126|  3.60M|{
  127|  3.60M|#if !SCN_DISABLE_LOCALE
  128|  3.60M|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  3.60M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  3.60M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  3.60M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  3.60M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  3.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 542k, False: 3.06M]
  |  |  ------------------
  ------------------
  135|   542k|        return unexpected(result.error());
  136|   542k|    }
  137|  3.06M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  3.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  3.60M|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   716k|{
  151|   716k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   716k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   716k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   716k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 54.2k, False: 662k]
  |  |  ------------------
  ------------------
  155|  54.2k|        return unexpected(result.error());
  156|  54.2k|    }
  157|   662k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   662k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   716k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS7_17basic_string_viewIT0_NS7_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  110|   578k|{
  111|   578k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   578k|    auto result = vscan_impl(buffer, format, args);
  114|   578k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   578k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 542k, False: 36.1k]
  |  |  ------------------
  ------------------
  115|   542k|        return unexpected(result.error());
  116|   542k|    }
  117|  36.1k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  36.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   578k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT_OSM_NS3_17basic_string_viewIT1_NS3_11char_traitsIS14_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS14_EEEE:
  126|   578k|{
  127|   578k|#if !SCN_DISABLE_LOCALE
  128|   578k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   578k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   578k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   578k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   578k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   578k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 542k, False: 36.1k]
  |  |  ------------------
  ------------------
  135|   542k|        return unexpected(result.error());
  136|   542k|    }
  137|  36.1k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  36.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   578k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  54.2k|{
  151|  54.2k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  54.2k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  54.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  54.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 54.2k, False: 0]
  |  |  ------------------
  ------------------
  155|  54.2k|        return unexpected(result.error());
  156|  54.2k|    }
  157|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  54.2k|}

_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   476k|{
   90|   476k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   476k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   476k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NSB_17basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|  3.60M|{
   45|  3.60M|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|  3.60M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  3.60M|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   476k|{
  125|   476k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   476k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   476k|                                                         format, {});
  127|   476k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENSt3__16localeELPv0EEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vINSA_9remove_cvINSA_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT0_OSH_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|  3.60M|{
   61|  3.60M|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|  3.60M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|  3.60M|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|   100k|{
  159|   100k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|   100k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|   716k|{
   73|   716k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  248|   716k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|   716k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   488k|{
   90|   488k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   488k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   488k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   488k|{
  125|   488k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   488k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   488k|                                                         format, {});
  127|   488k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  98.4k|{
  159|  98.4k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  98.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  98.4k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   706k|{
   90|   706k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   706k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   706k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   706k|{
  125|   706k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   706k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   706k|                                                         format, {});
  127|   706k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|   138k|{
  159|   138k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|   138k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   599k|{
   90|   599k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   599k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   599k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   599k|{
  125|   599k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   599k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   599k|                                                         format, {});
  127|   599k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|   117k|{
  159|   117k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|   117k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   726k|{
   90|   726k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   726k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   726k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   726k|{
  125|   726k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   726k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   726k|                                                         format, {});
  127|   726k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|   142k|{
  159|   142k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|   142k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   611k|{
   90|   611k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   611k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   611k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   611k|{
  125|   611k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   611k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   611k|                                                         format, {});
  127|   611k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|   119k|{
  159|   119k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|   119k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|   119k|}
_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  90.4k|{
   90|  90.4k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  90.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  90.4k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|   578k|{
   45|   578k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|   578k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   578k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  90.4k|{
  125|  90.4k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  90.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  90.4k|                                                         format, {});
  127|  90.4k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT0_OSM_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|   578k|{
   61|   578k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|   578k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|   578k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  9.04k|{
  159|  9.04k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  9.04k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|  54.2k|{
   73|  54.2k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  248|  54.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|  54.2k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  90.4k|{
   90|  90.4k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  90.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  90.4k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  90.4k|{
  125|  90.4k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  90.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  90.4k|                                                         format, {});
  127|  90.4k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  9.04k|{
  159|  9.04k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  9.04k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  99.4k|{
   90|  99.4k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  99.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  99.4k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  99.4k|{
  125|  99.4k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  99.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  99.4k|                                                         format, {});
  127|  99.4k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  9.04k|{
  159|  9.04k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  9.04k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  99.4k|{
   90|  99.4k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  99.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  99.4k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  99.4k|{
  125|  99.4k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  99.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  99.4k|                                                         format, {});
  127|  99.4k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  9.04k|{
  159|  9.04k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  9.04k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  99.4k|{
   90|  99.4k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  99.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  99.4k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  99.4k|{
  125|  99.4k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  99.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  99.4k|                                                         format, {});
  127|  99.4k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  9.04k|{
  159|  9.04k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  9.04k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  99.4k|{
   90|  99.4k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  99.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  99.4k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  99.4k|{
  125|  99.4k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  99.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  99.4k|                                                         format, {});
  127|  99.4k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  9.04k|{
  159|  9.04k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  9.04k|}

_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|  9.27M|            {
 2693|  9.27M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  9.27M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|  9.27M|            {
 2672|  9.27M|                return decay_copy(t.begin());
 2673|  9.27M|            }
_ZN4nano6ranges6detail10decay_copyIPKcEENSt3__15decayIT_E4typeEOS7_:
 2605|   276M|    {
 2606|   276M|        return std::forward<T>(t);
 2607|   276M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  17.1M|            {
 3178|  17.1M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  17.1M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  17.1M|            {
 3158|  17.1M|                return t.data();
 3159|  17.1M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  17.1M|    {
 6095|  17.1M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 29.0k, False: 17.1M]
  ------------------
 6096|  17.1M|                   ? nullptr
 6097|  17.1M|                   : std::addressof(*ranges::begin(derived()));
 6098|  17.1M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  17.1M|            {
 3127|  17.1M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  17.1M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  17.1M|            {
 3098|  17.1M|                return bool((std::forward<T>(t).empty()));
 3099|  17.1M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  40.9M|        {
 6454|  40.9M|            return data_.begin_ == data_.end_;
 6455|  40.9M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  34.3M|    {
 6049|  34.3M|        return static_cast<const D&>(*this);
 6050|  34.3M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  70.5M|            {
 2693|  70.5M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  70.5M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  70.5M|            {
 2672|  70.5M|                return decay_copy(t.begin());
 2673|  70.5M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|   163M|        {
 6444|   163M|            return data_.begin_;
 6445|   163M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  17.1M|            {
 3038|  17.1M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  17.1M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  17.1M|            {
 3000|  17.1M|                return decay_copy(std::forward<T>(t).size());
 3001|  17.1M|            }
_ZN4nano6ranges6detail10decay_copyIlEENSt3__15decayIT_E4typeEOS5_:
 2605|  70.0M|    {
 2606|  70.0M|        return std::forward<T>(t);
 2607|  70.0M|    }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  41.0M|        {
 6462|  41.0M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  41.0M|                return data_.size_;
 6464|  41.0M|            }
 6465|  41.0M|            else {
 6466|  41.0M|                return data_.end_ - data_.begin_;
 6467|  41.0M|            }
 6468|  41.0M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  28.4M|            {
 3788|  28.4M|                ranges::advance(x, n);
 3789|  28.4M|                return x;
 3790|  28.4M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  28.4M|            {
 3678|  28.4M|                fn::impl(i, n);
 3679|  28.4M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  28.4M|            {
 3562|  28.4M|                r += n;
 3563|  28.4M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  86.6M|            {
 2693|  86.6M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  86.6M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  86.6M|            {
 2672|  86.6M|                return decay_copy(t.begin());
 2673|  86.6M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  39.2M|            {
 2759|  39.2M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  39.2M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  39.2M|            {
 2739|  39.2M|                return decay_copy(std::forward<T>(t).end());
 2740|  39.2M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE3endEv:
 6448|   104M|        {
 6449|   104M|            return data_.end_;
 6450|   104M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  17.5M|            {
 2759|  17.5M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  17.5M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEPKcSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  17.5M|            {
 2739|  17.5M|                return decay_copy(std::forward<T>(t).end());
 2740|  17.5M|            }
_ZN4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  68.1M|        {
 6375|  68.1M|        }
_ZN4nano6ranges6detail13subrange_dataIPKcS4_Lb0EEC2EOS4_S6_:
 6293|  68.1M|        {
 6294|  68.1M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   379k|            {
 2693|   379k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   379k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|   379k|            {
 2672|   379k|                return decay_copy(t.begin());
 2673|   379k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEEEENS3_5decayIT_E4typeEOSC_:
 2605|  1.93M|    {
 2606|  1.93M|        return std::forward<T>(t);
 2607|  1.93M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|   452k|            {
 2693|   452k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   452k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|   452k|            {
 2672|   452k|                return decay_copy(t.begin());
 2673|   452k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|   488k|        {
 6444|   488k|            return data_.begin_;
 6445|   488k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|   651k|            {
 2759|   651k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   651k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|   651k|            {
 2739|   651k|                return decay_copy(std::forward<T>(t).end());
 2740|   651k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|   651k|        {
 6449|   651k|            return data_.end_;
 6450|   651k|        }
_ZNK4nano6ranges6detail5next_2fnclINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EESE_E4typeESE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3787|  36.1k|            {
 3788|  36.1k|                ranges::advance(x, n);
 3789|  36.1k|                return x;
 3790|  36.1k|            }
_ZNK4nano6ranges6detail8advance_2fnclINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3677|  36.1k|            {
 3678|  36.1k|                fn::impl(i, n);
 3679|  36.1k|            }
_ZN4nano6ranges6detail8advance_2fn4implINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEEEENS5_9enable_ifIX22random_access_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3561|  36.1k|            {
 3562|  36.1k|                r += n;
 3563|  36.1k|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   415k|            {
 2759|   415k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   415k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEENS5_16__deque_iteratorIcPKcRSD_PKSE_lLl4096EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   415k|            {
 2739|   415k|                return decay_copy(std::forward<T>(t).end());
 2740|   415k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|   452k|        {
 6375|   452k|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_Lb0EEC2EOSA_SC_:
 6293|   452k|        {
 6294|   452k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSJ_:
 2692|  36.1k|            {
 2693|  36.1k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  36.1k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  36.1k|            {
 2672|  36.1k|                return decay_copy(t.begin());
 2673|  36.1k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|  2.03M|            {
 2693|  2.03M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  2.03M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|  2.03M|            {
 2672|  2.03M|                return decay_copy(t.begin());
 2673|  2.03M|            }
_ZN4nano6ranges6detail10decay_copyIPKwEENSt3__15decayIT_E4typeEOS7_:
 2605|   374M|    {
 2606|   374M|        return std::forward<T>(t);
 2607|   374M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  7.93M|            {
 3178|  7.93M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  7.93M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  7.93M|            {
 3158|  7.93M|                return t.data();
 3159|  7.93M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  7.93M|    {
 6095|  7.93M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 35.9k, False: 7.89M]
  ------------------
 6096|  7.93M|                   ? nullptr
 6097|  7.93M|                   : std::addressof(*ranges::begin(derived()));
 6098|  7.93M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  7.93M|            {
 3127|  7.93M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  7.93M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  7.93M|            {
 3098|  7.93M|                return bool((std::forward<T>(t).empty()));
 3099|  7.93M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  12.5M|        {
 6454|  12.5M|            return data_.begin_ == data_.end_;
 6455|  12.5M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  15.8M|    {
 6049|  15.8M|        return static_cast<const D&>(*this);
 6050|  15.8M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  62.4M|            {
 2693|  62.4M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  62.4M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  62.4M|            {
 2672|  62.4M|                return decay_copy(t.begin());
 2673|  62.4M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|   160M|        {
 6444|   160M|            return data_.begin_;
 6445|   160M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  7.93M|            {
 3038|  7.93M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  7.93M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  7.93M|            {
 3000|  7.93M|                return decay_copy(std::forward<T>(t).size());
 3001|  7.93M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  28.9M|        {
 6462|  28.9M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  28.9M|                return data_.size_;
 6464|  28.9M|            }
 6465|  28.9M|            else {
 6466|  28.9M|                return data_.end_ - data_.begin_;
 6467|  28.9M|            }
 6468|  28.9M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  32.6M|            {
 3788|  32.6M|                ranges::advance(x, n);
 3789|  32.6M|                return x;
 3790|  32.6M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  32.6M|            {
 3678|  32.6M|                fn::impl(i, n);
 3679|  32.6M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  32.6M|            {
 3562|  32.6M|                r += n;
 3563|  32.6M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  92.2M|            {
 2693|  92.2M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  92.2M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  92.2M|            {
 2672|  92.2M|                return decay_copy(t.begin());
 2673|  92.2M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  34.5M|            {
 2759|  34.5M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  34.5M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  34.5M|            {
 2739|  34.5M|                return decay_copy(std::forward<T>(t).end());
 2740|  34.5M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE3endEv:
 6448|   217M|        {
 6449|   217M|            return data_.end_;
 6450|   217M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  10.6M|            {
 2759|  10.6M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  10.6M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEPKwSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  10.6M|            {
 2739|  10.6M|                return decay_copy(std::forward<T>(t).end());
 2740|  10.6M|            }
_ZN4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  60.8M|        {
 6375|  60.8M|        }
_ZN4nano6ranges6detail13subrange_dataIPKwS4_Lb0EEC2EOS4_S6_:
 6293|  60.8M|        {
 6294|  60.8M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  1.13M|            {
 2693|  1.13M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  1.13M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|  1.13M|            {
 2672|  1.13M|                return decay_copy(t.begin());
 2673|  1.13M|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEEEENS3_5decayIT_E4typeEOSC_:
 2605|  5.76M|    {
 2606|  5.76M|        return std::forward<T>(t);
 2607|  5.76M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  1.28M|            {
 2693|  1.28M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  1.28M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  1.28M|            {
 2672|  1.28M|                return decay_copy(t.begin());
 2673|  1.28M|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|  1.35M|        {
 6444|  1.35M|            return data_.begin_;
 6445|  1.35M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  2.06M|            {
 2759|  2.06M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  2.06M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  2.06M|            {
 2739|  2.06M|                return decay_copy(std::forward<T>(t).end());
 2740|  2.06M|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|  2.06M|        {
 6449|  2.06M|            return data_.end_;
 6450|  2.06M|        }
_ZNK4nano6ranges6detail5next_2fnclINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EESE_E4typeESE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3787|  72.3k|            {
 3788|  72.3k|                ranges::advance(x, n);
 3789|  72.3k|                return x;
 3790|  72.3k|            }
_ZNK4nano6ranges6detail8advance_2fnclINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3677|  72.3k|            {
 3678|  72.3k|                fn::impl(i, n);
 3679|  72.3k|            }
_ZN4nano6ranges6detail8advance_2fn4implINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX22random_access_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3561|  72.3k|            {
 3562|  72.3k|                r += n;
 3563|  72.3k|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  1.21M|            {
 2759|  1.21M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.21M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEENS5_16__deque_iteratorIwPKwRSD_PKSE_lLl1024EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  1.21M|            {
 2739|  1.21M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.21M|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|  1.28M|        {
 6375|  1.28M|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_Lb0EEC2EOSA_SC_:
 6293|  1.28M|        {
 6294|  1.28M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSJ_:
 2692|  72.3k|            {
 2693|  72.3k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  72.3k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  72.3k|            {
 2672|  72.3k|                return decay_copy(t.begin());
 2673|  72.3k|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  7.43M|        {
 6444|  7.43M|            return data_.begin_;
 6445|  7.43M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  22.4M|        {
 6444|  22.4M|            return data_.begin_;
 6445|  22.4M|        }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  47.5M|    {
 6044|  47.5M|        return static_cast<D&>(*this);
 6045|  47.5M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  23.7M|            {
 3098|  23.7M|                return bool((std::forward<T>(t).empty()));
 3099|  23.7M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  23.7M|            {
 3127|  23.7M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  23.7M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  23.7M|    {
 6085|  23.7M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 0, False: 23.7M]
  ------------------
 6086|  23.7M|                   ? nullptr
 6087|  23.7M|                   : std::addressof(*ranges::begin(derived()));
 6088|  23.7M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|  53.6M|            {
 2739|  53.6M|                return decay_copy(std::forward<T>(t).end());
 2740|  53.6M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|  53.6M|            {
 2759|  53.6M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  53.6M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  9.18M|    {
 6044|  9.18M|        return static_cast<D&>(*this);
 6045|  9.18M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  4.59M|            {
 3098|  4.59M|                return bool((std::forward<T>(t).empty()));
 3099|  4.59M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  4.59M|            {
 3127|  4.59M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  4.59M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  4.59M|    {
 6085|  4.59M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 0, False: 4.59M]
  ------------------
 6086|  4.59M|                   ? nullptr
 6087|  4.59M|                   : std::addressof(*ranges::begin(derived()));
 6088|  4.59M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|   172M|            {
 2739|   172M|                return decay_copy(std::forward<T>(t).end());
 2740|   172M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|   172M|            {
 2759|   172M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   172M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  14.5M|            {
 3780|  14.5M|                ++x;
 3781|  14.5M|                return x;
 3782|  14.5M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  23.8M|            {
 3038|  23.8M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  23.8M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  23.8M|            {
 3000|  23.8M|                return decay_copy(std::forward<T>(t).size());
 3001|  23.8M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  23.7M|            {
 3178|  23.7M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  23.7M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  23.7M|            {
 3158|  23.7M|                return t.data();
 3159|  23.7M|            }
_ZNK4nano6ranges6detail5prev_2fnclIPKcEENSt3__19enable_ifIX22bidirectional_iteratorIT_EES9_E4typeES9_:
 3827|  2.53M|            {
 3828|  2.53M|                --x;
 3829|  2.53M|                return x;
 3830|  2.53M|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 3076|  1.69M|            {
 3077|  1.69M|                return fn::impl(std::forward<T>(t));
 3078|  1.69M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISF_EENS0_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSF_EEEEE15difference_typeEE4typeELm8EElSO_E4typeE_EEOSF_:
 3066|  1.69M|            {
 3067|  1.69M|                return static_cast<ssize_return_t<T>>(
 3068|  1.69M|                    ranges::size(std::forward<T>(t)));
 3069|  1.69M|            }
_ZNK4nano6ranges6detail5size_2fnclIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSE_:
 3037|  1.69M|            {
 3038|  1.69M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  1.69M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  1.69M|            {
 3000|  1.69M|                return decay_copy(std::forward<T>(t).size());
 3001|  1.69M|            }
_ZN4nano6ranges6detail10decay_copyImEENSt3__15decayIT_E4typeEOS5_:
 2605|  20.2M|    {
 2606|  20.2M|        return std::forward<T>(t);
 2607|  20.2M|    }
_ZNK4nano6ranges6detail6ssize_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSB_:
 3076|  18.5M|            {
 3077|  18.5M|                return fn::impl(std::forward<T>(t));
 3078|  18.5M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISC_EENS0_20incrementable_traitsIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRSC_EEEEE15difference_typeEE4typeELm8EElSL_E4typeE_EEOSC_:
 3066|  18.5M|            {
 3067|  18.5M|                return static_cast<ssize_return_t<T>>(
 3068|  18.5M|                    ranges::size(std::forward<T>(t)));
 3069|  18.5M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 3037|  18.5M|            {
 3038|  18.5M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  18.5M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESC_E4typeEOSE_NS1_12priority_tagILm2EEE:
 2999|  18.5M|            {
 3000|  18.5M|                return decay_copy(std::forward<T>(t).size());
 3001|  18.5M|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS9_DpOSA_:
 1299|  18.1M|            {
 1300|  18.1M|                return fn::impl(std::forward<F>(f),
 1301|  18.1M|                                std::forward<Args>(args)...);
 1302|  18.1M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJRKcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS9_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISC_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSC_DpOSF_:
 1288|  18.1M|            {
 1289|  18.1M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  18.1M|            }
_ZNK4nano6ranges8identityclIRKcEEOT_S6_:
 1141|  18.1M|    {
 1142|  18.1M|        return std::forward<T>(t);
 1143|  18.1M|    }
_ZNK4nano6ranges6detail9distance_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  28.7M|            {
 3756|  28.7M|                return fn::impl(std::move(first), std::move(last));
 3757|  28.7M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKcS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  28.7M|            {
 3716|  28.7M|                return s - i;
 3717|  28.7M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  1.89M|        {
 6375|  1.89M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  1.89M|        {
 6294|  1.89M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  3.58M|            {
 2693|  3.58M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  3.58M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  3.58M|            {
 2672|  3.58M|                return decay_copy(t.begin());
 2673|  3.58M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__15decayIT_E4typeEOSB_:
 2605|  7.07M|    {
 2606|  7.07M|        return std::forward<T>(t);
 2607|  7.07M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  1.23M|            {
 2759|  1.23M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.23M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  1.23M|            {
 2739|  1.23M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.23M|            }
_ZN4nano6ranges6detail10decay_copyINS0_18default_sentinel_tEEENSt3__15decayIT_E4typeEOS6_:
 2605|  11.3M|    {
 2606|  11.3M|        return std::forward<T>(t);
 2607|  11.3M|    }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  2.92M|        {
 6449|  2.92M|            return data_.end_;
 6450|  2.92M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EE5beginEv:
 6443|   108k|        {
 6444|   108k|            return data_.begin_;
 6445|   108k|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EE3endEv:
 6448|   108k|        {
 6449|   108k|            return data_.end_;
 6450|   108k|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S8_:
 6374|  36.1k|        {
 6375|  36.1k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_Lb0EEC2EOS8_SA_:
 6293|  36.1k|        {
 6294|  36.1k|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|   470k|            {
 3780|   470k|                ++x;
 3781|   470k|                return x;
 3782|   470k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbcESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|   271k|        {
 6793|   271k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   271k|                                    proj);
 6795|   271k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbcESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   271k|        {
 6761|   307k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 307k, False: 12]
  ------------------
 6762|   307k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 271k, False: 36.1k]
  ------------------
 6763|   271k|                    return first;
 6764|   271k|                }
 6765|  36.1k|                ++first;
 6766|  36.1k|            }
 6767|     12|            return first;
 6768|   271k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbcES9_EEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|   307k|            {
 1300|   307k|                return fn::impl(std::forward<F>(f),
 1301|   307k|                                std::forward<Args>(args)...);
 1302|   307k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbcES9_EEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSC_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISF_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSF_DpOSI_:
 1288|   307k|            {
 1289|   307k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   307k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|   307k|            {
 1300|   307k|                return fn::impl(std::forward<F>(f),
 1301|   307k|                                std::forward<Args>(args)...);
 1302|   307k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISA_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSA_DpOSD_:
 1288|   307k|            {
 1289|   307k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   307k|            }
_ZNK4nano6ranges8identityclIcEEOT_S4_:
 1141|   307k|    {
 1142|   307k|        return std::forward<T>(t);
 1143|   307k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  1.69M|            {
 2759|  1.69M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.69M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  1.69M|            {
 2739|  1.69M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.69M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  3.48M|            {
 2693|  3.48M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  3.48M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  3.48M|            {
 2672|  3.48M|                return decay_copy(t.begin());
 2673|  3.48M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  4.59M|            {
 3178|  4.59M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  4.59M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  4.59M|            {
 3158|  4.59M|                return t.data();
 3159|  4.59M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  21.0M|            {
 3038|  21.0M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  21.0M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  21.0M|            {
 3000|  21.0M|                return decay_copy(std::forward<T>(t).size());
 3001|  21.0M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  12.8M|            {
 3780|  12.8M|                ++x;
 3781|  12.8M|                return x;
 3782|  12.8M|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSC_:
 3076|  16.4M|            {
 3077|  16.4M|                return fn::impl(std::forward<T>(t));
 3078|  16.4M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNSt3__111conditionalIXltstNSE_9enable_ifIX5rangeISD_EENS0_20incrementable_traitsIDTclL_ZNSC_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSD_:
 3066|  16.4M|            {
 3067|  16.4M|                return static_cast<ssize_return_t<T>>(
 3068|  16.4M|                    ranges::size(std::forward<T>(t)));
 3069|  16.4M|            }
_ZNK4nano6ranges6detail5prev_2fnclIPKwEENSt3__19enable_ifIX22bidirectional_iteratorIT_EES9_E4typeES9_:
 3827|  2.07M|            {
 3828|  2.07M|                --x;
 3829|  2.07M|                return x;
 3830|  2.07M|            }
_ZNK4nano6ranges6detail9distance_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  17.3M|            {
 3756|  17.3M|                return fn::impl(std::move(first), std::move(last));
 3757|  17.3M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKwS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  17.3M|            {
 3716|  17.3M|                return s - i;
 3717|  17.3M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  5.47M|        {
 6375|  5.47M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  5.47M|        {
 6294|  5.47M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  11.3M|            {
 2693|  11.3M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  11.3M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  11.3M|            {
 2672|  11.3M|                return decay_copy(t.begin());
 2673|  11.3M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__15decayIT_E4typeEOSB_:
 2605|  21.4M|    {
 2606|  21.4M|        return std::forward<T>(t);
 2607|  21.4M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  3.54M|            {
 2759|  3.54M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  3.54M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  3.54M|            {
 2739|  3.54M|                return decay_copy(std::forward<T>(t).end());
 2740|  3.54M|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  8.46M|        {
 6449|  8.46M|            return data_.end_;
 6450|  8.46M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EE5beginEv:
 6443|   325k|        {
 6444|   325k|            return data_.begin_;
 6445|   325k|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EE3endEv:
 6448|   325k|        {
 6449|   325k|            return data_.end_;
 6450|   325k|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S8_:
 6374|   108k|        {
 6375|   108k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_Lb0EEC2EOS8_SA_:
 6293|   108k|        {
 6294|   108k|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|  1.37M|            {
 3780|  1.37M|                ++x;
 3781|  1.37M|                return x;
 3782|  1.37M|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbwESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|   777k|        {
 6793|   777k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   777k|                                    proj);
 6795|   777k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbwESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   777k|        {
 6761|  1.10M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 1.10M, False: 36]
  ------------------
 6762|  1.10M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 777k, False: 325k]
  ------------------
 6763|   777k|                    return first;
 6764|   777k|                }
 6765|   325k|                ++first;
 6766|   325k|            }
 6767|     36|            return first;
 6768|   777k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbwES9_EEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|  1.10M|            {
 1300|  1.10M|                return fn::impl(std::forward<F>(f),
 1301|  1.10M|                                std::forward<Args>(args)...);
 1302|  1.10M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbwES9_EEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSC_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISF_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSF_DpOSI_:
 1288|  1.10M|            {
 1289|  1.10M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  1.10M|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|  1.10M|            {
 1300|  1.10M|                return fn::impl(std::forward<F>(f),
 1301|  1.10M|                                std::forward<Args>(args)...);
 1302|  1.10M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISA_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSA_DpOSD_:
 1288|  1.10M|            {
 1289|  1.10M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  1.10M|            }
_ZNK4nano6ranges8identityclIwEEOT_S4_:
 1141|  1.10M|    {
 1142|  1.10M|        return std::forward<T>(t);
 1143|  1.10M|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  4.91M|            {
 2759|  4.91M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  4.91M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  4.91M|            {
 2739|  4.91M|                return decay_copy(std::forward<T>(t).end());
 2740|  4.91M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  10.1M|            {
 2693|  10.1M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  10.1M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  10.1M|            {
 2672|  10.1M|                return decay_copy(t.begin());
 2673|  10.1M|            }
find_whitespace.cpp:_ZNK4nano6ranges6detail10find_if_fnclIRNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEENS0_8identityEZN3scn2v24impl33find_classic_nonspace_narrow_fastES8_E3$_3EENS4_9enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SA_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSG_EEEENS1_16projected_helperISO_SJ_vEEEEEENSI_IX14borrowed_rangeISG_EEE4typeISO_NS0_8danglingEEEE4typeEOSG_SH_SJ_:
 6792|  8.88M|        {
 6793|  8.88M|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  8.88M|                                    proj);
 6795|  8.88M|        }
find_whitespace.cpp:_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEE3$_3NS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|  8.88M|        {
 6761|  18.3M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 18.1M, False: 151k]
  ------------------
 6762|  18.1M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 8.73M, False: 9.44M]
  ------------------
 6763|  8.73M|                    return first;
 6764|  8.73M|                }
 6765|  9.44M|                ++first;
 6766|  9.44M|            }
 6767|   151k|            return first;
 6768|  8.88M|        }
find_whitespace.cpp:_ZNK4nano6ranges6detail7invoke_2fnclIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSH_DpOSI_:
 1299|  18.1M|            {
 1300|  18.1M|                return fn::impl(std::forward<F>(f),
 1301|  18.1M|                                std::forward<Args>(args)...);
 1302|  18.1M|            }
find_whitespace.cpp:_ZN4nano6ranges6detail7invoke_2fn4implIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEENS8_9enable_ifIXntsr3std17is_member_pointerINS8_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISJ_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSJ_DpOSM_:
 1288|  18.1M|            {
 1289|  18.1M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  18.1M|            }

_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
   49|   741k|{
   50|   741k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|   741k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|   741k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
   49|   253k|{
   50|   253k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|   253k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|   253k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA51_KcEEEDaDpOT_:
   49|  75.6k|{
   50|  75.6k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  75.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  75.6k|}
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|   271k|    {
   44|   271k|    }
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|   777k|    {
   44|   777k|    }
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA17_KcEEEDaDpOT_:
   49|   107k|{
   50|   107k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|   107k|}

_ZNK3scn2v28expectedIlNS0_10scan_errorEEcvbEv:
 1190|  19.8M|    {
 1191|  19.8M|        return has_value();
 1192|  19.8M|    }
_ZNK3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  188|  38.1M|    {
  189|  38.1M|        return m_has_value;
  190|  38.1M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5errorEv:
 1196|  3.03M|    {
 1197|  3.03M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  3.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  3.03M|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  3.03M|    {
  172|  3.03M|        return m_unexpected;
  173|  3.03M|    }
_ZNR3scn2v210unexpectedINS0_10scan_errorEE5errorEv:
   71|  22.9M|    {
   72|  22.9M|        return m_unexpected;
   73|  22.9M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
   57|  11.3M|    {
   58|  11.3M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  11.3M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  11.3M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   379k|    {
 1078|   379k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   379k|    {
  151|   379k|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
   66|  13.4M|    {
   67|  13.4M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  13.4M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  13.4M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  8.66M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1250|  15.2M|    {
 1251|  15.2M|        return value();
 1252|  15.2M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1220|  15.2M|    {
 1221|  15.2M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  15.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  15.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  15.2M|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  154|  15.2M|    {
  155|  15.2M|        return m_value;
  156|  15.2M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  8.28M|    {
 1034|  8.28M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  8.28M|    {
  142|  8.28M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  8.66M|    {
 1191|  8.66M|        return has_value();
 1192|  8.66M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  17.3M|    {
  189|  17.3M|        return m_has_value;
  190|  17.3M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   379k|    {
 1197|   379k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   379k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   379k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   379k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   379k|    {
  172|   379k|        return m_unexpected;
  173|   379k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  63.2k|    {
 1078|  63.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  63.2k|    {
  151|  63.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.12M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  7.47M|    {
 1251|  7.47M|        return value();
 1252|  7.47M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  8.28M|    {
 1221|  8.28M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  8.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  8.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  8.28M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  8.28M|    {
  155|  8.28M|        return m_value;
  156|  8.28M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|  1.06M|    {
 1034|  1.06M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|  1.06M|    {
  142|  1.06M|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|  1.12M|    {
 1191|  1.12M|        return has_value();
 1192|  1.12M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.18M|    {
  189|  2.18M|        return m_has_value;
  190|  2.18M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|  1.06M|    {
 1274|  1.06M|        return std::addressof(value());
 1275|  1.06M|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|  1.06M|    {
 1221|  1.06M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.06M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.06M|    {
  155|  1.06M|        return m_value;
  156|  1.06M|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|   811k|    {
 1263|   811k|        return std::move(value());
 1264|   811k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  63.2k|    {
 1078|  63.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  63.2k|    {
  151|  63.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.15M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|  1.08M|    {
 1034|  1.08M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|  1.08M|    {
  142|  1.08M|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|  1.15M|    {
 1191|  1.15M|        return has_value();
 1192|  1.15M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.23M|    {
  189|  2.23M|        return m_has_value;
  190|  2.23M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|  1.08M|    {
 1274|  1.08M|        return std::addressof(value());
 1275|  1.08M|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|  1.08M|    {
 1221|  1.08M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.08M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.08M|    {
  155|  1.08M|        return m_value;
  156|  1.08M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  63.2k|    {
 1078|  63.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  63.2k|    {
  151|  63.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.71M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|  1.65M|    {
 1034|  1.65M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|  1.65M|    {
  142|  1.65M|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|  1.71M|    {
 1191|  1.71M|        return has_value();
 1192|  1.71M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  3.37M|    {
  189|  3.37M|        return m_has_value;
  190|  3.37M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|  1.65M|    {
 1274|  1.65M|        return std::addressof(value());
 1275|  1.65M|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|  1.65M|    {
 1221|  1.65M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.65M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.65M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.65M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.65M|    {
  155|  1.65M|        return m_value;
  156|  1.65M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  63.2k|    {
 1078|  63.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  63.2k|    {
  151|  63.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.42M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|  1.36M|    {
 1034|  1.36M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|  1.36M|    {
  142|  1.36M|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|  1.42M|    {
 1191|  1.42M|        return has_value();
 1192|  1.42M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.79M|    {
  189|  2.79M|        return m_has_value;
  190|  2.79M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|  1.36M|    {
 1274|  1.36M|        return std::addressof(value());
 1275|  1.36M|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|  1.36M|    {
 1221|  1.36M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.36M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.36M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.36M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.36M|    {
  155|  1.36M|        return m_value;
  156|  1.36M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  63.2k|    {
 1078|  63.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  63.2k|    {
  151|  63.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.77M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|  1.71M|    {
 1034|  1.71M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|  1.71M|    {
  142|  1.71M|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|  1.77M|    {
 1191|  1.77M|        return has_value();
 1192|  1.77M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  3.49M|    {
  189|  3.49M|        return m_has_value;
  190|  3.49M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|  1.71M|    {
 1274|  1.71M|        return std::addressof(value());
 1275|  1.71M|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|  1.71M|    {
 1221|  1.71M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.71M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.71M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.71M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.71M|    {
  155|  1.71M|        return m_value;
  156|  1.71M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  63.2k|    {
 1078|  63.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  63.2k|    {
  151|  63.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.46M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|  1.39M|    {
 1034|  1.39M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|  1.39M|    {
  142|  1.39M|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|  1.46M|    {
 1191|  1.46M|        return has_value();
 1192|  1.46M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.85M|    {
  189|  2.85M|        return m_has_value;
  190|  2.85M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|  1.39M|    {
 1274|  1.39M|        return std::addressof(value());
 1275|  1.39M|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|  1.39M|    {
 1221|  1.39M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.39M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.39M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.39M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.39M|    {
  155|  1.39M|        return m_value;
  156|  1.39M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|   379k|    {
 1078|   379k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|   379k|    {
  151|   379k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   415k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|  36.1k|    {
 1034|  36.1k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSG_EvEENS7_10in_place_tEDpOT_:
  141|  36.1k|    {
  142|  36.1k|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   415k|    {
 1191|   415k|        return has_value();
 1192|   415k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|   831k|    {
  189|   831k|        return m_has_value;
  190|   831k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   379k|    {
 1197|   379k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   379k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   379k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   379k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   379k|    {
  172|   379k|        return m_unexpected;
  173|   379k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  63.2k|    {
 1078|  63.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  63.2k|    {
  151|  63.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  69.3k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEERT_v:
 1250|  36.1k|    {
 1251|  36.1k|        return value();
 1252|  36.1k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|  36.1k|    {
 1221|  36.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  36.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  36.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  36.1k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  36.1k|    {
  155|  36.1k|        return m_value;
  156|  36.1k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  6.02k|    {
 1034|  6.02k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  6.02k|    {
  142|  6.02k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|  69.3k|    {
 1191|  69.3k|        return has_value();
 1192|  69.3k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  75.3k|    {
  189|  75.3k|        return m_has_value;
  190|  75.3k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|  6.02k|    {
 1274|  6.02k|        return std::addressof(value());
 1275|  6.02k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  6.02k|    {
 1221|  6.02k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  6.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  6.02k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  6.02k|    {
  155|  6.02k|        return m_value;
  156|  6.02k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  63.2k|    {
 1078|  63.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  63.2k|    {
  151|  63.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  69.3k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  6.02k|    {
 1034|  6.02k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  6.02k|    {
  142|  6.02k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|  69.3k|    {
 1191|  69.3k|        return has_value();
 1192|  69.3k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  75.3k|    {
  189|  75.3k|        return m_has_value;
  190|  75.3k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|  6.02k|    {
 1274|  6.02k|        return std::addressof(value());
 1275|  6.02k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  6.02k|    {
 1221|  6.02k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  6.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  6.02k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  6.02k|    {
  155|  6.02k|        return m_value;
  156|  6.02k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  63.2k|    {
 1078|  63.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  63.2k|    {
  151|  63.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  69.3k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  6.02k|    {
 1034|  6.02k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  6.02k|    {
  142|  6.02k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|  69.3k|    {
 1191|  69.3k|        return has_value();
 1192|  69.3k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  75.3k|    {
  189|  75.3k|        return m_has_value;
  190|  75.3k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|  6.02k|    {
 1274|  6.02k|        return std::addressof(value());
 1275|  6.02k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  6.02k|    {
 1221|  6.02k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  6.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  6.02k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  6.02k|    {
  155|  6.02k|        return m_value;
  156|  6.02k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  63.2k|    {
 1078|  63.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  63.2k|    {
  151|  63.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  69.3k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  6.02k|    {
 1034|  6.02k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  6.02k|    {
  142|  6.02k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|  69.3k|    {
 1191|  69.3k|        return has_value();
 1192|  69.3k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  75.3k|    {
  189|  75.3k|        return m_has_value;
  190|  75.3k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|  6.02k|    {
 1274|  6.02k|        return std::addressof(value());
 1275|  6.02k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  6.02k|    {
 1221|  6.02k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  6.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  6.02k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  6.02k|    {
  155|  6.02k|        return m_value;
  156|  6.02k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  63.2k|    {
 1078|  63.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  63.2k|    {
  151|  63.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  69.3k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  6.02k|    {
 1034|  6.02k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  6.02k|    {
  142|  6.02k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|  69.3k|    {
 1191|  69.3k|        return has_value();
 1192|  69.3k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  75.3k|    {
  189|  75.3k|        return m_has_value;
  190|  75.3k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|  6.02k|    {
 1274|  6.02k|        return std::addressof(value());
 1275|  6.02k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  6.02k|    {
 1221|  6.02k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  6.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  6.02k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  6.02k|    {
  155|  6.02k|        return m_value;
  156|  6.02k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  63.2k|    {
 1078|  63.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  63.2k|    {
  151|  63.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  69.3k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  6.02k|    {
 1034|  6.02k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  6.02k|    {
  142|  6.02k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|  69.3k|    {
 1191|  69.3k|        return has_value();
 1192|  69.3k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  75.3k|    {
  189|  75.3k|        return m_has_value;
  190|  75.3k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|  6.02k|    {
 1274|  6.02k|        return std::addressof(value());
 1275|  6.02k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  6.02k|    {
 1221|  6.02k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  6.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  6.02k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  6.02k|    {
  155|  6.02k|        return m_value;
  156|  6.02k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|  1.13M|    {
 1078|  1.13M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|  1.13M|    {
  151|  1.13M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  7.93M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  6.79M|    {
 1034|  6.79M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  6.79M|    {
  142|  6.79M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  7.93M|    {
 1191|  7.93M|        return has_value();
 1192|  7.93M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  15.8M|    {
  189|  15.8M|        return m_has_value;
  190|  15.8M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|  1.13M|    {
 1197|  1.13M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.13M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  1.13M|    {
  172|  1.13M|        return m_unexpected;
  173|  1.13M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|   189k|    {
 1078|   189k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|   189k|    {
  151|   189k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.05M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  6.13M|    {
 1251|  6.13M|        return value();
 1252|  6.13M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  6.79M|    {
 1221|  6.79M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  6.79M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.79M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  6.79M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  6.79M|    {
  155|  6.79M|        return m_value;
  156|  6.79M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   864k|    {
 1034|   864k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   864k|    {
  142|   864k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|  1.05M|    {
 1191|  1.05M|        return has_value();
 1192|  1.05M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.91M|    {
  189|  1.91M|        return m_has_value;
  190|  1.91M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|   864k|    {
 1274|   864k|        return std::addressof(value());
 1275|   864k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   864k|    {
 1221|   864k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   864k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   864k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   864k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   864k|    {
  155|   864k|        return m_value;
  156|   864k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|   662k|    {
 1263|   662k|        return std::move(value());
 1264|   662k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|   189k|    {
 1078|   189k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|   189k|    {
  151|   189k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.07M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   886k|    {
 1034|   886k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   886k|    {
  142|   886k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|  1.07M|    {
 1191|  1.07M|        return has_value();
 1192|  1.07M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.96M|    {
  189|  1.96M|        return m_has_value;
  190|  1.96M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|   886k|    {
 1274|   886k|        return std::addressof(value());
 1275|   886k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   886k|    {
 1221|   886k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   886k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   886k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   886k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   886k|    {
  155|   886k|        return m_value;
  156|   886k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|   189k|    {
 1078|   189k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|   189k|    {
  151|   189k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.55M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|  1.36M|    {
 1034|  1.36M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|  1.36M|    {
  142|  1.36M|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|  1.55M|    {
 1191|  1.55M|        return has_value();
 1192|  1.55M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.91M|    {
  189|  2.91M|        return m_has_value;
  190|  2.91M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|  1.36M|    {
 1274|  1.36M|        return std::addressof(value());
 1275|  1.36M|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|  1.36M|    {
 1221|  1.36M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.36M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.36M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.36M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.36M|    {
  155|  1.36M|        return m_value;
  156|  1.36M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|   189k|    {
 1078|   189k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|   189k|    {
  151|   189k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.31M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|  1.12M|    {
 1034|  1.12M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|  1.12M|    {
  142|  1.12M|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|  1.31M|    {
 1191|  1.31M|        return has_value();
 1192|  1.31M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.44M|    {
  189|  2.44M|        return m_has_value;
  190|  2.44M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|  1.12M|    {
 1274|  1.12M|        return std::addressof(value());
 1275|  1.12M|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|  1.12M|    {
 1221|  1.12M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.12M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.12M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.12M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.12M|    {
  155|  1.12M|        return m_value;
  156|  1.12M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|   189k|    {
 1078|   189k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|   189k|    {
  151|   189k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.59M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|  1.40M|    {
 1034|  1.40M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|  1.40M|    {
  142|  1.40M|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|  1.59M|    {
 1191|  1.59M|        return has_value();
 1192|  1.59M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.99M|    {
  189|  2.99M|        return m_has_value;
  190|  2.99M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|  1.40M|    {
 1274|  1.40M|        return std::addressof(value());
 1275|  1.40M|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|  1.40M|    {
 1221|  1.40M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.40M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.40M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.40M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.40M|    {
  155|  1.40M|        return m_value;
  156|  1.40M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|   189k|    {
 1078|   189k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|   189k|    {
  151|   189k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.34M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|  1.15M|    {
 1034|  1.15M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|  1.15M|    {
  142|  1.15M|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|  1.34M|    {
 1191|  1.34M|        return has_value();
 1192|  1.34M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.49M|    {
  189|  2.49M|        return m_has_value;
  190|  2.49M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|  1.15M|    {
 1274|  1.15M|        return std::addressof(value());
 1275|  1.15M|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|  1.15M|    {
 1221|  1.15M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.15M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.15M|    {
  155|  1.15M|        return m_value;
  156|  1.15M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|  1.13M|    {
 1078|  1.13M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|  1.13M|    {
  151|  1.13M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.21M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|  72.3k|    {
 1034|  72.3k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSG_EvEENS7_10in_place_tEDpOT_:
  141|  72.3k|    {
  142|  72.3k|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  1.21M|    {
 1191|  1.21M|        return has_value();
 1192|  1.21M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.42M|    {
  189|  2.42M|        return m_has_value;
  190|  2.42M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|  1.13M|    {
 1197|  1.13M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.13M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  1.13M|    {
  172|  1.13M|        return m_unexpected;
  173|  1.13M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|   189k|    {
 1078|   189k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|   189k|    {
  151|   189k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   189k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEERT_v:
 1250|  72.3k|    {
 1251|  72.3k|        return value();
 1252|  72.3k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|  72.3k|    {
 1221|  72.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  72.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  72.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  72.3k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  72.3k|    {
  155|  72.3k|        return m_value;
  156|  72.3k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|      2|    {
 1034|      2|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|      2|    {
  142|      2|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|   189k|    {
 1191|   189k|        return has_value();
 1192|   189k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   189k|    {
  189|   189k|        return m_has_value;
  190|   189k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|      2|    {
 1274|      2|        return std::addressof(value());
 1275|      2|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|      2|    {
 1221|      2|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|      2|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      2|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|      2|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|      2|    {
  155|      2|        return m_value;
  156|      2|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|   189k|    {
 1078|   189k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|   189k|    {
  151|   189k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   189k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|      4|    {
 1034|      4|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|      4|    {
  142|      4|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|   189k|    {
 1191|   189k|        return has_value();
 1192|   189k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   189k|    {
  189|   189k|        return m_has_value;
  190|   189k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|      4|    {
 1274|      4|        return std::addressof(value());
 1275|      4|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|      4|    {
 1221|      4|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|      4|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      4|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|      4|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|      4|    {
  155|      4|        return m_value;
  156|      4|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|   189k|    {
 1078|   189k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|   189k|    {
  151|   189k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   207k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  18.0k|    {
 1034|  18.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  18.0k|    {
  142|  18.0k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|   207k|    {
 1191|   207k|        return has_value();
 1192|   207k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   226k|    {
  189|   226k|        return m_has_value;
  190|   226k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|  18.0k|    {
 1274|  18.0k|        return std::addressof(value());
 1275|  18.0k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  18.0k|    {
 1221|  18.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  18.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  18.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  18.0k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  18.0k|    {
  155|  18.0k|        return m_value;
  156|  18.0k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|   189k|    {
 1078|   189k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|   189k|    {
  151|   189k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   207k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  18.0k|    {
 1034|  18.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  18.0k|    {
  142|  18.0k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|   207k|    {
 1191|   207k|        return has_value();
 1192|   207k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   226k|    {
  189|   226k|        return m_has_value;
  190|   226k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|  18.0k|    {
 1274|  18.0k|        return std::addressof(value());
 1275|  18.0k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  18.0k|    {
 1221|  18.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  18.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  18.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  18.0k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  18.0k|    {
  155|  18.0k|        return m_value;
  156|  18.0k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|   189k|    {
 1078|   189k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|   189k|    {
  151|   189k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   207k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  18.0k|    {
 1034|  18.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  18.0k|    {
  142|  18.0k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|   207k|    {
 1191|   207k|        return has_value();
 1192|   207k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   226k|    {
  189|   226k|        return m_has_value;
  190|   226k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|  18.0k|    {
 1274|  18.0k|        return std::addressof(value());
 1275|  18.0k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  18.0k|    {
 1221|  18.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  18.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  18.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  18.0k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  18.0k|    {
  155|  18.0k|        return m_value;
  156|  18.0k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|   189k|    {
 1078|   189k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|   189k|    {
  151|   189k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   207k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  18.0k|    {
 1034|  18.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  18.0k|    {
  142|  18.0k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|   207k|    {
 1191|   207k|        return has_value();
 1192|   207k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   226k|    {
  189|   226k|        return m_has_value;
  190|   226k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|  18.0k|    {
 1274|  18.0k|        return std::addressof(value());
 1275|  18.0k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  18.0k|    {
 1221|  18.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  18.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  18.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  18.0k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  18.0k|    {
  155|  18.0k|        return m_value;
  156|  18.0k|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  8.55M|    {
 1405|  8.55M|        return detail::transform_error_impl(std::move(*this),
 1406|  8.55M|                                            std::forward<F>(f));
 1407|  8.55M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  8.55M|{
  927|  8.55M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  8.55M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  8.55M|        if (SCN_LIKELY(exp.has_value())) {
  930|  8.55M|            return result(*std::forward<Exp>(exp));
  931|  8.55M|        }
  932|       |
  933|  8.55M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  8.55M|        return result(unexpect, monostate{});
  935|  8.55M|    }
  936|  8.55M|    else {
  937|  8.55M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  8.55M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  8.55M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 8.51M, False: 35.6k]
  |  |  ------------------
  ------------------
  939|  8.55M|                   ? result(*std::forward<Exp>(exp))
  940|  8.55M|                   : result(unexpect,
  941|  35.6k|                            std::invoke(std::forward<F>(f),
  942|  35.6k|                                        std::forward<Exp>(exp).error()));
  943|  8.55M|    }
  944|  8.55M|}
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  35.5M|    {
  189|  35.5M|        return m_has_value;
  190|  35.5M|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  8.51M|    {
 1263|  8.51M|        return std::move(value());
 1264|  8.51M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  12.4M|    {
 1221|  12.4M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  12.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  12.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  12.4M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  12.4M|    {
  155|  12.4M|        return m_value;
  156|  12.4M|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  31.8M|    {
 1034|  31.8M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  31.8M|    {
  142|  31.8M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  32.3M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1206|  35.6k|    {
 1207|  35.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  35.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  35.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|  35.6k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|  37.6k|    {
  172|  37.6k|        return m_unexpected;
  173|  37.6k|    }
_ZNR3scn2v210unexpectedINS0_4impl9eof_errorEE5errorEv:
   71|   463k|    {
   72|   463k|        return m_unexpected;
   73|   463k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  35.6k|    {
 1088|  35.6k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|   523k|    {
  151|   523k|    }
_ZNK3scn2v28expectedIPKcNS0_10scan_errorEEcvbEv:
 1190|  32.3M|    {
 1191|  32.3M|        return has_value();
 1192|  32.3M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  188|  64.7M|    {
  189|  64.7M|        return m_has_value;
  190|  64.7M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5errorEv:
 1196|   523k|    {
 1197|   523k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   523k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   523k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   523k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   523k|    {
  172|   523k|        return m_unexpected;
  173|   523k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|   487k|    {
 1078|   487k|    }
_ZNO3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  25.9M|    {
 1263|  25.9M|        return std::move(value());
 1264|  25.9M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  31.8M|    {
 1221|  31.8M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  31.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  31.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  31.8M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  154|  31.8M|    {
  155|  31.8M|        return m_value;
  156|  31.8M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
   57|  1.17M|    {
   58|  1.17M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  1.17M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  1.17M|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1077|  3.03M|    {
 1078|  3.03M|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  150|  3.03M|    {
  151|  3.03M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  18.2M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
   57|  87.4k|    {
   58|  87.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  87.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  87.4k|    }
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  37.6k|    {
 1078|  37.6k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  37.6k|    {
  151|  37.6k|    }
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|   231k|    {
   67|   231k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   231k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|   231k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  23.0M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  23.0M|    {
 1034|  23.0M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  23.0M|    {
  142|  23.0M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1190|  14.5M|    {
 1191|  14.5M|        return has_value();
 1192|  14.5M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1196|  1.99k|    {
 1197|  1.99k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.99k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
   57|  71.4k|    {
   58|  71.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  71.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  71.4k|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  67.8k|    {
 1078|  67.8k|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_errorEE5errorEv:
   71|  17.7M|    {
   72|  17.7M|        return m_unexpected;
   73|  17.7M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  67.8k|    {
  151|  67.8k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|   360k|    {
   67|   360k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   360k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|   360k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  39.4M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|  3.91M|    {
 1251|  3.91M|        return value();
 1252|  3.91M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|  7.42M|    {
 1034|  7.42M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|  7.42M|    {
  142|  7.42M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
   57|  65.5M|    {
   58|  65.5M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  65.5M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  65.5M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  31.8M|    {
 1078|  31.8M|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_error4codeEE5errorEv:
   71|  65.5M|    {
   72|  65.5M|        return m_unexpected;
   73|  65.5M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  31.8M|    {
  151|  31.8M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
   66|  65.5M|    {
   67|  65.5M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  65.5M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  65.5M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1190|  39.4M|    {
 1191|  39.4M|        return has_value();
 1192|  39.4M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  55.0M|    {
  189|  55.0M|        return m_has_value;
  190|  55.0M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1196|  8.05M|    {
 1197|  8.05M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  8.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  8.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  8.05M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  8.05M|    {
  172|  8.05M|        return m_unexpected;
  173|  8.05M|    }
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  8.51M|    {
 1034|  8.51M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  8.51M|    {
  142|  8.51M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  8.51M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
   57|   144k|    {
   58|   144k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   144k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   144k|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|  7.52M|    {
 1251|  7.52M|        return value();
 1252|  7.52M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  7.52M|    {
 1221|  7.52M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  7.52M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.52M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  7.52M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  7.52M|    {
  155|  7.52M|        return m_value;
  156|  7.52M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  8.51M|    {
 1191|  8.51M|        return has_value();
 1192|  8.51M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  17.0M|    {
  189|  17.0M|        return m_has_value;
  190|  17.0M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  8.51M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  8.51M|    {
 1263|  8.51M|        return std::move(value());
 1264|  8.51M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  8.51M|    {
 1221|  8.51M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  8.51M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  8.51M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  8.51M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  8.51M|    {
  155|  8.51M|        return m_value;
  156|  8.51M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  95.4k|    {
 1034|  95.4k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  95.4k|    {
  142|  95.4k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1033|  8.51M|    {
 1034|  8.51M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  8.51M|    {
  142|  8.51M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|  8.51M|    {
 1405|  8.51M|        return detail::transform_error_impl(std::move(*this),
 1406|  8.51M|                                            std::forward<F>(f));
 1407|  8.51M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
  926|  8.51M|{
  927|  8.51M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  8.51M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  8.51M|        if (SCN_LIKELY(exp.has_value())) {
  930|  8.51M|            return result(*std::forward<Exp>(exp));
  931|  8.51M|        }
  932|       |
  933|  8.51M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  8.51M|        return result(unexpect, monostate{});
  935|  8.51M|    }
  936|  8.51M|    else {
  937|  8.51M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  8.51M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  8.51M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 8.51M, False: 0]
  |  |  ------------------
  ------------------
  939|  8.51M|                   ? result(*std::forward<Exp>(exp))
  940|  8.51M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  8.51M|    }
  944|  8.51M|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  188|  17.0M|    {
  189|  17.0M|        return m_has_value;
  190|  17.0M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1262|  8.51M|    {
 1263|  8.51M|        return std::move(value());
 1264|  8.51M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1220|  8.51M|    {
 1221|  8.51M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  8.51M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  8.51M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  8.51M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  154|  8.51M|    {
  155|  8.51M|        return m_value;
  156|  8.51M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1033|  8.51M|    {
 1034|  8.51M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  8.51M|    {
  142|  8.51M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  8.51M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1190|  8.51M|    {
 1191|  8.51M|        return has_value();
 1192|  8.51M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  188|  17.0M|    {
  189|  17.0M|        return m_has_value;
  190|  17.0M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1262|  8.51M|    {
 1263|  8.51M|        return std::move(value());
 1264|  8.51M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1220|  8.51M|    {
 1221|  8.51M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  8.51M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  8.51M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  8.51M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  154|  8.51M|    {
  155|  8.51M|        return m_value;
  156|  8.51M|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_LPv0ELSG_0EEEONS0_10unexpectedIT_EE:
 1077|  15.1k|    {
 1078|  15.1k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  311|  15.1k|    {
  312|  15.1k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  15.1k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  372|  15.1k|    {
  373|  15.1k|        scn::detail::construct_at(unexpected_ptr(),
  374|  15.1k|                                  std::forward<Args>(args)...);
  375|  15.1k|        m_has_value = false;
  376|  15.1k|    }
_ZN3scn2v26detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  101|   248k|{
  102|   248k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   248k|        T(std::forward<Args>(args)...);
  104|   248k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  45.5k|    {
  403|  45.5k|        return reinterpret_cast<unexpected<E>*>(
  404|  45.5k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  45.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  45.5k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   956k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  316|   956k|    {
  317|   956k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 940k, False: 15.1k]
  ------------------
  318|   940k|            destroy_value();
  319|   940k|        }
  320|  15.1k|        else {
  321|  15.1k|            destroy_unexpected();
  322|  15.1k|        }
  323|   956k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  360|  2.86M|    {
  361|  2.86M|        return m_has_value;
  362|  2.86M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|   940k|    {
  380|   940k|        scn::detail::destroy_at(value_ptr());
  381|   940k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEEEvPT_:
  107|   940k|{
  108|   940k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   940k|        for (auto& elem : *p) {
  110|   940k|            scn::detail::destroy_at(std::addressof(elem));
  111|   940k|        }
  112|   940k|    }
  113|   940k|    else {
  114|   940k|        p->~T();
  115|   940k|    }
  116|   940k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  2.82M|    {
  390|  2.82M|        return reinterpret_cast<T*>(
  391|  2.82M|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  2.82M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  2.82M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  15.1k|    {
  384|  15.1k|        scn::detail::destroy_at(unexpected_ptr());
  385|  15.1k|    }
_ZN3scn2v26detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  107|   248k|{
  108|   248k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   248k|        for (auto& elem : *p) {
  110|   248k|            scn::detail::destroy_at(std::addressof(elem));
  111|   248k|        }
  112|   248k|    }
  113|   248k|    else {
  114|   248k|        p->~T();
  115|   248k|    }
  116|   248k|}
_ZN3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISC_vEEOT_:
 1033|   940k|    {
 1034|   940k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSD_EvEENS3_10in_place_tEDpOT_:
  302|   940k|    {
  303|   940k|        construct(std::forward<Args>(args)...);
  304|   940k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9constructIJSD_EEEvDpOT_:
  366|   940k|    {
  367|   940k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|   940k|        m_has_value = true;
  369|   940k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEJSD_EEEPT_SF_DpOT0_:
  101|   940k|{
  102|   940k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   940k|        T(std::forward<Args>(args)...);
  104|   940k|}
_ZNK3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1190|   956k|    {
 1191|   956k|        return has_value();
 1192|   956k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1196|  15.1k|    {
 1197|  15.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  15.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  15.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  15.1k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  15.1k|    {
  344|  15.1k|        return *unexpected_ptr();
  345|  15.1k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEdeISC_LPv0EEEOT_v:
 1262|   940k|    {
 1263|   940k|        return std::move(value());
 1264|   940k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5valueISC_LPv0EEERT_v:
 1220|   940k|    {
 1221|   940k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   940k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   940k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   940k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9get_valueEv:
  326|   940k|    {
  327|   940k|        return *value_ptr();
  328|   940k|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  5.84M|    {
 1251|  5.84M|        return value();
 1252|  5.84M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
   57|   144k|    {
   58|   144k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   144k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   144k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1033|  15.1M|    {
 1034|  15.1M|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  141|  15.1M|    {
  142|  15.1M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    186|    {
 1078|    186|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    186|    {
  151|    186|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.30M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|  1.30M|    {
 1034|  1.30M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  1.30M|    {
  142|  1.30M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|   307k|    {
 1405|   307k|        return detail::transform_error_impl(std::move(*this),
 1406|   307k|                                            std::forward<F>(f));
 1407|   307k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   307k|{
  927|   307k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   307k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   307k|        if (SCN_LIKELY(exp.has_value())) {
  930|   307k|            return result(*std::forward<Exp>(exp));
  931|   307k|        }
  932|       |
  933|   307k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   307k|        return result(unexpect, monostate{});
  935|   307k|    }
  936|   307k|    else {
  937|   307k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   307k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   307k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 307k, False: 12]
  |  |  ------------------
  ------------------
  939|   307k|                   ? result(*std::forward<Exp>(exp))
  940|   307k|                   : result(unexpect,
  941|     12|                            std::invoke(std::forward<F>(f),
  942|     12|                                        std::forward<Exp>(exp).error()));
  943|   307k|    }
  944|   307k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  2.13M|    {
  189|  2.13M|        return m_has_value;
  190|  2.13M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|   831k|    {
 1263|   831k|        return std::move(value());
 1264|   831k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|   831k|    {
 1221|   831k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   831k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   831k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   831k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|   831k|    {
  155|   831k|        return m_value;
  156|   831k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|   379k|    {
 1034|   379k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   379k|    {
  142|   379k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   886k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    186|    {
 1207|    186|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    186|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    186|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    186|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    186|    {
  172|    186|        return m_unexpected;
  173|    186|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|   235k|    {
 1088|   235k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   506k|    {
  151|   506k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|   470k|    {
 1191|   470k|        return has_value();
 1192|   470k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    174|    {
 1078|    174|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    348|    {
  151|    348|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.95M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  1.39M|    {
 1078|  1.39M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  1.39M|    {
  151|  1.39M|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|  1.68M|    {
 1191|  1.68M|        return has_value();
 1192|  1.68M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  3.05M|    {
  189|  3.05M|        return m_has_value;
  190|  3.05M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|   307k|    {
 1197|   307k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   307k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   307k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   307k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|   542k|    {
  172|   542k|        return m_unexpected;
  173|   542k|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|   307k|    {
 1034|   307k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   307k|    {
  142|   307k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   307k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|   560k|    {
 1221|   560k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   560k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   560k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   560k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|   560k|    {
  155|   560k|        return m_value;
  156|   560k|    }
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1190|   307k|    {
 1191|   307k|        return has_value();
 1192|   307k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|   614k|    {
  189|   614k|        return m_has_value;
  190|   614k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   307k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|   307k|    {
 1263|   307k|        return std::move(value());
 1264|   307k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|   307k|    {
 1221|   307k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   307k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   307k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   307k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|   307k|    {
  155|   307k|        return m_value;
  156|   307k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|   524k|    {
 1405|   524k|        return detail::transform_error_impl(std::move(*this),
 1406|   524k|                                            std::forward<F>(f));
 1407|   524k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   524k|{
  927|   524k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   524k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   524k|        if (SCN_LIKELY(exp.has_value())) {
  930|   524k|            return result(*std::forward<Exp>(exp));
  931|   524k|        }
  932|       |
  933|   524k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   524k|        return result(unexpect, monostate{});
  935|   524k|    }
  936|   524k|    else {
  937|   524k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   524k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   524k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 524k, False: 174]
  |  |  ------------------
  ------------------
  939|   524k|                   ? result(*std::forward<Exp>(exp))
  940|   524k|                   : result(unexpect,
  941|    174|                            std::invoke(std::forward<F>(f),
  942|    174|                                        std::forward<Exp>(exp).error()));
  943|   524k|    }
  944|   524k|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|   560k|    {
 1034|   560k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   560k|    {
  142|   560k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    174|    {
 1088|    174|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|   560k|    {
 1263|   560k|        return std::move(value());
 1264|   560k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1033|   307k|    {
 1034|   307k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   307k|    {
  142|   307k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|   307k|    {
 1405|   307k|        return detail::transform_error_impl(std::move(*this),
 1406|   307k|                                            std::forward<F>(f));
 1407|   307k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
  926|   307k|{
  927|   307k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   307k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   307k|        if (SCN_LIKELY(exp.has_value())) {
  930|   307k|            return result(*std::forward<Exp>(exp));
  931|   307k|        }
  932|       |
  933|   307k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   307k|        return result(unexpect, monostate{});
  935|   307k|    }
  936|   307k|    else {
  937|   307k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   307k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   307k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 307k, False: 0]
  |  |  ------------------
  ------------------
  939|   307k|                   ? result(*std::forward<Exp>(exp))
  940|   307k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   307k|    }
  944|   307k|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  188|   614k|    {
  189|   614k|        return m_has_value;
  190|   614k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|   307k|    {
 1263|   307k|        return std::move(value());
 1264|   307k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|   307k|    {
 1221|   307k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   307k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   307k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   307k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  154|   307k|    {
  155|   307k|        return m_value;
  156|   307k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|   307k|    {
 1034|   307k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   307k|    {
  142|   307k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   307k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1190|   307k|    {
 1191|   307k|        return has_value();
 1192|   307k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   614k|    {
  189|   614k|        return m_has_value;
  190|   614k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|   307k|    {
 1263|   307k|        return std::move(value());
 1264|   307k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|   307k|    {
 1221|   307k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   307k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   307k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   307k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   307k|    {
  155|   307k|        return m_value;
  156|   307k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1404|   271k|    {
 1405|   271k|        return detail::transform_error_impl(std::move(*this),
 1406|   271k|                                            std::forward<F>(f));
 1407|   271k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESA_EEDaOT_OT0_:
  926|   271k|{
  927|   271k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   271k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   271k|        if (SCN_LIKELY(exp.has_value())) {
  930|   271k|            return result(*std::forward<Exp>(exp));
  931|   271k|        }
  932|       |
  933|   271k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   271k|        return result(unexpect, monostate{});
  935|   271k|    }
  936|   271k|    else {
  937|   271k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   271k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   271k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 36.1k, False: 235k]
  |  |  ------------------
  ------------------
  939|   271k|                   ? result(*std::forward<Exp>(exp))
  940|   271k|                   : result(unexpect,
  941|   235k|                            std::invoke(std::forward<F>(f),
  942|   235k|                                        std::forward<Exp>(exp).error()));
  943|   271k|    }
  944|   271k|}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1206|   235k|    {
 1207|   235k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   235k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   235k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   235k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   271k|    {
 1078|   271k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1077|  36.1k|    {
 1078|  36.1k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSF_EvEENS0_10unexpect_tEDpOT_:
  311|  36.1k|    {
  312|  36.1k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  36.1k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESF_EEEvDpOT_:
  372|  36.1k|    {
  373|  36.1k|        scn::detail::construct_at(unexpected_ptr(),
  374|  36.1k|                                  std::forward<Args>(args)...);
  375|  36.1k|        m_has_value = false;
  376|  36.1k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|   108k|    {
  403|   108k|        return reinterpret_cast<unexpected<E>*>(
  404|   108k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|   108k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|   108k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  36.1k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EED2Ev:
  316|  36.1k|    {
  317|  36.1k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 0, False: 36.1k]
  ------------------
  318|      0|            destroy_value();
  319|      0|        }
  320|  36.1k|        else {
  321|  36.1k|            destroy_unexpected();
  322|  36.1k|        }
  323|  36.1k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9has_valueEv:
  360|   108k|    {
  361|   108k|        return m_has_value;
  362|   108k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  36.1k|    {
  384|  36.1k|        scn::detail::destroy_at(unexpected_ptr());
  385|  36.1k|    }
_ZNK3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEcvbEv:
 1190|  36.1k|    {
 1191|  36.1k|        return has_value();
 1192|  36.1k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5errorEv:
 1196|  36.1k|    {
 1197|  36.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  36.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  36.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  36.1k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  36.1k|    {
  344|  36.1k|        return *unexpected_ptr();
  345|  36.1k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1250|  36.1k|    {
 1251|  36.1k|        return value();
 1252|  36.1k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|   379k|    {
 1221|   379k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   379k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   379k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   379k|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.77M|    {
  189|  1.77M|        return m_has_value;
  190|  1.77M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|   379k|    {
  155|   379k|        return m_value;
  156|   379k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|   886k|    {
 1191|   886k|        return has_value();
 1192|   886k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|   506k|    {
 1197|   506k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   506k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   506k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   506k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   506k|    {
  172|   506k|        return m_unexpected;
  173|   506k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   343k|    {
 1263|   343k|        return std::move(value());
 1264|   343k|    }
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|   193k|    {
 1078|   193k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   193k|    {
  151|   193k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  36.8M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  36.6M|    {
 1034|  36.6M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  36.6M|    {
  142|  36.6M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  7.60M|    {
 1405|  7.60M|        return detail::transform_error_impl(std::move(*this),
 1406|  7.60M|                                            std::forward<F>(f));
 1407|  7.60M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  7.60M|{
  927|  7.60M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  7.60M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  7.60M|        if (SCN_LIKELY(exp.has_value())) {
  930|  7.60M|            return result(*std::forward<Exp>(exp));
  931|  7.60M|        }
  932|       |
  933|  7.60M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  7.60M|        return result(unexpect, monostate{});
  935|  7.60M|    }
  936|  7.60M|    else {
  937|  7.60M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  7.60M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  7.60M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 7.56M, False: 46.2k]
  |  |  ------------------
  ------------------
  939|  7.60M|                   ? result(*std::forward<Exp>(exp))
  940|  7.60M|                   : result(unexpect,
  941|  46.2k|                            std::invoke(std::forward<F>(f),
  942|  46.2k|                                        std::forward<Exp>(exp).error()));
  943|  7.60M|    }
  944|  7.60M|}
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  64.1M|    {
  189|  64.1M|        return m_has_value;
  190|  64.1M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  23.8M|    {
 1263|  23.8M|        return std::move(value());
 1264|  23.8M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  27.0M|    {
 1221|  27.0M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  27.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  27.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  27.0M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  27.0M|    {
  155|  27.0M|        return m_value;
  156|  27.0M|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  27.2M|    {
 1034|  27.2M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  27.2M|    {
  142|  27.2M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  28.8M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1206|   190k|    {
 1207|   190k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   190k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   190k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   190k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|   193k|    {
  172|   193k|        return m_unexpected;
  173|   193k|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  46.2k|    {
 1088|  46.2k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|  1.60M|    {
  151|  1.60M|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|  1.56M|    {
 1078|  1.56M|    }
_ZNK3scn2v28expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1190|  12.8M|    {
 1191|  12.8M|        return has_value();
 1192|  12.8M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1196|  3.61k|    {
 1197|  3.61k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  3.61k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.61k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  3.61k|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|   147k|    {
 1078|   147k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   291k|    {
  151|   291k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  51.0M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|  3.21M|    {
 1251|  3.21M|        return value();
 1252|  3.21M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|  6.11M|    {
 1034|  6.11M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|  6.11M|    {
  142|  6.11M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  28.2M|    {
 1078|  28.2M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  28.2M|    {
  151|  28.2M|    }
_ZNK3scn2v28expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1190|  51.0M|    {
 1191|  51.0M|        return has_value();
 1192|  51.0M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  80.9M|    {
  189|  80.9M|        return m_has_value;
  190|  80.9M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1196|  7.33M|    {
 1197|  7.33M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  7.33M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.33M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  7.33M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  7.33M|    {
  172|  7.33M|        return m_unexpected;
  173|  7.33M|    }
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  7.56M|    {
 1034|  7.56M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  7.56M|    {
  142|  7.56M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  7.56M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|  6.20M|    {
 1251|  6.20M|        return value();
 1252|  6.20M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  22.5M|    {
 1221|  22.5M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  22.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  22.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  22.5M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  22.5M|    {
  155|  22.5M|        return m_value;
  156|  22.5M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  7.56M|    {
 1191|  7.56M|        return has_value();
 1192|  7.56M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  15.1M|    {
  189|  15.1M|        return m_has_value;
  190|  15.1M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  7.56M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  7.56M|    {
 1263|  7.56M|        return std::move(value());
 1264|  7.56M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  7.56M|    {
 1221|  7.56M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  7.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  7.56M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  7.56M|    {
  155|  7.56M|        return m_value;
  156|  7.56M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDaOT_:
 1404|  16.4M|    {
 1405|  16.4M|        return detail::transform_error_impl(std::move(*this),
 1406|  16.4M|                                            std::forward<F>(f));
 1407|  16.4M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  16.4M|{
  927|  16.4M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  16.4M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  16.4M|        if (SCN_LIKELY(exp.has_value())) {
  930|  16.4M|            return result(*std::forward<Exp>(exp));
  931|  16.4M|        }
  932|       |
  933|  16.4M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  16.4M|        return result(unexpect, monostate{});
  935|  16.4M|    }
  936|  16.4M|    else {
  937|  16.4M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  16.4M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  16.4M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 16.3M, False: 143k]
  |  |  ------------------
  ------------------
  939|  16.4M|                   ? result(*std::forward<Exp>(exp))
  940|  16.4M|                   : result(unexpect,
  941|   143k|                            std::invoke(std::forward<F>(f),
  942|   143k|                                        std::forward<Exp>(exp).error()));
  943|  16.4M|    }
  944|  16.4M|}
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  16.4M|    {
 1034|  16.4M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  16.4M|    {
  142|  16.4M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1087|   143k|    {
 1088|   143k|    }
_ZNO3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1262|  16.3M|    {
 1263|  16.3M|        return std::move(value());
 1264|  16.3M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1033|  7.56M|    {
 1034|  7.56M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  7.56M|    {
  142|  7.56M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|  7.56M|    {
 1405|  7.56M|        return detail::transform_error_impl(std::move(*this),
 1406|  7.56M|                                            std::forward<F>(f));
 1407|  7.56M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
  926|  7.56M|{
  927|  7.56M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  7.56M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  7.56M|        if (SCN_LIKELY(exp.has_value())) {
  930|  7.56M|            return result(*std::forward<Exp>(exp));
  931|  7.56M|        }
  932|       |
  933|  7.56M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  7.56M|        return result(unexpect, monostate{});
  935|  7.56M|    }
  936|  7.56M|    else {
  937|  7.56M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  7.56M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  7.56M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 7.56M, False: 0]
  |  |  ------------------
  ------------------
  939|  7.56M|                   ? result(*std::forward<Exp>(exp))
  940|  7.56M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  7.56M|    }
  944|  7.56M|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  188|  15.1M|    {
  189|  15.1M|        return m_has_value;
  190|  15.1M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1262|  7.56M|    {
 1263|  7.56M|        return std::move(value());
 1264|  7.56M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1220|  7.56M|    {
 1221|  7.56M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  7.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  7.56M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  154|  7.56M|    {
  155|  7.56M|        return m_value;
  156|  7.56M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1033|  7.56M|    {
 1034|  7.56M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  7.56M|    {
  142|  7.56M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  7.56M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1190|  7.56M|    {
 1191|  7.56M|        return has_value();
 1192|  7.56M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  188|  15.1M|    {
  189|  15.1M|        return m_has_value;
  190|  15.1M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1262|  7.56M|    {
 1263|  7.56M|        return std::move(value());
 1264|  7.56M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1220|  7.56M|    {
 1221|  7.56M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  7.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  7.56M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  154|  7.56M|    {
  155|  7.56M|        return m_value;
  156|  7.56M|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|  88.2k|    {
 1078|  88.2k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  311|  88.2k|    {
  312|  88.2k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  88.2k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  372|  88.2k|    {
  373|  88.2k|        scn::detail::construct_at(unexpected_ptr(),
  374|  88.2k|                                  std::forward<Args>(args)...);
  375|  88.2k|        m_has_value = false;
  376|  88.2k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|   264k|    {
  403|   264k|        return reinterpret_cast<unexpected<E>*>(
  404|   264k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|   264k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|   264k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   857k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|   857k|    {
  317|   857k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 769k, False: 88.2k]
  ------------------
  318|   769k|            destroy_value();
  319|   769k|        }
  320|  88.2k|        else {
  321|  88.2k|            destroy_unexpected();
  322|  88.2k|        }
  323|   857k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|  2.57M|    {
  361|  2.57M|        return m_has_value;
  362|  2.57M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|   769k|    {
  380|   769k|        scn::detail::destroy_at(value_ptr());
  381|   769k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEEEvPT_:
  107|   769k|{
  108|   769k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   769k|        for (auto& elem : *p) {
  110|   769k|            scn::detail::destroy_at(std::addressof(elem));
  111|   769k|        }
  112|   769k|    }
  113|   769k|    else {
  114|   769k|        p->~T();
  115|   769k|    }
  116|   769k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  2.30M|    {
  390|  2.30M|        return reinterpret_cast<T*>(
  391|  2.30M|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  2.30M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  2.30M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  88.2k|    {
  384|  88.2k|        scn::detail::destroy_at(unexpected_ptr());
  385|  88.2k|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|   769k|    {
 1034|   769k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSG_EvEENS3_10in_place_tEDpOT_:
  302|   769k|    {
  303|   769k|        construct(std::forward<Args>(args)...);
  304|   769k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSG_EEEvDpOT_:
  366|   769k|    {
  367|   769k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|   769k|        m_has_value = true;
  369|   769k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEJSG_EEEPT_SI_DpOT0_:
  101|   769k|{
  102|   769k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   769k|        T(std::forward<Args>(args)...);
  104|   769k|}
_ZNK3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1190|   857k|    {
 1191|   857k|        return has_value();
 1192|   857k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1196|  88.2k|    {
 1197|  88.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  88.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  88.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  88.2k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  88.2k|    {
  344|  88.2k|        return *unexpected_ptr();
  345|  88.2k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEdeISF_LPv0EEEOT_v:
 1262|   769k|    {
 1263|   769k|        return std::move(value());
 1264|   769k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|   769k|    {
 1221|   769k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   769k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   769k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   769k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  326|   769k|    {
  327|   769k|        return *value_ptr();
  328|   769k|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  4.80M|    {
 1251|  4.80M|        return value();
 1252|  4.80M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  27.2M|    {
 1221|  27.2M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  27.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  27.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  27.2M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  188|  57.7M|    {
  189|  57.7M|        return m_has_value;
  190|  57.7M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  154|  27.2M|    {
  155|  27.2M|        return m_value;
  156|  27.2M|    }
_ZNK3scn2v28expectedIPKwNS0_10scan_errorEEcvbEv:
 1190|  28.8M|    {
 1191|  28.8M|        return has_value();
 1192|  28.8M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5errorEv:
 1196|  1.60M|    {
 1197|  1.60M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.60M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.60M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.60M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  1.60M|    {
  172|  1.60M|        return m_unexpected;
  173|  1.60M|    }
_ZNO3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  22.4M|    {
 1263|  22.4M|        return std::move(value());
 1264|  22.4M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   813k|    {
 1078|   813k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  1.48M|    {
  151|  1.48M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.54M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|  1.06M|    {
 1034|  1.06M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  1.06M|    {
  142|  1.06M|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|  2.54M|    {
 1191|  2.54M|        return has_value();
 1192|  2.54M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|  5.09M|    {
  189|  5.09M|        return m_has_value;
  190|  5.09M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|  1.48M|    {
 1197|  1.48M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.48M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  1.48M|    {
  172|  1.48M|        return m_unexpected;
  173|  1.48M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1250|  72.3k|    {
 1251|  72.3k|        return value();
 1252|  72.3k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|  1.06M|    {
 1221|  1.06M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.06M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.06M|    {
  155|  1.06M|        return m_value;
  156|  1.06M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    200|    {
 1078|    200|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    200|    {
  151|    200|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.79M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|  3.79M|    {
 1034|  3.79M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  3.79M|    {
  142|  3.79M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|   886k|    {
 1405|   886k|        return detail::transform_error_impl(std::move(*this),
 1406|   886k|                                            std::forward<F>(f));
 1407|   886k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   886k|{
  927|   886k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   886k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   886k|        if (SCN_LIKELY(exp.has_value())) {
  930|   886k|            return result(*std::forward<Exp>(exp));
  931|   886k|        }
  932|       |
  933|   886k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   886k|        return result(unexpect, monostate{});
  935|   886k|    }
  936|   886k|    else {
  937|   886k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   886k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   886k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 886k, False: 30]
  |  |  ------------------
  ------------------
  939|   886k|                   ? result(*std::forward<Exp>(exp))
  940|   886k|                   : result(unexpect,
  941|     30|                            std::invoke(std::forward<F>(f),
  942|     30|                                        std::forward<Exp>(exp).error()));
  943|   886k|    }
  944|   886k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  6.22M|    {
  189|  6.22M|        return m_has_value;
  190|  6.22M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|  2.42M|    {
 1263|  2.42M|        return std::move(value());
 1264|  2.42M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|  2.42M|    {
 1221|  2.42M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.42M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  2.42M|    {
  155|  2.42M|        return m_value;
  156|  2.42M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    200|    {
 1207|    200|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    200|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    200|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    200|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    200|    {
  172|    200|        return m_unexpected;
  173|    200|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|   669k|    {
 1088|   669k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|  1.37M|    {
 1191|  1.37M|        return has_value();
 1192|  1.37M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    170|    {
 1078|    170|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    340|    {
  151|    340|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.71M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  4.06M|    {
 1078|  4.06M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  4.06M|    {
  151|  4.06M|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|  4.93M|    {
 1191|  4.93M|        return has_value();
 1192|  4.93M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  8.91M|    {
  189|  8.91M|        return m_has_value;
  190|  8.91M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|   886k|    {
 1197|   886k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   886k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   886k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   886k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  1.55M|    {
  172|  1.55M|        return m_unexpected;
  173|  1.55M|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|   886k|    {
 1034|   886k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   886k|    {
  142|   886k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   886k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|  1.64M|    {
 1221|  1.64M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.64M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.64M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.64M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  1.64M|    {
  155|  1.64M|        return m_value;
  156|  1.64M|    }
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1190|   886k|    {
 1191|   886k|        return has_value();
 1192|   886k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|  1.77M|    {
  189|  1.77M|        return m_has_value;
  190|  1.77M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   886k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|   886k|    {
 1263|   886k|        return std::move(value());
 1264|   886k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|   886k|    {
 1221|   886k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   886k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   886k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   886k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|   886k|    {
  155|   886k|        return m_value;
  156|   886k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|  1.53M|    {
 1405|  1.53M|        return detail::transform_error_impl(std::move(*this),
 1406|  1.53M|                                            std::forward<F>(f));
 1407|  1.53M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|  1.53M|{
  927|  1.53M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  1.53M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  1.53M|        if (SCN_LIKELY(exp.has_value())) {
  930|  1.53M|            return result(*std::forward<Exp>(exp));
  931|  1.53M|        }
  932|       |
  933|  1.53M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  1.53M|        return result(unexpect, monostate{});
  935|  1.53M|    }
  936|  1.53M|    else {
  937|  1.53M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  1.53M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  1.53M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 1.53M, False: 170]
  |  |  ------------------
  ------------------
  939|  1.53M|                   ? result(*std::forward<Exp>(exp))
  940|  1.53M|                   : result(unexpect,
  941|    170|                            std::invoke(std::forward<F>(f),
  942|    170|                                        std::forward<Exp>(exp).error()));
  943|  1.53M|    }
  944|  1.53M|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|  1.64M|    {
 1034|  1.64M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  1.64M|    {
  142|  1.64M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    170|    {
 1088|    170|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|  1.64M|    {
 1263|  1.64M|        return std::move(value());
 1264|  1.64M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1033|   886k|    {
 1034|   886k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   886k|    {
  142|   886k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|   886k|    {
 1405|   886k|        return detail::transform_error_impl(std::move(*this),
 1406|   886k|                                            std::forward<F>(f));
 1407|   886k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
  926|   886k|{
  927|   886k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   886k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   886k|        if (SCN_LIKELY(exp.has_value())) {
  930|   886k|            return result(*std::forward<Exp>(exp));
  931|   886k|        }
  932|       |
  933|   886k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   886k|        return result(unexpect, monostate{});
  935|   886k|    }
  936|   886k|    else {
  937|   886k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   886k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   886k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 886k, False: 0]
  |  |  ------------------
  ------------------
  939|   886k|                   ? result(*std::forward<Exp>(exp))
  940|   886k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   886k|    }
  944|   886k|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  188|  1.77M|    {
  189|  1.77M|        return m_has_value;
  190|  1.77M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|   886k|    {
 1263|   886k|        return std::move(value());
 1264|   886k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|   886k|    {
 1221|   886k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   886k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   886k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   886k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  154|   886k|    {
  155|   886k|        return m_value;
  156|   886k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|   886k|    {
 1034|   886k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   886k|    {
  142|   886k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   886k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1190|   886k|    {
 1191|   886k|        return has_value();
 1192|   886k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.77M|    {
  189|  1.77M|        return m_has_value;
  190|  1.77M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|   886k|    {
 1263|   886k|        return std::move(value());
 1264|   886k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|   886k|    {
 1221|   886k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   886k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   886k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   886k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   886k|    {
  155|   886k|        return m_value;
  156|   886k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1404|   777k|    {
 1405|   777k|        return detail::transform_error_impl(std::move(*this),
 1406|   777k|                                            std::forward<F>(f));
 1407|   777k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESA_EEDaOT_OT0_:
  926|   777k|{
  927|   777k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   777k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   777k|        if (SCN_LIKELY(exp.has_value())) {
  930|   777k|            return result(*std::forward<Exp>(exp));
  931|   777k|        }
  932|       |
  933|   777k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   777k|        return result(unexpect, monostate{});
  935|   777k|    }
  936|   777k|    else {
  937|   777k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   777k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   777k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 108k, False: 669k]
  |  |  ------------------
  ------------------
  939|   777k|                   ? result(*std::forward<Exp>(exp))
  940|   777k|                   : result(unexpect,
  941|   669k|                            std::invoke(std::forward<F>(f),
  942|   669k|                                        std::forward<Exp>(exp).error()));
  943|   777k|    }
  944|   777k|}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1206|   669k|    {
 1207|   669k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   669k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   669k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   669k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|   108k|    {
 1078|   108k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  311|   108k|    {
  312|   108k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|   108k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  372|   108k|    {
  373|   108k|        scn::detail::construct_at(unexpected_ptr(),
  374|   108k|                                  std::forward<Args>(args)...);
  375|   108k|        m_has_value = false;
  376|   108k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|   325k|    {
  403|   325k|        return reinterpret_cast<unexpected<E>*>(
  404|   325k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|   325k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|   325k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   108k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|   108k|    {
  317|   108k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 0, False: 108k]
  ------------------
  318|      0|            destroy_value();
  319|      0|        }
  320|   108k|        else {
  321|   108k|            destroy_unexpected();
  322|   108k|        }
  323|   108k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|   325k|    {
  361|   325k|        return m_has_value;
  362|   325k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|   108k|    {
  384|   108k|        scn::detail::destroy_at(unexpected_ptr());
  385|   108k|    }
_ZNK3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1190|   108k|    {
 1191|   108k|        return has_value();
 1192|   108k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1196|   108k|    {
 1197|   108k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   108k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   108k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   108k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|   108k|    {
  344|   108k|        return *unexpected_ptr();
  345|   108k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   994k|    {
 1263|   994k|        return std::move(value());
 1264|   994k|    }

_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  6.02k|{
  200|  6.02k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  6.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  6.02k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  6.02k|{
  180|  6.02k|    return p;
  181|  6.02k|}
_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  6.02k|{
  200|  6.02k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  6.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  6.02k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  6.02k|{
  180|  6.02k|    return p;
  181|  6.02k|}
_ZN3scn2v26detail10to_addressIRPKhEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  6.02k|{
  200|  6.02k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  6.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  6.02k|}
_ZN3scn2v26detail15to_address_implIKhEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  6.02k|{
  180|  6.02k|    return p;
  181|  6.02k|}
_ZN3scn2v26detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  27.3M|{
  200|  27.3M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  27.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  27.3M|}
_ZN3scn2v26detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  27.4M|{
  180|  27.4M|    return p;
  181|  27.4M|}
_ZN3scn2v26detail10to_addressIRPDiEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  16.9M|{
  200|  16.9M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  16.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  16.9M|}
_ZN3scn2v26detail15to_address_implIDiEEPT_S4_NS1_12priority_tagILm2EEE:
  179|  16.9M|{
  180|  16.9M|    return p;
  181|  16.9M|}
_ZN3scn2v26detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  72.3k|{
  200|  72.3k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  72.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  72.3k|}
_ZN3scn2v26detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  16.9M|{
  200|  16.9M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  16.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  16.9M|}
_ZN3scn2v26detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  17.1M|{
  180|  17.1M|    return p;
  181|  17.1M|}
_ZN3scn2v26detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|   217k|{
  200|   217k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|   217k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|   217k|}

_ZNK3scn2v24spanIKhE4sizeEv:
  241|  23.9k|    {
  242|  23.9k|        return static_cast<size_type>(m_end - m_ptr);
  243|  23.9k|    }
_ZN3scn2v24spanIKhE5beginEv:
  180|  6.02k|    {
  181|  6.02k|        return m_ptr;
  182|  6.02k|    }
_ZN3scn2v24spanIKhE3endEv:
  184|  6.02k|    {
  185|  6.02k|        return m_end;
  186|  6.02k|    }
_ZNK3scn2v24spanIKhE4dataEv:
  237|  3.01k|    {
  238|  3.01k|        return m_ptr;
  239|  3.01k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEC2IPS6_LPv0EEET_m:
  119|  3.01k|    {
  120|  3.01k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE5beginEv:
  180|  72.3k|    {
  181|  72.3k|        return m_ptr;
  182|  72.3k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE3endEv:
  184|  72.3k|    {
  185|  72.3k|        return m_end;
  186|  72.3k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEC2IPS6_LPv0EEET_m:
  119|  3.01k|    {
  120|  3.01k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE5beginEv:
  180|   217k|    {
  181|   217k|        return m_ptr;
  182|   217k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE3endEv:
  184|   217k|    {
  185|   217k|        return m_end;
  186|   217k|    }
_ZN3scn2v24spanIKhEC2IPS2_LPv0EEET_m:
  119|  3.01k|    {
  120|  3.01k|    }
_ZN3scn2v24spanIDiEC2IPDiLPv0EEET_m:
  119|  8.49M|    {
  120|  8.49M|    }
_ZNK3scn2v24spanIDiE4dataEv:
  237|  8.49M|    {
  238|  8.49M|        return m_ptr;
  239|  8.49M|    }
_ZNK3scn2v24spanIDiE4sizeEv:
  241|  8.49M|    {
  242|  8.49M|        return static_cast<size_type>(m_end - m_ptr);
  243|  8.49M|    }

_ZN3scn2v26detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  4.32M|{
   60|  4.32M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  4.32M|                                          const CharT*, const CharT*>) {
   62|  4.32M|        return {first, last};
   63|  4.32M|    }
   64|  4.32M|    else {
   65|  4.32M|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  4.32M|    }
   67|  4.32M|}
_ZN3scn2v26detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  12.0M|{
   60|  12.0M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  12.0M|                                          const CharT*, const CharT*>) {
   62|  12.0M|        return {first, last};
   63|  12.0M|    }
   64|  12.0M|    else {
   65|  12.0M|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  12.0M|    }
   67|  12.0M|}
_ZN3scn2v26detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
   43|  9.10M|{
   44|  9.10M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (44:19): [Folded - Ignored]
  |  Branch (44:19): [Folded - Ignored]
  ------------------
   45|  9.10M|                                          decltype(first), decltype(last)> &&
   46|  9.10M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (46:19): [Folded - Ignored]
  ------------------
   47|  9.10M|        return {first, last};
   48|  9.10M|    }
   49|  9.10M|    else {
   50|  9.10M|        return {to_address(first), static_cast<size_t>(std::distance(
   51|  9.10M|                                       to_address(first), to_address(last)))};
   52|  9.10M|    }
   53|  9.10M|}
_ZN3scn2v26detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
   74|  17.6M|{
   75|  17.6M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (75:19): [Folded - Ignored]
  |  Branch (75:19): [Folded - Ignored]
  ------------------
   76|  17.6M|                      typename std::basic_string_view<CharT>::iterator,
   77|  17.6M|                      decltype(it)> &&
   78|  17.6M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (78:19): [Folded - Ignored]
  ------------------
   79|  17.6M|        SCN_UNUSED(sv);
  ------------------
  |  |  227|  17.6M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   80|  17.6M|        return it;
   81|  17.6M|    }
   82|  17.6M|    else {
   83|  17.6M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
   84|  17.6M|    }
   85|  17.6M|}

_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|   307k|{
   54|   307k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|   307k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|   307k|        return true;
   57|   307k|    }
   58|   307k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|   307k|                           ranges::iterator_t<Range>,
   60|   307k|                           typename detail::basic_scan_buffer<
   61|   307k|                               detail::char_t<Range>>::forward_iterator>) {
   62|   307k|        auto beg = ranges::begin(r);
   63|   307k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 307k, False: 0]
  ------------------
   64|   307k|            return false;
   65|   307k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|   307k|    else {
   79|   307k|        return false;
   80|   307k|    }
   81|   307k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   307k|{
  112|   307k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   307k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   307k|        return r;
  115|   307k|    }
  116|   307k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   307k|                           ranges::iterator_t<Range>,
  118|   307k|                           typename detail::basic_scan_buffer<
  119|   307k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   307k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   307k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   307k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   307k|                ranges::begin(r), ranges::end(r)));
  124|   307k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   307k|        }
  126|   307k|        else {
  127|   307k|            return ranges::begin(r).contiguous_segment();
  128|   307k|        }
  129|   307k|    }
  130|   307k|    else {
  131|   307k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   307k|    }
  133|   307k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|   524k|{
  166|   524k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|   524k|        return ranges_polyfill::usize(r);
  168|   524k|    }
  169|   524k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|   524k|                           ranges::iterator_t<Range>,
  171|   524k|                           typename detail::basic_scan_buffer<
  172|   524k|                               detail::char_t<Range>>::forward_iterator>) {
  173|   524k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|   524k|            return static_cast<size_t>(ranges::end(r).position() -
  175|   524k|                                       ranges::begin(r).position());
  176|   524k|        }
  177|   524k|        else {
  178|   524k|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 524k, False: 0]
  ------------------
  179|   524k|                return static_cast<size_t>(
  180|   524k|                    ranges::begin(r).parent()->chars_available() -
  181|   524k|                    ranges::begin(r).position());
  182|   524k|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|   524k|        }
  185|   524k|    }
  186|   524k|    else {
  187|   524k|        return 0;
  188|   524k|    }
  189|   524k|}
_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|   886k|{
   54|   886k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|   886k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|   886k|        return true;
   57|   886k|    }
   58|   886k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|   886k|                           ranges::iterator_t<Range>,
   60|   886k|                           typename detail::basic_scan_buffer<
   61|   886k|                               detail::char_t<Range>>::forward_iterator>) {
   62|   886k|        auto beg = ranges::begin(r);
   63|   886k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 886k, False: 0]
  ------------------
   64|   886k|            return false;
   65|   886k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|   886k|    else {
   79|   886k|        return false;
   80|   886k|    }
   81|   886k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   886k|{
  112|   886k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   886k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   886k|        return r;
  115|   886k|    }
  116|   886k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   886k|                           ranges::iterator_t<Range>,
  118|   886k|                           typename detail::basic_scan_buffer<
  119|   886k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   886k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   886k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   886k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   886k|                ranges::begin(r), ranges::end(r)));
  124|   886k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   886k|        }
  126|   886k|        else {
  127|   886k|            return ranges::begin(r).contiguous_segment();
  128|   886k|        }
  129|   886k|    }
  130|   886k|    else {
  131|   886k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   886k|    }
  133|   886k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|  1.53M|{
  166|  1.53M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|  1.53M|        return ranges_polyfill::usize(r);
  168|  1.53M|    }
  169|  1.53M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|  1.53M|                           ranges::iterator_t<Range>,
  171|  1.53M|                           typename detail::basic_scan_buffer<
  172|  1.53M|                               detail::char_t<Range>>::forward_iterator>) {
  173|  1.53M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|  1.53M|            return static_cast<size_t>(ranges::end(r).position() -
  175|  1.53M|                                       ranges::begin(r).position());
  176|  1.53M|        }
  177|  1.53M|        else {
  178|  1.53M|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 1.53M, False: 0]
  ------------------
  179|  1.53M|                return static_cast<size_t>(
  180|  1.53M|                    ranges::begin(r).parent()->chars_available() -
  181|  1.53M|                    ranges::begin(r).position());
  182|  1.53M|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|  1.53M|        }
  185|  1.53M|    }
  186|  1.53M|    else {
  187|  1.53M|        return 0;
  188|  1.53M|    }
  189|  1.53M|}

_ZN3scn2v24impl22make_contiguous_bufferIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  8.52M|{
  235|  8.52M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  8.52M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  8.52M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  8.52M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  8.52M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  8.52M|    }
  240|  8.52M|    else {
  241|  8.52M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  8.52M|    }
  243|  8.52M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  8.52M|    {
   50|  8.52M|    }
_ZNK3scn2v24impl19string_view_wrapperIcE4viewEv:
   62|  26.8M|    {
   63|  26.8M|        return sv;
   64|  26.8M|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  4.98M|{
  235|  4.98M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  4.98M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  4.98M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  4.98M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  4.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  4.98M|    }
  240|  4.98M|    else {
  241|  4.98M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  4.98M|    }
  243|  4.98M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  4.98M|    {
   50|  4.98M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIcE4viewEv:
  141|  72.3k|    {
  142|  72.3k|        return m_view;
  143|  72.3k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcED2Ev:
  131|  36.1k|    ~contiguous_range_factory() = default;
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|  36.1k|{
  235|  36.1k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  36.1k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  36.1k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  36.1k|        return string_view_wrapper{SCN_FWD(range)};
  239|  36.1k|    }
  240|  36.1k|    else {
  241|  36.1k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  248|  36.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|  36.1k|    }
  243|  36.1k|}
_ZN3scn2v24impl24contiguous_range_factoryIcEC2IN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|  36.1k|    {
   97|  36.1k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  36.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|  36.1k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_LNS6_13subrange_kindE0EEEEEvOT_:
  180|  36.1k|    {
  181|  36.1k|        using value_t = ranges::range_value_t<Range>;
  182|  36.1k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  36.1k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  36.1k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  36.1k|            m_storage.reset();
  186|  36.1k|            m_view = string_view_type{ranges::data(range),
  187|  36.1k|                                      ranges_polyfill::usize(range)};
  188|  36.1k|        }
  189|  36.1k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|  36.1k|                                          std::basic_string<CharT>>) {
  191|  36.1k|            m_storage.emplace(SCN_FWD(range));
  192|  36.1k|            m_view = string_view_type{*m_storage};
  193|  36.1k|        }
  194|  36.1k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|  36.1k|                                          typename detail::basic_scan_buffer<
  196|  36.1k|                                              value_t>::forward_iterator> &&
  197|  36.1k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|  36.1k|            auto beg_seg = range.begin().contiguous_segment();
  199|  36.1k|            auto end_seg = range.end().contiguous_segment();
  200|  36.1k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  153|  36.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 36.1k, False: 12]
  |  |  ------------------
  ------------------
  201|  36.1k|                             detail::to_address(end_seg.end()))) {
  202|  36.1k|                auto& str = m_storage.emplace();
  203|  36.1k|                str.reserve(range.end().position() - range.begin().position());
  204|  36.1k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  36.1k|                m_view = string_view_type{str};
  206|  36.1k|                return;
  207|  36.1k|            }
  208|       |
  209|     12|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|     12|                                                            end_seg.data());
  211|     12|            m_storage.reset();
  212|     12|        }
  213|  36.1k|        else {
  214|  36.1k|            auto& str = m_storage.emplace();
  215|  36.1k|            if constexpr (ranges::sized_range<Range>) {
  216|  36.1k|                str.reserve(ranges_polyfill::usize(range));
  217|  36.1k|            }
  218|  36.1k|            std::copy(ranges::begin(range), ranges::end(range),
  219|  36.1k|                      std::back_inserter(str));
  220|  36.1k|            m_view = string_view_type{str};
  221|  36.1k|        }
  222|  36.1k|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  4.59M|{
  235|  4.59M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  4.59M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  4.59M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  4.59M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  4.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  4.59M|    }
  240|  4.59M|    else {
  241|  4.59M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  4.59M|    }
  243|  4.59M|}
_ZN3scn2v24impl19string_view_wrapperIwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  4.59M|    {
   50|  4.59M|    }
_ZNK3scn2v24impl19string_view_wrapperIwE4viewEv:
   62|  8.55M|    {
   63|  8.55M|        return sv;
   64|  8.55M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIwE4viewEv:
  141|   180k|    {
  142|   180k|        return m_view;
  143|   180k|    }
_ZN3scn2v24impl24contiguous_range_factoryIwED2Ev:
  131|   108k|    ~contiguous_range_factory() = default;
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|   108k|{
  235|   108k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|   108k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|   108k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|   108k|        return string_view_wrapper{SCN_FWD(range)};
  239|   108k|    }
  240|   108k|    else {
  241|   108k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  248|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|   108k|    }
  243|   108k|}
_ZN3scn2v24impl24contiguous_range_factoryIwEC2IN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|   108k|    {
   97|   108k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|   108k|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEEEEvOT_:
  180|   108k|    {
  181|   108k|        using value_t = ranges::range_value_t<Range>;
  182|   108k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|   108k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|   108k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|   108k|            m_storage.reset();
  186|   108k|            m_view = string_view_type{ranges::data(range),
  187|   108k|                                      ranges_polyfill::usize(range)};
  188|   108k|        }
  189|   108k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|   108k|                                          std::basic_string<CharT>>) {
  191|   108k|            m_storage.emplace(SCN_FWD(range));
  192|   108k|            m_view = string_view_type{*m_storage};
  193|   108k|        }
  194|   108k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|   108k|                                          typename detail::basic_scan_buffer<
  196|   108k|                                              value_t>::forward_iterator> &&
  197|   108k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|   108k|            auto beg_seg = range.begin().contiguous_segment();
  199|   108k|            auto end_seg = range.end().contiguous_segment();
  200|   108k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  153|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 108k, False: 12]
  |  |  ------------------
  ------------------
  201|   108k|                             detail::to_address(end_seg.end()))) {
  202|   108k|                auto& str = m_storage.emplace();
  203|   108k|                str.reserve(range.end().position() - range.begin().position());
  204|   108k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|   108k|                m_view = string_view_type{str};
  206|   108k|                return;
  207|   108k|            }
  208|       |
  209|     12|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|     12|                                                            end_seg.data());
  211|     12|            m_storage.reset();
  212|     12|        }
  213|   108k|        else {
  214|   108k|            auto& str = m_storage.emplace();
  215|   108k|            if constexpr (ranges::sized_range<Range>) {
  216|   108k|                str.reserve(ranges_polyfill::usize(range));
  217|   108k|            }
  218|   108k|            std::copy(ranges::begin(range), ranges::end(range),
  219|   108k|                      std::back_inserter(str));
  220|   108k|            m_view = string_view_type{str};
  221|   108k|        }
  222|   108k|    }

_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  36.5M|{
   97|  36.5M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  36.5M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 39.8k, False: 36.5M]
  |  |  ------------------
  ------------------
   98|  39.8k|        return eof_error::eof;
   99|  39.8k|    }
  100|  36.5M|    return eof_error::good;
  101|  36.5M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  36.5M|{
   91|  36.5M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  36.5M|}
_ZN3scn2v24impl12is_range_eofIPKcS4_EEbT_T0_:
   74|  36.5M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  36.5M|    {
   84|  36.5M|        return begin == end;
   85|  36.5M|    }
   86|  36.5M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|  1.08M|{
   97|  1.08M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  1.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 12, False: 1.08M]
  |  |  ------------------
  ------------------
   98|     12|        return eof_error::eof;
   99|     12|    }
  100|  1.08M|    return eof_error::good;
  101|  1.08M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|  1.08M|{
   91|  1.08M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  1.08M|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|  1.08M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  1.08M|    {
   84|  1.08M|        return begin == end;
   85|  1.08M|    }
   86|  1.08M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  32.5M|{
   97|  32.5M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  32.5M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 53.3k, False: 32.5M]
  |  |  ------------------
  ------------------
   98|  53.3k|        return eof_error::eof;
   99|  53.3k|    }
  100|  32.5M|    return eof_error::good;
  101|  32.5M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  32.5M|{
   91|  32.5M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  32.5M|}
_ZN3scn2v24impl12is_range_eofIPKwS4_EEbT_T0_:
   74|  32.5M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  32.5M|    {
   84|  32.5M|        return begin == end;
   85|  32.5M|    }
   86|  32.5M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|  3.14M|{
   97|  3.14M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  3.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 30, False: 3.14M]
  |  |  ------------------
  ------------------
   98|     30|        return eof_error::eof;
   99|     30|    }
  100|  3.14M|    return eof_error::good;
  101|  3.14M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|  3.14M|{
   91|  3.14M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  3.14M|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|  3.14M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  3.14M|    {
   84|  3.14M|        return begin == end;
   85|  3.14M|    }
   86|  3.14M|}

_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  127|  8.83M|{
  128|  8.83M|    return find_classic_impl(
  129|  8.83M|        source, [](char ch) { return !is_ascii_space(ch); },
  130|  8.83M|        [](char32_t cp) { return !is_cp_space(cp); });
  131|  8.83M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
   30|  8.97M|{
   31|  8.97M|    static_assert(sizeof(*source.data()) == 1);
   32|  8.97M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  242|  8.97M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  8.97M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   33|      0|    uint64_t word{};
   34|  8.97M|    std::memcpy(&word, source.data(), source.size());
   35|       |
   36|  8.97M|    return has_byte_greater(word, 127) != 0;
   37|  8.97M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_3ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_4EEPKcS8_T_T0_:
   43|  8.83M|{
   44|  8.83M|    auto it = source.begin();
   45|       |
   46|  8.98M|    while (it != source.end()) {
  ------------------
  |  Branch (46:12): [True: 8.97M, False: 6.62k]
  ------------------
   47|  8.97M|        auto sv =
   48|  8.97M|            detail::make_string_view_from_iterators<char>(it, source.end())
   49|  8.97M|                .substr(0, 8);
   50|       |
   51|  8.97M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (51:13): [True: 8.88M, False: 88.9k]
  ------------------
   52|  8.88M|            auto tmp_it = ranges::find_if(sv, cu_cb);
   53|  8.88M|            it = detail::make_string_view_iterator(source, tmp_it);
   54|  8.88M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (54:17): [True: 8.73M, False: 151k]
  ------------------
   55|  8.73M|                break;
   56|  8.73M|            }
   57|   151k|            continue;
   58|  8.88M|        }
   59|       |
   60|   130k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (60:28): [True: 128k, False: 1.40k]
  ------------------
   61|   128k|            auto tmp =
   62|   128k|                detail::make_string_view_from_iterators<char>(it, source.end());
   63|   128k|            auto res = get_next_code_point(tmp);
   64|   128k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (64:17): [True: 87.5k, False: 41.3k]
  ------------------
   65|  87.5k|                return it;
   66|  87.5k|            }
   67|  41.3k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
   68|  41.3k|            it = detail::make_string_view_iterator(source, res.iterator);
   69|  41.3k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  243|  41.3k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  41.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   70|  41.3k|        }
   71|  88.9k|    }
   72|       |
   73|  8.74M|    return detail::make_string_view_iterator(source, it);
   74|  8.83M|}
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_3clEc:
  129|  18.1M|        source, [](char ch) { return !is_ascii_space(ch); },
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_4clEDi:
  130|   128k|        [](char32_t cp) { return !is_cp_space(cp); });

_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  8.52M|{
  300|  8.52M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  8.52M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  8.52M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  8.52M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  ------------------
  |  |  248|  8.52M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  304|  8.52M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  8.52M|        return ranges::next(ranges::begin(range),
  306|  8.52M|                            ranges::distance(buf.view().begin(), it));
  307|  8.52M|    }
  308|  8.52M|    else {
  309|  8.52M|        auto it = ranges::begin(range);
  310|       |
  311|  8.52M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  312|  8.52M|            auto seg = get_contiguous_beginning(range);
  313|  8.52M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  8.52M|                seg_it != seg.end()) {
  315|  8.52M|                return ranges_polyfill::batch_next(
  316|  8.52M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  8.52M|            }
  318|  8.52M|            ranges_polyfill::batch_next(it, seg.size());
  319|  8.52M|        }
  320|       |
  321|  8.52M|        return read_while_code_point(
  322|  8.52M|            SCN_FWD(range),
  323|  8.52M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  8.52M|    }
  325|  8.52M|}
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  8.51M|{
  459|  8.51M|    auto it = read_code_unit(range);
  460|  8.51M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  8.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 8.51M]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  16.9M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 16.9M, False: 8.05M]
  ------------------
  465|  16.9M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 463k, False: 16.4M]
  ------------------
  466|   463k|            return *it;
  467|   463k|        }
  468|  16.9M|    }
  469|       |
  470|  8.05M|    return unexpected(parse_error::error);
  471|  8.51M|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEOSH_OSJ_:
  481|  1.56M|{
  482|  1.56M|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 1.36M, False: 199k]
  ------------------
  483|  1.36M|        return ranges::begin(range);
  484|  1.36M|    }
  485|   199k|    return *result;
  486|  1.56M|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  18.8M|{
  418|  18.8M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  18.8M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  18.8M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  18.8M|        if (ranges::size(range) < str.size()) {
  ------------------
  |  Branch (422:13): [True: 65.8k, False: 18.8M]
  ------------------
  423|  65.8k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  65.8k|        }
  425|  18.8M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  ------------------
  |  Branch (425:13): [True: 18.7M, False: 95.4k]
  ------------------
  426|  18.7M|            return unexpected(parse_error::error);
  427|  18.7M|        }
  428|  95.4k|        return ranges::next(ranges::begin(range), str.size());
  429|  18.8M|    }
  430|  18.8M|    else {
  431|  18.8M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  18.8M|            if (ch < 'A' || ch > 'Z') {
  433|  18.8M|                return ch;
  434|  18.8M|            }
  435|  18.8M|            return static_cast<char_type>(ch +
  436|  18.8M|                                          static_cast<char_type>('a' - 'A'));
  437|  18.8M|        };
  438|       |
  439|  18.8M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  440|  18.8M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  18.8M|        if (SCN_UNLIKELY(!std::equal(
  443|  18.8M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  18.8M|                    return ascii_tolower(a) ==
  445|  18.8M|                           static_cast<detail::char_t<Range>>(b);
  446|  18.8M|                }))) {
  447|  18.8M|            return unexpected(parse_error::error);
  448|  18.8M|        }
  449|       |
  450|  18.8M|        return it;
  451|  18.8M|    }
  452|  18.8M|}
_ZN3scn2v24impl17fast_streq_nocaseEPKcS3_m:
  406|  18.8M|{
  407|  18.8M|    unsigned char running_diff{0};
  408|  56.4M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (408:24): [True: 37.6M, False: 18.8M]
  ------------------
  409|  37.6M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
  410|  37.6M|    }
  411|  18.8M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (411:12): [True: 87.5k, False: 18.7M]
  |  Branch (411:33): [True: 7.89k, False: 18.7M]
  ------------------
  412|  18.8M|}
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NDTcl4implISE_EEE4typeE:
  331|  6.00M|{
  332|  6.00M|    auto it = read_code_unit(range);
  333|  6.00M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  6.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.99k, False: 6.00M]
  |  |  ------------------
  ------------------
  334|  1.99k|        return unexpected(make_eof_parse_error(it.error()));
  335|  1.99k|    }
  336|       |
  337|  6.00M|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|  6.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.55M, False: 3.44M]
  |  |  ------------------
  ------------------
  338|  6.00M|                     static_cast<detail::char_t<Range>>(ch))) {
  339|  2.55M|        return unexpected(parse_error::error);
  340|  2.55M|    }
  341|       |
  342|  3.44M|    return *it;
  343|  6.00M|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|   307k|{
  300|   307k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   307k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   307k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   307k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   307k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   307k|        return ranges::next(ranges::begin(range),
  306|   307k|                            ranges::distance(buf.view().begin(), it));
  307|   307k|    }
  308|   307k|    else {
  309|   307k|        auto it = ranges::begin(range);
  310|       |
  311|   307k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   307k|            auto seg = get_contiguous_beginning(range);
  313|   307k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   307k|                seg_it != seg.end()) {
  ------------------
  |  Branch (314:17): [True: 307k, False: 0]
  ------------------
  315|   307k|                return ranges_polyfill::batch_next(
  316|   307k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   307k|            }
  318|      0|            ranges_polyfill::batch_next(it, seg.size());
  319|      0|        }
  320|       |
  321|      0|        return read_while_code_point(
  322|      0|            SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|      0|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   307k|    }
  325|   307k|}
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|   307k|{
  459|   307k|    auto it = read_code_unit(range);
  460|   307k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 307k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|   614k|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 614k, False: 307k]
  ------------------
  465|   614k|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 0, False: 614k]
  ------------------
  466|      0|            return *it;
  467|      0|        }
  468|   614k|    }
  469|       |
  470|   307k|    return unexpected(parse_error::error);
  471|   307k|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEOSK_OSM_:
  481|   144k|{
  482|   144k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 144k, False: 0]
  ------------------
  483|   144k|        return ranges::begin(range);
  484|   144k|    }
  485|      0|    return *result;
  486|   144k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|   524k|{
  418|   524k|    using char_type = detail::char_t<Range>;
  419|       |
  420|   524k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|   524k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|   524k|        if (ranges::size(range) < str.size()) {
  423|   524k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|   524k|        }
  425|   524k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|   524k|            return unexpected(parse_error::error);
  427|   524k|        }
  428|   524k|        return ranges::next(ranges::begin(range), str.size());
  429|   524k|    }
  430|   524k|    else {
  431|   524k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   524k|            if (ch < 'A' || ch > 'Z') {
  433|   524k|                return ch;
  434|   524k|            }
  435|   524k|            return static_cast<char_type>(ch +
  436|   524k|                                          static_cast<char_type>('a' - 'A'));
  437|   524k|        };
  438|       |
  439|   524k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|   524k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   524k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   524k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   524k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 174, False: 524k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    174|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    174|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    174|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    174|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    174|    }                                                  \
  |  |  |  |   70|   524k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   524k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|   524k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|   524k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|   524k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 524k, False: 0]
  |  |  ------------------
  ------------------
  443|   524k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|   524k|                    return ascii_tolower(a) ==
  445|   524k|                           static_cast<detail::char_t<Range>>(b);
  446|   524k|                }))) {
  447|   524k|            return unexpected(parse_error::error);
  448|   524k|        }
  449|       |
  450|      0|        return it;
  451|   524k|    }
  452|   524k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlcE_clEc:
  431|   524k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   524k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 36.1k, False: 488k]
  |  Branch (432:29): [True: 488k, False: 0]
  ------------------
  433|   524k|                return ch;
  434|   524k|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|   524k|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NDTcl4implISH_EEE4typeE:
  331|   162k|{
  332|   162k|    auto it = read_code_unit(range);
  333|   162k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 162k]
  |  |  ------------------
  ------------------
  334|      0|        return unexpected(make_eof_parse_error(it.error()));
  335|      0|    }
  336|       |
  337|   162k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 162k, False: 0]
  |  |  ------------------
  ------------------
  338|   162k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   162k|        return unexpected(parse_error::error);
  340|   162k|    }
  341|       |
  342|      0|    return *it;
  343|   162k|}
_ZN3scn2v24impl21read_while1_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NS1_12function_refIFbNDTcl4implISH_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
  158|   271k|{
  159|   271k|    auto it = read_while_code_unit(range, pred);
  160|   271k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 235k, False: 36.1k]
  ------------------
  161|   235k|        return unexpected(parse_error::error);
  162|   235k|    }
  163|  36.1k|    return it;
  164|   271k|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|   271k|{
  139|   271k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   271k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   271k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|   271k|{
  131|   271k|    return ranges::find_if(range, pred);
  132|   271k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  7.57M|{
  300|  7.57M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  7.57M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  7.57M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  7.57M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|  7.57M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  7.57M|        return ranges::next(ranges::begin(range),
  306|  7.57M|                            ranges::distance(buf.view().begin(), it));
  307|  7.57M|    }
  308|  7.57M|    else {
  309|  7.57M|        auto it = ranges::begin(range);
  310|       |
  311|  7.57M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|  7.57M|            auto seg = get_contiguous_beginning(range);
  313|  7.57M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  7.57M|                seg_it != seg.end()) {
  315|  7.57M|                return ranges_polyfill::batch_next(
  316|  7.57M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  7.57M|            }
  318|  7.57M|            ranges_polyfill::batch_next(it, seg.size());
  319|  7.57M|        }
  320|       |
  321|  7.57M|        return read_while_code_point(
  322|  7.57M|            SCN_FWD(range),
  ------------------
  |  |  248|  7.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  7.57M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  7.57M|    }
  325|  7.57M|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  263|  7.57M|{
  264|  7.57M|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  7.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|  7.57M|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  230|  7.57M|{
  231|  7.57M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|  7.57M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|  7.57M|        return read_until_code_point_eager(SCN_FWD(range), pred);
  ------------------
  |  |  248|  7.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  234|  7.57M|    }
  235|  7.57M|    else {
  236|  7.57M|        auto it = ranges::begin(range);
  237|  7.57M|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|  7.57M|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|  7.57M|            seg_it != seg.end()) {
  241|  7.57M|            return ranges_polyfill::batch_next(
  242|  7.57M|                it, ranges::distance(seg.begin(), seg_it));
  243|  7.57M|        }
  244|       |
  245|  7.57M|        while (it != ranges::end(range)) {
  246|  7.57M|            const auto [iter, value] =
  247|  7.57M|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  7.57M|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  7.57M|            if (pred(cp)) {
  250|  7.57M|                return it;
  251|  7.57M|            }
  252|  7.57M|            it = iter;
  253|  7.57M|        }
  254|       |
  255|  7.57M|        return it;
  256|  7.57M|    }
  257|  7.57M|}
_ZN3scn2v24impl27read_until_code_point_eagerIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  177|  7.57M|{
  178|  7.57M|    static_assert(ranges::contiguous_range<Range> &&
  179|  7.57M|                  ranges::sized_range<Range>);
  180|       |
  181|  7.57M|    std::array<char32_t, 16> cp_buf{};
  182|  7.57M|    std::array<uint8_t, 16> idx_buf{};
  183|  7.57M|    auto it = ranges::begin(range);
  184|  7.61M|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 7.60M, False: 10.3k]
  ------------------
  185|  7.60M|        auto chunk_begin = it;
  186|  7.60M|        size_t code_point_count = 0;
  187|  7.60M|        uint8_t code_unit_idx = 0;
  188|   123M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 116M, False: 6.99M]
  |  Branch (188:52): [True: 116M, False: 611k]
  ------------------
  189|   116M|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 116M, False: 0]
  ------------------
  190|   116M|                idx_buf[code_point_count] = code_unit_idx;
  191|   116M|                ++code_point_count;
  192|   116M|            }
  193|   116M|            ++it;
  194|   116M|            ++code_unit_idx;
  195|   116M|        }
  196|       |
  197|  7.60M|        auto input = detail::make_string_view_from_pointers(
  198|  7.60M|            detail::to_address(chunk_begin), detail::to_address(it));
  199|  7.60M|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|  7.60M|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|  7.60M|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|  7.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 7.60M]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|  15.5M|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 15.4M, False: 42.1k]
  ------------------
  217|  15.4M|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 7.56M, False: 7.93M]
  ------------------
  218|  7.56M|                return chunk_begin + idx_buf[i];
  219|  7.56M|            }
  220|  15.4M|        }
  221|  7.60M|    }
  222|       |
  223|  10.3k|    return it;
  224|  7.57M|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_ENKUlDiE_clEDi:
  323|  15.4M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  7.56M|{
  459|  7.56M|    auto it = read_code_unit(range);
  460|  7.56M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  7.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 7.56M]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  15.0M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 15.0M, False: 7.18M]
  ------------------
  465|  15.0M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 374k, False: 14.6M]
  ------------------
  466|   374k|            return *it;
  467|   374k|        }
  468|  15.0M|    }
  469|       |
  470|  7.18M|    return unexpected(parse_error::error);
  471|  7.56M|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEOSH_OSJ_:
  481|  1.54M|{
  482|  1.54M|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 1.36M, False: 178k]
  ------------------
  483|  1.36M|        return ranges::begin(range);
  484|  1.36M|    }
  485|   178k|    return *result;
  486|  1.54M|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  16.4M|{
  418|  16.4M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  16.4M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  16.4M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  16.4M|        if (ranges::size(range) < str.size()) {
  423|  16.4M|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  16.4M|        }
  425|  16.4M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  16.4M|            return unexpected(parse_error::error);
  427|  16.4M|        }
  428|  16.4M|        return ranges::next(ranges::begin(range), str.size());
  429|  16.4M|    }
  430|  16.4M|    else {
  431|  16.4M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  16.4M|            if (ch < 'A' || ch > 'Z') {
  433|  16.4M|                return ch;
  434|  16.4M|            }
  435|  16.4M|            return static_cast<char_type>(ch +
  436|  16.4M|                                          static_cast<char_type>('a' - 'A'));
  437|  16.4M|        };
  438|       |
  439|  16.4M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  16.4M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  16.4M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  16.4M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  16.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 143k, False: 16.3M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|   143k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|   143k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   143k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|   143k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|   143k|    }                                                  \
  |  |  |  |   70|  16.4M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  16.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  16.3M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  16.3M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  16.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 16.2M, False: 86.6k]
  |  |  ------------------
  ------------------
  443|  16.3M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  16.3M|                    return ascii_tolower(a) ==
  445|  16.3M|                           static_cast<detail::char_t<Range>>(b);
  446|  16.3M|                }))) {
  447|  16.2M|            return unexpected(parse_error::error);
  448|  16.2M|        }
  449|       |
  450|  86.6k|        return it;
  451|  16.3M|    }
  452|  16.4M|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
  431|  25.4M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  25.4M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 24.2M, False: 1.20M]
  |  Branch (432:29): [True: 1.15M, False: 55.2k]
  ------------------
  433|  25.3M|                return ch;
  434|  25.3M|            }
  435|  55.2k|            return static_cast<char_type>(ch +
  436|  55.2k|                                          static_cast<char_type>('a' - 'A'));
  437|  25.4M|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NDTcl4implISE_EEE4typeE:
  331|  5.25M|{
  332|  5.25M|    auto it = read_code_unit(range);
  333|  5.25M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  5.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.61k, False: 5.24M]
  |  |  ------------------
  ------------------
  334|  3.61k|        return unexpected(make_eof_parse_error(it.error()));
  335|  3.61k|    }
  336|       |
  337|  5.24M|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|  5.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.40M, False: 2.84M]
  |  |  ------------------
  ------------------
  338|  5.24M|                     static_cast<detail::char_t<Range>>(ch))) {
  339|  2.40M|        return unexpected(parse_error::error);
  340|  2.40M|    }
  341|       |
  342|  2.84M|    return *it;
  343|  5.24M|}
_ZN3scn2v24impl27read_until_code_point_eagerIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_NS1_12function_refIFbDiESF_EE:
  177|   886k|{
  178|   886k|    static_assert(ranges::contiguous_range<Range> &&
  179|   886k|                  ranges::sized_range<Range>);
  180|       |
  181|   886k|    std::array<char32_t, 16> cp_buf{};
  182|   886k|    std::array<uint8_t, 16> idx_buf{};
  183|   886k|    auto it = ranges::begin(range);
  184|   886k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 886k, False: 0]
  ------------------
  185|   886k|        auto chunk_begin = it;
  186|   886k|        size_t code_point_count = 0;
  187|   886k|        uint8_t code_unit_idx = 0;
  188|  1.77M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 1.77M, False: 0]
  |  Branch (188:52): [True: 886k, False: 886k]
  ------------------
  189|   886k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 886k, False: 0]
  ------------------
  190|   886k|                idx_buf[code_point_count] = code_unit_idx;
  191|   886k|                ++code_point_count;
  192|   886k|            }
  193|   886k|            ++it;
  194|   886k|            ++code_unit_idx;
  195|   886k|        }
  196|       |
  197|   886k|        auto input = detail::make_string_view_from_pointers(
  198|   886k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|   886k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|   886k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|   886k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|   886k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 886k]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|   886k|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 886k, False: 0]
  ------------------
  217|   886k|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 886k, False: 0]
  ------------------
  218|   886k|                return chunk_begin + idx_buf[i];
  219|   886k|            }
  220|   886k|        }
  221|   886k|    }
  222|       |
  223|      0|    return it;
  224|   886k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|   886k|{
  300|   886k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   886k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   886k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   886k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   886k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   886k|        return ranges::next(ranges::begin(range),
  306|   886k|                            ranges::distance(buf.view().begin(), it));
  307|   886k|    }
  308|   886k|    else {
  309|   886k|        auto it = ranges::begin(range);
  310|       |
  311|   886k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   886k|            auto seg = get_contiguous_beginning(range);
  313|   886k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   886k|                seg_it != seg.end()) {
  315|   886k|                return ranges_polyfill::batch_next(
  316|   886k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   886k|            }
  318|   886k|            ranges_polyfill::batch_next(it, seg.size());
  319|   886k|        }
  320|       |
  321|   886k|        return read_while_code_point(
  322|   886k|            SCN_FWD(range),
  ------------------
  |  |  248|   886k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   886k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   886k|    }
  325|   886k|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  263|   886k|{
  264|   886k|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   886k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|   886k|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  230|   886k|{
  231|   886k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|   886k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|   886k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|   886k|    }
  235|   886k|    else {
  236|   886k|        auto it = ranges::begin(range);
  237|   886k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|   886k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|   886k|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 886k, False: 0]
  ------------------
  241|   886k|            return ranges_polyfill::batch_next(
  242|   886k|                it, ranges::distance(seg.begin(), seg_it));
  243|   886k|        }
  244|       |
  245|      0|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 0, False: 0]
  ------------------
  246|      0|            const auto [iter, value] =
  247|      0|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|      0|            const auto cp = decode_code_point_exhaustive(value.view());
  249|      0|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 0, False: 0]
  ------------------
  250|      0|                return it;
  251|      0|            }
  252|      0|            it = iter;
  253|      0|        }
  254|       |
  255|      0|        return it;
  256|      0|    }
  257|   886k|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_ENKUlDiE_clEDi:
  323|   886k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|   886k|{
  459|   886k|    auto it = read_code_unit(range);
  460|   886k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   886k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 886k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  1.77M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 1.77M, False: 886k]
  ------------------
  465|  1.77M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 0, False: 1.77M]
  ------------------
  466|      0|            return *it;
  467|      0|        }
  468|  1.77M|    }
  469|       |
  470|   886k|    return unexpected(parse_error::error);
  471|   886k|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEOSK_OSM_:
  481|   397k|{
  482|   397k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 397k, False: 0]
  ------------------
  483|   397k|        return ranges::begin(range);
  484|   397k|    }
  485|      0|    return *result;
  486|   397k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|  1.53M|{
  418|  1.53M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  1.53M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  1.53M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  1.53M|        if (ranges::size(range) < str.size()) {
  423|  1.53M|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  1.53M|        }
  425|  1.53M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  1.53M|            return unexpected(parse_error::error);
  427|  1.53M|        }
  428|  1.53M|        return ranges::next(ranges::begin(range), str.size());
  429|  1.53M|    }
  430|  1.53M|    else {
  431|  1.53M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  1.53M|            if (ch < 'A' || ch > 'Z') {
  433|  1.53M|                return ch;
  434|  1.53M|            }
  435|  1.53M|            return static_cast<char_type>(ch +
  436|  1.53M|                                          static_cast<char_type>('a' - 'A'));
  437|  1.53M|        };
  438|       |
  439|  1.53M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  1.53M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.53M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.53M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 170, False: 1.53M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    170|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    170|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    170|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    170|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    170|    }                                                  \
  |  |  |  |   70|  1.53M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  1.53M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  1.53M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  1.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.53M, False: 0]
  |  |  ------------------
  ------------------
  443|  1.53M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  1.53M|                    return ascii_tolower(a) ==
  445|  1.53M|                           static_cast<detail::char_t<Range>>(b);
  446|  1.53M|                }))) {
  447|  1.53M|            return unexpected(parse_error::error);
  448|  1.53M|        }
  449|       |
  450|      0|        return it;
  451|  1.53M|    }
  452|  1.53M|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlwE_clEw:
  431|  1.53M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  1.53M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 72.3k, False: 1.46M]
  |  Branch (432:29): [True: 1.46M, False: 0]
  ------------------
  433|  1.53M|                return ch;
  434|  1.53M|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|  1.53M|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NDTcl4implISH_EEE4typeE:
  331|   488k|{
  332|   488k|    auto it = read_code_unit(range);
  333|   488k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   488k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 488k]
  |  |  ------------------
  ------------------
  334|      0|        return unexpected(make_eof_parse_error(it.error()));
  335|      0|    }
  336|       |
  337|   488k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|   488k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 488k, False: 0]
  |  |  ------------------
  ------------------
  338|   488k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   488k|        return unexpected(parse_error::error);
  340|   488k|    }
  341|       |
  342|      0|    return *it;
  343|   488k|}
_ZN3scn2v24impl21read_while1_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NS1_12function_refIFbNDTcl4implISH_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
  158|   777k|{
  159|   777k|    auto it = read_while_code_unit(range, pred);
  160|   777k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 669k, False: 108k]
  ------------------
  161|   669k|        return unexpected(parse_error::error);
  162|   669k|    }
  163|   108k|    return it;
  164|   777k|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|   777k|{
  139|   777k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   777k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   777k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|   777k|{
  131|   777k|    return ranges::find_if(range, pred);
  132|   777k|}

_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  14.5M|{
   36|  14.5M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  14.5M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.99k, False: 14.5M]
  |  |  ------------------
  ------------------
   37|  1.99k|        return unexpected(e);
   38|  1.99k|    }
   39|       |
   40|  14.5M|    return ranges::next(ranges::begin(range));
   41|  14.5M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|   470k|{
   36|   470k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   470k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 470k]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|   470k|    return ranges::next(ranges::begin(range));
   41|   470k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|   524k|{
   48|   524k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|   524k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   524k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|   524k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|   524k|        const auto sz = ranges::ssize(range);
   52|   524k|        if (sz < count) {
   53|   524k|            return unexpected(eof_error::eof);
   54|   524k|        }
   55|       |
   56|   524k|        return ranges::next(ranges::begin(range), count);
   57|   524k|    }
   58|   524k|    else {
   59|   524k|        auto it = ranges::begin(range);
   60|   524k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 524k, False: 174]
  ------------------
   61|   524k|            return ranges_polyfill::batch_next(it, count);
   62|   524k|        }
   63|       |
   64|    348|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 348, False: 0]
  ------------------
   65|    348|             ++i, (void)++it) {
   66|    348|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 174, False: 174]
  ------------------
   67|    174|                return unexpected(eof_error::eof);
   68|    174|            }
   69|    348|        }
   70|       |
   71|      0|        return it;
   72|    174|    }
   73|   524k|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  12.8M|{
   36|  12.8M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  12.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.61k, False: 12.8M]
  |  |  ------------------
  ------------------
   37|  3.61k|        return unexpected(e);
   38|  3.61k|    }
   39|       |
   40|  12.8M|    return ranges::next(ranges::begin(range));
   41|  12.8M|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__19enable_ifIX5rangeISE_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeE:
   47|  16.4M|{
   48|  16.4M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  16.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  16.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  16.4M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  16.4M|        const auto sz = ranges::ssize(range);
   52|  16.4M|        if (sz < count) {
  ------------------
  |  Branch (52:13): [True: 143k, False: 16.3M]
  ------------------
   53|   143k|            return unexpected(eof_error::eof);
   54|   143k|        }
   55|       |
   56|  16.3M|        return ranges::next(ranges::begin(range), count);
   57|  16.4M|    }
   58|  16.4M|    else {
   59|  16.4M|        auto it = ranges::begin(range);
   60|  16.4M|        if (guaranteed_minimum_size(range) >= count) {
   61|  16.4M|            return ranges_polyfill::batch_next(it, count);
   62|  16.4M|        }
   63|       |
   64|  16.4M|        for (ranges::range_difference_t<Range> i = 0; i < count;
   65|  16.4M|             ++i, (void)++it) {
   66|  16.4M|            if (it == ranges::end(range)) {
   67|  16.4M|                return unexpected(eof_error::eof);
   68|  16.4M|            }
   69|  16.4M|        }
   70|       |
   71|  16.4M|        return it;
   72|  16.4M|    }
   73|  16.4M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|  1.37M|{
   36|  1.37M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.37M]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|  1.37M|    return ranges::next(ranges::begin(range));
   41|  1.37M|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|  1.53M|{
   48|  1.53M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  1.53M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.53M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  1.53M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  1.53M|        const auto sz = ranges::ssize(range);
   52|  1.53M|        if (sz < count) {
   53|  1.53M|            return unexpected(eof_error::eof);
   54|  1.53M|        }
   55|       |
   56|  1.53M|        return ranges::next(ranges::begin(range), count);
   57|  1.53M|    }
   58|  1.53M|    else {
   59|  1.53M|        auto it = ranges::begin(range);
   60|  1.53M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 1.53M, False: 170]
  ------------------
   61|  1.53M|            return ranges_polyfill::batch_next(it, count);
   62|  1.53M|        }
   63|       |
   64|    340|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 340, False: 0]
  ------------------
   65|    340|             ++i, (void)++it) {
   66|    340|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 170, False: 170]
  ------------------
   67|    170|                return unexpected(eof_error::eof);
   68|    170|            }
   69|    340|        }
   70|       |
   71|      0|        return it;
   72|    170|    }
   73|  1.53M|}

_ZN3scn2v26detail10locale_refC2INSt3__16localeEEERKT_:
   32|  8.30M|{
   33|  8.30M|    static_assert(std::is_same_v<Locale, std::locale>);
   34|  8.30M|}
_ZNK3scn2v26detail10locale_ref3getINSt3__16localeEEET_v:
   38|  1.95M|{
   39|  1.95M|    static_assert(std::is_same_v<Locale, std::locale>);
   40|  1.95M|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (40:12): [True: 979k, False: 979k]
  ------------------
   41|  1.95M|                    : std::locale{};
   42|  1.95M|}

_ZN3scn2v24impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
  111|   992k|    {
  112|   992k|        auto stdloc = loc.get<std::locale>();
  113|   992k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|   992k|        grouping = numpunct.grouping();
  115|   992k|        thousands_sep =
  116|   992k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 992k]
  ------------------
  117|   992k|        decimal_point = numpunct.decimal_point();
  118|   992k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
   48|   992k|{
   49|   992k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 992k, False: 0]
  ------------------
   50|   992k|        return std::use_facet<Facet>(stdloc);
   51|   992k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|   992k|}
_ZN3scn2v24impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
  111|   965k|    {
  112|   965k|        auto stdloc = loc.get<std::locale>();
  113|   965k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|   965k|        grouping = numpunct.grouping();
  115|   965k|        thousands_sep =
  116|   965k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 965k]
  ------------------
  117|   965k|        decimal_point = numpunct.decimal_point();
  118|   965k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
   48|   965k|{
   49|   965k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 965k, False: 0]
  ------------------
   50|   965k|        return std::use_facet<Facet>(stdloc);
   51|   965k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|   965k|}

_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  8.52M|{
   46|  8.52M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 8.52M, False: 0]
  ------------------
   47|  8.52M|        auto it = read_while_classic_space(range);
   48|  8.52M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  8.52M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  8.52M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.62k, False: 8.51M]
  |  |  ------------------
  ------------------
   50|  6.62k|            return unexpected(e);
   51|  6.62k|        }
   52|       |
   53|  8.51M|        return it;
   54|  8.52M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  8.52M|}
_ZNK3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
  125|  8.86M|    {
  126|  8.86M|        return true;
  127|  8.86M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|   307k|{
   46|   307k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 307k, False: 0]
  ------------------
   47|   307k|        auto it = read_while_classic_space(range);
   48|   307k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   307k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 307k]
  |  |  ------------------
  ------------------
   50|      0|            return unexpected(e);
   51|      0|        }
   52|       |
   53|   307k|        return it;
   54|   307k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   307k|}
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
  130|  6.31M|    {
  131|  6.31M|        reader_error_handler eh{};
  132|  6.31M|        get_derived().check_specs_impl(specs, eh);
  133|  6.31M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  6.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 6.31M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  6.31M|        return {};
  137|  6.31M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
  141|  6.31M|    {
  142|  6.31M|        return static_cast<Derived&>(*this);
  143|  6.31M|    }
_ZNK3scn2v24impl20reader_error_handlercvbEv:
   34|  12.5M|    {
   35|  12.5M|        return m_msg == nullptr;
   36|  12.5M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  7.57M|{
   46|  7.57M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 7.57M, False: 0]
  ------------------
   47|  7.57M|        auto it = read_while_classic_space(range);
   48|  7.57M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  7.57M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  7.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 10.3k, False: 7.56M]
  |  |  ------------------
  ------------------
   50|  10.3k|            return unexpected(e);
   51|  10.3k|        }
   52|       |
   53|  7.56M|        return it;
   54|  7.57M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  7.57M|}
_ZNK3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
  125|  8.49M|    {
  126|  8.49M|        return true;
  127|  8.49M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
  130|  6.18M|    {
  131|  6.18M|        reader_error_handler eh{};
  132|  6.18M|        get_derived().check_specs_impl(specs, eh);
  133|  6.18M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  6.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 6.18M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  6.18M|        return {};
  137|  6.18M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
  141|  6.18M|    {
  142|  6.18M|        return static_cast<Derived&>(*this);
  143|  6.18M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|   886k|{
   46|   886k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 886k, False: 0]
  ------------------
   47|   886k|        auto it = read_while_classic_space(range);
   48|   886k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   886k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   886k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 886k]
  |  |  ------------------
  ------------------
   50|      0|            return unexpected(e);
   51|      0|        }
   52|       |
   53|   886k|        return it;
   54|   886k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   886k|}

_ZN3scn2v24impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   739k|{
  218|   739k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   739k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   739k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   739k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   739k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   739k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   739k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   739k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   739k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   739k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   739k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   739k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   739k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 20.6k, False: 718k]
  ------------------
  224|  20.6k|        SCN_UNLIKELY_ATTR
  225|  20.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  20.6k|                                     "Invalid integer value");
  227|  20.6k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   718k|    auto start = source.data();
  231|   718k|    const auto end = source.data() + source.size();
  232|   718k|    {
  233|  1.25M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.24M, False: 17.3k]
  ------------------
  234|  1.24M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 701k, False: 539k]
  ------------------
  235|   701k|                break;
  236|   701k|            }
  237|  1.24M|        }
  238|   718k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 169k, False: 548k]
  |  |  |  Branch (153:45): [True: 17.3k, False: 701k]
  |  |  |  Branch (153:45): [True: 152k, False: 548k]
  |  |  ------------------
  ------------------
  239|   169k|            value = 0;
  240|   169k|            return ranges::next(source.begin(),
  241|   169k|                                ranges::distance(source.data(), start));
  242|   169k|        }
  243|   718k|    }
  244|       |
  245|   548k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   548k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 433k, False: 114k]
  ------------------
  247|   433k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   433k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   433k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   433k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   433k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.3k, False: 423k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.3k|    }                                                  \
  |  |  |  |   70|   433k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   423k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   423k|                             detail::make_string_view_from_pointers(start, end),
  249|   423k|                             value, sign == sign_type::minus_sign));
  250|   423k|            return ranges::next(source.begin(),
  251|   423k|                                ranges::distance(source.data(), ptr));
  252|   433k|        }
  253|   548k|    }
  254|       |
  255|   114k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   114k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   114k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   114k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.26k, False: 107k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.26k|    }                                                  \
  |  |  |  |   70|   114k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   107k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   107k|                     base, sign == sign_type::minus_sign));
  258|   107k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   114k|}
_ZN3scn2v24impl19parse_integer_valueIwaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   698k|{
  218|   698k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   698k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   698k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   698k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   698k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   698k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   698k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   698k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   698k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   698k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   698k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   698k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   698k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 100k, False: 598k]
  ------------------
  224|   100k|        SCN_UNLIKELY_ATTR
  225|   100k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|   100k|                                     "Invalid integer value");
  227|   100k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   598k|    auto start = source.data();
  231|   598k|    const auto end = source.data() + source.size();
  232|   598k|    {
  233|  1.07M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.06M, False: 15.2k]
  ------------------
  234|  1.06M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 583k, False: 480k]
  ------------------
  235|   583k|                break;
  236|   583k|            }
  237|  1.06M|        }
  238|   598k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 145k, False: 452k]
  |  |  |  Branch (153:45): [True: 15.2k, False: 583k]
  |  |  |  Branch (153:45): [True: 130k, False: 452k]
  |  |  ------------------
  ------------------
  239|   145k|            value = 0;
  240|   145k|            return ranges::next(source.begin(),
  241|   145k|                                ranges::distance(source.data(), start));
  242|   145k|        }
  243|   598k|    }
  244|       |
  245|   452k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   452k|        if (base == 10) {
  247|   452k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   452k|                             detail::make_string_view_from_pointers(start, end),
  249|   452k|                             value, sign == sign_type::minus_sign));
  250|   452k|            return ranges::next(source.begin(),
  251|   452k|                                ranges::distance(source.data(), ptr));
  252|   452k|        }
  253|   452k|    }
  254|       |
  255|   452k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   452k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   452k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   452k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 31.7k, False: 421k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  31.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  31.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  31.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  31.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  31.7k|    }                                                  \
  |  |  |  |   70|   452k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   421k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   421k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   421k|                     base, sign == sign_type::minus_sign));
  258|   421k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   452k|}
_ZN3scn2v24impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|  1.21M|{
  218|  1.21M|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|  1.21M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.21M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|  1.21M|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|  1.21M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.21M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|  1.21M|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|  1.21M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.21M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|  1.21M|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|  1.21M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.21M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|  1.21M|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 27.1k, False: 1.18M]
  ------------------
  224|  27.1k|        SCN_UNLIKELY_ATTR
  225|  27.1k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  27.1k|                                     "Invalid integer value");
  227|  27.1k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|  1.18M|    auto start = source.data();
  231|  1.18M|    const auto end = source.data() + source.size();
  232|  1.18M|    {
  233|  2.25M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 2.22M, False: 26.7k]
  ------------------
  234|  2.22M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 1.15M, False: 1.07M]
  ------------------
  235|  1.15M|                break;
  236|  1.15M|            }
  237|  2.22M|        }
  238|  1.18M|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  2.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 296k, False: 888k]
  |  |  |  Branch (153:45): [True: 26.7k, False: 1.15M]
  |  |  |  Branch (153:45): [True: 269k, False: 888k]
  |  |  ------------------
  ------------------
  239|   296k|            value = 0;
  240|   296k|            return ranges::next(source.begin(),
  241|   296k|                                ranges::distance(source.data(), start));
  242|   296k|        }
  243|  1.18M|    }
  244|       |
  245|   888k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   888k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 617k, False: 270k]
  ------------------
  247|   617k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   617k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   617k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   617k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   617k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.31k, False: 614k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.31k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.31k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.31k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.31k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.31k|    }                                                  \
  |  |  |  |   70|   617k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   614k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   614k|                             detail::make_string_view_from_pointers(start, end),
  249|   614k|                             value, sign == sign_type::minus_sign));
  250|   614k|            return ranges::next(source.begin(),
  251|   614k|                                ranges::distance(source.data(), ptr));
  252|   617k|        }
  253|   888k|    }
  254|       |
  255|   270k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   270k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   270k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   270k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   270k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.57k, False: 268k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.57k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.57k|    }                                                  \
  |  |  |  |   70|   270k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   268k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   268k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   268k|                     base, sign == sign_type::minus_sign));
  258|   268k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   270k|}
_ZN3scn2v24impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|  1.09M|{
  218|  1.09M|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|  1.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|  1.09M|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|  1.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|  1.09M|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|  1.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|  1.09M|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|  1.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|  1.09M|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 104k, False: 988k]
  ------------------
  224|   104k|        SCN_UNLIKELY_ATTR
  225|   104k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|   104k|                                     "Invalid integer value");
  227|   104k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   988k|    auto start = source.data();
  231|   988k|    const auto end = source.data() + source.size();
  232|   988k|    {
  233|  1.93M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.90M, False: 23.3k]
  ------------------
  234|  1.90M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 965k, False: 944k]
  ------------------
  235|   965k|                break;
  236|   965k|            }
  237|  1.90M|        }
  238|   988k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 251k, False: 736k]
  |  |  |  Branch (153:45): [True: 23.3k, False: 965k]
  |  |  |  Branch (153:45): [True: 228k, False: 736k]
  |  |  ------------------
  ------------------
  239|   251k|            value = 0;
  240|   251k|            return ranges::next(source.begin(),
  241|   251k|                                ranges::distance(source.data(), start));
  242|   251k|        }
  243|   988k|    }
  244|       |
  245|   736k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   736k|        if (base == 10) {
  247|   736k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   736k|                             detail::make_string_view_from_pointers(start, end),
  249|   736k|                             value, sign == sign_type::minus_sign));
  250|   736k|            return ranges::next(source.begin(),
  251|   736k|                                ranges::distance(source.data(), ptr));
  252|   736k|        }
  253|   736k|    }
  254|       |
  255|   736k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   736k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   736k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   736k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   736k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.51k, False: 732k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.51k|    }                                                  \
  |  |  |  |   70|   736k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   732k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   732k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   732k|                     base, sign == sign_type::minus_sign));
  258|   732k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   736k|}
_ZN3scn2v24impl19parse_integer_valueIcxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|  1.26M|{
  218|  1.26M|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|  1.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|  1.26M|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|  1.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|  1.26M|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|  1.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|  1.26M|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|  1.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|  1.26M|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 29.0k, False: 1.23M]
  ------------------
  224|  29.0k|        SCN_UNLIKELY_ATTR
  225|  29.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  29.0k|                                     "Invalid integer value");
  227|  29.0k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|  1.23M|    auto start = source.data();
  231|  1.23M|    const auto end = source.data() + source.size();
  232|  1.23M|    {
  233|  2.31M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 2.29M, False: 26.9k]
  ------------------
  234|  2.29M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 1.20M, False: 1.08M]
  ------------------
  235|  1.20M|                break;
  236|  1.20M|            }
  237|  2.29M|        }
  238|  1.23M|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  2.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 298k, False: 937k]
  |  |  |  Branch (153:45): [True: 26.9k, False: 1.20M]
  |  |  |  Branch (153:45): [True: 271k, False: 937k]
  |  |  ------------------
  ------------------
  239|   298k|            value = 0;
  240|   298k|            return ranges::next(source.begin(),
  241|   298k|                                ranges::distance(source.data(), start));
  242|   298k|        }
  243|  1.23M|    }
  244|       |
  245|   937k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   937k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 652k, False: 285k]
  ------------------
  247|   652k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   652k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   652k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   652k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   652k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.52k, False: 650k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.52k|    }                                                  \
  |  |  |  |   70|   652k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   650k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   650k|                             detail::make_string_view_from_pointers(start, end),
  249|   650k|                             value, sign == sign_type::minus_sign));
  250|   650k|            return ranges::next(source.begin(),
  251|   650k|                                ranges::distance(source.data(), ptr));
  252|   652k|        }
  253|   937k|    }
  254|       |
  255|   285k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   285k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   285k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   285k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   285k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.26k, False: 284k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.26k|    }                                                  \
  |  |  |  |   70|   285k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   284k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   284k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   284k|                     base, sign == sign_type::minus_sign));
  258|   284k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   285k|}
_ZN3scn2v24impl19parse_integer_valueIwxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|  1.13M|{
  218|  1.13M|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|  1.13M|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|  1.13M|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|  1.13M|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|  1.13M|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 105k, False: 1.02M]
  ------------------
  224|   105k|        SCN_UNLIKELY_ATTR
  225|   105k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|   105k|                                     "Invalid integer value");
  227|   105k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|  1.02M|    auto start = source.data();
  231|  1.02M|    const auto end = source.data() + source.size();
  232|  1.02M|    {
  233|  1.97M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.95M, False: 23.5k]
  ------------------
  234|  1.95M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 1.00M, False: 952k]
  ------------------
  235|  1.00M|                break;
  236|  1.00M|            }
  237|  1.95M|        }
  238|  1.02M|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  2.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 253k, False: 773k]
  |  |  |  Branch (153:45): [True: 23.5k, False: 1.00M]
  |  |  |  Branch (153:45): [True: 230k, False: 773k]
  |  |  ------------------
  ------------------
  239|   253k|            value = 0;
  240|   253k|            return ranges::next(source.begin(),
  241|   253k|                                ranges::distance(source.data(), start));
  242|   253k|        }
  243|  1.02M|    }
  244|       |
  245|   773k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   773k|        if (base == 10) {
  247|   773k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   773k|                             detail::make_string_view_from_pointers(start, end),
  249|   773k|                             value, sign == sign_type::minus_sign));
  250|   773k|            return ranges::next(source.begin(),
  251|   773k|                                ranges::distance(source.data(), ptr));
  252|   773k|        }
  253|   773k|    }
  254|       |
  255|   773k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   773k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   773k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   773k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   773k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.23k, False: 770k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.23k|    }                                                  \
  |  |  |  |   70|   773k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   770k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   770k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   770k|                     base, sign == sign_type::minus_sign));
  258|   770k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   773k|}
_ZN3scn2v24impl19parse_integer_valueIchEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   749k|{
  218|   749k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   749k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   749k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   749k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   749k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   749k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   749k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   749k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   749k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   749k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   749k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   749k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   749k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 17.2k, False: 731k]
  ------------------
  224|  17.2k|        SCN_UNLIKELY_ATTR
  225|  17.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  17.2k|                                     "Invalid integer value");
  227|  17.2k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   731k|    auto start = source.data();
  231|   731k|    const auto end = source.data() + source.size();
  232|   731k|    {
  233|  1.51M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.49M, False: 21.9k]
  ------------------
  234|  1.49M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 709k, False: 783k]
  ------------------
  235|   709k|                break;
  236|   709k|            }
  237|  1.49M|        }
  238|   731k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 210k, False: 521k]
  |  |  |  Branch (153:45): [True: 21.9k, False: 709k]
  |  |  |  Branch (153:45): [True: 188k, False: 521k]
  |  |  ------------------
  ------------------
  239|   210k|            value = 0;
  240|   210k|            return ranges::next(source.begin(),
  241|   210k|                                ranges::distance(source.data(), start));
  242|   210k|        }
  243|   731k|    }
  244|       |
  245|   521k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   521k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 375k, False: 145k]
  ------------------
  247|   375k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   375k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   375k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   375k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   375k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.37k, False: 369k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.37k|    }                                                  \
  |  |  |  |   70|   375k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   369k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   369k|                             detail::make_string_view_from_pointers(start, end),
  249|   369k|                             value, sign == sign_type::minus_sign));
  250|   369k|            return ranges::next(source.begin(),
  251|   369k|                                ranges::distance(source.data(), ptr));
  252|   375k|        }
  253|   521k|    }
  254|       |
  255|   145k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   145k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   145k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   145k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.79k, False: 141k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.79k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.79k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.79k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.79k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.79k|    }                                                  \
  |  |  |  |   70|   145k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   141k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   141k|                     base, sign == sign_type::minus_sign));
  258|   141k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   145k|}
_ZN3scn2v24impl19parse_integer_valueIwhEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   709k|{
  218|   709k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   709k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   709k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   709k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   709k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   709k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   709k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   709k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   709k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   709k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   709k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   709k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   709k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 97.3k, False: 611k]
  ------------------
  224|  97.3k|        SCN_UNLIKELY_ATTR
  225|  97.3k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  97.3k|                                     "Invalid integer value");
  227|  97.3k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   611k|    auto start = source.data();
  231|   611k|    const auto end = source.data() + source.size();
  232|   611k|    {
  233|  1.30M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.28M, False: 19.2k]
  ------------------
  234|  1.28M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 592k, False: 696k]
  ------------------
  235|   592k|                break;
  236|   592k|            }
  237|  1.28M|        }
  238|   611k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 180k, False: 431k]
  |  |  |  Branch (153:45): [True: 19.2k, False: 592k]
  |  |  |  Branch (153:45): [True: 160k, False: 431k]
  |  |  ------------------
  ------------------
  239|   180k|            value = 0;
  240|   180k|            return ranges::next(source.begin(),
  241|   180k|                                ranges::distance(source.data(), start));
  242|   180k|        }
  243|   611k|    }
  244|       |
  245|   431k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   431k|        if (base == 10) {
  247|   431k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   431k|                             detail::make_string_view_from_pointers(start, end),
  249|   431k|                             value, sign == sign_type::minus_sign));
  250|   431k|            return ranges::next(source.begin(),
  251|   431k|                                ranges::distance(source.data(), ptr));
  252|   431k|        }
  253|   431k|    }
  254|       |
  255|   431k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   431k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   431k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   431k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   431k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 25.8k, False: 405k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  25.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  25.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  25.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  25.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  25.8k|    }                                                  \
  |  |  |  |   70|   431k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   405k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   405k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   405k|                     base, sign == sign_type::minus_sign));
  258|   405k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   431k|}
_ZN3scn2v24impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   979k|{
  218|   979k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   979k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   979k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   979k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   979k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   979k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   979k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   979k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   979k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   979k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   979k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   979k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   979k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 19.8k, False: 959k]
  ------------------
  224|  19.8k|        SCN_UNLIKELY_ATTR
  225|  19.8k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  19.8k|                                     "Invalid integer value");
  227|  19.8k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   959k|    auto start = source.data();
  231|   959k|    const auto end = source.data() + source.size();
  232|   959k|    {
  233|  1.95M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.93M, False: 24.3k]
  ------------------
  234|  1.93M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 935k, False: 1.00M]
  ------------------
  235|   935k|                break;
  236|   935k|            }
  237|  1.93M|        }
  238|   959k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.89M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 259k, False: 700k]
  |  |  |  Branch (153:45): [True: 24.3k, False: 935k]
  |  |  |  Branch (153:45): [True: 235k, False: 700k]
  |  |  ------------------
  ------------------
  239|   259k|            value = 0;
  240|   259k|            return ranges::next(source.begin(),
  241|   259k|                                ranges::distance(source.data(), start));
  242|   259k|        }
  243|   959k|    }
  244|       |
  245|   700k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   700k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 488k, False: 211k]
  ------------------
  247|   488k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   488k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   488k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   488k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   488k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.59k, False: 487k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.59k|    }                                                  \
  |  |  |  |   70|   488k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   487k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   487k|                             detail::make_string_view_from_pointers(start, end),
  249|   487k|                             value, sign == sign_type::minus_sign));
  250|   487k|            return ranges::next(source.begin(),
  251|   487k|                                ranges::distance(source.data(), ptr));
  252|   488k|        }
  253|   700k|    }
  254|       |
  255|   211k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   211k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   211k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   211k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   211k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.47k, False: 209k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.47k|    }                                                  \
  |  |  |  |   70|   211k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   209k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   209k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   209k|                     base, sign == sign_type::minus_sign));
  258|   209k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   211k|}
_ZN3scn2v24impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   905k|{
  218|   905k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   905k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   905k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   905k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   905k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   905k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   905k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   905k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   905k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   905k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   905k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   905k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   905k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 99.2k, False: 805k]
  ------------------
  224|  99.2k|        SCN_UNLIKELY_ATTR
  225|  99.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  99.2k|                                     "Invalid integer value");
  227|  99.2k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   805k|    auto start = source.data();
  231|   805k|    const auto end = source.data() + source.size();
  232|   805k|    {
  233|  1.69M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.67M, False: 21.2k]
  ------------------
  234|  1.67M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 784k, False: 885k]
  ------------------
  235|   784k|                break;
  236|   784k|            }
  237|  1.67M|        }
  238|   805k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 222k, False: 583k]
  |  |  |  Branch (153:45): [True: 21.2k, False: 784k]
  |  |  |  Branch (153:45): [True: 200k, False: 583k]
  |  |  ------------------
  ------------------
  239|   222k|            value = 0;
  240|   222k|            return ranges::next(source.begin(),
  241|   222k|                                ranges::distance(source.data(), start));
  242|   222k|        }
  243|   805k|    }
  244|       |
  245|   583k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   583k|        if (base == 10) {
  247|   583k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   583k|                             detail::make_string_view_from_pointers(start, end),
  249|   583k|                             value, sign == sign_type::minus_sign));
  250|   583k|            return ranges::next(source.begin(),
  251|   583k|                                ranges::distance(source.data(), ptr));
  252|   583k|        }
  253|   583k|    }
  254|       |
  255|   583k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   583k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   583k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   583k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   583k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.52k, False: 581k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.52k|    }                                                  \
  |  |  |  |   70|   583k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   581k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   581k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   581k|                     base, sign == sign_type::minus_sign));
  258|   581k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   583k|}
_ZN3scn2v24impl19parse_integer_valueIcyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|  1.00M|{
  218|  1.00M|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|  1.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|  1.00M|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|  1.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|  1.00M|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|  1.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|  1.00M|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|  1.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|  1.00M|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 20.4k, False: 989k]
  ------------------
  224|  20.4k|        SCN_UNLIKELY_ATTR
  225|  20.4k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  20.4k|                                     "Invalid integer value");
  227|  20.4k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   989k|    auto start = source.data();
  231|   989k|    const auto end = source.data() + source.size();
  232|   989k|    {
  233|  1.99M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.97M, False: 24.4k]
  ------------------
  234|  1.97M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 964k, False: 1.00M]
  ------------------
  235|   964k|                break;
  236|   964k|            }
  237|  1.97M|        }
  238|   989k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 261k, False: 728k]
  |  |  |  Branch (153:45): [True: 24.4k, False: 964k]
  |  |  |  Branch (153:45): [True: 236k, False: 728k]
  |  |  ------------------
  ------------------
  239|   261k|            value = 0;
  240|   261k|            return ranges::next(source.begin(),
  241|   261k|                                ranges::distance(source.data(), start));
  242|   261k|        }
  243|   989k|    }
  244|       |
  245|   728k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   728k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 509k, False: 219k]
  ------------------
  247|   509k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   509k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   509k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   509k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   509k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 619, False: 508k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    619|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    619|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    619|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    619|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    619|    }                                                  \
  |  |  |  |   70|   509k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   508k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   508k|                             detail::make_string_view_from_pointers(start, end),
  249|   508k|                             value, sign == sign_type::minus_sign));
  250|   508k|            return ranges::next(source.begin(),
  251|   508k|                                ranges::distance(source.data(), ptr));
  252|   509k|        }
  253|   728k|    }
  254|       |
  255|   219k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   219k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   219k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   219k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   219k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 740, False: 218k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    740|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    740|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    740|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    740|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    740|    }                                                  \
  |  |  |  |   70|   219k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   218k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   218k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   218k|                     base, sign == sign_type::minus_sign));
  258|   218k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   219k|}
_ZN3scn2v24impl19parse_integer_valueIwyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   930k|{
  218|   930k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   930k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   930k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   930k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   930k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   930k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   930k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   930k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   930k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   930k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   930k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   930k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   930k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 99.6k, False: 830k]
  ------------------
  224|  99.6k|        SCN_UNLIKELY_ATTR
  225|  99.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  99.6k|                                     "Invalid integer value");
  227|  99.6k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   830k|    auto start = source.data();
  231|   830k|    const auto end = source.data() + source.size();
  232|   830k|    {
  233|  1.72M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.70M, False: 21.4k]
  ------------------
  234|  1.70M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 809k, False: 891k]
  ------------------
  235|   809k|                break;
  236|   809k|            }
  237|  1.70M|        }
  238|   830k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 223k, False: 607k]
  |  |  |  Branch (153:45): [True: 21.4k, False: 809k]
  |  |  |  Branch (153:45): [True: 201k, False: 607k]
  |  |  ------------------
  ------------------
  239|   223k|            value = 0;
  240|   223k|            return ranges::next(source.begin(),
  241|   223k|                                ranges::distance(source.data(), start));
  242|   223k|        }
  243|   830k|    }
  244|       |
  245|   607k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   607k|        if (base == 10) {
  247|   607k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   607k|                             detail::make_string_view_from_pointers(start, end),
  249|   607k|                             value, sign == sign_type::minus_sign));
  250|   607k|            return ranges::next(source.begin(),
  251|   607k|                                ranges::distance(source.data(), ptr));
  252|   607k|        }
  253|   607k|    }
  254|       |
  255|   607k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   607k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   607k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   607k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   607k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.11k, False: 606k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.11k|    }                                                  \
  |  |  |  |   70|   607k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   606k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   606k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   606k|                     base, sign == sign_type::minus_sign));
  258|   606k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   607k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIaEEbmmib:
  125|  1.00M|{
  126|  1.00M|    auto max_digits = maxdigits_u64(base);
  127|  1.00M|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 2.98k, False: 998k]
  ------------------
  128|  2.98k|        return true;
  129|  2.98k|    }
  130|   998k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 676, False: 998k]
  |  Branch (130:39): [True: 179, False: 497]
  ------------------
  131|    179|        return true;
  132|    179|    }
  133|   998k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   998k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 46.2k, False: 952k]
  ------------------
  135|   998k|                      static_cast<uint64_t>(is_negative)) {
  136|  46.2k|            SCN_UNLIKELY_ATTR
  137|  46.2k|            return true;
  138|  46.2k|        }
  139|   998k|    }
  140|       |
  141|   952k|    return false;
  142|   998k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113maxdigits_u64Ei:
   95|  7.91M|{
   96|  7.91M|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  242|  7.91M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.91M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   97|      0|    return maxdigits_u64_table[static_cast<size_t>(base - 2)];
   98|  7.91M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112min_safe_u64Ei:
  115|  4.95k|{
  116|  4.95k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  242|  4.95k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.95k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  117|      0|    return min_safe_u64_table[static_cast<size_t>(base - 2)];
  118|  4.95k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIaEET_mb:
  146|   952k|{
  147|   952k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 147k, False: 805k]
  ------------------
  148|   147k|        SCN_MSVC_PUSH
  149|   147k|        SCN_MSVC_IGNORE(4146)
  150|   147k|        return static_cast<T>(
  151|   147k|            -std::numeric_limits<T>::max() -
  152|   147k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|   147k|        SCN_MSVC_POP
  154|   147k|    }
  155|       |
  156|   805k|    return static_cast<T>(u64val);
  157|   952k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIiEEbmmib:
  125|  1.62M|{
  126|  1.62M|    auto max_digits = maxdigits_u64(base);
  127|  1.62M|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 3.61k, False: 1.62M]
  ------------------
  128|  3.61k|        return true;
  129|  3.61k|    }
  130|  1.62M|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 1.01k, False: 1.62M]
  |  Branch (130:39): [True: 179, False: 831]
  ------------------
  131|    179|        return true;
  132|    179|    }
  133|  1.62M|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|  1.62M|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 6.59k, False: 1.61M]
  ------------------
  135|  1.62M|                      static_cast<uint64_t>(is_negative)) {
  136|  6.59k|            SCN_UNLIKELY_ATTR
  137|  6.59k|            return true;
  138|  6.59k|        }
  139|  1.62M|    }
  140|       |
  141|  1.61M|    return false;
  142|  1.62M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIiEET_mb:
  146|  1.61M|{
  147|  1.61M|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 179k, False: 1.43M]
  ------------------
  148|   179k|        SCN_MSVC_PUSH
  149|   179k|        SCN_MSVC_IGNORE(4146)
  150|   179k|        return static_cast<T>(
  151|   179k|            -std::numeric_limits<T>::max() -
  152|   179k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|   179k|        SCN_MSVC_POP
  154|   179k|    }
  155|       |
  156|  1.43M|    return static_cast<T>(u64val);
  157|  1.61M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIxEEbmmib:
  125|  1.71M|{
  126|  1.71M|    auto max_digits = maxdigits_u64(base);
  127|  1.71M|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 4.18k, False: 1.70M]
  ------------------
  128|  4.18k|        return true;
  129|  4.18k|    }
  130|  1.70M|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 1.27k, False: 1.70M]
  |  Branch (130:39): [True: 183, False: 1.09k]
  ------------------
  131|    183|        return true;
  132|    183|    }
  133|  1.70M|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|  1.70M|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 651, False: 1.70M]
  ------------------
  135|  1.70M|                      static_cast<uint64_t>(is_negative)) {
  136|    651|            SCN_UNLIKELY_ATTR
  137|    651|            return true;
  138|    651|        }
  139|  1.70M|    }
  140|       |
  141|  1.70M|    return false;
  142|  1.70M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIxEET_mb:
  146|  1.70M|{
  147|  1.70M|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 187k, False: 1.51M]
  ------------------
  148|   187k|        SCN_MSVC_PUSH
  149|   187k|        SCN_MSVC_IGNORE(4146)
  150|   187k|        return static_cast<T>(
  151|   187k|            -std::numeric_limits<T>::max() -
  152|   187k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|   187k|        SCN_MSVC_POP
  154|   187k|    }
  155|       |
  156|  1.51M|    return static_cast<T>(u64val);
  157|  1.70M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIhEEbmmib:
  125|   952k|{
  126|   952k|    auto max_digits = maxdigits_u64(base);
  127|   952k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 1.83k, False: 950k]
  ------------------
  128|  1.83k|        return true;
  129|  1.83k|    }
  130|   950k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 430, False: 950k]
  |  Branch (130:39): [True: 127, False: 303]
  ------------------
  131|    127|        return true;
  132|    127|    }
  133|   950k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   950k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 33.0k, False: 917k]
  ------------------
  135|   950k|                      static_cast<uint64_t>(is_negative)) {
  136|  33.0k|            SCN_UNLIKELY_ATTR
  137|  33.0k|            return true;
  138|  33.0k|        }
  139|   950k|    }
  140|       |
  141|   917k|    return false;
  142|   950k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIhEET_mb:
  146|   917k|{
  147|   917k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 917k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   917k|    return static_cast<T>(u64val);
  157|   917k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIjEEbmmib:
  125|  1.28M|{
  126|  1.28M|    auto max_digits = maxdigits_u64(base);
  127|  1.28M|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 2.09k, False: 1.28M]
  ------------------
  128|  2.09k|        return true;
  129|  2.09k|    }
  130|  1.28M|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 568, False: 1.28M]
  |  Branch (130:39): [True: 127, False: 441]
  ------------------
  131|    127|        return true;
  132|    127|    }
  133|  1.28M|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|  1.28M|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 3.37k, False: 1.27M]
  ------------------
  135|  1.28M|                      static_cast<uint64_t>(is_negative)) {
  136|  3.37k|            SCN_UNLIKELY_ATTR
  137|  3.37k|            return true;
  138|  3.37k|        }
  139|  1.28M|    }
  140|       |
  141|  1.27M|    return false;
  142|  1.28M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIjEET_mb:
  146|  1.27M|{
  147|  1.27M|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 1.27M]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|  1.27M|    return static_cast<T>(u64val);
  157|  1.27M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIyEEbmmib:
  125|  1.33M|{
  126|  1.33M|    auto max_digits = maxdigits_u64(base);
  127|  1.33M|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 2.33k, False: 1.33M]
  ------------------
  128|  2.33k|        return true;
  129|  2.33k|    }
  130|  1.33M|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 994, False: 1.33M]
  |  Branch (130:39): [True: 131, False: 863]
  ------------------
  131|    131|        return true;
  132|    131|    }
  133|  1.33M|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|  1.33M|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 0, False: 1.33M]
  ------------------
  135|  1.33M|                      static_cast<uint64_t>(is_negative)) {
  136|      0|            SCN_UNLIKELY_ATTR
  137|      0|            return true;
  138|      0|        }
  139|  1.33M|    }
  140|       |
  141|  1.33M|    return false;
  142|  1.33M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIyEET_mb:
  146|  1.33M|{
  147|  1.33M|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 1.33M]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|  1.33M|    return static_cast<T>(u64val);
  157|  1.33M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121get_eight_digits_wordEPKc:
   33|  2.48M|{
   34|  2.48M|    uint64_t val{};
   35|  2.48M|    std::memcpy(&val, input, sizeof(uint64_t));
   36|  2.48M|    if constexpr (SCN_IS_BIG_ENDIAN) {
  ------------------
  |  |  538|  2.48M|#define SCN_IS_BIG_ENDIAN 0
  |  |  ------------------
  |  |  |  Branch (538:27): [Folded - Ignored]
  |  |  ------------------
  ------------------
   37|      0|        val = byteswap(val);
   38|      0|    }
   39|  2.48M|    return val;
   40|  2.48M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_140parse_eight_decimal_digits_unrolled_fastEm:
   43|  67.9k|{
   44|  67.9k|    constexpr uint64_t mask = 0x000000FF000000FF;
   45|  67.9k|    constexpr uint64_t mul1 = 0x000F424000000064;  // 100 + (1000000ULL << 32)
   46|  67.9k|    constexpr uint64_t mul2 = 0x0000271000000001;  // 1 + (10000ULL << 32)
   47|  67.9k|    word -= 0x3030303030303030;
   48|  67.9k|    word = (word * 10) + (word >> 8);  // val = (val * 2561) >> 8;
   49|  67.9k|    word = (((word & mask) * mul1) + (((word >> 16) & mask) * mul2)) >> 32;
   50|  67.9k|    return static_cast<uint32_t>(word);
   51|  67.9k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_141is_word_made_of_eight_decimal_digits_fastEm:
   54|  2.41M|{
   55|  2.41M|    return !((((word + 0x4646464646464646) | (word - 0x3030303030303030)) &
   56|  2.41M|              0x8080808080808080));
   57|  2.41M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIaEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   433k|{
  164|   433k|    uint64_t u64val{};
  165|   433k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   433k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   433k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   433k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   433k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 10.3k, False: 423k]
  |  |  ------------------
  ------------------
  170|   433k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  10.3k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  10.3k|                                     "Integer overflow");
  173|  10.3k|    }
  174|       |
  175|   423k|    val = store_result<T>(u64val, is_negative);
  176|   423k|    return ptr;
  177|   433k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_131parse_decimal_integer_fast_implEPKcS4_Rm:
   75|  3.07M|{
   76|  3.07M|    loop_parse_if_eight_decimal_digits(begin, end, val);
   77|       |
   78|  7.85M|    while (begin != end) {
  ------------------
  |  Branch (78:12): [True: 7.16M, False: 686k]
  ------------------
   79|  7.16M|        const auto digit = char_to_int(*begin);
   80|  7.16M|        if (digit >= 10) {
  ------------------
  |  Branch (80:13): [True: 2.39M, False: 4.77M]
  ------------------
   81|  2.39M|            break;
   82|  2.39M|        }
   83|  4.77M|        val = 10ull * val + static_cast<uint64_t>(digit);
   84|  4.77M|        ++begin;
   85|  4.77M|    }
   86|       |
   87|  3.07M|    return begin;
   88|  3.07M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_134loop_parse_if_eight_decimal_digitsERPKcS4_Rm:
   62|  3.07M|{
   63|  3.07M|    while (
   64|  3.14M|        std::distance(p, end) >= 8 &&
  ------------------
  |  Branch (64:9): [True: 2.41M, False: 727k]
  ------------------
   65|  3.14M|        is_word_made_of_eight_decimal_digits_fast(get_eight_digits_word(p))) {
  ------------------
  |  Branch (65:9): [True: 67.9k, False: 2.35M]
  ------------------
   66|  67.9k|        val = val * 100'000'000 + parse_eight_decimal_digits_unrolled_fast(
   67|  67.9k|                                      get_eight_digits_word(p));
   68|  67.9k|        p += 8;
   69|  67.9k|    }
   70|  3.07M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   114k|{
  185|   114k|    uint64_t u64val{};
  186|   114k|    const CharT* begin = input.data();
  187|   114k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   324k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 301k, False: 22.9k]
  ------------------
  190|   301k|        const auto digit = char_to_int(*begin);
  191|   301k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 91.9k, False: 209k]
  ------------------
  192|  91.9k|            break;
  193|  91.9k|        }
  194|   209k|        u64val =
  195|   209k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   209k|        ++begin;
  197|   209k|    }
  198|       |
  199|   114k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   114k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 7.26k, False: 107k]
  |  |  ------------------
  ------------------
  201|   114k|                                               is_negative))) {
  202|  7.26k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  7.26k|                                     "Integer overflow");
  204|  7.26k|    }
  205|       |
  206|   107k|    val = store_result<T>(u64val, is_negative);
  207|   107k|    return begin;
  208|   114k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   452k|{
  185|   452k|    uint64_t u64val{};
  186|   452k|    const CharT* begin = input.data();
  187|   452k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|  1.23M|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 1.12M, False: 111k]
  ------------------
  190|  1.12M|        const auto digit = char_to_int(*begin);
  191|  1.12M|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 340k, False: 781k]
  ------------------
  192|   340k|            break;
  193|   340k|        }
  194|   781k|        u64val =
  195|   781k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   781k|        ++begin;
  197|   781k|    }
  198|       |
  199|   452k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   452k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 31.7k, False: 421k]
  |  |  ------------------
  ------------------
  201|   452k|                                               is_negative))) {
  202|  31.7k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  31.7k|                                     "Integer overflow");
  204|  31.7k|    }
  205|       |
  206|   421k|    val = store_result<T>(u64val, is_negative);
  207|   421k|    return begin;
  208|   452k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIiEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   617k|{
  164|   617k|    uint64_t u64val{};
  165|   617k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   617k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   617k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   617k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   617k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.31k, False: 614k]
  |  |  ------------------
  ------------------
  170|   617k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  3.31k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  3.31k|                                     "Integer overflow");
  173|  3.31k|    }
  174|       |
  175|   614k|    val = store_result<T>(u64val, is_negative);
  176|   614k|    return ptr;
  177|   617k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIciEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   270k|{
  185|   270k|    uint64_t u64val{};
  186|   270k|    const CharT* begin = input.data();
  187|   270k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   750k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 718k, False: 32.5k]
  ------------------
  190|   718k|        const auto digit = char_to_int(*begin);
  191|   718k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 238k, False: 480k]
  ------------------
  192|   238k|            break;
  193|   238k|        }
  194|   480k|        u64val =
  195|   480k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   480k|        ++begin;
  197|   480k|    }
  198|       |
  199|   270k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   270k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   270k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.57k, False: 268k]
  |  |  ------------------
  ------------------
  201|   270k|                                               is_negative))) {
  202|  2.57k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  2.57k|                                     "Integer overflow");
  204|  2.57k|    }
  205|       |
  206|   268k|    val = store_result<T>(u64val, is_negative);
  207|   268k|    return begin;
  208|   270k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwiEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   736k|{
  185|   736k|    uint64_t u64val{};
  186|   736k|    const CharT* begin = input.data();
  187|   736k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|  2.05M|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 1.90M, False: 152k]
  ------------------
  190|  1.90M|        const auto digit = char_to_int(*begin);
  191|  1.90M|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 584k, False: 1.31M]
  ------------------
  192|   584k|            break;
  193|   584k|        }
  194|  1.31M|        u64val =
  195|  1.31M|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|  1.31M|        ++begin;
  197|  1.31M|    }
  198|       |
  199|   736k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   736k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   736k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.51k, False: 732k]
  |  |  ------------------
  ------------------
  201|   736k|                                               is_negative))) {
  202|  4.51k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  4.51k|                                     "Integer overflow");
  204|  4.51k|    }
  205|       |
  206|   732k|    val = store_result<T>(u64val, is_negative);
  207|   732k|    return begin;
  208|   736k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIxEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   652k|{
  164|   652k|    uint64_t u64val{};
  165|   652k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   652k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   652k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   652k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   652k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.52k, False: 650k]
  |  |  ------------------
  ------------------
  170|   652k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  1.52k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  1.52k|                                     "Integer overflow");
  173|  1.52k|    }
  174|       |
  175|   650k|    val = store_result<T>(u64val, is_negative);
  176|   650k|    return ptr;
  177|   652k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   285k|{
  185|   285k|    uint64_t u64val{};
  186|   285k|    const CharT* begin = input.data();
  187|   285k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   825k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 791k, False: 34.4k]
  ------------------
  190|   791k|        const auto digit = char_to_int(*begin);
  191|   791k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 250k, False: 540k]
  ------------------
  192|   250k|            break;
  193|   250k|        }
  194|   540k|        u64val =
  195|   540k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   540k|        ++begin;
  197|   540k|    }
  198|       |
  199|   285k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   285k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   285k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.26k, False: 284k]
  |  |  ------------------
  ------------------
  201|   285k|                                               is_negative))) {
  202|  1.26k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.26k|                                     "Integer overflow");
  204|  1.26k|    }
  205|       |
  206|   284k|    val = store_result<T>(u64val, is_negative);
  207|   284k|    return begin;
  208|   285k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   773k|{
  185|   773k|    uint64_t u64val{};
  186|   773k|    const CharT* begin = input.data();
  187|   773k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|  2.22M|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 2.06M, False: 159k]
  ------------------
  190|  2.06M|        const auto digit = char_to_int(*begin);
  191|  2.06M|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 613k, False: 1.45M]
  ------------------
  192|   613k|            break;
  193|   613k|        }
  194|  1.45M|        u64val =
  195|  1.45M|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|  1.45M|        ++begin;
  197|  1.45M|    }
  198|       |
  199|   773k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   773k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   773k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.23k, False: 770k]
  |  |  ------------------
  ------------------
  201|   773k|                                               is_negative))) {
  202|  2.23k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  2.23k|                                     "Integer overflow");
  204|  2.23k|    }
  205|       |
  206|   770k|    val = store_result<T>(u64val, is_negative);
  207|   770k|    return begin;
  208|   773k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIhEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   375k|{
  164|   375k|    uint64_t u64val{};
  165|   375k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   375k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   375k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   375k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   375k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.37k, False: 369k]
  |  |  ------------------
  ------------------
  170|   375k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  5.37k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  5.37k|                                     "Integer overflow");
  173|  5.37k|    }
  174|       |
  175|   369k|    val = store_result<T>(u64val, is_negative);
  176|   369k|    return ptr;
  177|   375k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIchEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   145k|{
  185|   145k|    uint64_t u64val{};
  186|   145k|    const CharT* begin = input.data();
  187|   145k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   384k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 361k, False: 22.2k]
  ------------------
  190|   361k|        const auto digit = char_to_int(*begin);
  191|   361k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 123k, False: 238k]
  ------------------
  192|   123k|            break;
  193|   123k|        }
  194|   238k|        u64val =
  195|   238k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   238k|        ++begin;
  197|   238k|    }
  198|       |
  199|   145k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   145k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.79k, False: 141k]
  |  |  ------------------
  ------------------
  201|   145k|                                               is_negative))) {
  202|  3.79k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  3.79k|                                     "Integer overflow");
  204|  3.79k|    }
  205|       |
  206|   141k|    val = store_result<T>(u64val, is_negative);
  207|   141k|    return begin;
  208|   145k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwhEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   431k|{
  185|   431k|    uint64_t u64val{};
  186|   431k|    const CharT* begin = input.data();
  187|   431k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|  1.14M|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 1.04M, False: 101k]
  ------------------
  190|  1.04M|        const auto digit = char_to_int(*begin);
  191|  1.04M|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 330k, False: 711k]
  ------------------
  192|   330k|            break;
  193|   330k|        }
  194|   711k|        u64val =
  195|   711k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   711k|        ++begin;
  197|   711k|    }
  198|       |
  199|   431k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   431k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   431k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 25.8k, False: 405k]
  |  |  ------------------
  ------------------
  201|   431k|                                               is_negative))) {
  202|  25.8k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  25.8k|                                     "Integer overflow");
  204|  25.8k|    }
  205|       |
  206|   405k|    val = store_result<T>(u64val, is_negative);
  207|   405k|    return begin;
  208|   431k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIjEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   488k|{
  164|   488k|    uint64_t u64val{};
  165|   488k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   488k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   488k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   488k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   488k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.59k, False: 487k]
  |  |  ------------------
  ------------------
  170|   488k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  1.59k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  1.59k|                                     "Integer overflow");
  173|  1.59k|    }
  174|       |
  175|   487k|    val = store_result<T>(u64val, is_negative);
  176|   487k|    return ptr;
  177|   488k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   211k|{
  185|   211k|    uint64_t u64val{};
  186|   211k|    const CharT* begin = input.data();
  187|   211k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   585k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 557k, False: 28.5k]
  ------------------
  190|   557k|        const auto digit = char_to_int(*begin);
  191|   557k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 182k, False: 374k]
  ------------------
  192|   182k|            break;
  193|   182k|        }
  194|   374k|        u64val =
  195|   374k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   374k|        ++begin;
  197|   374k|    }
  198|       |
  199|   211k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   211k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   211k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.47k, False: 209k]
  |  |  ------------------
  ------------------
  201|   211k|                                               is_negative))) {
  202|  1.47k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.47k|                                     "Integer overflow");
  204|  1.47k|    }
  205|       |
  206|   209k|    val = store_result<T>(u64val, is_negative);
  207|   209k|    return begin;
  208|   211k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   583k|{
  185|   583k|    uint64_t u64val{};
  186|   583k|    const CharT* begin = input.data();
  187|   583k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|  1.60M|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 1.48M, False: 125k]
  ------------------
  190|  1.48M|        const auto digit = char_to_int(*begin);
  191|  1.48M|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 458k, False: 1.02M]
  ------------------
  192|   458k|            break;
  193|   458k|        }
  194|  1.02M|        u64val =
  195|  1.02M|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|  1.02M|        ++begin;
  197|  1.02M|    }
  198|       |
  199|   583k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   583k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   583k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.52k, False: 581k]
  |  |  ------------------
  ------------------
  201|   583k|                                               is_negative))) {
  202|  2.52k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  2.52k|                                     "Integer overflow");
  204|  2.52k|    }
  205|       |
  206|   581k|    val = store_result<T>(u64val, is_negative);
  207|   581k|    return begin;
  208|   583k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIyEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   509k|{
  164|   509k|    uint64_t u64val{};
  165|   509k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   509k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   509k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   509k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   509k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 619, False: 508k]
  |  |  ------------------
  ------------------
  170|   509k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|    619|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|    619|                                     "Integer overflow");
  173|    619|    }
  174|       |
  175|   508k|    val = store_result<T>(u64val, is_negative);
  176|   508k|    return ptr;
  177|   509k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   219k|{
  185|   219k|    uint64_t u64val{};
  186|   219k|    const CharT* begin = input.data();
  187|   219k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   625k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 596k, False: 29.6k]
  ------------------
  190|   596k|        const auto digit = char_to_int(*begin);
  191|   596k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 189k, False: 406k]
  ------------------
  192|   189k|            break;
  193|   189k|        }
  194|   406k|        u64val =
  195|   406k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   406k|        ++begin;
  197|   406k|    }
  198|       |
  199|   219k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   219k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   219k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 740, False: 218k]
  |  |  ------------------
  ------------------
  201|   219k|                                               is_negative))) {
  202|    740|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    740|                                     "Integer overflow");
  204|    740|    }
  205|       |
  206|   218k|    val = store_result<T>(u64val, is_negative);
  207|   218k|    return begin;
  208|   219k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   607k|{
  185|   607k|    uint64_t u64val{};
  186|   607k|    const CharT* begin = input.data();
  187|   607k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|  1.72M|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 1.59M, False: 129k]
  ------------------
  190|  1.59M|        const auto digit = char_to_int(*begin);
  191|  1.59M|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 477k, False: 1.11M]
  ------------------
  192|   477k|            break;
  193|   477k|        }
  194|  1.11M|        u64val =
  195|  1.11M|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|  1.11M|        ++begin;
  197|  1.11M|    }
  198|       |
  199|   607k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   607k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   607k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.11k, False: 606k]
  |  |  ------------------
  ------------------
  201|   607k|                                               is_negative))) {
  202|  1.11k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.11k|                                     "Integer overflow");
  204|  1.11k|    }
  205|       |
  206|   606k|    val = store_result<T>(u64val, is_negative);
  207|   606k|    return begin;
  208|   607k|}

_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   348k|    {
  324|   348k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   348k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   348k|        return read_default_with_base(range, value, 0);
  326|   348k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   348k|    {
  287|   348k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   348k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   348k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   348k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   348k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 348k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   348k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   348k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   348k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   348k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   348k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   348k|                return unexpected_scan_error(
  293|   348k|                    scan_error::invalid_scanned_value,
  294|   348k|                    "Unexpected '-' sign when parsing an "
  295|   348k|                    "unsigned value");
  296|   348k|            }
  297|   348k|        }
  298|       |
  299|   348k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 149k, False: 199k]
  ------------------
  300|   149k|            value = T{0};
  301|   149k|            return std::next(prefix_result.iterator);
  302|   149k|        }
  303|       |
  304|   398k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   199k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   199k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   199k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 99, False: 199k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     99|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     99|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     99|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     99|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     99|    }                                                  \
  |  |  |  |   70|   199k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   199k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   398k|                                     ranges::subrange{prefix_result.iterator,
  306|   398k|                                                      ranges::end(range)},
  307|   398k|                                     prefix_result.parsed_base));
  308|       |
  309|   398k|        auto buf = make_contiguous_buffer(
  310|   398k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   398k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   199k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   199k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   199k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.81k, False: 191k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.81k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.81k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.81k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.81k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.81k|    }                                                  \
  |  |  |  |   70|   199k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   191k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   191k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   191k|                                    prefix_result.parsed_base));
  314|       |
  315|   191k|        return ranges_polyfill::batch_next(
  316|   191k|            prefix_result.iterator,
  317|   191k|            ranges::distance(buf.view().begin(), result_it));
  318|   398k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESE_i:
  120|  8.51M|{
  121|  8.51M|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|  8.51M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.51M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.51M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 8.51M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  8.51M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  8.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|  8.51M|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|  8.51M|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|  8.51M|        parse_integer_base_prefix(
  126|  8.51M|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|  8.51M|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 3.44M, False: 5.06M]
  ------------------
  129|  3.44M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 3.20k, False: 3.44M]
  ------------------
  130|  3.44M|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 2.53M, False: 909k]
  ------------------
  131|  2.53M|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|  2.53M|                digits_begin_it, ranges::begin(range));
  133|  2.53M|        }
  134|   909k|        else {
  135|   909k|            parsed_zero = false;
  136|   909k|        }
  137|  3.44M|    }
  138|  5.06M|    else {
  139|  5.06M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 8.06k, False: 5.06M]
  ------------------
  140|  5.06M|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 158k, False: 4.90M]
  ------------------
  141|   166k|            digits_begin_it = base_prefix_begin_it;
  142|   166k|        }
  143|  5.06M|    }
  144|       |
  145|  8.51M|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 8.05M, False: 463k]
  ------------------
  146|  8.05M|        sign = sign_type::plus_sign;
  147|  8.05M|    }
  148|  8.51M|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|  8.51M|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|  8.51M|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_i:
   87|  8.51M|{
   88|  8.51M|    switch (base) {
   89|   130k|        case 2:
  ------------------
  |  Branch (89:9): [True: 130k, False: 8.38M]
  ------------------
   90|       |            // allow 0b/0B
   91|   130k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|   130k|                    false};
   93|       |
   94|   312k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 312k, False: 8.20M]
  ------------------
   95|       |            // allow 0o/0O/0
   96|   312k|            bool zero_parsed = false;
   97|   312k|            auto it = apply_opt(
   98|   312k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|   312k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|  1.11M|        case 16:
  ------------------
  |  Branch (102:9): [True: 1.11M, False: 7.39M]
  ------------------
  103|       |            // allow 0x/0X
  104|  1.11M|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|  1.11M|                    false};
  106|       |
  107|  5.78M|        case 0:
  ------------------
  |  Branch (107:9): [True: 5.78M, False: 2.73M]
  ------------------
  108|       |            // detect base
  109|  5.78M|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|  5.78M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|  1.17M|        default:
  ------------------
  |  Branch (111:9): [True: 1.17M, False: 7.34M]
  ------------------
  112|       |            // no base prefix allowed
  113|  1.17M|            return {ranges::begin(range), base, false};
  114|  8.51M|    }
  115|  8.51M|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   37|  5.89M|{
   38|  5.89M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|  5.89M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|  5.89M|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_Rb:
   52|  6.07M|{
   53|  6.07M|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 67.3k, False: 6.00M]
  ------------------
   54|  67.3k|        return *r;
   55|  67.3k|    }
   56|       |
   57|  6.00M|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 3.44M, False: 2.56M]
  ------------------
   58|  3.44M|        zero_parsed = true;
   59|  3.44M|        return *r;
   60|  3.44M|    }
   61|       |
   62|  2.56M|    return unexpected(parse_error::error);
   63|  6.00M|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   44|  6.90M|{
   45|  6.90M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  6.90M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  6.90M|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_:
   68|  5.78M|{
   69|  5.78M|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 19.8k, False: 5.76M]
  ------------------
   70|  19.8k|        return {*r, 16, false};
   71|  19.8k|    }
   72|  5.76M|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 2.11k, False: 5.76M]
  ------------------
   73|  2.11k|        return {*r, 2, false};
   74|  2.11k|    }
   75|  5.76M|    {
   76|  5.76M|        bool zero_parsed{false};
   77|  5.76M|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 3.32M, False: 2.44M]
  ------------------
   78|  3.32M|            return {*r, 8, zero_parsed};
   79|  3.32M|        }
   80|  5.76M|    }
   81|  2.44M|    return {ranges::begin(range), 10, false};
   82|  5.76M|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESD_i:
  155|  4.98M|{
  156|  4.98M|    using char_type = detail::char_t<Range>;
  157|       |
  158|  4.98M|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|  4.98M|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.26k, False: 4.98M]
  |  |  ------------------
  ------------------
  160|  2.26k|            return unexpected_scan_error(
  161|  2.26k|                scan_error::invalid_scanned_value,
  162|  2.26k|                "Failed to parse integer: No digits found");
  163|  2.26k|        }
  164|  4.98M|        return ranges::end(range);
  165|  4.98M|    }
  166|  4.98M|    else {
  167|  4.98M|        return read_while1_code_unit(
  168|  4.98M|                   range, [&](char_type ch)
  169|  4.98M|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|  4.98M|            .transform_error(map_parse_error_to_scan_error(
  171|  4.98M|                scan_error::invalid_scanned_value,
  172|  4.98M|                "Failed to parse integer: No digits found"));
  173|  4.98M|    }
  174|  4.98M|}
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   480k|    {
  324|   480k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   480k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   480k|        return read_default_with_base(range, value, 0);
  326|   480k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   480k|    {
  287|   480k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   480k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   480k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   480k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   480k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 480k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   480k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   480k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   480k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   480k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   480k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   480k|                return unexpected_scan_error(
  293|   480k|                    scan_error::invalid_scanned_value,
  294|   480k|                    "Unexpected '-' sign when parsing an "
  295|   480k|                    "unsigned value");
  296|   480k|            }
  297|   480k|        }
  298|       |
  299|   480k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 196k, False: 283k]
  ------------------
  300|   196k|            value = T{0};
  301|   196k|            return std::next(prefix_result.iterator);
  302|   196k|        }
  303|       |
  304|   567k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   283k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   283k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   283k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   283k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 159, False: 283k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    159|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    159|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    159|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    159|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    159|    }                                                  \
  |  |  |  |   70|   283k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   283k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   567k|                                     ranges::subrange{prefix_result.iterator,
  306|   567k|                                                      ranges::end(range)},
  307|   567k|                                     prefix_result.parsed_base));
  308|       |
  309|   567k|        auto buf = make_contiguous_buffer(
  310|   567k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   567k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   283k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   283k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   283k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   283k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.79k, False: 276k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.79k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.79k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.79k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.79k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.79k|    }                                                  \
  |  |  |  |   70|   283k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   276k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   276k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   276k|                                    prefix_result.parsed_base));
  314|       |
  315|   276k|        return ranges_polyfill::batch_next(
  316|   276k|            prefix_result.iterator,
  317|   276k|            ranges::distance(buf.view().begin(), result_it));
  318|   567k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   496k|    {
  324|   496k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   496k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   496k|        return read_default_with_base(range, value, 0);
  326|   496k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   496k|    {
  287|   496k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   496k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   496k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   496k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   496k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 496k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   496k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   496k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   496k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   496k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   496k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   496k|                return unexpected_scan_error(
  293|   496k|                    scan_error::invalid_scanned_value,
  294|   496k|                    "Unexpected '-' sign when parsing an "
  295|   496k|                    "unsigned value");
  296|   496k|            }
  297|   496k|        }
  298|       |
  299|   496k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 197k, False: 298k]
  ------------------
  300|   197k|            value = T{0};
  301|   197k|            return std::next(prefix_result.iterator);
  302|   197k|        }
  303|       |
  304|   596k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   298k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   298k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   298k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 174, False: 298k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    174|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    174|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    174|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    174|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    174|    }                                                  \
  |  |  |  |   70|   298k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   298k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   596k|                                     ranges::subrange{prefix_result.iterator,
  306|   596k|                                                      ranges::end(range)},
  307|   596k|                                     prefix_result.parsed_base));
  308|       |
  309|   596k|        auto buf = make_contiguous_buffer(
  310|   596k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   596k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   298k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   298k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   298k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.60k, False: 291k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.60k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.60k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.60k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.60k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.60k|    }                                                  \
  |  |  |  |   70|   298k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   291k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   291k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   291k|                                    prefix_result.parsed_base));
  314|       |
  315|   291k|        return ranges_polyfill::batch_next(
  316|   291k|            prefix_result.iterator,
  317|   291k|            ranges::distance(buf.view().begin(), result_it));
  318|   596k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   339k|    {
  324|   339k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   339k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   339k|        return read_default_with_base(range, value, 0);
  326|   339k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   339k|    {
  287|   339k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   339k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   339k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   339k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   339k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 339k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   339k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   339k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   339k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   339k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   339k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.93k, False: 336k]
  ------------------
  292|  2.93k|                return unexpected_scan_error(
  293|  2.93k|                    scan_error::invalid_scanned_value,
  294|  2.93k|                    "Unexpected '-' sign when parsing an "
  295|  2.93k|                    "unsigned value");
  296|  2.93k|            }
  297|   339k|        }
  298|       |
  299|   336k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 150k, False: 185k]
  ------------------
  300|   150k|            value = T{0};
  301|   150k|            return std::next(prefix_result.iterator);
  302|   150k|        }
  303|       |
  304|   371k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   185k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   185k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   185k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 87, False: 185k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     87|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     87|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     87|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     87|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     87|    }                                                  \
  |  |  |  |   70|   185k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   185k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   371k|                                     ranges::subrange{prefix_result.iterator,
  306|   371k|                                                      ranges::end(range)},
  307|   371k|                                     prefix_result.parsed_base));
  308|       |
  309|   371k|        auto buf = make_contiguous_buffer(
  310|   371k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   371k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   185k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   185k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   185k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.10k, False: 180k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.10k|    }                                                  \
  |  |  |  |   70|   185k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   180k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   180k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   180k|                                    prefix_result.parsed_base));
  314|       |
  315|   180k|        return ranges_polyfill::batch_next(
  316|   180k|            prefix_result.iterator,
  317|   180k|            ranges::distance(buf.view().begin(), result_it));
  318|   371k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   403k|    {
  324|   403k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   403k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   403k|        return read_default_with_base(range, value, 0);
  326|   403k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   403k|    {
  287|   403k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   403k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   403k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   403k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   403k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 403k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   403k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   403k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   403k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   403k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   403k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 3.17k, False: 400k]
  ------------------
  292|  3.17k|                return unexpected_scan_error(
  293|  3.17k|                    scan_error::invalid_scanned_value,
  294|  3.17k|                    "Unexpected '-' sign when parsing an "
  295|  3.17k|                    "unsigned value");
  296|  3.17k|            }
  297|   403k|        }
  298|       |
  299|   400k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 169k, False: 231k]
  ------------------
  300|   169k|            value = T{0};
  301|   169k|            return std::next(prefix_result.iterator);
  302|   169k|        }
  303|       |
  304|   462k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   231k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   231k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   231k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   231k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 93, False: 231k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     93|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     93|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     93|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     93|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     93|    }                                                  \
  |  |  |  |   70|   231k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   231k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   462k|                                     ranges::subrange{prefix_result.iterator,
  306|   462k|                                                      ranges::end(range)},
  307|   462k|                                     prefix_result.parsed_base));
  308|       |
  309|   462k|        auto buf = make_contiguous_buffer(
  310|   462k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   462k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   231k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   231k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   231k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   231k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.33k, False: 226k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.33k|    }                                                  \
  |  |  |  |   70|   231k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   226k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   226k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   226k|                                    prefix_result.parsed_base));
  314|       |
  315|   226k|        return ranges_polyfill::batch_next(
  316|   226k|            prefix_result.iterator,
  317|   226k|            ranges::distance(buf.view().begin(), result_it));
  318|   462k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   412k|    {
  324|   412k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   412k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   412k|        return read_default_with_base(range, value, 0);
  326|   412k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   412k|    {
  287|   412k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   412k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   412k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   412k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   412k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 412k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   412k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   412k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   412k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   412k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   412k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 3.35k, False: 408k]
  ------------------
  292|  3.35k|                return unexpected_scan_error(
  293|  3.35k|                    scan_error::invalid_scanned_value,
  294|  3.35k|                    "Unexpected '-' sign when parsing an "
  295|  3.35k|                    "unsigned value");
  296|  3.35k|            }
  297|   412k|        }
  298|       |
  299|   408k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 170k, False: 238k]
  ------------------
  300|   170k|            value = T{0};
  301|   170k|            return std::next(prefix_result.iterator);
  302|   170k|        }
  303|       |
  304|   477k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   238k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   238k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   238k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   238k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 93, False: 238k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     93|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     93|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     93|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     93|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     93|    }                                                  \
  |  |  |  |   70|   238k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   238k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   477k|                                     ranges::subrange{prefix_result.iterator,
  306|   477k|                                                      ranges::end(range)},
  307|   477k|                                     prefix_result.parsed_base));
  308|       |
  309|   477k|        auto buf = make_contiguous_buffer(
  310|   477k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   477k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   238k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   238k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   238k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   238k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.04k, False: 234k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.04k|    }                                                  \
  |  |  |  |   70|   238k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   234k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   234k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   234k|                                    prefix_result.parsed_base));
  314|       |
  315|   234k|        return ranges_polyfill::batch_next(
  316|   234k|            prefix_result.iterator,
  317|   234k|            ranges::distance(buf.view().begin(), result_it));
  318|   477k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSC_12basic_stringIT0_NSC_11char_traitsISJ_EENSC_9allocatorISJ_EEEENSI_IcNSK_IcEENSM_IcEEEEEEEEESF_iRKNS1_35localized_number_formatting_optionsISJ_EE:
  184|   956k|{
  185|   956k|    std::basic_string<CharT> output;
  186|   956k|    std::string thsep_indices;
  187|   956k|    auto it = ranges::begin(range);
  188|   956k|    bool digit_matched = false;
  189|  3.03M|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 3.02M, False: 6.80k]
  ------------------
  190|  3.02M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 28.1k, False: 3.00M]
  ------------------
  191|  28.1k|            thsep_indices.push_back(static_cast<char>(
  192|  28.1k|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|  28.1k|        }
  194|  3.00M|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 949k, False: 2.05M]
  ------------------
  195|   949k|            break;
  196|   949k|        }
  197|  2.05M|        else {
  198|  2.05M|            output.push_back(*it);
  199|  2.05M|            digit_matched = true;
  200|  2.05M|        }
  201|  3.02M|    }
  202|   956k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|   956k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 15.1k, False: 940k]
  |  |  ------------------
  ------------------
  203|  15.1k|        return unexpected_scan_error(
  204|  15.1k|            scan_error::invalid_scanned_value,
  205|  15.1k|            "Failed to parse integer: No digits found");
  206|  15.1k|    }
  207|   940k|    return std::tuple{it, output, thsep_indices};
  208|   956k|}
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  9.04k|    {
  324|  9.04k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  9.04k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  9.04k|        return read_default_with_base(range, value, 0);
  326|  9.04k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  9.04k|    {
  287|  9.04k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  9.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  9.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  9.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  9.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 9.04k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  9.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  9.04k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  9.04k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  9.04k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  9.04k|                return unexpected_scan_error(
  293|  9.04k|                    scan_error::invalid_scanned_value,
  294|  9.04k|                    "Unexpected '-' sign when parsing an "
  295|  9.04k|                    "unsigned value");
  296|  9.04k|            }
  297|  9.04k|        }
  298|       |
  299|  9.04k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 9.04k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  9.04k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  9.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  9.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  9.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  9.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.04k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.04k|    }                                                  \
  |  |  |  |   70|  9.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  9.04k|                                     ranges::subrange{prefix_result.iterator,
  306|  9.04k|                                                      ranges::end(range)},
  307|  9.04k|                                     prefix_result.parsed_base));
  308|       |
  309|  9.04k|        auto buf = make_contiguous_buffer(
  310|  9.04k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  9.04k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  9.04k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESH_i:
  120|   307k|{
  121|   307k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|   307k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   307k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   307k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 307k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   307k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   307k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|   307k|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|   307k|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|   307k|        parse_integer_base_prefix(
  126|   307k|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|   307k|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 0, False: 307k]
  ------------------
  129|      0|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 0, False: 0]
  ------------------
  130|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 0, False: 0]
  ------------------
  131|      0|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|      0|                digits_begin_it, ranges::begin(range));
  133|      0|        }
  134|      0|        else {
  135|      0|            parsed_zero = false;
  136|      0|        }
  137|      0|    }
  138|   307k|    else {
  139|   307k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 0, False: 307k]
  ------------------
  140|   307k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 271k, False: 36.1k]
  ------------------
  141|   271k|            digits_begin_it = base_prefix_begin_it;
  142|   271k|        }
  143|   307k|    }
  144|       |
  145|   307k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 307k, False: 0]
  ------------------
  146|   307k|        sign = sign_type::plus_sign;
  147|   307k|    }
  148|   307k|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|   307k|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|   307k|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_i:
   87|   307k|{
   88|   307k|    switch (base) {
   89|  36.1k|        case 2:
  ------------------
  |  Branch (89:9): [True: 36.1k, False: 271k]
  ------------------
   90|       |            // allow 0b/0B
   91|  36.1k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  36.1k|                    false};
   93|       |
   94|  36.1k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 36.1k, False: 271k]
  ------------------
   95|       |            // allow 0o/0O/0
   96|  36.1k|            bool zero_parsed = false;
   97|  36.1k|            auto it = apply_opt(
   98|  36.1k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|  36.1k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|  72.3k|        case 16:
  ------------------
  |  Branch (102:9): [True: 72.3k, False: 235k]
  ------------------
  103|       |            // allow 0x/0X
  104|  72.3k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|  72.3k|                    false};
  106|       |
  107|   126k|        case 0:
  ------------------
  |  Branch (107:9): [True: 126k, False: 180k]
  ------------------
  108|       |            // detect base
  109|   126k|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|  36.1k|        default:
  ------------------
  |  Branch (111:9): [True: 36.1k, False: 271k]
  ------------------
  112|       |            // no base prefix allowed
  113|  36.1k|            return {ranges::begin(range), base, false};
  114|   307k|    }
  115|   307k|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   37|   162k|{
   38|   162k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|   162k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|   162k|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_Rb:
   52|   162k|{
   53|   162k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 0, False: 162k]
  ------------------
   54|      0|        return *r;
   55|      0|    }
   56|       |
   57|   162k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 0, False: 162k]
  ------------------
   58|      0|        zero_parsed = true;
   59|      0|        return *r;
   60|      0|    }
   61|       |
   62|   162k|    return unexpected(parse_error::error);
   63|   162k|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   44|   198k|{
   45|   198k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   198k|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_:
   68|   126k|{
   69|   126k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 0, False: 126k]
  ------------------
   70|      0|        return {*r, 16, false};
   71|      0|    }
   72|   126k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 0, False: 126k]
  ------------------
   73|      0|        return {*r, 2, false};
   74|      0|    }
   75|   126k|    {
   76|   126k|        bool zero_parsed{false};
   77|   126k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 0, False: 126k]
  ------------------
   78|      0|            return {*r, 8, zero_parsed};
   79|      0|        }
   80|   126k|    }
   81|   126k|    return {ranges::begin(range), 10, false};
   82|   126k|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_i:
  155|   271k|{
  156|   271k|    using char_type = detail::char_t<Range>;
  157|       |
  158|   271k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|   271k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  160|   271k|            return unexpected_scan_error(
  161|   271k|                scan_error::invalid_scanned_value,
  162|   271k|                "Failed to parse integer: No digits found");
  163|   271k|        }
  164|   271k|        return ranges::end(range);
  165|   271k|    }
  166|   271k|    else {
  167|   271k|        return read_while1_code_unit(
  168|   271k|                   range, [&](char_type ch)
  169|   271k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|   271k|            .transform_error(map_parse_error_to_scan_error(
  171|   271k|                scan_error::invalid_scanned_value,
  172|   271k|                "Failed to parse integer: No digits found"));
  173|   271k|    }
  174|   271k|}
_ZZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_iENKUlcE_clEc:
  169|   307k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  9.04k|    {
  324|  9.04k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  9.04k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  9.04k|        return read_default_with_base(range, value, 0);
  326|  9.04k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  9.04k|    {
  287|  9.04k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  9.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  9.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  9.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  9.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 9.04k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  9.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  9.04k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  9.04k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  9.04k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  9.04k|                return unexpected_scan_error(
  293|  9.04k|                    scan_error::invalid_scanned_value,
  294|  9.04k|                    "Unexpected '-' sign when parsing an "
  295|  9.04k|                    "unsigned value");
  296|  9.04k|            }
  297|  9.04k|        }
  298|       |
  299|  9.04k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 9.04k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  9.04k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  9.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  9.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  9.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  9.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.04k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.04k|    }                                                  \
  |  |  |  |   70|  9.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  9.04k|                                     ranges::subrange{prefix_result.iterator,
  306|  9.04k|                                                      ranges::end(range)},
  307|  9.04k|                                     prefix_result.parsed_base));
  308|       |
  309|  9.04k|        auto buf = make_contiguous_buffer(
  310|  9.04k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  9.04k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  9.04k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  9.04k|    {
  324|  9.04k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  9.04k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  9.04k|        return read_default_with_base(range, value, 0);
  326|  9.04k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  9.04k|    {
  287|  9.04k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  9.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  9.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  9.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  9.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 9.04k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  9.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  9.04k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  9.04k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  9.04k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  9.04k|                return unexpected_scan_error(
  293|  9.04k|                    scan_error::invalid_scanned_value,
  294|  9.04k|                    "Unexpected '-' sign when parsing an "
  295|  9.04k|                    "unsigned value");
  296|  9.04k|            }
  297|  9.04k|        }
  298|       |
  299|  9.04k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 9.04k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  9.04k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  9.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  9.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  9.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  9.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.04k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.04k|    }                                                  \
  |  |  |  |   70|  9.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  9.04k|                                     ranges::subrange{prefix_result.iterator,
  306|  9.04k|                                                      ranges::end(range)},
  307|  9.04k|                                     prefix_result.parsed_base));
  308|       |
  309|  9.04k|        auto buf = make_contiguous_buffer(
  310|  9.04k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  9.04k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  9.04k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  9.04k|    {
  324|  9.04k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  9.04k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  9.04k|        return read_default_with_base(range, value, 0);
  326|  9.04k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  9.04k|    {
  287|  9.04k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  9.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  9.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  9.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  9.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 9.04k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  9.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  9.04k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  9.04k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  9.04k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 9.04k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  9.04k|        }
  298|       |
  299|  9.04k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 9.04k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  9.04k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  9.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  9.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  9.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  9.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.04k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.04k|    }                                                  \
  |  |  |  |   70|  9.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  9.04k|                                     ranges::subrange{prefix_result.iterator,
  306|  9.04k|                                                      ranges::end(range)},
  307|  9.04k|                                     prefix_result.parsed_base));
  308|       |
  309|  9.04k|        auto buf = make_contiguous_buffer(
  310|  9.04k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  9.04k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  9.04k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  9.04k|    {
  324|  9.04k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  9.04k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  9.04k|        return read_default_with_base(range, value, 0);
  326|  9.04k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  9.04k|    {
  287|  9.04k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  9.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  9.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  9.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  9.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 9.04k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  9.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  9.04k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  9.04k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  9.04k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 9.04k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  9.04k|        }
  298|       |
  299|  9.04k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 9.04k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  9.04k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  9.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  9.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  9.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  9.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.04k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.04k|    }                                                  \
  |  |  |  |   70|  9.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  9.04k|                                     ranges::subrange{prefix_result.iterator,
  306|  9.04k|                                                      ranges::end(range)},
  307|  9.04k|                                     prefix_result.parsed_base));
  308|       |
  309|  9.04k|        auto buf = make_contiguous_buffer(
  310|  9.04k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  9.04k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  9.04k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  9.04k|    {
  324|  9.04k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  9.04k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  9.04k|        return read_default_with_base(range, value, 0);
  326|  9.04k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  9.04k|    {
  287|  9.04k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  9.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  9.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  9.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  9.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 9.04k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  9.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  9.04k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  9.04k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  9.04k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 9.04k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  9.04k|        }
  298|       |
  299|  9.04k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 9.04k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  9.04k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  9.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  9.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  9.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  9.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.04k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.04k|    }                                                  \
  |  |  |  |   70|  9.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  9.04k|                                     ranges::subrange{prefix_result.iterator,
  306|  9.04k|                                                      ranges::end(range)},
  307|  9.04k|                                     prefix_result.parsed_base));
  308|       |
  309|  9.04k|        auto buf = make_contiguous_buffer(
  310|  9.04k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  9.04k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  9.04k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSF_12basic_stringIT0_NSF_11char_traitsISM_EENSF_9allocatorISM_EEEENSL_IcNSN_IcEENSP_IcEEEEEEEEESI_iRKNS1_35localized_number_formatting_optionsISM_EE:
  184|  36.1k|{
  185|  36.1k|    std::basic_string<CharT> output;
  186|  36.1k|    std::string thsep_indices;
  187|  36.1k|    auto it = ranges::begin(range);
  188|  36.1k|    bool digit_matched = false;
  189|  36.1k|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 36.1k, False: 0]
  ------------------
  190|  36.1k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 0, False: 36.1k]
  ------------------
  191|      0|            thsep_indices.push_back(static_cast<char>(
  192|      0|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|      0|        }
  194|  36.1k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 36.1k, False: 0]
  ------------------
  195|  36.1k|            break;
  196|  36.1k|        }
  197|      0|        else {
  198|      0|            output.push_back(*it);
  199|      0|            digit_matched = true;
  200|      0|        }
  201|  36.1k|    }
  202|  36.1k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|  36.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 36.1k, False: 0]
  |  |  ------------------
  ------------------
  203|  36.1k|        return unexpected_scan_error(
  204|  36.1k|            scan_error::invalid_scanned_value,
  205|  36.1k|            "Failed to parse integer: No digits found");
  206|  36.1k|    }
  207|      0|    return std::tuple{it, output, thsep_indices};
  208|  36.1k|}
_ZN3scn2v24impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  279|  6.31M|    {
  280|  6.31M|        detail::check_int_type_specs(specs, eh);
  281|  6.31M|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   755k|    {
  335|   755k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   755k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   755k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   755k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   755k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 755k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   755k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   755k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   755k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   755k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 68.8k, False: 686k]
  ------------------
  339|  68.8k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  68.8k|                return unexpected_scan_error(
  341|  68.8k|                    scan_error::invalid_scanned_value,
  342|  68.8k|                    "Unexpected '-' sign when parsing an "
  343|  68.8k|                    "unsigned value");
  344|  68.8k|            }
  345|  68.8k|            else {
  346|  68.8k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 68.8k]
  ------------------
  347|  68.8k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  68.8k|            }
  353|  68.8k|        }
  354|       |
  355|   755k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 218k, False: 537k]
  ------------------
  356|   218k|            value = T{0};
  357|   218k|            return std::next(prefix_result.iterator);
  358|   218k|        }
  359|       |
  360|   537k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   537k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 404k, False: 132k]
  |  |  ------------------
  ------------------
  361|   404k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   404k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   404k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   404k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   404k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 206, False: 404k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    206|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    206|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    206|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    206|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    206|    }                                                  \
  |  |  |  |   70|   404k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   404k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   404k|                    parse_integer_digits_without_thsep(
  363|   404k|                        ranges::subrange{prefix_result.iterator,
  364|   404k|                                         ranges::end(range)},
  365|   404k|                        prefix_result.parsed_base));
  366|       |
  367|   404k|            auto buf = make_contiguous_buffer(
  368|   404k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   404k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   404k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   404k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   404k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   404k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 27.7k, False: 376k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  27.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  27.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  27.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  27.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  27.7k|    }                                                  \
  |  |  |  |   70|   404k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   376k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   376k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   376k|                                        prefix_result.parsed_base));
  372|       |
  373|   376k|            return ranges_polyfill::batch_next(
  374|   376k|                prefix_result.iterator,
  375|   376k|                ranges::distance(buf.view().begin(), result_it));
  376|   404k|        }
  377|       |
  378|   132k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   132k|            localized_number_formatting_options<CharT>{loc};
  383|   132k|#endif
  384|       |
  385|   132k|        SCN_TRY(
  ------------------
  |  |   71|   132k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   132k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   132k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.18k, False: 130k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.18k|    }                                                  \
  |  |  |  |   70|   132k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   130k|            parse_digits_result,
  387|   130k|            parse_integer_digits_with_thsep(
  388|   130k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   130k|                prefix_result.parsed_base, locale_options));
  390|   130k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   130k|            parse_digits_result;
  392|       |
  393|   130k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 370, False: 129k]
  ------------------
  394|    370|            if (auto e = check_thsep_grouping(
  395|    370|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    370|                    thsep_indices, locale_options.grouping);
  397|    370|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    370|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 366, False: 4]
  |  |  ------------------
  ------------------
  398|    366|                return unexpected(e);
  399|    366|            }
  400|    370|        }
  401|       |
  402|   129k|        auto nothsep_source_view =
  403|   129k|            std::basic_string_view<CharT>{nothsep_source};
  404|   129k|        SCN_TRY(
  ------------------
  |  |   71|   129k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   129k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   129k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.73k, False: 127k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.73k|    }                                                  \
  |  |  |  |   70|   129k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   127k|            nothsep_source_it,
  406|   127k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|   127k|                                prefix_result.parsed_base));
  408|       |
  409|   127k|        return ranges_polyfill::batch_next(
  410|   127k|            prefix_result.iterator,
  411|   127k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|   127k|                ranges::ssize(thsep_indices));
  413|   129k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|  1.21M|    {
  335|  1.21M|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  1.21M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.21M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.21M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.21M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.21M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  1.21M|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  1.21M|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 81.8k, False: 1.13M]
  ------------------
  339|  81.8k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  81.8k|                return unexpected_scan_error(
  341|  81.8k|                    scan_error::invalid_scanned_value,
  342|  81.8k|                    "Unexpected '-' sign when parsing an "
  343|  81.8k|                    "unsigned value");
  344|  81.8k|            }
  345|  81.8k|            else {
  346|  81.8k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 81.8k]
  ------------------
  347|  81.8k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  81.8k|            }
  353|  81.8k|        }
  354|       |
  355|  1.21M|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 285k, False: 926k]
  ------------------
  356|   285k|            value = T{0};
  357|   285k|            return std::next(prefix_result.iterator);
  358|   285k|        }
  359|       |
  360|   926k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   926k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 737k, False: 188k]
  |  |  ------------------
  ------------------
  361|   737k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   737k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   737k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   737k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   737k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 370, False: 737k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    370|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    370|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    370|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    370|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    370|    }                                                  \
  |  |  |  |   70|   737k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   737k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   737k|                    parse_integer_digits_without_thsep(
  363|   737k|                        ranges::subrange{prefix_result.iterator,
  364|   737k|                                         ranges::end(range)},
  365|   737k|                        prefix_result.parsed_base));
  366|       |
  367|   737k|            auto buf = make_contiguous_buffer(
  368|   737k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   737k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   737k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   737k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   737k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   737k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 25.2k, False: 711k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  25.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  25.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  25.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  25.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  25.2k|    }                                                  \
  |  |  |  |   70|   737k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   711k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   711k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   711k|                                        prefix_result.parsed_base));
  372|       |
  373|   711k|            return ranges_polyfill::batch_next(
  374|   711k|                prefix_result.iterator,
  375|   711k|                ranges::distance(buf.view().begin(), result_it));
  376|   737k|        }
  377|       |
  378|   188k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   188k|            localized_number_formatting_options<CharT>{loc};
  383|   188k|#endif
  384|       |
  385|   188k|        SCN_TRY(
  ------------------
  |  |   71|   188k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   188k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   188k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   188k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.22k, False: 185k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.22k|    }                                                  \
  |  |  |  |   70|   188k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   185k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   185k|            parse_digits_result,
  387|   185k|            parse_integer_digits_with_thsep(
  388|   185k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   185k|                prefix_result.parsed_base, locale_options));
  390|   185k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   185k|            parse_digits_result;
  392|       |
  393|   185k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 476, False: 185k]
  ------------------
  394|    476|            if (auto e = check_thsep_grouping(
  395|    476|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    476|                    thsep_indices, locale_options.grouping);
  397|    476|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    476|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 472, False: 4]
  |  |  ------------------
  ------------------
  398|    472|                return unexpected(e);
  399|    472|            }
  400|    476|        }
  401|       |
  402|   185k|        auto nothsep_source_view =
  403|   185k|            std::basic_string_view<CharT>{nothsep_source};
  404|   185k|        SCN_TRY(
  ------------------
  |  |   71|   185k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   185k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   185k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 944, False: 184k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    944|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    944|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    944|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    944|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    944|    }                                                  \
  |  |  |  |   70|   185k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   184k|            nothsep_source_it,
  406|   184k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|   184k|                                prefix_result.parsed_base));
  408|       |
  409|   184k|        return ranges_polyfill::batch_next(
  410|   184k|            prefix_result.iterator,
  411|   184k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|   184k|                ranges::ssize(thsep_indices));
  413|   185k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|  1.25M|    {
  335|  1.25M|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  1.25M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.25M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.25M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.25M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.25M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  1.25M|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  1.25M|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 84.0k, False: 1.17M]
  ------------------
  339|  84.0k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  84.0k|                return unexpected_scan_error(
  341|  84.0k|                    scan_error::invalid_scanned_value,
  342|  84.0k|                    "Unexpected '-' sign when parsing an "
  343|  84.0k|                    "unsigned value");
  344|  84.0k|            }
  345|  84.0k|            else {
  346|  84.0k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 84.0k]
  ------------------
  347|  84.0k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  84.0k|            }
  353|  84.0k|        }
  354|       |
  355|  1.25M|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 288k, False: 966k]
  ------------------
  356|   288k|            value = T{0};
  357|   288k|            return std::next(prefix_result.iterator);
  358|   288k|        }
  359|       |
  360|   966k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   966k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 767k, False: 198k]
  |  |  ------------------
  ------------------
  361|   767k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   767k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   767k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   767k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   767k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 402, False: 767k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    402|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    402|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    402|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    402|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    402|    }                                                  \
  |  |  |  |   70|   767k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   767k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   767k|                    parse_integer_digits_without_thsep(
  363|   767k|                        ranges::subrange{prefix_result.iterator,
  364|   767k|                                         ranges::end(range)},
  365|   767k|                        prefix_result.parsed_base));
  366|       |
  367|   767k|            auto buf = make_contiguous_buffer(
  368|   767k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   767k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   767k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   767k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   767k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   767k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 24.8k, False: 742k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  24.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  24.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  24.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  24.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  24.8k|    }                                                  \
  |  |  |  |   70|   767k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   742k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   742k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   742k|                                        prefix_result.parsed_base));
  372|       |
  373|   742k|            return ranges_polyfill::batch_next(
  374|   742k|                prefix_result.iterator,
  375|   742k|                ranges::distance(buf.view().begin(), result_it));
  376|   767k|        }
  377|       |
  378|   198k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   198k|            localized_number_formatting_options<CharT>{loc};
  383|   198k|#endif
  384|       |
  385|   198k|        SCN_TRY(
  ------------------
  |  |   71|   198k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   198k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   198k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.56k, False: 194k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.56k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.56k|    }                                                  \
  |  |  |  |   70|   198k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   194k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   194k|            parse_digits_result,
  387|   194k|            parse_integer_digits_with_thsep(
  388|   194k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   194k|                prefix_result.parsed_base, locale_options));
  390|   194k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   194k|            parse_digits_result;
  392|       |
  393|   194k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 564, False: 194k]
  ------------------
  394|    564|            if (auto e = check_thsep_grouping(
  395|    564|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    564|                    thsep_indices, locale_options.grouping);
  397|    564|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    564|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 558, False: 6]
  |  |  ------------------
  ------------------
  398|    558|                return unexpected(e);
  399|    558|            }
  400|    564|        }
  401|       |
  402|   194k|        auto nothsep_source_view =
  403|   194k|            std::basic_string_view<CharT>{nothsep_source};
  404|   194k|        SCN_TRY(
  ------------------
  |  |   71|   194k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   194k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   194k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   194k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 398, False: 193k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    398|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    398|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    398|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    398|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    398|    }                                                  \
  |  |  |  |   70|   194k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   193k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   193k|            nothsep_source_it,
  406|   193k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|   193k|                                prefix_result.parsed_base));
  408|       |
  409|   193k|        return ranges_polyfill::batch_next(
  410|   193k|            prefix_result.iterator,
  411|   193k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|   193k|                ranges::ssize(thsep_indices));
  413|   194k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   789k|    {
  335|   789k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   789k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   789k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   789k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   789k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 789k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   789k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   789k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   789k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   789k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 10.0k, False: 779k]
  ------------------
  339|  10.0k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  10.0k|                return unexpected_scan_error(
  341|  10.0k|                    scan_error::invalid_scanned_value,
  342|  10.0k|                    "Unexpected '-' sign when parsing an "
  343|  10.0k|                    "unsigned value");
  344|  10.0k|            }
  345|  10.0k|            else {
  346|  10.0k|                if (specs.type ==
  347|  10.0k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  10.0k|                    return unexpected_scan_error(
  349|  10.0k|                        scan_error::invalid_scanned_value,
  350|  10.0k|                        "'u'-option disallows negative values");
  351|  10.0k|                }
  352|  10.0k|            }
  353|  10.0k|        }
  354|       |
  355|   779k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 219k, False: 559k]
  ------------------
  356|   219k|            value = T{0};
  357|   219k|            return std::next(prefix_result.iterator);
  358|   219k|        }
  359|       |
  360|   559k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   559k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 436k, False: 123k]
  |  |  ------------------
  ------------------
  361|   436k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   436k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   436k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   436k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   436k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 166, False: 436k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    166|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    166|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    166|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    166|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    166|    }                                                  \
  |  |  |  |   70|   436k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   436k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   436k|                    parse_integer_digits_without_thsep(
  363|   436k|                        ranges::subrange{prefix_result.iterator,
  364|   436k|                                         ranges::end(range)},
  365|   436k|                        prefix_result.parsed_base));
  366|       |
  367|   436k|            auto buf = make_contiguous_buffer(
  368|   436k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   436k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   436k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   436k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   436k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   436k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 19.9k, False: 416k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  19.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  19.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  19.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  19.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  19.9k|    }                                                  \
  |  |  |  |   70|   436k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   416k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   416k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   416k|                                        prefix_result.parsed_base));
  372|       |
  373|   416k|            return ranges_polyfill::batch_next(
  374|   416k|                prefix_result.iterator,
  375|   416k|                ranges::distance(buf.view().begin(), result_it));
  376|   436k|        }
  377|       |
  378|   123k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   123k|            localized_number_formatting_options<CharT>{loc};
  383|   123k|#endif
  384|       |
  385|   123k|        SCN_TRY(
  ------------------
  |  |   71|   123k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   123k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   123k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.81k, False: 121k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.81k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.81k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.81k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.81k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.81k|    }                                                  \
  |  |  |  |   70|   123k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   121k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   121k|            parse_digits_result,
  387|   121k|            parse_integer_digits_with_thsep(
  388|   121k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   121k|                prefix_result.parsed_base, locale_options));
  390|   121k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   121k|            parse_digits_result;
  392|       |
  393|   121k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 284, False: 121k]
  ------------------
  394|    284|            if (auto e = check_thsep_grouping(
  395|    284|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    284|                    thsep_indices, locale_options.grouping);
  397|    284|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    284|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 282, False: 2]
  |  |  ------------------
  ------------------
  398|    282|                return unexpected(e);
  399|    282|            }
  400|    284|        }
  401|       |
  402|   121k|        auto nothsep_source_view =
  403|   121k|            std::basic_string_view<CharT>{nothsep_source};
  404|   121k|        SCN_TRY(
  ------------------
  |  |   71|   121k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   121k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   121k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.36k, False: 120k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.36k|    }                                                  \
  |  |  |  |   70|   121k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   120k|            nothsep_source_it,
  406|   120k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|   120k|                                prefix_result.parsed_base));
  408|       |
  409|   120k|        return ranges_polyfill::batch_next(
  410|   120k|            prefix_result.iterator,
  411|   120k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|   120k|                ranges::ssize(thsep_indices));
  413|   121k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|  1.00M|    {
  335|  1.00M|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  1.00M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.00M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.00M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.00M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.00M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  1.00M|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  1.00M|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 10.7k, False: 990k]
  ------------------
  339|  10.7k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  10.7k|                return unexpected_scan_error(
  341|  10.7k|                    scan_error::invalid_scanned_value,
  342|  10.7k|                    "Unexpected '-' sign when parsing an "
  343|  10.7k|                    "unsigned value");
  344|  10.7k|            }
  345|  10.7k|            else {
  346|  10.7k|                if (specs.type ==
  347|  10.7k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  10.7k|                    return unexpected_scan_error(
  349|  10.7k|                        scan_error::invalid_scanned_value,
  350|  10.7k|                        "'u'-option disallows negative values");
  351|  10.7k|                }
  352|  10.7k|            }
  353|  10.7k|        }
  354|       |
  355|   990k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 245k, False: 745k]
  ------------------
  356|   245k|            value = T{0};
  357|   245k|            return std::next(prefix_result.iterator);
  358|   245k|        }
  359|       |
  360|   745k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   745k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 591k, False: 153k]
  |  |  ------------------
  ------------------
  361|   591k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   591k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   591k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   591k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   591k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 206, False: 591k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    206|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    206|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    206|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    206|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    206|    }                                                  \
  |  |  |  |   70|   591k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   591k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   591k|                    parse_integer_digits_without_thsep(
  363|   591k|                        ranges::subrange{prefix_result.iterator,
  364|   591k|                                         ranges::end(range)},
  365|   591k|                        prefix_result.parsed_base));
  366|       |
  367|   591k|            auto buf = make_contiguous_buffer(
  368|   591k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   591k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   591k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   591k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   591k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   591k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 18.1k, False: 572k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  18.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  18.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  18.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  18.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  18.1k|    }                                                  \
  |  |  |  |   70|   591k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   572k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   572k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   572k|                                        prefix_result.parsed_base));
  372|       |
  373|   572k|            return ranges_polyfill::batch_next(
  374|   572k|                prefix_result.iterator,
  375|   572k|                ranges::distance(buf.view().begin(), result_it));
  376|   591k|        }
  377|       |
  378|   153k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   153k|            localized_number_formatting_options<CharT>{loc};
  383|   153k|#endif
  384|       |
  385|   153k|        SCN_TRY(
  ------------------
  |  |   71|   153k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   153k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   153k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.15k, False: 151k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.15k|    }                                                  \
  |  |  |  |   70|   153k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   151k|            parse_digits_result,
  387|   151k|            parse_integer_digits_with_thsep(
  388|   151k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   151k|                prefix_result.parsed_base, locale_options));
  390|   151k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   151k|            parse_digits_result;
  392|       |
  393|   151k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 344, False: 151k]
  ------------------
  394|    344|            if (auto e = check_thsep_grouping(
  395|    344|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    344|                    thsep_indices, locale_options.grouping);
  397|    344|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    344|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 342, False: 2]
  |  |  ------------------
  ------------------
  398|    342|                return unexpected(e);
  399|    342|            }
  400|    344|        }
  401|       |
  402|   151k|        auto nothsep_source_view =
  403|   151k|            std::basic_string_view<CharT>{nothsep_source};
  404|   151k|        SCN_TRY(
  ------------------
  |  |   71|   151k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   151k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   151k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 460, False: 150k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    460|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    460|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    460|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    460|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    460|    }                                                  \
  |  |  |  |   70|   151k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   150k|            nothsep_source_it,
  406|   150k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|   150k|                                prefix_result.parsed_base));
  408|       |
  409|   150k|        return ranges_polyfill::batch_next(
  410|   150k|            prefix_result.iterator,
  411|   150k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|   150k|                ranges::ssize(thsep_indices));
  413|   151k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|  1.02M|    {
  335|  1.02M|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  1.02M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.02M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.02M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.02M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.02M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  1.02M|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  1.02M|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 11.2k, False: 1.01M]
  ------------------
  339|  11.2k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  11.2k|                return unexpected_scan_error(
  341|  11.2k|                    scan_error::invalid_scanned_value,
  342|  11.2k|                    "Unexpected '-' sign when parsing an "
  343|  11.2k|                    "unsigned value");
  344|  11.2k|            }
  345|  11.2k|            else {
  346|  11.2k|                if (specs.type ==
  347|  11.2k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  11.2k|                    return unexpected_scan_error(
  349|  11.2k|                        scan_error::invalid_scanned_value,
  350|  11.2k|                        "'u'-option disallows negative values");
  351|  11.2k|                }
  352|  11.2k|            }
  353|  11.2k|        }
  354|       |
  355|  1.01M|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 245k, False: 768k]
  ------------------
  356|   245k|            value = T{0};
  357|   245k|            return std::next(prefix_result.iterator);
  358|   245k|        }
  359|       |
  360|   768k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   768k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 609k, False: 158k]
  |  |  ------------------
  ------------------
  361|   609k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   609k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   609k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   609k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   609k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 208, False: 608k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    208|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    208|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    208|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    208|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    208|    }                                                  \
  |  |  |  |   70|   609k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   608k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   608k|                    parse_integer_digits_without_thsep(
  363|   608k|                        ranges::subrange{prefix_result.iterator,
  364|   608k|                                         ranges::end(range)},
  365|   608k|                        prefix_result.parsed_base));
  366|       |
  367|   608k|            auto buf = make_contiguous_buffer(
  368|   608k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   608k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   608k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   608k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   608k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   608k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 17.5k, False: 591k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  17.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  17.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  17.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  17.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  17.5k|    }                                                  \
  |  |  |  |   70|   608k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   591k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   591k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   591k|                                        prefix_result.parsed_base));
  372|       |
  373|   591k|            return ranges_polyfill::batch_next(
  374|   591k|                prefix_result.iterator,
  375|   591k|                ranges::distance(buf.view().begin(), result_it));
  376|   608k|        }
  377|       |
  378|   158k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   158k|            localized_number_formatting_options<CharT>{loc};
  383|   158k|#endif
  384|       |
  385|   158k|        SCN_TRY(
  ------------------
  |  |   71|   158k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   158k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   158k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.24k, False: 156k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.24k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.24k|    }                                                  \
  |  |  |  |   70|   158k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   156k|            parse_digits_result,
  387|   156k|            parse_integer_digits_with_thsep(
  388|   156k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   156k|                prefix_result.parsed_base, locale_options));
  390|   156k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   156k|            parse_digits_result;
  392|       |
  393|   156k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 344, False: 156k]
  ------------------
  394|    344|            if (auto e = check_thsep_grouping(
  395|    344|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    344|                    thsep_indices, locale_options.grouping);
  397|    344|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    344|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 342, False: 2]
  |  |  ------------------
  ------------------
  398|    342|                return unexpected(e);
  399|    342|            }
  400|    344|        }
  401|       |
  402|   156k|        auto nothsep_source_view =
  403|   156k|            std::basic_string_view<CharT>{nothsep_source};
  404|   156k|        SCN_TRY(
  ------------------
  |  |   71|   156k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   156k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   156k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 174, False: 156k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    174|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    174|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    174|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    174|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    174|    }                                                  \
  |  |  |  |   70|   156k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   156k|            nothsep_source_it,
  406|   156k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|   156k|                                prefix_result.parsed_base));
  408|       |
  409|   156k|        return ranges_polyfill::batch_next(
  410|   156k|            prefix_result.iterator,
  411|   156k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|   156k|                ranges::ssize(thsep_indices));
  413|   156k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  42.1k|    {
  335|  42.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  42.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  42.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  42.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  42.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 42.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  42.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  42.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  42.1k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  42.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 42.1k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  42.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 42.1k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  42.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  42.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 36.1k, False: 6.02k]
  |  |  ------------------
  ------------------
  361|  36.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  36.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  36.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  36.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  36.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 30.1k, False: 6.02k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  30.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  30.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  30.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  30.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  30.1k|    }                                                  \
  |  |  |  |   70|  36.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  6.02k|                    parse_integer_digits_without_thsep(
  363|  6.02k|                        ranges::subrange{prefix_result.iterator,
  364|  6.02k|                                         ranges::end(range)},
  365|  6.02k|                        prefix_result.parsed_base));
  366|       |
  367|  6.02k|            auto buf = make_contiguous_buffer(
  368|  6.02k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  6.02k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  6.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.02k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  6.02k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  6.02k|                                        prefix_result.parsed_base));
  372|       |
  373|  6.02k|            return ranges_polyfill::batch_next(
  374|  6.02k|                prefix_result.iterator,
  375|  6.02k|                ranges::distance(buf.view().begin(), result_it));
  376|  6.02k|        }
  377|       |
  378|  6.02k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  6.02k|            localized_number_formatting_options<CharT>{loc};
  383|  6.02k|#endif
  384|       |
  385|  6.02k|        SCN_TRY(
  ------------------
  |  |   71|  6.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.02k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.02k|    }                                                  \
  |  |  |  |   70|  6.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  42.1k|    {
  335|  42.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  42.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  42.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  42.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  42.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 42.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  42.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  42.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  42.1k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  42.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 42.1k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  42.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 42.1k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  42.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  42.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 36.1k, False: 6.02k]
  |  |  ------------------
  ------------------
  361|  36.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  36.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  36.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  36.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  36.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 30.1k, False: 6.02k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  30.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  30.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  30.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  30.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  30.1k|    }                                                  \
  |  |  |  |   70|  36.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  6.02k|                    parse_integer_digits_without_thsep(
  363|  6.02k|                        ranges::subrange{prefix_result.iterator,
  364|  6.02k|                                         ranges::end(range)},
  365|  6.02k|                        prefix_result.parsed_base));
  366|       |
  367|  6.02k|            auto buf = make_contiguous_buffer(
  368|  6.02k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  6.02k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  6.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.02k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  6.02k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  6.02k|                                        prefix_result.parsed_base));
  372|       |
  373|  6.02k|            return ranges_polyfill::batch_next(
  374|  6.02k|                prefix_result.iterator,
  375|  6.02k|                ranges::distance(buf.view().begin(), result_it));
  376|  6.02k|        }
  377|       |
  378|  6.02k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  6.02k|            localized_number_formatting_options<CharT>{loc};
  383|  6.02k|#endif
  384|       |
  385|  6.02k|        SCN_TRY(
  ------------------
  |  |   71|  6.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.02k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.02k|    }                                                  \
  |  |  |  |   70|  6.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  42.1k|    {
  335|  42.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  42.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  42.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  42.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  42.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 42.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  42.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  42.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  42.1k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  42.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 42.1k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  42.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 42.1k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  42.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  42.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 36.1k, False: 6.02k]
  |  |  ------------------
  ------------------
  361|  36.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  36.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  36.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  36.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  36.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 30.1k, False: 6.02k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  30.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  30.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  30.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  30.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  30.1k|    }                                                  \
  |  |  |  |   70|  36.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  6.02k|                    parse_integer_digits_without_thsep(
  363|  6.02k|                        ranges::subrange{prefix_result.iterator,
  364|  6.02k|                                         ranges::end(range)},
  365|  6.02k|                        prefix_result.parsed_base));
  366|       |
  367|  6.02k|            auto buf = make_contiguous_buffer(
  368|  6.02k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  6.02k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  6.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.02k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  6.02k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  6.02k|                                        prefix_result.parsed_base));
  372|       |
  373|  6.02k|            return ranges_polyfill::batch_next(
  374|  6.02k|                prefix_result.iterator,
  375|  6.02k|                ranges::distance(buf.view().begin(), result_it));
  376|  6.02k|        }
  377|       |
  378|  6.02k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  6.02k|            localized_number_formatting_options<CharT>{loc};
  383|  6.02k|#endif
  384|       |
  385|  6.02k|        SCN_TRY(
  ------------------
  |  |   71|  6.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.02k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.02k|    }                                                  \
  |  |  |  |   70|  6.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  42.1k|    {
  335|  42.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  42.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  42.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  42.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  42.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 42.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  42.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  42.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  42.1k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  42.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 42.1k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  42.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 42.1k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  42.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  42.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 36.1k, False: 6.02k]
  |  |  ------------------
  ------------------
  361|  36.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  36.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  36.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  36.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  36.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 30.1k, False: 6.02k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  30.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  30.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  30.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  30.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  30.1k|    }                                                  \
  |  |  |  |   70|  36.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  6.02k|                    parse_integer_digits_without_thsep(
  363|  6.02k|                        ranges::subrange{prefix_result.iterator,
  364|  6.02k|                                         ranges::end(range)},
  365|  6.02k|                        prefix_result.parsed_base));
  366|       |
  367|  6.02k|            auto buf = make_contiguous_buffer(
  368|  6.02k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  6.02k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  6.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.02k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  6.02k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  6.02k|                                        prefix_result.parsed_base));
  372|       |
  373|  6.02k|            return ranges_polyfill::batch_next(
  374|  6.02k|                prefix_result.iterator,
  375|  6.02k|                ranges::distance(buf.view().begin(), result_it));
  376|  6.02k|        }
  377|       |
  378|  6.02k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  6.02k|            localized_number_formatting_options<CharT>{loc};
  383|  6.02k|#endif
  384|       |
  385|  6.02k|        SCN_TRY(
  ------------------
  |  |   71|  6.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.02k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.02k|    }                                                  \
  |  |  |  |   70|  6.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  42.1k|    {
  335|  42.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  42.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  42.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  42.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  42.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 42.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  42.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  42.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  42.1k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  42.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 42.1k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  42.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 42.1k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  42.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  42.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 36.1k, False: 6.02k]
  |  |  ------------------
  ------------------
  361|  36.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  36.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  36.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  36.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  36.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 30.1k, False: 6.02k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  30.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  30.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  30.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  30.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  30.1k|    }                                                  \
  |  |  |  |   70|  36.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  6.02k|                    parse_integer_digits_without_thsep(
  363|  6.02k|                        ranges::subrange{prefix_result.iterator,
  364|  6.02k|                                         ranges::end(range)},
  365|  6.02k|                        prefix_result.parsed_base));
  366|       |
  367|  6.02k|            auto buf = make_contiguous_buffer(
  368|  6.02k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  6.02k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  6.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.02k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  6.02k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  6.02k|                                        prefix_result.parsed_base));
  372|       |
  373|  6.02k|            return ranges_polyfill::batch_next(
  374|  6.02k|                prefix_result.iterator,
  375|  6.02k|                ranges::distance(buf.view().begin(), result_it));
  376|  6.02k|        }
  377|       |
  378|  6.02k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  6.02k|            localized_number_formatting_options<CharT>{loc};
  383|  6.02k|#endif
  384|       |
  385|  6.02k|        SCN_TRY(
  ------------------
  |  |   71|  6.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.02k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.02k|    }                                                  \
  |  |  |  |   70|  6.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  42.1k|    {
  335|  42.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  42.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  42.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  42.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  42.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 42.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  42.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  42.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  42.1k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  42.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 42.1k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  42.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 42.1k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  42.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  42.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 36.1k, False: 6.02k]
  |  |  ------------------
  ------------------
  361|  36.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  36.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  36.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  36.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  36.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 30.1k, False: 6.02k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  30.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  30.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  30.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  30.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  30.1k|    }                                                  \
  |  |  |  |   70|  36.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  6.02k|                    parse_integer_digits_without_thsep(
  363|  6.02k|                        ranges::subrange{prefix_result.iterator,
  364|  6.02k|                                         ranges::end(range)},
  365|  6.02k|                        prefix_result.parsed_base));
  366|       |
  367|  6.02k|            auto buf = make_contiguous_buffer(
  368|  6.02k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  6.02k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  6.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.02k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  6.02k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  6.02k|                                        prefix_result.parsed_base));
  372|       |
  373|  6.02k|            return ranges_polyfill::batch_next(
  374|  6.02k|                prefix_result.iterator,
  375|  6.02k|                ranges::distance(buf.view().begin(), result_it));
  376|  6.02k|        }
  377|       |
  378|  6.02k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  6.02k|            localized_number_formatting_options<CharT>{loc};
  383|  6.02k|#endif
  384|       |
  385|  6.02k|        SCN_TRY(
  ------------------
  |  |   71|  6.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.02k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.02k|    }                                                  \
  |  |  |  |   70|  6.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   301k|    {
  324|   301k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   301k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   301k|        return read_default_with_base(range, value, 0);
  326|   301k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   301k|    {
  287|   301k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   301k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   301k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   301k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   301k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 301k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   301k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   301k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   301k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   301k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   301k|                return unexpected_scan_error(
  293|   301k|                    scan_error::invalid_scanned_value,
  294|   301k|                    "Unexpected '-' sign when parsing an "
  295|   301k|                    "unsigned value");
  296|   301k|            }
  297|   301k|        }
  298|       |
  299|   301k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 120k, False: 180k]
  ------------------
  300|   120k|            value = T{0};
  301|   120k|            return std::next(prefix_result.iterator);
  302|   120k|        }
  303|       |
  304|   361k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   180k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   180k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   180k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   180k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 189, False: 180k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    189|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    189|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    189|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    189|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    189|    }                                                  \
  |  |  |  |   70|   180k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   180k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   361k|                                     ranges::subrange{prefix_result.iterator,
  306|   361k|                                                      ranges::end(range)},
  307|   361k|                                     prefix_result.parsed_base));
  308|       |
  309|   361k|        auto buf = make_contiguous_buffer(
  310|   361k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   361k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   180k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   180k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   180k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   180k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 25.4k, False: 155k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  25.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  25.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  25.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  25.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  25.4k|    }                                                  \
  |  |  |  |   70|   180k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   155k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   155k|                                    prefix_result.parsed_base));
  314|       |
  315|   155k|        return ranges_polyfill::batch_next(
  316|   155k|            prefix_result.iterator,
  317|   155k|            ranges::distance(buf.view().begin(), result_it));
  318|   361k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESE_i:
  120|  7.56M|{
  121|  7.56M|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|  7.56M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.56M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.56M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.56M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.56M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|  7.56M|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|  7.56M|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|  7.56M|        parse_integer_base_prefix(
  126|  7.56M|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|  7.56M|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 2.84M, False: 4.72M]
  ------------------
  129|  2.84M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 4.71k, False: 2.83M]
  ------------------
  130|  2.84M|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 2.06M, False: 765k]
  ------------------
  131|  2.07M|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|  2.07M|                digits_begin_it, ranges::begin(range));
  133|  2.07M|        }
  134|   765k|        else {
  135|   765k|            parsed_zero = false;
  136|   765k|        }
  137|  2.84M|    }
  138|  4.72M|    else {
  139|  4.72M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 10.8k, False: 4.71M]
  ------------------
  140|  4.72M|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 704k, False: 4.00M]
  ------------------
  141|   715k|            digits_begin_it = base_prefix_begin_it;
  142|   715k|        }
  143|  4.72M|    }
  144|       |
  145|  7.56M|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 7.18M, False: 374k]
  ------------------
  146|  7.18M|        sign = sign_type::plus_sign;
  147|  7.18M|    }
  148|  7.56M|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|  7.56M|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|  7.56M|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_i:
   87|  7.56M|{
   88|  7.56M|    switch (base) {
   89|   193k|        case 2:
  ------------------
  |  Branch (89:9): [True: 193k, False: 7.36M]
  ------------------
   90|       |            // allow 0b/0B
   91|   193k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|   193k|                    false};
   93|       |
   94|   347k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 347k, False: 7.21M]
  ------------------
   95|       |            // allow 0o/0O/0
   96|   347k|            bool zero_parsed = false;
   97|   347k|            auto it = apply_opt(
   98|   347k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|   347k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|  1.00M|        case 16:
  ------------------
  |  Branch (102:9): [True: 1.00M, False: 6.56M]
  ------------------
  103|       |            // allow 0x/0X
  104|  1.00M|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|  1.00M|                    false};
  106|       |
  107|  4.98M|        case 0:
  ------------------
  |  Branch (107:9): [True: 4.98M, False: 2.57M]
  ------------------
  108|       |            // detect base
  109|  4.98M|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|  4.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|  1.03M|        default:
  ------------------
  |  Branch (111:9): [True: 1.03M, False: 6.52M]
  ------------------
  112|       |            // no base prefix allowed
  113|  1.03M|            return {ranges::begin(range), base, false};
  114|  7.56M|    }
  115|  7.56M|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   37|  5.16M|{
   38|  5.16M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|  5.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|  5.16M|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_Rb:
   52|  5.31M|{
   53|  5.31M|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 60.4k, False: 5.25M]
  ------------------
   54|  60.4k|        return *r;
   55|  60.4k|    }
   56|       |
   57|  5.25M|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 2.84M, False: 2.41M]
  ------------------
   58|  2.84M|        zero_parsed = true;
   59|  2.84M|        return *r;
   60|  2.84M|    }
   61|       |
   62|  2.41M|    return unexpected(parse_error::error);
   63|  5.25M|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   44|  5.98M|{
   45|  5.98M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  5.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  5.98M|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_:
   68|  4.98M|{
   69|  4.98M|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 18.4k, False: 4.96M]
  ------------------
   70|  18.4k|        return {*r, 16, false};
   71|  18.4k|    }
   72|  4.96M|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 1.93k, False: 4.96M]
  ------------------
   73|  1.93k|        return {*r, 2, false};
   74|  1.93k|    }
   75|  4.96M|    {
   76|  4.96M|        bool zero_parsed{false};
   77|  4.96M|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 2.72M, False: 2.23M]
  ------------------
   78|  2.72M|            return {*r, 8, zero_parsed};
   79|  2.72M|        }
   80|  4.96M|    }
   81|  2.23M|    return {ranges::begin(range), 10, false};
   82|  4.96M|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESD_i:
  155|  4.59M|{
  156|  4.59M|    using char_type = detail::char_t<Range>;
  157|       |
  158|  4.59M|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|  4.59M|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.55k, False: 4.59M]
  |  |  ------------------
  ------------------
  160|  3.55k|            return unexpected_scan_error(
  161|  3.55k|                scan_error::invalid_scanned_value,
  162|  3.55k|                "Failed to parse integer: No digits found");
  163|  3.55k|        }
  164|  4.59M|        return ranges::end(range);
  165|  4.59M|    }
  166|  4.59M|    else {
  167|  4.59M|        return read_while1_code_unit(
  168|  4.59M|                   range, [&](char_type ch)
  169|  4.59M|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|  4.59M|            .transform_error(map_parse_error_to_scan_error(
  171|  4.59M|                scan_error::invalid_scanned_value,
  172|  4.59M|                "Failed to parse integer: No digits found"));
  173|  4.59M|    }
  174|  4.59M|}
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   412k|    {
  324|   412k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   412k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   412k|        return read_default_with_base(range, value, 0);
  326|   412k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   412k|    {
  287|   412k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   412k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   412k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   412k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   412k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 412k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   412k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   412k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   412k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   412k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   412k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   412k|                return unexpected_scan_error(
  293|   412k|                    scan_error::invalid_scanned_value,
  294|   412k|                    "Unexpected '-' sign when parsing an "
  295|   412k|                    "unsigned value");
  296|   412k|            }
  297|   412k|        }
  298|       |
  299|   412k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 160k, False: 251k]
  ------------------
  300|   160k|            value = T{0};
  301|   160k|            return std::next(prefix_result.iterator);
  302|   160k|        }
  303|       |
  304|   503k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   251k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   251k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   251k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   251k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 249, False: 251k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    249|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    249|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    249|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    249|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    249|    }                                                  \
  |  |  |  |   70|   251k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   251k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   503k|                                     ranges::subrange{prefix_result.iterator,
  306|   503k|                                                      ranges::end(range)},
  307|   503k|                                     prefix_result.parsed_base));
  308|       |
  309|   503k|        auto buf = make_contiguous_buffer(
  310|   503k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   503k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   251k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   251k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   251k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   251k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 24.4k, False: 227k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  24.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  24.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  24.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  24.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  24.4k|    }                                                  \
  |  |  |  |   70|   251k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   227k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   227k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   227k|                                    prefix_result.parsed_base));
  314|       |
  315|   227k|        return ranges_polyfill::batch_next(
  316|   227k|            prefix_result.iterator,
  317|   227k|            ranges::distance(buf.view().begin(), result_it));
  318|   503k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   423k|    {
  324|   423k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   423k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   423k|        return read_default_with_base(range, value, 0);
  326|   423k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   423k|    {
  287|   423k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   423k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   423k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   423k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   423k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 423k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   423k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   423k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   423k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   423k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   423k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   423k|                return unexpected_scan_error(
  293|   423k|                    scan_error::invalid_scanned_value,
  294|   423k|                    "Unexpected '-' sign when parsing an "
  295|   423k|                    "unsigned value");
  296|   423k|            }
  297|   423k|        }
  298|       |
  299|   423k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 161k, False: 262k]
  ------------------
  300|   161k|            value = T{0};
  301|   161k|            return std::next(prefix_result.iterator);
  302|   161k|        }
  303|       |
  304|   524k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   262k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   262k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   262k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   262k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 264, False: 262k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    264|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    264|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    264|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    264|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    264|    }                                                  \
  |  |  |  |   70|   262k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   262k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   524k|                                     ranges::subrange{prefix_result.iterator,
  306|   524k|                                                      ranges::end(range)},
  307|   524k|                                     prefix_result.parsed_base));
  308|       |
  309|   524k|        auto buf = make_contiguous_buffer(
  310|   524k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   524k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   262k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   262k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   262k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   262k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 24.2k, False: 238k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  24.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  24.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  24.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  24.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  24.2k|    }                                                  \
  |  |  |  |   70|   262k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   238k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   238k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   238k|                                    prefix_result.parsed_base));
  314|       |
  315|   238k|        return ranges_polyfill::batch_next(
  316|   238k|            prefix_result.iterator,
  317|   238k|            ranges::distance(buf.view().begin(), result_it));
  318|   524k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   294k|    {
  324|   294k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   294k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   294k|        return read_default_with_base(range, value, 0);
  326|   294k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   294k|    {
  287|   294k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   294k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   294k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   294k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 294k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   294k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   294k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   294k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   294k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   294k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.38k, False: 291k]
  ------------------
  292|  2.38k|                return unexpected_scan_error(
  293|  2.38k|                    scan_error::invalid_scanned_value,
  294|  2.38k|                    "Unexpected '-' sign when parsing an "
  295|  2.38k|                    "unsigned value");
  296|  2.38k|            }
  297|   294k|        }
  298|       |
  299|   291k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 121k, False: 170k]
  ------------------
  300|   121k|            value = T{0};
  301|   121k|            return std::next(prefix_result.iterator);
  302|   121k|        }
  303|       |
  304|   340k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   170k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   170k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   170k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   170k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 96, False: 170k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     96|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     96|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     96|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     96|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     96|    }                                                  \
  |  |  |  |   70|   170k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   340k|                                     ranges::subrange{prefix_result.iterator,
  306|   340k|                                                      ranges::end(range)},
  307|   340k|                                     prefix_result.parsed_base));
  308|       |
  309|   340k|        auto buf = make_contiguous_buffer(
  310|   340k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   340k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   170k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   170k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   170k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   170k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 23.3k, False: 146k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  23.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  23.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  23.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  23.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  23.3k|    }                                                  \
  |  |  |  |   70|   170k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   146k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   146k|                                    prefix_result.parsed_base));
  314|       |
  315|   146k|        return ranges_polyfill::batch_next(
  316|   146k|            prefix_result.iterator,
  317|   146k|            ranges::distance(buf.view().begin(), result_it));
  318|   340k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   349k|    {
  324|   349k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   349k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   349k|        return read_default_with_base(range, value, 0);
  326|   349k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   349k|    {
  287|   349k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   349k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   349k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   349k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   349k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 349k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   349k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   349k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   349k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   349k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   349k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.60k, False: 346k]
  ------------------
  292|  2.60k|                return unexpected_scan_error(
  293|  2.60k|                    scan_error::invalid_scanned_value,
  294|  2.60k|                    "Unexpected '-' sign when parsing an "
  295|  2.60k|                    "unsigned value");
  296|  2.60k|            }
  297|   349k|        }
  298|       |
  299|   346k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 138k, False: 208k]
  ------------------
  300|   138k|            value = T{0};
  301|   138k|            return std::next(prefix_result.iterator);
  302|   138k|        }
  303|       |
  304|   416k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   208k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   208k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   208k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   208k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 102, False: 208k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    102|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    102|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    102|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    102|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    102|    }                                                  \
  |  |  |  |   70|   208k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   208k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   416k|                                     ranges::subrange{prefix_result.iterator,
  306|   416k|                                                      ranges::end(range)},
  307|   416k|                                     prefix_result.parsed_base));
  308|       |
  309|   416k|        auto buf = make_contiguous_buffer(
  310|   416k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   416k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   208k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   208k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   208k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   208k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 22.6k, False: 185k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  22.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  22.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  22.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  22.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  22.6k|    }                                                  \
  |  |  |  |   70|   208k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   185k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   185k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   185k|                                    prefix_result.parsed_base));
  314|       |
  315|   185k|        return ranges_polyfill::batch_next(
  316|   185k|            prefix_result.iterator,
  317|   185k|            ranges::distance(buf.view().begin(), result_it));
  318|   416k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   356k|    {
  324|   356k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   356k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   356k|        return read_default_with_base(range, value, 0);
  326|   356k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   356k|    {
  287|   356k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   356k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   356k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   356k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   356k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 356k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   356k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   356k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   356k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   356k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   356k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.74k, False: 354k]
  ------------------
  292|  2.74k|                return unexpected_scan_error(
  293|  2.74k|                    scan_error::invalid_scanned_value,
  294|  2.74k|                    "Unexpected '-' sign when parsing an "
  295|  2.74k|                    "unsigned value");
  296|  2.74k|            }
  297|   356k|        }
  298|       |
  299|   354k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 139k, False: 215k]
  ------------------
  300|   139k|            value = T{0};
  301|   139k|            return std::next(prefix_result.iterator);
  302|   139k|        }
  303|       |
  304|   430k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   215k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   215k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   215k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   215k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 102, False: 214k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    102|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    102|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    102|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    102|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    102|    }                                                  \
  |  |  |  |   70|   215k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   214k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   430k|                                     ranges::subrange{prefix_result.iterator,
  306|   430k|                                                      ranges::end(range)},
  307|   430k|                                     prefix_result.parsed_base));
  308|       |
  309|   430k|        auto buf = make_contiguous_buffer(
  310|   430k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   430k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   214k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   214k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   214k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   214k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 22.3k, False: 192k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  22.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  22.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  22.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  22.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  22.3k|    }                                                  \
  |  |  |  |   70|   214k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   192k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   192k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   192k|                                    prefix_result.parsed_base));
  314|       |
  315|   192k|        return ranges_polyfill::batch_next(
  316|   192k|            prefix_result.iterator,
  317|   192k|            ranges::distance(buf.view().begin(), result_it));
  318|   430k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSC_12basic_stringIT0_NSC_11char_traitsISJ_EENSC_9allocatorISJ_EEEENSI_IcNSK_IcEENSM_IcEEEEEEEEESF_iRKNS1_35localized_number_formatting_optionsISJ_EE:
  184|   857k|{
  185|   857k|    std::basic_string<CharT> output;
  186|   857k|    std::string thsep_indices;
  187|   857k|    auto it = ranges::begin(range);
  188|   857k|    bool digit_matched = false;
  189|  2.60M|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 2.60M, False: 8.90k]
  ------------------
  190|  2.60M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 35.4k, False: 2.56M]
  ------------------
  191|  35.4k|            thsep_indices.push_back(static_cast<char>(
  192|  35.4k|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|  35.4k|        }
  194|  2.56M|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 848k, False: 1.71M]
  ------------------
  195|   848k|            break;
  196|   848k|        }
  197|  1.71M|        else {
  198|  1.71M|            output.push_back(*it);
  199|  1.71M|            digit_matched = true;
  200|  1.71M|        }
  201|  2.60M|    }
  202|   857k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|   857k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 88.2k, False: 769k]
  |  |  ------------------
  ------------------
  203|  88.2k|        return unexpected_scan_error(
  204|  88.2k|            scan_error::invalid_scanned_value,
  205|  88.2k|            "Failed to parse integer: No digits found");
  206|  88.2k|    }
  207|   769k|    return std::tuple{it, output, thsep_indices};
  208|   857k|}
_ZN3scn2v24impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  279|  6.18M|    {
  280|  6.18M|        detail::check_int_type_specs(specs, eh);
  281|  6.18M|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   692k|    {
  335|   692k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   692k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   692k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   692k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   692k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 692k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   692k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   692k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   692k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   692k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 55.2k, False: 637k]
  ------------------
  339|  55.2k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  55.2k|                return unexpected_scan_error(
  341|  55.2k|                    scan_error::invalid_scanned_value,
  342|  55.2k|                    "Unexpected '-' sign when parsing an "
  343|  55.2k|                    "unsigned value");
  344|  55.2k|            }
  345|  55.2k|            else {
  346|  55.2k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 55.2k]
  ------------------
  347|  55.2k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  55.2k|            }
  353|  55.2k|        }
  354|       |
  355|   692k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 177k, False: 515k]
  ------------------
  356|   177k|            value = T{0};
  357|   177k|            return std::next(prefix_result.iterator);
  358|   177k|        }
  359|       |
  360|   515k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   515k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 395k, False: 120k]
  |  |  ------------------
  ------------------
  361|   395k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   395k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   395k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   395k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   395k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 506, False: 394k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    506|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    506|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    506|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    506|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    506|    }                                                  \
  |  |  |  |   70|   395k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   394k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   394k|                    parse_integer_digits_without_thsep(
  363|   394k|                        ranges::subrange{prefix_result.iterator,
  364|   394k|                                         ranges::end(range)},
  365|   394k|                        prefix_result.parsed_base));
  366|       |
  367|   394k|            auto buf = make_contiguous_buffer(
  368|   394k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   394k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   394k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   394k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   394k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   394k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 86.5k, False: 308k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  86.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  86.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  86.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  86.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  86.5k|    }                                                  \
  |  |  |  |   70|   394k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   308k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   308k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   308k|                                        prefix_result.parsed_base));
  372|       |
  373|   308k|            return ranges_polyfill::batch_next(
  374|   308k|                prefix_result.iterator,
  375|   308k|                ranges::distance(buf.view().begin(), result_it));
  376|   394k|        }
  377|       |
  378|   120k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   120k|            localized_number_formatting_options<CharT>{loc};
  383|   120k|#endif
  384|       |
  385|   120k|        SCN_TRY(
  ------------------
  |  |   71|   120k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   120k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   120k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   120k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 14.5k, False: 105k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  14.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  14.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  14.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  14.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  14.5k|    }                                                  \
  |  |  |  |   70|   120k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   105k|            parse_digits_result,
  387|   105k|            parse_integer_digits_with_thsep(
  388|   105k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   105k|                prefix_result.parsed_base, locale_options));
  390|   105k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   105k|            parse_digits_result;
  392|       |
  393|   105k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 400, False: 105k]
  ------------------
  394|    400|            if (auto e = check_thsep_grouping(
  395|    400|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    400|                    thsep_indices, locale_options.grouping);
  397|    400|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    400|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 396, False: 4]
  |  |  ------------------
  ------------------
  398|    396|                return unexpected(e);
  399|    396|            }
  400|    400|        }
  401|       |
  402|   105k|        auto nothsep_source_view =
  403|   105k|            std::basic_string_view<CharT>{nothsep_source};
  404|   105k|        SCN_TRY(
  ------------------
  |  |   71|   105k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   105k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   105k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.11k, False: 103k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.11k|    }                                                  \
  |  |  |  |   70|   105k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   103k|            nothsep_source_it,
  406|   103k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|   103k|                                prefix_result.parsed_base));
  408|       |
  409|   103k|        return ranges_polyfill::batch_next(
  410|   103k|            prefix_result.iterator,
  411|   103k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|   103k|                ranges::ssize(thsep_indices));
  413|   105k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|  1.07M|    {
  335|  1.07M|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  1.07M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.07M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.07M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.07M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.07M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  1.07M|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  1.07M|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 66.7k, False: 1.00M]
  ------------------
  339|  66.7k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  66.7k|                return unexpected_scan_error(
  341|  66.7k|                    scan_error::invalid_scanned_value,
  342|  66.7k|                    "Unexpected '-' sign when parsing an "
  343|  66.7k|                    "unsigned value");
  344|  66.7k|            }
  345|  66.7k|            else {
  346|  66.7k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 66.7k]
  ------------------
  347|  66.7k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  66.7k|            }
  353|  66.7k|        }
  354|       |
  355|  1.07M|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 235k, False: 840k]
  ------------------
  356|   235k|            value = T{0};
  357|   235k|            return std::next(prefix_result.iterator);
  358|   235k|        }
  359|       |
  360|   840k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   840k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 672k, False: 167k]
  |  |  ------------------
  ------------------
  361|   672k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   672k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   672k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   672k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   672k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 670, False: 671k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    670|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    670|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    670|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    670|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    670|    }                                                  \
  |  |  |  |   70|   672k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   671k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   671k|                    parse_integer_digits_without_thsep(
  363|   671k|                        ranges::subrange{prefix_result.iterator,
  364|   671k|                                         ranges::end(range)},
  365|   671k|                        prefix_result.parsed_base));
  366|       |
  367|   671k|            auto buf = make_contiguous_buffer(
  368|   671k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   671k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   671k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   671k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   671k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   671k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 84.0k, False: 587k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  84.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  84.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  84.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  84.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  84.0k|    }                                                  \
  |  |  |  |   70|   671k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   587k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   587k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   587k|                                        prefix_result.parsed_base));
  372|       |
  373|   587k|            return ranges_polyfill::batch_next(
  374|   587k|                prefix_result.iterator,
  375|   587k|                ranges::distance(buf.view().begin(), result_it));
  376|   671k|        }
  377|       |
  378|   167k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   167k|            localized_number_formatting_options<CharT>{loc};
  383|   167k|#endif
  384|       |
  385|   167k|        SCN_TRY(
  ------------------
  |  |   71|   167k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   167k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   167k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   167k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 15.2k, False: 152k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  15.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  15.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  15.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  15.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  15.2k|    }                                                  \
  |  |  |  |   70|   167k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   152k|            parse_digits_result,
  387|   152k|            parse_integer_digits_with_thsep(
  388|   152k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   152k|                prefix_result.parsed_base, locale_options));
  390|   152k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   152k|            parse_digits_result;
  392|       |
  393|   152k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 502, False: 151k]
  ------------------
  394|    502|            if (auto e = check_thsep_grouping(
  395|    502|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    502|                    thsep_indices, locale_options.grouping);
  397|    502|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    502|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 498, False: 4]
  |  |  ------------------
  ------------------
  398|    498|                return unexpected(e);
  399|    498|            }
  400|    502|        }
  401|       |
  402|   151k|        auto nothsep_source_view =
  403|   151k|            std::basic_string_view<CharT>{nothsep_source};
  404|   151k|        SCN_TRY(
  ------------------
  |  |   71|   151k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   151k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   151k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 712, False: 151k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    712|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    712|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    712|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    712|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    712|    }                                                  \
  |  |  |  |   70|   151k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   151k|            nothsep_source_it,
  406|   151k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|   151k|                                prefix_result.parsed_base));
  408|       |
  409|   151k|        return ranges_polyfill::batch_next(
  410|   151k|            prefix_result.iterator,
  411|   151k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|   151k|                ranges::ssize(thsep_indices));
  413|   151k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|  1.10M|    {
  335|  1.10M|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  1.10M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.10M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.10M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.10M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.10M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  1.10M|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  1.10M|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 68.5k, False: 1.03M]
  ------------------
  339|  68.5k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  68.5k|                return unexpected_scan_error(
  341|  68.5k|                    scan_error::invalid_scanned_value,
  342|  68.5k|                    "Unexpected '-' sign when parsing an "
  343|  68.5k|                    "unsigned value");
  344|  68.5k|            }
  345|  68.5k|            else {
  346|  68.5k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 68.5k]
  ------------------
  347|  68.5k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  68.5k|            }
  353|  68.5k|        }
  354|       |
  355|  1.10M|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 236k, False: 869k]
  ------------------
  356|   236k|            value = T{0};
  357|   236k|            return std::next(prefix_result.iterator);
  358|   236k|        }
  359|       |
  360|   869k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   869k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 694k, False: 174k]
  |  |  ------------------
  ------------------
  361|   694k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   694k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   694k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   694k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   694k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 702, False: 694k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    702|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    702|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    702|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    702|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    702|    }                                                  \
  |  |  |  |   70|   694k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   694k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   694k|                    parse_integer_digits_without_thsep(
  363|   694k|                        ranges::subrange{prefix_result.iterator,
  364|   694k|                                         ranges::end(range)},
  365|   694k|                        prefix_result.parsed_base));
  366|       |
  367|   694k|            auto buf = make_contiguous_buffer(
  368|   694k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   694k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   694k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   694k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   694k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   694k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 83.6k, False: 610k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  83.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  83.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  83.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  83.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  83.6k|    }                                                  \
  |  |  |  |   70|   694k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   610k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   610k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   610k|                                        prefix_result.parsed_base));
  372|       |
  373|   610k|            return ranges_polyfill::batch_next(
  374|   610k|                prefix_result.iterator,
  375|   610k|                ranges::distance(buf.view().begin(), result_it));
  376|   694k|        }
  377|       |
  378|   174k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   174k|            localized_number_formatting_options<CharT>{loc};
  383|   174k|#endif
  384|       |
  385|   174k|        SCN_TRY(
  ------------------
  |  |   71|   174k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   174k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   174k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   174k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 15.4k, False: 159k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  15.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  15.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  15.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  15.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  15.4k|    }                                                  \
  |  |  |  |   70|   174k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   159k|            parse_digits_result,
  387|   159k|            parse_integer_digits_with_thsep(
  388|   159k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   159k|                prefix_result.parsed_base, locale_options));
  390|   159k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   159k|            parse_digits_result;
  392|       |
  393|   159k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 550, False: 158k]
  ------------------
  394|    550|            if (auto e = check_thsep_grouping(
  395|    550|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    550|                    thsep_indices, locale_options.grouping);
  397|    550|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    550|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 544, False: 6]
  |  |  ------------------
  ------------------
  398|    544|                return unexpected(e);
  399|    544|            }
  400|    550|        }
  401|       |
  402|   158k|        auto nothsep_source_view =
  403|   158k|            std::basic_string_view<CharT>{nothsep_source};
  404|   158k|        SCN_TRY(
  ------------------
  |  |   71|   158k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   158k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   158k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 314, False: 158k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    314|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    314|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    314|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    314|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    314|    }                                                  \
  |  |  |  |   70|   158k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   158k|            nothsep_source_it,
  406|   158k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|   158k|                                prefix_result.parsed_base));
  408|       |
  409|   158k|        return ranges_polyfill::batch_next(
  410|   158k|            prefix_result.iterator,
  411|   158k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|   158k|                ranges::ssize(thsep_indices));
  413|   158k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   722k|    {
  335|   722k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   722k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   722k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   722k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   722k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 722k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   722k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   722k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   722k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   722k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 8.23k, False: 714k]
  ------------------
  339|  8.23k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  8.23k|                return unexpected_scan_error(
  341|  8.23k|                    scan_error::invalid_scanned_value,
  342|  8.23k|                    "Unexpected '-' sign when parsing an "
  343|  8.23k|                    "unsigned value");
  344|  8.23k|            }
  345|  8.23k|            else {
  346|  8.23k|                if (specs.type ==
  347|  8.23k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  8.23k|                    return unexpected_scan_error(
  349|  8.23k|                        scan_error::invalid_scanned_value,
  350|  8.23k|                        "'u'-option disallows negative values");
  351|  8.23k|                }
  352|  8.23k|            }
  353|  8.23k|        }
  354|       |
  355|   714k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 178k, False: 535k]
  ------------------
  356|   178k|            value = T{0};
  357|   178k|            return std::next(prefix_result.iterator);
  358|   178k|        }
  359|       |
  360|   535k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   535k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 422k, False: 113k]
  |  |  ------------------
  ------------------
  361|   422k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   422k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   422k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   422k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   422k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 196, False: 422k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    196|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    196|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    196|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    196|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    196|    }                                                  \
  |  |  |  |   70|   422k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   422k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   422k|                    parse_integer_digits_without_thsep(
  363|   422k|                        ranges::subrange{prefix_result.iterator,
  364|   422k|                                         ranges::end(range)},
  365|   422k|                        prefix_result.parsed_base));
  366|       |
  367|   422k|            auto buf = make_contiguous_buffer(
  368|   422k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   422k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   422k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   422k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   422k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   422k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 80.5k, False: 341k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  80.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  80.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  80.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  80.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  80.5k|    }                                                  \
  |  |  |  |   70|   422k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   341k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   341k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   341k|                                        prefix_result.parsed_base));
  372|       |
  373|   341k|            return ranges_polyfill::batch_next(
  374|   341k|                prefix_result.iterator,
  375|   341k|                ranges::distance(buf.view().begin(), result_it));
  376|   422k|        }
  377|       |
  378|   113k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   113k|            localized_number_formatting_options<CharT>{loc};
  383|   113k|#endif
  384|       |
  385|   113k|        SCN_TRY(
  ------------------
  |  |   71|   113k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   113k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   113k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 14.1k, False: 99.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  14.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  14.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  14.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  14.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  14.1k|    }                                                  \
  |  |  |  |   70|   113k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  99.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  99.1k|            parse_digits_result,
  387|  99.1k|            parse_integer_digits_with_thsep(
  388|  99.1k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  99.1k|                prefix_result.parsed_base, locale_options));
  390|  99.1k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  99.1k|            parse_digits_result;
  392|       |
  393|  99.1k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 326, False: 98.8k]
  ------------------
  394|    326|            if (auto e = check_thsep_grouping(
  395|    326|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    326|                    thsep_indices, locale_options.grouping);
  397|    326|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    326|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 324, False: 2]
  |  |  ------------------
  ------------------
  398|    324|                return unexpected(e);
  399|    324|            }
  400|    326|        }
  401|       |
  402|  98.8k|        auto nothsep_source_view =
  403|  98.8k|            std::basic_string_view<CharT>{nothsep_source};
  404|  98.8k|        SCN_TRY(
  ------------------
  |  |   71|  98.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  98.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  98.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  98.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.15k, False: 97.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.15k|    }                                                  \
  |  |  |  |   70|  98.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  97.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  97.6k|            nothsep_source_it,
  406|  97.6k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  97.6k|                                prefix_result.parsed_base));
  408|       |
  409|  97.6k|        return ranges_polyfill::batch_next(
  410|  97.6k|            prefix_result.iterator,
  411|  97.6k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  97.6k|                ranges::ssize(thsep_indices));
  413|  98.8k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   904k|    {
  335|   904k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   904k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   904k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   904k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   904k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 904k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   904k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   904k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   904k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   904k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 8.84k, False: 895k]
  ------------------
  339|  8.84k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  8.84k|                return unexpected_scan_error(
  341|  8.84k|                    scan_error::invalid_scanned_value,
  342|  8.84k|                    "Unexpected '-' sign when parsing an "
  343|  8.84k|                    "unsigned value");
  344|  8.84k|            }
  345|  8.84k|            else {
  346|  8.84k|                if (specs.type ==
  347|  8.84k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  8.84k|                    return unexpected_scan_error(
  349|  8.84k|                        scan_error::invalid_scanned_value,
  350|  8.84k|                        "'u'-option disallows negative values");
  351|  8.84k|                }
  352|  8.84k|            }
  353|  8.84k|        }
  354|       |
  355|   895k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 201k, False: 693k]
  ------------------
  356|   201k|            value = T{0};
  357|   201k|            return std::next(prefix_result.iterator);
  358|   201k|        }
  359|       |
  360|   693k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   693k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 555k, False: 138k]
  |  |  ------------------
  ------------------
  361|   555k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   555k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   555k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   555k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   555k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 236, False: 555k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    236|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    236|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    236|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    236|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    236|    }                                                  \
  |  |  |  |   70|   555k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   555k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   555k|                    parse_integer_digits_without_thsep(
  363|   555k|                        ranges::subrange{prefix_result.iterator,
  364|   555k|                                         ranges::end(range)},
  365|   555k|                        prefix_result.parsed_base));
  366|       |
  367|   555k|            auto buf = make_contiguous_buffer(
  368|   555k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   555k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   555k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   555k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   555k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   555k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 78.7k, False: 476k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  78.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  78.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  78.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  78.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  78.7k|    }                                                  \
  |  |  |  |   70|   555k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   476k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   476k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   476k|                                        prefix_result.parsed_base));
  372|       |
  373|   476k|            return ranges_polyfill::batch_next(
  374|   476k|                prefix_result.iterator,
  375|   476k|                ranges::distance(buf.view().begin(), result_it));
  376|   555k|        }
  377|       |
  378|   138k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   138k|            localized_number_formatting_options<CharT>{loc};
  383|   138k|#endif
  384|       |
  385|   138k|        SCN_TRY(
  ------------------
  |  |   71|   138k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   138k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   138k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 14.3k, False: 124k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  14.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  14.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  14.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  14.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  14.3k|    }                                                  \
  |  |  |  |   70|   138k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   124k|            parse_digits_result,
  387|   124k|            parse_integer_digits_with_thsep(
  388|   124k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   124k|                prefix_result.parsed_base, locale_options));
  390|   124k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   124k|            parse_digits_result;
  392|       |
  393|   124k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 380, False: 123k]
  ------------------
  394|    380|            if (auto e = check_thsep_grouping(
  395|    380|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    380|                    thsep_indices, locale_options.grouping);
  397|    380|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    380|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 378, False: 2]
  |  |  ------------------
  ------------------
  398|    378|                return unexpected(e);
  399|    378|            }
  400|    380|        }
  401|       |
  402|   123k|        auto nothsep_source_view =
  403|   123k|            std::basic_string_view<CharT>{nothsep_source};
  404|   123k|        SCN_TRY(
  ------------------
  |  |   71|   123k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   123k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   123k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 378, False: 123k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    378|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    378|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    378|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    378|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    378|    }                                                  \
  |  |  |  |   70|   123k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   123k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   123k|            nothsep_source_it,
  406|   123k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|   123k|                                prefix_result.parsed_base));
  408|       |
  409|   123k|        return ranges_polyfill::batch_next(
  410|   123k|            prefix_result.iterator,
  411|   123k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|   123k|                ranges::ssize(thsep_indices));
  413|   123k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   924k|    {
  335|   924k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   924k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   924k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   924k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   924k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 924k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   924k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   924k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   924k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   924k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 9.29k, False: 915k]
  ------------------
  339|  9.29k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  9.29k|                return unexpected_scan_error(
  341|  9.29k|                    scan_error::invalid_scanned_value,
  342|  9.29k|                    "Unexpected '-' sign when parsing an "
  343|  9.29k|                    "unsigned value");
  344|  9.29k|            }
  345|  9.29k|            else {
  346|  9.29k|                if (specs.type ==
  347|  9.29k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  9.29k|                    return unexpected_scan_error(
  349|  9.29k|                        scan_error::invalid_scanned_value,
  350|  9.29k|                        "'u'-option disallows negative values");
  351|  9.29k|                }
  352|  9.29k|            }
  353|  9.29k|        }
  354|       |
  355|   915k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 202k, False: 712k]
  ------------------
  356|   202k|            value = T{0};
  357|   202k|            return std::next(prefix_result.iterator);
  358|   202k|        }
  359|       |
  360|   712k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   712k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 569k, False: 143k]
  |  |  ------------------
  ------------------
  361|   569k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   569k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   569k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   569k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   569k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 238, False: 568k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    238|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    238|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    238|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    238|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    238|    }                                                  \
  |  |  |  |   70|   569k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   568k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   568k|                    parse_integer_digits_without_thsep(
  363|   568k|                        ranges::subrange{prefix_result.iterator,
  364|   568k|                                         ranges::end(range)},
  365|   568k|                        prefix_result.parsed_base));
  366|       |
  367|   568k|            auto buf = make_contiguous_buffer(
  368|   568k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   568k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   568k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   568k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   568k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   568k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 78.2k, False: 490k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  78.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  78.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  78.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  78.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  78.2k|    }                                                  \
  |  |  |  |   70|   568k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   490k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   490k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   490k|                                        prefix_result.parsed_base));
  372|       |
  373|   490k|            return ranges_polyfill::batch_next(
  374|   490k|                prefix_result.iterator,
  375|   490k|                ranges::distance(buf.view().begin(), result_it));
  376|   568k|        }
  377|       |
  378|   143k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   143k|            localized_number_formatting_options<CharT>{loc};
  383|   143k|#endif
  384|       |
  385|   143k|        SCN_TRY(
  ------------------
  |  |   71|   143k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   143k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   143k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 14.4k, False: 128k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  14.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  14.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  14.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  14.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  14.4k|    }                                                  \
  |  |  |  |   70|   143k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   128k|            parse_digits_result,
  387|   128k|            parse_integer_digits_with_thsep(
  388|   128k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   128k|                prefix_result.parsed_base, locale_options));
  390|   128k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   128k|            parse_digits_result;
  392|       |
  393|   128k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 380, False: 128k]
  ------------------
  394|    380|            if (auto e = check_thsep_grouping(
  395|    380|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    380|                    thsep_indices, locale_options.grouping);
  397|    380|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    380|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 378, False: 2]
  |  |  ------------------
  ------------------
  398|    378|                return unexpected(e);
  399|    378|            }
  400|    380|        }
  401|       |
  402|   128k|        auto nothsep_source_view =
  403|   128k|            std::basic_string_view<CharT>{nothsep_source};
  404|   128k|        SCN_TRY(
  ------------------
  |  |   71|   128k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   128k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   128k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 140, False: 128k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    140|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    140|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    140|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    140|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    140|    }                                                  \
  |  |  |  |   70|   128k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   128k|            nothsep_source_it,
  406|   128k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|   128k|                                prefix_result.parsed_base));
  408|       |
  409|   128k|        return ranges_polyfill::batch_next(
  410|   128k|            prefix_result.iterator,
  411|   128k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|   128k|                ranges::ssize(thsep_indices));
  413|   128k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  27.1k|    {
  324|  27.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  27.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  27.1k|        return read_default_with_base(range, value, 0);
  326|  27.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  27.1k|    {
  287|  27.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  27.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  27.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 27.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  27.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  27.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  27.1k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  27.1k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  27.1k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  27.1k|                return unexpected_scan_error(
  293|  27.1k|                    scan_error::invalid_scanned_value,
  294|  27.1k|                    "Unexpected '-' sign when parsing an "
  295|  27.1k|                    "unsigned value");
  296|  27.1k|            }
  297|  27.1k|        }
  298|       |
  299|  27.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 27.1k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  27.1k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  27.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  27.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 27.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  27.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  27.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  27.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  27.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  27.1k|    }                                                  \
  |  |  |  |   70|  27.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  27.1k|                                     ranges::subrange{prefix_result.iterator,
  306|  27.1k|                                                      ranges::end(range)},
  307|  27.1k|                                     prefix_result.parsed_base));
  308|       |
  309|  27.1k|        auto buf = make_contiguous_buffer(
  310|  27.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  27.1k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  27.1k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESH_i:
  120|   886k|{
  121|   886k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|   886k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   886k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   886k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   886k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 886k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   886k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   886k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|   886k|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|   886k|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|   886k|        parse_integer_base_prefix(
  126|   886k|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|   886k|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 0, False: 886k]
  ------------------
  129|      0|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 0, False: 0]
  ------------------
  130|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 0, False: 0]
  ------------------
  131|      0|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|      0|                digits_begin_it, ranges::begin(range));
  133|      0|        }
  134|      0|        else {
  135|      0|            parsed_zero = false;
  136|      0|        }
  137|      0|    }
  138|   886k|    else {
  139|   886k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 0, False: 886k]
  ------------------
  140|   886k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 777k, False: 108k]
  ------------------
  141|   777k|            digits_begin_it = base_prefix_begin_it;
  142|   777k|        }
  143|   886k|    }
  144|       |
  145|   886k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 886k, False: 0]
  ------------------
  146|   886k|        sign = sign_type::plus_sign;
  147|   886k|    }
  148|   886k|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|   886k|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|   886k|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_i:
   87|   886k|{
   88|   886k|    switch (base) {
   89|   108k|        case 2:
  ------------------
  |  Branch (89:9): [True: 108k, False: 777k]
  ------------------
   90|       |            // allow 0b/0B
   91|   108k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|   108k|                    false};
   93|       |
   94|   108k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 108k, False: 777k]
  ------------------
   95|       |            // allow 0o/0O/0
   96|   108k|            bool zero_parsed = false;
   97|   108k|            auto it = apply_opt(
   98|   108k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|   108k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|   180k|        case 16:
  ------------------
  |  Branch (102:9): [True: 180k, False: 705k]
  ------------------
  103|       |            // allow 0x/0X
  104|   180k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|   180k|                    false};
  106|       |
  107|   379k|        case 0:
  ------------------
  |  Branch (107:9): [True: 379k, False: 506k]
  ------------------
  108|       |            // detect base
  109|   379k|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|   379k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|   108k|        default:
  ------------------
  |  Branch (111:9): [True: 108k, False: 777k]
  ------------------
  112|       |            // no base prefix allowed
  113|   108k|            return {ranges::begin(range), base, false};
  114|   886k|    }
  115|   886k|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   37|   488k|{
   38|   488k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|   488k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|   488k|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_Rb:
   52|   488k|{
   53|   488k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 0, False: 488k]
  ------------------
   54|      0|        return *r;
   55|      0|    }
   56|       |
   57|   488k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 0, False: 488k]
  ------------------
   58|      0|        zero_parsed = true;
   59|      0|        return *r;
   60|      0|    }
   61|       |
   62|   488k|    return unexpected(parse_error::error);
   63|   488k|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   44|   560k|{
   45|   560k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|   560k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   560k|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_:
   68|   379k|{
   69|   379k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 0, False: 379k]
  ------------------
   70|      0|        return {*r, 16, false};
   71|      0|    }
   72|   379k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 0, False: 379k]
  ------------------
   73|      0|        return {*r, 2, false};
   74|      0|    }
   75|   379k|    {
   76|   379k|        bool zero_parsed{false};
   77|   379k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 0, False: 379k]
  ------------------
   78|      0|            return {*r, 8, zero_parsed};
   79|      0|        }
   80|   379k|    }
   81|   379k|    return {ranges::begin(range), 10, false};
   82|   379k|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_i:
  155|   777k|{
  156|   777k|    using char_type = detail::char_t<Range>;
  157|       |
  158|   777k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|   777k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  160|   777k|            return unexpected_scan_error(
  161|   777k|                scan_error::invalid_scanned_value,
  162|   777k|                "Failed to parse integer: No digits found");
  163|   777k|        }
  164|   777k|        return ranges::end(range);
  165|   777k|    }
  166|   777k|    else {
  167|   777k|        return read_while1_code_unit(
  168|   777k|                   range, [&](char_type ch)
  169|   777k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|   777k|            .transform_error(map_parse_error_to_scan_error(
  171|   777k|                scan_error::invalid_scanned_value,
  172|   777k|                "Failed to parse integer: No digits found"));
  173|   777k|    }
  174|   777k|}
_ZZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_iENKUlwE_clEw:
  169|  1.10M|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  27.1k|    {
  324|  27.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  27.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  27.1k|        return read_default_with_base(range, value, 0);
  326|  27.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  27.1k|    {
  287|  27.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  27.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  27.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 27.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  27.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  27.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  27.1k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  27.1k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  27.1k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  27.1k|                return unexpected_scan_error(
  293|  27.1k|                    scan_error::invalid_scanned_value,
  294|  27.1k|                    "Unexpected '-' sign when parsing an "
  295|  27.1k|                    "unsigned value");
  296|  27.1k|            }
  297|  27.1k|        }
  298|       |
  299|  27.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 27.1k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  27.1k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  27.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  27.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 27.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  27.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  27.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  27.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  27.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  27.1k|    }                                                  \
  |  |  |  |   70|  27.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  27.1k|                                     ranges::subrange{prefix_result.iterator,
  306|  27.1k|                                                      ranges::end(range)},
  307|  27.1k|                                     prefix_result.parsed_base));
  308|       |
  309|  27.1k|        auto buf = make_contiguous_buffer(
  310|  27.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  27.1k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  27.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  27.1k|    {
  324|  27.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  27.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  27.1k|        return read_default_with_base(range, value, 0);
  326|  27.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  27.1k|    {
  287|  27.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  27.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  27.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 27.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  27.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  27.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  27.1k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  27.1k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  27.1k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  27.1k|                return unexpected_scan_error(
  293|  27.1k|                    scan_error::invalid_scanned_value,
  294|  27.1k|                    "Unexpected '-' sign when parsing an "
  295|  27.1k|                    "unsigned value");
  296|  27.1k|            }
  297|  27.1k|        }
  298|       |
  299|  27.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 27.1k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  27.1k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  27.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  27.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 27.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  27.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  27.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  27.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  27.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  27.1k|    }                                                  \
  |  |  |  |   70|  27.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  27.1k|                                     ranges::subrange{prefix_result.iterator,
  306|  27.1k|                                                      ranges::end(range)},
  307|  27.1k|                                     prefix_result.parsed_base));
  308|       |
  309|  27.1k|        auto buf = make_contiguous_buffer(
  310|  27.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  27.1k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  27.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  27.1k|    {
  324|  27.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  27.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  27.1k|        return read_default_with_base(range, value, 0);
  326|  27.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  27.1k|    {
  287|  27.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  27.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  27.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 27.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  27.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  27.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  27.1k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  27.1k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  27.1k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 27.1k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  27.1k|        }
  298|       |
  299|  27.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 27.1k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  27.1k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  27.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  27.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 27.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  27.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  27.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  27.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  27.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  27.1k|    }                                                  \
  |  |  |  |   70|  27.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  27.1k|                                     ranges::subrange{prefix_result.iterator,
  306|  27.1k|                                                      ranges::end(range)},
  307|  27.1k|                                     prefix_result.parsed_base));
  308|       |
  309|  27.1k|        auto buf = make_contiguous_buffer(
  310|  27.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  27.1k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  27.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  27.1k|    {
  324|  27.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  27.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  27.1k|        return read_default_with_base(range, value, 0);
  326|  27.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  27.1k|    {
  287|  27.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  27.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  27.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 27.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  27.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  27.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  27.1k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  27.1k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  27.1k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 27.1k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  27.1k|        }
  298|       |
  299|  27.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 27.1k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  27.1k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  27.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  27.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 27.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  27.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  27.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  27.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  27.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  27.1k|    }                                                  \
  |  |  |  |   70|  27.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  27.1k|                                     ranges::subrange{prefix_result.iterator,
  306|  27.1k|                                                      ranges::end(range)},
  307|  27.1k|                                     prefix_result.parsed_base));
  308|       |
  309|  27.1k|        auto buf = make_contiguous_buffer(
  310|  27.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  27.1k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  27.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  27.1k|    {
  324|  27.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  27.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  27.1k|        return read_default_with_base(range, value, 0);
  326|  27.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  27.1k|    {
  287|  27.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  27.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  27.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 27.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  27.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  27.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  27.1k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  27.1k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  27.1k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 27.1k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  27.1k|        }
  298|       |
  299|  27.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 27.1k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  27.1k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  27.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  27.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 27.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  27.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  27.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  27.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  27.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  27.1k|    }                                                  \
  |  |  |  |   70|  27.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  27.1k|                                     ranges::subrange{prefix_result.iterator,
  306|  27.1k|                                                      ranges::end(range)},
  307|  27.1k|                                     prefix_result.parsed_base));
  308|       |
  309|  27.1k|        auto buf = make_contiguous_buffer(
  310|  27.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  27.1k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  27.1k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSF_12basic_stringIT0_NSF_11char_traitsISM_EENSF_9allocatorISM_EEEENSL_IcNSN_IcEENSP_IcEEEEEEEEESI_iRKNS1_35localized_number_formatting_optionsISM_EE:
  184|   108k|{
  185|   108k|    std::basic_string<CharT> output;
  186|   108k|    std::string thsep_indices;
  187|   108k|    auto it = ranges::begin(range);
  188|   108k|    bool digit_matched = false;
  189|   108k|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 108k, False: 0]
  ------------------
  190|   108k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 0, False: 108k]
  ------------------
  191|      0|            thsep_indices.push_back(static_cast<char>(
  192|      0|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|      0|        }
  194|   108k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 108k, False: 0]
  ------------------
  195|   108k|            break;
  196|   108k|        }
  197|      0|        else {
  198|      0|            output.push_back(*it);
  199|      0|            digit_matched = true;
  200|      0|        }
  201|   108k|    }
  202|   108k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 108k, False: 0]
  |  |  ------------------
  ------------------
  203|   108k|        return unexpected_scan_error(
  204|   108k|            scan_error::invalid_scanned_value,
  205|   108k|            "Failed to parse integer: No digits found");
  206|   108k|    }
  207|      0|    return std::tuple{it, output, thsep_indices};
  208|   108k|}
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|   108k|    {
  335|   108k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   108k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   108k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   108k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 108k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   108k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   108k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   108k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 108k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|   108k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 108k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|   108k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   108k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 90.4k, False: 18.0k]
  |  |  ------------------
  ------------------
  361|  90.4k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  90.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  90.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  90.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  90.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 72.3k, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  72.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  72.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  72.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  72.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  72.3k|    }                                                  \
  |  |  |  |   70|  90.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  18.0k|                    parse_integer_digits_without_thsep(
  363|  18.0k|                        ranges::subrange{prefix_result.iterator,
  364|  18.0k|                                         ranges::end(range)},
  365|  18.0k|                        prefix_result.parsed_base));
  366|       |
  367|  18.0k|            auto buf = make_contiguous_buffer(
  368|  18.0k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  18.0k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 18.0k, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  18.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  18.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  18.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  18.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  18.0k|    }                                                  \
  |  |  |  |   70|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      2|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      2|                                        prefix_result.parsed_base));
  372|       |
  373|      2|            return ranges_polyfill::batch_next(
  374|      2|                prefix_result.iterator,
  375|      2|                ranges::distance(buf.view().begin(), result_it));
  376|  18.0k|        }
  377|       |
  378|  18.0k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  18.0k|            localized_number_formatting_options<CharT>{loc};
  383|  18.0k|#endif
  384|       |
  385|  18.0k|        SCN_TRY(
  ------------------
  |  |   71|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 18.0k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  18.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  18.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  18.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  18.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  18.0k|    }                                                  \
  |  |  |  |   70|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|   126k|    {
  335|   126k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   126k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   126k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   126k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 126k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   126k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   126k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   126k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 126k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|   126k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 126k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|   126k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   126k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 108k, False: 18.0k]
  |  |  ------------------
  ------------------
  361|   108k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   108k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   108k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   108k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 90.4k, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  90.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  90.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  90.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  90.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  90.4k|    }                                                  \
  |  |  |  |   70|   108k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  18.0k|                    parse_integer_digits_without_thsep(
  363|  18.0k|                        ranges::subrange{prefix_result.iterator,
  364|  18.0k|                                         ranges::end(range)},
  365|  18.0k|                        prefix_result.parsed_base));
  366|       |
  367|  18.0k|            auto buf = make_contiguous_buffer(
  368|  18.0k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  18.0k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  18.0k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  18.0k|                                        prefix_result.parsed_base));
  372|       |
  373|  18.0k|            return ranges_polyfill::batch_next(
  374|  18.0k|                prefix_result.iterator,
  375|  18.0k|                ranges::distance(buf.view().begin(), result_it));
  376|  18.0k|        }
  377|       |
  378|  18.0k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  18.0k|            localized_number_formatting_options<CharT>{loc};
  383|  18.0k|#endif
  384|       |
  385|  18.0k|        SCN_TRY(
  ------------------
  |  |   71|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 18.0k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  18.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  18.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  18.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  18.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  18.0k|    }                                                  \
  |  |  |  |   70|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|   126k|    {
  335|   126k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   126k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   126k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   126k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 126k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   126k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   126k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   126k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 126k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|   126k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 126k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|   126k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   126k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 108k, False: 18.0k]
  |  |  ------------------
  ------------------
  361|   108k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   108k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   108k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   108k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 90.4k, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  90.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  90.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  90.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  90.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  90.4k|    }                                                  \
  |  |  |  |   70|   108k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  18.0k|                    parse_integer_digits_without_thsep(
  363|  18.0k|                        ranges::subrange{prefix_result.iterator,
  364|  18.0k|                                         ranges::end(range)},
  365|  18.0k|                        prefix_result.parsed_base));
  366|       |
  367|  18.0k|            auto buf = make_contiguous_buffer(
  368|  18.0k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  18.0k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  18.0k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  18.0k|                                        prefix_result.parsed_base));
  372|       |
  373|  18.0k|            return ranges_polyfill::batch_next(
  374|  18.0k|                prefix_result.iterator,
  375|  18.0k|                ranges::distance(buf.view().begin(), result_it));
  376|  18.0k|        }
  377|       |
  378|  18.0k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  18.0k|            localized_number_formatting_options<CharT>{loc};
  383|  18.0k|#endif
  384|       |
  385|  18.0k|        SCN_TRY(
  ------------------
  |  |   71|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 18.0k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  18.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  18.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  18.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  18.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  18.0k|    }                                                  \
  |  |  |  |   70|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|   108k|    {
  335|   108k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   108k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   108k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   108k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 108k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   108k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   108k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   108k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 108k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|   108k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 108k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|   108k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   108k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 90.4k, False: 18.0k]
  |  |  ------------------
  ------------------
  361|  90.4k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  90.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  90.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  90.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  90.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 72.3k, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  72.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  72.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  72.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  72.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  72.3k|    }                                                  \
  |  |  |  |   70|  90.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  18.0k|                    parse_integer_digits_without_thsep(
  363|  18.0k|                        ranges::subrange{prefix_result.iterator,
  364|  18.0k|                                         ranges::end(range)},
  365|  18.0k|                        prefix_result.parsed_base));
  366|       |
  367|  18.0k|            auto buf = make_contiguous_buffer(
  368|  18.0k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  18.0k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 18.0k, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  18.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  18.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  18.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  18.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  18.0k|    }                                                  \
  |  |  |  |   70|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      4|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      4|                                        prefix_result.parsed_base));
  372|       |
  373|      4|            return ranges_polyfill::batch_next(
  374|      4|                prefix_result.iterator,
  375|      4|                ranges::distance(buf.view().begin(), result_it));
  376|  18.0k|        }
  377|       |
  378|  18.0k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  18.0k|            localized_number_formatting_options<CharT>{loc};
  383|  18.0k|#endif
  384|       |
  385|  18.0k|        SCN_TRY(
  ------------------
  |  |   71|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 18.0k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  18.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  18.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  18.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  18.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  18.0k|    }                                                  \
  |  |  |  |   70|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|   126k|    {
  335|   126k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   126k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   126k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   126k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 126k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   126k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   126k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   126k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 126k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|   126k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 126k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|   126k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   126k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 108k, False: 18.0k]
  |  |  ------------------
  ------------------
  361|   108k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   108k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   108k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   108k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 90.4k, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  90.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  90.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  90.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  90.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  90.4k|    }                                                  \
  |  |  |  |   70|   108k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  18.0k|                    parse_integer_digits_without_thsep(
  363|  18.0k|                        ranges::subrange{prefix_result.iterator,
  364|  18.0k|                                         ranges::end(range)},
  365|  18.0k|                        prefix_result.parsed_base));
  366|       |
  367|  18.0k|            auto buf = make_contiguous_buffer(
  368|  18.0k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  18.0k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  18.0k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  18.0k|                                        prefix_result.parsed_base));
  372|       |
  373|  18.0k|            return ranges_polyfill::batch_next(
  374|  18.0k|                prefix_result.iterator,
  375|  18.0k|                ranges::distance(buf.view().begin(), result_it));
  376|  18.0k|        }
  377|       |
  378|  18.0k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  18.0k|            localized_number_formatting_options<CharT>{loc};
  383|  18.0k|#endif
  384|       |
  385|  18.0k|        SCN_TRY(
  ------------------
  |  |   71|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 18.0k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  18.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  18.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  18.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  18.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  18.0k|    }                                                  \
  |  |  |  |   70|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|   126k|    {
  335|   126k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   126k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   126k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   126k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 126k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   126k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   126k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   126k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 126k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|   126k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 126k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|   126k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   126k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 108k, False: 18.0k]
  |  |  ------------------
  ------------------
  361|   108k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   108k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   108k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   108k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 90.4k, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  90.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  90.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  90.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  90.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  90.4k|    }                                                  \
  |  |  |  |   70|   108k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  18.0k|                    parse_integer_digits_without_thsep(
  363|  18.0k|                        ranges::subrange{prefix_result.iterator,
  364|  18.0k|                                         ranges::end(range)},
  365|  18.0k|                        prefix_result.parsed_base));
  366|       |
  367|  18.0k|            auto buf = make_contiguous_buffer(
  368|  18.0k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  18.0k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  18.0k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  18.0k|                                        prefix_result.parsed_base));
  372|       |
  373|  18.0k|            return ranges_polyfill::batch_next(
  374|  18.0k|                prefix_result.iterator,
  375|  18.0k|                ranges::distance(buf.view().begin(), result_it));
  376|  18.0k|        }
  377|       |
  378|  18.0k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  18.0k|            localized_number_formatting_options<CharT>{loc};
  383|  18.0k|#endif
  384|       |
  385|  18.0k|        SCN_TRY(
  ------------------
  |  |   71|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 18.0k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  18.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  18.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  18.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  18.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  18.0k|    }                                                  \
  |  |  |  |   70|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }

_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  8.51M|{
   69|  8.51M|    auto r = read_one_of_code_unit(range, "+-");
   70|  8.51M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 8.05M, False: 463k]
  ------------------
   71|  8.05M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 8.05M, False: 0]
  ------------------
   72|  8.05M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  8.05M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  8.05M|    }
   76|       |
   77|   463k|    auto& it = *r;
   78|   463k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 349k, False: 113k]
  ------------------
   79|   349k|        return std::pair{it, sign_type::minus_sign};
   80|   349k|    }
   81|   113k|    return std::pair{it, sign_type::plus_sign};
   82|   463k|}
_ZN3scn2v24impl11char_to_intEc:
   50|  64.7M|{
   51|  64.7M|    return char_to_int_table[static_cast<unsigned char>(ch)];
   52|  64.7M|}
_ZN3scn2v24impl20check_thsep_groupingIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEELPv0EEENS0_10scan_errorEOT_NSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEENSF_17basic_string_viewIcSI_EE:
  139|  2.38k|{
  140|  2.38k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  242|  2.38k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.38k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  141|       |
  142|  2.38k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (142:9): [True: 2.36k, False: 20]
  ------------------
  143|  2.36k|        SCN_UNLIKELY_ATTR
  144|  2.36k|        return {scan_error::invalid_scanned_value,
  145|  2.36k|                "Invalid thousands separator grouping"};
  146|  2.36k|    }
  147|       |
  148|     20|    return {};
  149|  2.38k|}
_ZN3scn2v24impl25check_thsep_grouping_implIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
  100|  2.38k|{
  101|  2.38k|    transform_thsep_indices(
  102|  2.38k|        thsep_indices,
  103|  2.38k|        ranges::distance(ranges::begin(range), ranges::end(range)));
  104|       |
  105|  2.38k|    auto thsep_it = thsep_indices.rbegin();
  106|  2.38k|    for (auto grouping_it = grouping.begin();
  107|  2.38k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (107:10): [True: 0, False: 2.38k]
  |  Branch (107:10): [True: 0, False: 2.38k]
  |  Branch (107:43): [True: 0, False: 0]
  ------------------
  108|  2.38k|         ++grouping_it, (void)++thsep_it) {
  109|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (109:13): [True: 0, False: 0]
  ------------------
  110|      0|            return false;
  111|      0|        }
  112|      0|    }
  113|       |
  114|  2.38k|    SCN_CLANG_PUSH
  115|       |    // false positive
  116|  2.38k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
  117|       |
  118|  12.5k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (118:12): [True: 11.1k, False: 1.34k]
  ------------------
  119|  11.1k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (119:13): [True: 1.03k, False: 10.1k]
  ------------------
  120|  1.03k|            return false;
  121|  1.03k|        }
  122|  11.1k|    }
  123|       |
  124|  1.34k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (124:9): [True: 1.34k, False: 0]
  ------------------
  125|  1.34k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (125:13): [True: 1.32k, False: 20]
  ------------------
  126|  1.32k|            return false;
  127|  1.32k|        }
  128|  1.34k|    }
  129|       |
  130|     20|    SCN_CLANG_POP
  131|       |
  132|     20|    return true;
  133|  1.34k|}
_ZN3scn2v24impl23transform_thsep_indicesERNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEl:
   86|  4.92k|{
   87|  50.8k|    for (auto thsep_it = indices.rbegin(); thsep_it != indices.rend();
  ------------------
  |  Branch (87:44): [True: 45.9k, False: 4.92k]
  ------------------
   88|  45.9k|         ++thsep_it) {
   89|  45.9k|        const auto tmp = *thsep_it;
   90|  45.9k|        *thsep_it = static_cast<char>(last_thsep_index - tmp - 1);
   91|  45.9k|        last_thsep_index = static_cast<std::ptrdiff_t>(tmp);
   92|  45.9k|    }
   93|  4.92k|    indices.insert(indices.begin(), static_cast<char>(last_thsep_index));
   94|  4.92k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|   307k|{
   69|   307k|    auto r = read_one_of_code_unit(range, "+-");
   70|   307k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 307k, False: 0]
  ------------------
   71|   307k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 307k, False: 0]
  ------------------
   72|   307k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|   307k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|   307k|    }
   76|       |
   77|      0|    auto& it = *r;
   78|      0|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 0]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|      0|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  7.56M|{
   69|  7.56M|    auto r = read_one_of_code_unit(range, "+-");
   70|  7.56M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 7.18M, False: 374k]
  ------------------
   71|  7.18M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 7.18M, False: 0]
  ------------------
   72|  7.18M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  7.18M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  7.18M|    }
   76|       |
   77|   374k|    auto& it = *r;
   78|   374k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 284k, False: 89.5k]
  ------------------
   79|   284k|        return std::pair{it, sign_type::minus_sign};
   80|   284k|    }
   81|  89.5k|    return std::pair{it, sign_type::plus_sign};
   82|   374k|}
_ZN3scn2v24impl11char_to_intEw:
   54|  31.6M|{
   55|  31.6M|#if WCHAR_MIN < 0
   56|  31.6M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (56:9): [True: 31.5M, False: 46.3k]
  |  Branch (56:20): [True: 30.4M, False: 1.09M]
  ------------------
   57|       |#else
   58|       |    if (ch <= 255) {
   59|       |#endif
   60|  30.4M|        return char_to_int(static_cast<char>(ch));
   61|  30.4M|    }
   62|  1.14M|    return 255;
   63|  31.6M|}
_ZN3scn2v24impl20check_thsep_groupingIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEELPv0EEENS0_10scan_errorEOT_NSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEENSF_17basic_string_viewIcSI_EE:
  139|  2.53k|{
  140|  2.53k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  242|  2.53k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.53k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  141|       |
  142|  2.53k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (142:9): [True: 2.51k, False: 20]
  ------------------
  143|  2.51k|        SCN_UNLIKELY_ATTR
  144|  2.51k|        return {scan_error::invalid_scanned_value,
  145|  2.51k|                "Invalid thousands separator grouping"};
  146|  2.51k|    }
  147|       |
  148|     20|    return {};
  149|  2.53k|}
_ZN3scn2v24impl25check_thsep_grouping_implIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
  100|  2.53k|{
  101|  2.53k|    transform_thsep_indices(
  102|  2.53k|        thsep_indices,
  103|  2.53k|        ranges::distance(ranges::begin(range), ranges::end(range)));
  104|       |
  105|  2.53k|    auto thsep_it = thsep_indices.rbegin();
  106|  2.53k|    for (auto grouping_it = grouping.begin();
  107|  2.53k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (107:10): [True: 0, False: 2.53k]
  |  Branch (107:10): [True: 0, False: 2.53k]
  |  Branch (107:43): [True: 0, False: 0]
  ------------------
  108|  2.53k|         ++grouping_it, (void)++thsep_it) {
  109|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (109:13): [True: 0, False: 0]
  ------------------
  110|      0|            return false;
  111|      0|        }
  112|      0|    }
  113|       |
  114|  2.53k|    SCN_CLANG_PUSH
  115|       |    // false positive
  116|  2.53k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
  117|       |
  118|  15.4k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (118:12): [True: 13.8k, False: 1.62k]
  ------------------
  119|  13.8k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (119:13): [True: 912, False: 12.9k]
  ------------------
  120|    912|            return false;
  121|    912|        }
  122|  13.8k|    }
  123|       |
  124|  1.62k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (124:9): [True: 1.62k, False: 0]
  ------------------
  125|  1.62k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (125:13): [True: 1.60k, False: 20]
  ------------------
  126|  1.60k|            return false;
  127|  1.60k|        }
  128|  1.62k|    }
  129|       |
  130|     20|    SCN_CLANG_POP
  131|       |
  132|     20|    return true;
  133|  1.62k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|   886k|{
   69|   886k|    auto r = read_one_of_code_unit(range, "+-");
   70|   886k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 886k, False: 0]
  ------------------
   71|   886k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 886k, False: 0]
  ------------------
   72|   886k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|   886k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|   886k|    }
   76|       |
   77|      0|    auto& it = *r;
   78|      0|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 0]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|      0|}

_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
  121|   349k|    {
  122|   349k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   349k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   349k|                          basic_contiguous_scan_context<char_type>>) {
  126|   349k|            auto rd = make_reader<T, char_type>();
  127|   349k|            return impl(rd, range, value);
  128|   349k|        }
  129|   349k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   349k|            auto rd = make_reader<T, char_type>();
  131|   349k|            if (!is_segment_contiguous(range)) {
  132|   349k|                return impl(rd, range, value);
  133|   349k|            }
  134|   349k|            auto crange = get_as_contiguous(range);
  135|   349k|            SCN_TRY(it, impl(rd, crange, value));
  136|   349k|            return ranges_polyfill::batch_next(
  137|   349k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   349k|        }
  139|   349k|        else {
  140|   349k|            SCN_EXPECT(false);
  141|   349k|            SCN_UNREACHABLE;
  142|   349k|        }
  143|   349k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   349k|    {
  112|   349k|        SCN_TRY(it,
  ------------------
  |  |   71|   349k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   349k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   349k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   349k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.12k, False: 348k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.12k|    }                                                  \
  |  |  |  |   70|   349k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   348k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   348k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   348k|                    .transform_error(make_eof_scan_error));
  115|   348k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   348k|                               loc);
  117|   349k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  8.55M|{
   43|  8.55M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  8.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 29.0k, False: 8.52M]
  |  |  ------------------
  ------------------
   44|  29.0k|        return unexpected(e);
   45|  29.0k|    }
   46|       |
   47|  8.52M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 8.52M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  8.52M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  8.52M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  8.52M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
  121|   482k|    {
  122|   482k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   482k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   482k|                          basic_contiguous_scan_context<char_type>>) {
  126|   482k|            auto rd = make_reader<T, char_type>();
  127|   482k|            return impl(rd, range, value);
  128|   482k|        }
  129|   482k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   482k|            auto rd = make_reader<T, char_type>();
  131|   482k|            if (!is_segment_contiguous(range)) {
  132|   482k|                return impl(rd, range, value);
  133|   482k|            }
  134|   482k|            auto crange = get_as_contiguous(range);
  135|   482k|            SCN_TRY(it, impl(rd, crange, value));
  136|   482k|            return ranges_polyfill::batch_next(
  137|   482k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   482k|        }
  139|   482k|        else {
  140|   482k|            SCN_EXPECT(false);
  141|   482k|            SCN_UNREACHABLE;
  142|   482k|        }
  143|   482k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   482k|    {
  112|   482k|        SCN_TRY(it,
  ------------------
  |  |   71|   482k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   482k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   482k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   482k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.08k, False: 480k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.08k|    }                                                  \
  |  |  |  |   70|   482k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   480k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   480k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   480k|                    .transform_error(make_eof_scan_error));
  115|   480k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   480k|                               loc);
  117|   482k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
  121|   498k|    {
  122|   498k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   498k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   498k|                          basic_contiguous_scan_context<char_type>>) {
  126|   498k|            auto rd = make_reader<T, char_type>();
  127|   498k|            return impl(rd, range, value);
  128|   498k|        }
  129|   498k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   498k|            auto rd = make_reader<T, char_type>();
  131|   498k|            if (!is_segment_contiguous(range)) {
  132|   498k|                return impl(rd, range, value);
  133|   498k|            }
  134|   498k|            auto crange = get_as_contiguous(range);
  135|   498k|            SCN_TRY(it, impl(rd, crange, value));
  136|   498k|            return ranges_polyfill::batch_next(
  137|   498k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   498k|        }
  139|   498k|        else {
  140|   498k|            SCN_EXPECT(false);
  141|   498k|            SCN_UNREACHABLE;
  142|   498k|        }
  143|   498k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   498k|    {
  112|   498k|        SCN_TRY(it,
  ------------------
  |  |   71|   498k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   498k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   498k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   498k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.26k, False: 496k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.26k|    }                                                  \
  |  |  |  |   70|   498k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   496k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   496k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   496k|                    .transform_error(make_eof_scan_error));
  115|   496k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   496k|                               loc);
  117|   498k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
  121|   340k|    {
  122|   340k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   340k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   340k|                          basic_contiguous_scan_context<char_type>>) {
  126|   340k|            auto rd = make_reader<T, char_type>();
  127|   340k|            return impl(rd, range, value);
  128|   340k|        }
  129|   340k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   340k|            auto rd = make_reader<T, char_type>();
  131|   340k|            if (!is_segment_contiguous(range)) {
  132|   340k|                return impl(rd, range, value);
  133|   340k|            }
  134|   340k|            auto crange = get_as_contiguous(range);
  135|   340k|            SCN_TRY(it, impl(rd, crange, value));
  136|   340k|            return ranges_polyfill::batch_next(
  137|   340k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   340k|        }
  139|   340k|        else {
  140|   340k|            SCN_EXPECT(false);
  141|   340k|            SCN_UNREACHABLE;
  142|   340k|        }
  143|   340k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   340k|    {
  112|   340k|        SCN_TRY(it,
  ------------------
  |  |   71|   340k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   340k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   340k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   340k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 915, False: 339k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    915|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    915|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    915|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    915|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    915|    }                                                  \
  |  |  |  |   70|   340k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   339k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   339k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   339k|                    .transform_error(make_eof_scan_error));
  115|   339k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   339k|                               loc);
  117|   340k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
  121|   405k|    {
  122|   405k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   405k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   405k|                          basic_contiguous_scan_context<char_type>>) {
  126|   405k|            auto rd = make_reader<T, char_type>();
  127|   405k|            return impl(rd, range, value);
  128|   405k|        }
  129|   405k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   405k|            auto rd = make_reader<T, char_type>();
  131|   405k|            if (!is_segment_contiguous(range)) {
  132|   405k|                return impl(rd, range, value);
  133|   405k|            }
  134|   405k|            auto crange = get_as_contiguous(range);
  135|   405k|            SCN_TRY(it, impl(rd, crange, value));
  136|   405k|            return ranges_polyfill::batch_next(
  137|   405k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   405k|        }
  139|   405k|        else {
  140|   405k|            SCN_EXPECT(false);
  141|   405k|            SCN_UNREACHABLE;
  142|   405k|        }
  143|   405k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   405k|    {
  112|   405k|        SCN_TRY(it,
  ------------------
  |  |   71|   405k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   405k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   405k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   405k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.44k, False: 403k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.44k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.44k|    }                                                  \
  |  |  |  |   70|   405k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   403k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   403k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   403k|                    .transform_error(make_eof_scan_error));
  115|   403k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   403k|                               loc);
  117|   405k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
  121|   413k|    {
  122|   413k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   413k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   413k|                          basic_contiguous_scan_context<char_type>>) {
  126|   413k|            auto rd = make_reader<T, char_type>();
  127|   413k|            return impl(rd, range, value);
  128|   413k|        }
  129|   413k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   413k|            auto rd = make_reader<T, char_type>();
  131|   413k|            if (!is_segment_contiguous(range)) {
  132|   413k|                return impl(rd, range, value);
  133|   413k|            }
  134|   413k|            auto crange = get_as_contiguous(range);
  135|   413k|            SCN_TRY(it, impl(rd, crange, value));
  136|   413k|            return ranges_polyfill::batch_next(
  137|   413k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   413k|        }
  139|   413k|        else {
  140|   413k|            SCN_EXPECT(false);
  141|   413k|            SCN_UNREACHABLE;
  142|   413k|        }
  143|   413k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   413k|    {
  112|   413k|        SCN_TRY(it,
  ------------------
  |  |   71|   413k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   413k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   413k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   413k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.55k, False: 412k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.55k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.55k|    }                                                  \
  |  |  |  |   70|   413k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   412k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   412k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   412k|                    .transform_error(make_eof_scan_error));
  115|   412k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   412k|                               loc);
  117|   413k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  9.04k|    {
  122|  9.04k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  9.04k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  9.04k|            auto rd = make_reader<T, char_type>();
  127|  9.04k|            return impl(rd, range, value);
  128|  9.04k|        }
  129|  9.04k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  9.04k|            auto rd = make_reader<T, char_type>();
  131|  9.04k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 9.04k, False: 0]
  ------------------
  132|  9.04k|                return impl(rd, range, value);
  133|  9.04k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  9.04k|        else {
  140|  9.04k|            SCN_EXPECT(false);
  141|  9.04k|            SCN_UNREACHABLE;
  142|  9.04k|        }
  143|  9.04k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  9.04k|    {
  112|  9.04k|        SCN_TRY(it,
  ------------------
  |  |   71|  9.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  9.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  9.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  9.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 9.04k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  9.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  9.04k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  9.04k|                    .transform_error(make_eof_scan_error));
  115|  9.04k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  9.04k|                               loc);
  117|  9.04k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|   307k|{
   43|   307k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 12, False: 307k]
  |  |  ------------------
  ------------------
   44|     12|        return unexpected(e);
   45|     12|    }
   46|       |
   47|   307k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 307k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|   307k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|   307k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   307k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  9.04k|    {
  122|  9.04k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  9.04k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  9.04k|            auto rd = make_reader<T, char_type>();
  127|  9.04k|            return impl(rd, range, value);
  128|  9.04k|        }
  129|  9.04k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  9.04k|            auto rd = make_reader<T, char_type>();
  131|  9.04k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 9.04k, False: 0]
  ------------------
  132|  9.04k|                return impl(rd, range, value);
  133|  9.04k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  9.04k|        else {
  140|  9.04k|            SCN_EXPECT(false);
  141|  9.04k|            SCN_UNREACHABLE;
  142|  9.04k|        }
  143|  9.04k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  9.04k|    {
  112|  9.04k|        SCN_TRY(it,
  ------------------
  |  |   71|  9.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  9.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  9.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  9.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 9.04k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  9.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  9.04k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  9.04k|                    .transform_error(make_eof_scan_error));
  115|  9.04k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  9.04k|                               loc);
  117|  9.04k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  9.04k|    {
  122|  9.04k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  9.04k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  9.04k|            auto rd = make_reader<T, char_type>();
  127|  9.04k|            return impl(rd, range, value);
  128|  9.04k|        }
  129|  9.04k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  9.04k|            auto rd = make_reader<T, char_type>();
  131|  9.04k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 9.04k, False: 0]
  ------------------
  132|  9.04k|                return impl(rd, range, value);
  133|  9.04k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  9.04k|        else {
  140|  9.04k|            SCN_EXPECT(false);
  141|  9.04k|            SCN_UNREACHABLE;
  142|  9.04k|        }
  143|  9.04k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  9.04k|    {
  112|  9.04k|        SCN_TRY(it,
  ------------------
  |  |   71|  9.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  9.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  9.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  9.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 9.04k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  9.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  9.04k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  9.04k|                    .transform_error(make_eof_scan_error));
  115|  9.04k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  9.04k|                               loc);
  117|  9.04k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  9.04k|    {
  122|  9.04k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  9.04k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  9.04k|            auto rd = make_reader<T, char_type>();
  127|  9.04k|            return impl(rd, range, value);
  128|  9.04k|        }
  129|  9.04k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  9.04k|            auto rd = make_reader<T, char_type>();
  131|  9.04k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 9.04k, False: 0]
  ------------------
  132|  9.04k|                return impl(rd, range, value);
  133|  9.04k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  9.04k|        else {
  140|  9.04k|            SCN_EXPECT(false);
  141|  9.04k|            SCN_UNREACHABLE;
  142|  9.04k|        }
  143|  9.04k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  9.04k|    {
  112|  9.04k|        SCN_TRY(it,
  ------------------
  |  |   71|  9.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  9.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  9.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  9.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 9.04k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  9.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  9.04k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  9.04k|                    .transform_error(make_eof_scan_error));
  115|  9.04k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  9.04k|                               loc);
  117|  9.04k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  9.04k|    {
  122|  9.04k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  9.04k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  9.04k|            auto rd = make_reader<T, char_type>();
  127|  9.04k|            return impl(rd, range, value);
  128|  9.04k|        }
  129|  9.04k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  9.04k|            auto rd = make_reader<T, char_type>();
  131|  9.04k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 9.04k, False: 0]
  ------------------
  132|  9.04k|                return impl(rd, range, value);
  133|  9.04k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  9.04k|        else {
  140|  9.04k|            SCN_EXPECT(false);
  141|  9.04k|            SCN_UNREACHABLE;
  142|  9.04k|        }
  143|  9.04k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  9.04k|    {
  112|  9.04k|        SCN_TRY(it,
  ------------------
  |  |   71|  9.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  9.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  9.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  9.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 9.04k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  9.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  9.04k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  9.04k|                    .transform_error(make_eof_scan_error));
  115|  9.04k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  9.04k|                               loc);
  117|  9.04k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  9.04k|    {
  122|  9.04k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  9.04k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  9.04k|            auto rd = make_reader<T, char_type>();
  127|  9.04k|            return impl(rd, range, value);
  128|  9.04k|        }
  129|  9.04k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  9.04k|            auto rd = make_reader<T, char_type>();
  131|  9.04k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 9.04k, False: 0]
  ------------------
  132|  9.04k|                return impl(rd, range, value);
  133|  9.04k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  9.04k|        else {
  140|  9.04k|            SCN_EXPECT(false);
  141|  9.04k|            SCN_UNREACHABLE;
  142|  9.04k|        }
  143|  9.04k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  9.04k|    {
  112|  9.04k|        SCN_TRY(it,
  ------------------
  |  |   71|  9.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  9.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  9.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  9.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 9.04k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  9.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  9.04k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  9.04k|                    .transform_error(make_eof_scan_error));
  115|  9.04k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  9.04k|                               loc);
  117|  9.04k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
  222|   758k|    {
  223|   758k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   758k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   758k|                          basic_contiguous_scan_context<char_type>>) {
  227|   758k|            auto rd = make_reader<T, char_type>();
  228|   758k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   758k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 758k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   758k|            return impl(rd, range, value);
  233|   758k|        }
  234|   758k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   758k|            auto rd = make_reader<T, char_type>();
  236|   758k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   758k|                return unexpected(e);
  238|   758k|            }
  239|       |
  240|   758k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   758k|                return impl(rd, range, value);
  242|   758k|            }
  243|       |
  244|   758k|            auto crange = get_as_contiguous(range);
  245|   758k|            SCN_TRY(it, impl(rd, crange, value));
  246|   758k|            return ranges_polyfill::batch_next(
  247|   758k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   758k|        }
  249|   758k|        else {
  250|   758k|            SCN_EXPECT(false);
  251|   758k|            SCN_UNREACHABLE;
  252|   758k|        }
  253|   758k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   758k|    {
  205|   758k|        SCN_TRY(it,
  ------------------
  |  |   71|   758k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   758k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   758k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   758k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.95k, False: 755k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.95k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.95k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.95k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.95k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.95k|    }                                                  \
  |  |  |  |   70|   758k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   755k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   755k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   755k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   755k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   755k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 755k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   755k|        return rd.read_specs(subr, specs, value, loc);
  218|   755k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
  222|  1.21M|    {
  223|  1.21M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  1.21M|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  1.21M|                          basic_contiguous_scan_context<char_type>>) {
  227|  1.21M|            auto rd = make_reader<T, char_type>();
  228|  1.21M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.21M]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|  1.21M|            return impl(rd, range, value);
  233|  1.21M|        }
  234|  1.21M|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  1.21M|            auto rd = make_reader<T, char_type>();
  236|  1.21M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  1.21M|                return unexpected(e);
  238|  1.21M|            }
  239|       |
  240|  1.21M|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  1.21M|                return impl(rd, range, value);
  242|  1.21M|            }
  243|       |
  244|  1.21M|            auto crange = get_as_contiguous(range);
  245|  1.21M|            SCN_TRY(it, impl(rd, crange, value));
  246|  1.21M|            return ranges_polyfill::batch_next(
  247|  1.21M|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  1.21M|        }
  249|  1.21M|        else {
  250|  1.21M|            SCN_EXPECT(false);
  251|  1.21M|            SCN_UNREACHABLE;
  252|  1.21M|        }
  253|  1.21M|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|  1.21M|    {
  205|  1.21M|        SCN_TRY(it,
  ------------------
  |  |   71|  1.21M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.21M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.21M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.87k, False: 1.21M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.87k|    }                                                  \
  |  |  |  |   70|  1.21M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  1.21M|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  1.21M|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  1.21M|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  1.21M|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 1.21M]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  1.21M|        return rd.read_specs(subr, specs, value, loc);
  218|  1.21M|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
  222|  1.26M|    {
  223|  1.26M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  1.26M|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  1.26M|                          basic_contiguous_scan_context<char_type>>) {
  227|  1.26M|            auto rd = make_reader<T, char_type>();
  228|  1.26M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.26M]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|  1.26M|            return impl(rd, range, value);
  233|  1.26M|        }
  234|  1.26M|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  1.26M|            auto rd = make_reader<T, char_type>();
  236|  1.26M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  1.26M|                return unexpected(e);
  238|  1.26M|            }
  239|       |
  240|  1.26M|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  1.26M|                return impl(rd, range, value);
  242|  1.26M|            }
  243|       |
  244|  1.26M|            auto crange = get_as_contiguous(range);
  245|  1.26M|            SCN_TRY(it, impl(rd, crange, value));
  246|  1.26M|            return ranges_polyfill::batch_next(
  247|  1.26M|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  1.26M|        }
  249|  1.26M|        else {
  250|  1.26M|            SCN_EXPECT(false);
  251|  1.26M|            SCN_UNREACHABLE;
  252|  1.26M|        }
  253|  1.26M|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|  1.26M|    {
  205|  1.26M|        SCN_TRY(it,
  ------------------
  |  |   71|  1.26M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.26M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.26M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.37k, False: 1.25M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.37k|    }                                                  \
  |  |  |  |   70|  1.26M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  1.25M|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  1.25M|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  1.25M|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  1.25M|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 1.25M]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  1.25M|        return rd.read_specs(subr, specs, value, loc);
  218|  1.25M|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
  222|   792k|    {
  223|   792k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   792k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   792k|                          basic_contiguous_scan_context<char_type>>) {
  227|   792k|            auto rd = make_reader<T, char_type>();
  228|   792k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   792k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 792k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   792k|            return impl(rd, range, value);
  233|   792k|        }
  234|   792k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   792k|            auto rd = make_reader<T, char_type>();
  236|   792k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   792k|                return unexpected(e);
  238|   792k|            }
  239|       |
  240|   792k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   792k|                return impl(rd, range, value);
  242|   792k|            }
  243|       |
  244|   792k|            auto crange = get_as_contiguous(range);
  245|   792k|            SCN_TRY(it, impl(rd, crange, value));
  246|   792k|            return ranges_polyfill::batch_next(
  247|   792k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   792k|        }
  249|   792k|        else {
  250|   792k|            SCN_EXPECT(false);
  251|   792k|            SCN_UNREACHABLE;
  252|   792k|        }
  253|   792k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   792k|    {
  205|   792k|        SCN_TRY(it,
  ------------------
  |  |   71|   792k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   792k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   792k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   792k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.52k, False: 789k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.52k|    }                                                  \
  |  |  |  |   70|   792k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   789k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   789k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   789k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   789k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   789k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 789k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   789k|        return rd.read_specs(subr, specs, value, loc);
  218|   789k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
  222|  1.00M|    {
  223|  1.00M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  1.00M|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  1.00M|                          basic_contiguous_scan_context<char_type>>) {
  227|  1.00M|            auto rd = make_reader<T, char_type>();
  228|  1.00M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.00M]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|  1.00M|            return impl(rd, range, value);
  233|  1.00M|        }
  234|  1.00M|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  1.00M|            auto rd = make_reader<T, char_type>();
  236|  1.00M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  1.00M|                return unexpected(e);
  238|  1.00M|            }
  239|       |
  240|  1.00M|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  1.00M|                return impl(rd, range, value);
  242|  1.00M|            }
  243|       |
  244|  1.00M|            auto crange = get_as_contiguous(range);
  245|  1.00M|            SCN_TRY(it, impl(rd, crange, value));
  246|  1.00M|            return ranges_polyfill::batch_next(
  247|  1.00M|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  1.00M|        }
  249|  1.00M|        else {
  250|  1.00M|            SCN_EXPECT(false);
  251|  1.00M|            SCN_UNREACHABLE;
  252|  1.00M|        }
  253|  1.00M|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|  1.00M|    {
  205|  1.00M|        SCN_TRY(it,
  ------------------
  |  |   71|  1.00M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.00M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.00M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.12k, False: 1.00M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.12k|    }                                                  \
  |  |  |  |   70|  1.00M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  1.00M|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  1.00M|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  1.00M|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  1.00M|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 1.00M]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  1.00M|        return rd.read_specs(subr, specs, value, loc);
  218|  1.00M|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
  222|  1.02M|    {
  223|  1.02M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  1.02M|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  1.02M|                          basic_contiguous_scan_context<char_type>>) {
  227|  1.02M|            auto rd = make_reader<T, char_type>();
  228|  1.02M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.02M]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|  1.02M|            return impl(rd, range, value);
  233|  1.02M|        }
  234|  1.02M|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  1.02M|            auto rd = make_reader<T, char_type>();
  236|  1.02M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  1.02M|                return unexpected(e);
  238|  1.02M|            }
  239|       |
  240|  1.02M|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  1.02M|                return impl(rd, range, value);
  242|  1.02M|            }
  243|       |
  244|  1.02M|            auto crange = get_as_contiguous(range);
  245|  1.02M|            SCN_TRY(it, impl(rd, crange, value));
  246|  1.02M|            return ranges_polyfill::batch_next(
  247|  1.02M|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  1.02M|        }
  249|  1.02M|        else {
  250|  1.02M|            SCN_EXPECT(false);
  251|  1.02M|            SCN_UNREACHABLE;
  252|  1.02M|        }
  253|  1.02M|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|  1.02M|    {
  205|  1.02M|        SCN_TRY(it,
  ------------------
  |  |   71|  1.02M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.02M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.02M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.39k, False: 1.02M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.39k|    }                                                  \
  |  |  |  |   70|  1.02M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  1.02M|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  1.02M|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  1.02M|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  1.02M|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 1.02M]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  1.02M|        return rd.read_specs(subr, specs, value, loc);
  218|  1.02M|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  42.1k|    {
  223|  42.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  42.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  42.1k|            auto rd = make_reader<T, char_type>();
  228|  42.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  42.1k|                return unexpected(e);
  230|  42.1k|            }
  231|       |
  232|  42.1k|            return impl(rd, range, value);
  233|  42.1k|        }
  234|  42.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  42.1k|            auto rd = make_reader<T, char_type>();
  236|  42.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  42.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 42.1k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  42.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 42.1k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  42.1k|                return impl(rd, range, value);
  242|  42.1k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  42.1k|        else {
  250|  42.1k|            SCN_EXPECT(false);
  251|  42.1k|            SCN_UNREACHABLE;
  252|  42.1k|        }
  253|  42.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  42.1k|    {
  205|  42.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  42.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  42.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  42.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  42.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2, False: 42.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      2|    }                                                  \
  |  |  |  |   70|  42.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  42.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  42.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  42.1k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  42.1k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  42.1k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 42.1k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  42.1k|        return rd.read_specs(subr, specs, value, loc);
  218|  42.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  42.1k|    {
  223|  42.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  42.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  42.1k|            auto rd = make_reader<T, char_type>();
  228|  42.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  42.1k|                return unexpected(e);
  230|  42.1k|            }
  231|       |
  232|  42.1k|            return impl(rd, range, value);
  233|  42.1k|        }
  234|  42.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  42.1k|            auto rd = make_reader<T, char_type>();
  236|  42.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  42.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 42.1k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  42.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 42.1k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  42.1k|                return impl(rd, range, value);
  242|  42.1k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  42.1k|        else {
  250|  42.1k|            SCN_EXPECT(false);
  251|  42.1k|            SCN_UNREACHABLE;
  252|  42.1k|        }
  253|  42.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  42.1k|    {
  205|  42.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  42.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  42.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  42.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  42.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2, False: 42.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      2|    }                                                  \
  |  |  |  |   70|  42.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  42.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  42.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  42.1k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  42.1k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  42.1k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 42.1k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  42.1k|        return rd.read_specs(subr, specs, value, loc);
  218|  42.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  42.1k|    {
  223|  42.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  42.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  42.1k|            auto rd = make_reader<T, char_type>();
  228|  42.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  42.1k|                return unexpected(e);
  230|  42.1k|            }
  231|       |
  232|  42.1k|            return impl(rd, range, value);
  233|  42.1k|        }
  234|  42.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  42.1k|            auto rd = make_reader<T, char_type>();
  236|  42.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  42.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 42.1k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  42.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 42.1k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  42.1k|                return impl(rd, range, value);
  242|  42.1k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  42.1k|        else {
  250|  42.1k|            SCN_EXPECT(false);
  251|  42.1k|            SCN_UNREACHABLE;
  252|  42.1k|        }
  253|  42.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  42.1k|    {
  205|  42.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  42.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  42.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  42.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  42.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2, False: 42.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      2|    }                                                  \
  |  |  |  |   70|  42.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  42.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  42.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  42.1k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  42.1k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  42.1k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 42.1k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  42.1k|        return rd.read_specs(subr, specs, value, loc);
  218|  42.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  42.1k|    {
  223|  42.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  42.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  42.1k|            auto rd = make_reader<T, char_type>();
  228|  42.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  42.1k|                return unexpected(e);
  230|  42.1k|            }
  231|       |
  232|  42.1k|            return impl(rd, range, value);
  233|  42.1k|        }
  234|  42.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  42.1k|            auto rd = make_reader<T, char_type>();
  236|  42.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  42.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 42.1k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  42.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 42.1k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  42.1k|                return impl(rd, range, value);
  242|  42.1k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  42.1k|        else {
  250|  42.1k|            SCN_EXPECT(false);
  251|  42.1k|            SCN_UNREACHABLE;
  252|  42.1k|        }
  253|  42.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  42.1k|    {
  205|  42.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  42.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  42.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  42.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  42.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2, False: 42.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      2|    }                                                  \
  |  |  |  |   70|  42.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  42.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  42.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  42.1k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  42.1k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  42.1k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 42.1k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  42.1k|        return rd.read_specs(subr, specs, value, loc);
  218|  42.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  42.1k|    {
  223|  42.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  42.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  42.1k|            auto rd = make_reader<T, char_type>();
  228|  42.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  42.1k|                return unexpected(e);
  230|  42.1k|            }
  231|       |
  232|  42.1k|            return impl(rd, range, value);
  233|  42.1k|        }
  234|  42.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  42.1k|            auto rd = make_reader<T, char_type>();
  236|  42.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  42.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 42.1k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  42.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 42.1k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  42.1k|                return impl(rd, range, value);
  242|  42.1k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  42.1k|        else {
  250|  42.1k|            SCN_EXPECT(false);
  251|  42.1k|            SCN_UNREACHABLE;
  252|  42.1k|        }
  253|  42.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  42.1k|    {
  205|  42.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  42.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  42.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  42.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  42.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2, False: 42.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      2|    }                                                  \
  |  |  |  |   70|  42.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  42.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  42.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  42.1k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  42.1k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  42.1k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 42.1k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  42.1k|        return rd.read_specs(subr, specs, value, loc);
  218|  42.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  42.1k|    {
  223|  42.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  42.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  42.1k|            auto rd = make_reader<T, char_type>();
  228|  42.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  42.1k|                return unexpected(e);
  230|  42.1k|            }
  231|       |
  232|  42.1k|            return impl(rd, range, value);
  233|  42.1k|        }
  234|  42.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  42.1k|            auto rd = make_reader<T, char_type>();
  236|  42.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  42.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 42.1k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  42.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 42.1k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  42.1k|                return impl(rd, range, value);
  242|  42.1k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  42.1k|        else {
  250|  42.1k|            SCN_EXPECT(false);
  251|  42.1k|            SCN_UNREACHABLE;
  252|  42.1k|        }
  253|  42.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  42.1k|    {
  205|  42.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  42.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  42.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  42.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  42.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2, False: 42.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      2|    }                                                  \
  |  |  |  |   70|  42.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  42.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  42.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  42.1k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  42.1k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  42.1k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 42.1k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  42.1k|        return rd.read_specs(subr, specs, value, loc);
  218|  42.1k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
  121|   302k|    {
  122|   302k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   302k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   302k|                          basic_contiguous_scan_context<char_type>>) {
  126|   302k|            auto rd = make_reader<T, char_type>();
  127|   302k|            return impl(rd, range, value);
  128|   302k|        }
  129|   302k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   302k|            auto rd = make_reader<T, char_type>();
  131|   302k|            if (!is_segment_contiguous(range)) {
  132|   302k|                return impl(rd, range, value);
  133|   302k|            }
  134|   302k|            auto crange = get_as_contiguous(range);
  135|   302k|            SCN_TRY(it, impl(rd, crange, value));
  136|   302k|            return ranges_polyfill::batch_next(
  137|   302k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   302k|        }
  139|   302k|        else {
  140|   302k|            SCN_EXPECT(false);
  141|   302k|            SCN_UNREACHABLE;
  142|   302k|        }
  143|   302k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   302k|    {
  112|   302k|        SCN_TRY(it,
  ------------------
  |  |   71|   302k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   302k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   302k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.49k, False: 301k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.49k|    }                                                  \
  |  |  |  |   70|   302k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   301k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   301k|                    .transform_error(make_eof_scan_error));
  115|   301k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   301k|                               loc);
  117|   302k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  7.60M|{
   43|  7.60M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  7.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 35.9k, False: 7.57M]
  |  |  ------------------
  ------------------
   44|  35.9k|        return unexpected(e);
   45|  35.9k|    }
   46|       |
   47|  7.57M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 7.57M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  7.57M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  7.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  7.57M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
  121|   414k|    {
  122|   414k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   414k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   414k|                          basic_contiguous_scan_context<char_type>>) {
  126|   414k|            auto rd = make_reader<T, char_type>();
  127|   414k|            return impl(rd, range, value);
  128|   414k|        }
  129|   414k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   414k|            auto rd = make_reader<T, char_type>();
  131|   414k|            if (!is_segment_contiguous(range)) {
  132|   414k|                return impl(rd, range, value);
  133|   414k|            }
  134|   414k|            auto crange = get_as_contiguous(range);
  135|   414k|            SCN_TRY(it, impl(rd, crange, value));
  136|   414k|            return ranges_polyfill::batch_next(
  137|   414k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   414k|        }
  139|   414k|        else {
  140|   414k|            SCN_EXPECT(false);
  141|   414k|            SCN_UNREACHABLE;
  142|   414k|        }
  143|   414k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   414k|    {
  112|   414k|        SCN_TRY(it,
  ------------------
  |  |   71|   414k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   414k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   414k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   414k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.46k, False: 412k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.46k|    }                                                  \
  |  |  |  |   70|   414k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   412k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   412k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   412k|                    .transform_error(make_eof_scan_error));
  115|   412k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   412k|                               loc);
  117|   414k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
  121|   426k|    {
  122|   426k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   426k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   426k|                          basic_contiguous_scan_context<char_type>>) {
  126|   426k|            auto rd = make_reader<T, char_type>();
  127|   426k|            return impl(rd, range, value);
  128|   426k|        }
  129|   426k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   426k|            auto rd = make_reader<T, char_type>();
  131|   426k|            if (!is_segment_contiguous(range)) {
  132|   426k|                return impl(rd, range, value);
  133|   426k|            }
  134|   426k|            auto crange = get_as_contiguous(range);
  135|   426k|            SCN_TRY(it, impl(rd, crange, value));
  136|   426k|            return ranges_polyfill::batch_next(
  137|   426k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   426k|        }
  139|   426k|        else {
  140|   426k|            SCN_EXPECT(false);
  141|   426k|            SCN_UNREACHABLE;
  142|   426k|        }
  143|   426k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   426k|    {
  112|   426k|        SCN_TRY(it,
  ------------------
  |  |   71|   426k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   426k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   426k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   426k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.63k, False: 423k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.63k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.63k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.63k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.63k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.63k|    }                                                  \
  |  |  |  |   70|   426k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   423k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   423k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   423k|                    .transform_error(make_eof_scan_error));
  115|   423k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   423k|                               loc);
  117|   426k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
  121|   295k|    {
  122|   295k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   295k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   295k|                          basic_contiguous_scan_context<char_type>>) {
  126|   295k|            auto rd = make_reader<T, char_type>();
  127|   295k|            return impl(rd, range, value);
  128|   295k|        }
  129|   295k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   295k|            auto rd = make_reader<T, char_type>();
  131|   295k|            if (!is_segment_contiguous(range)) {
  132|   295k|                return impl(rd, range, value);
  133|   295k|            }
  134|   295k|            auto crange = get_as_contiguous(range);
  135|   295k|            SCN_TRY(it, impl(rd, crange, value));
  136|   295k|            return ranges_polyfill::batch_next(
  137|   295k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   295k|        }
  139|   295k|        else {
  140|   295k|            SCN_EXPECT(false);
  141|   295k|            SCN_UNREACHABLE;
  142|   295k|        }
  143|   295k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   295k|    {
  112|   295k|        SCN_TRY(it,
  ------------------
  |  |   71|   295k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   295k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   295k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   295k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.27k, False: 294k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.27k|    }                                                  \
  |  |  |  |   70|   295k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   294k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   294k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   294k|                    .transform_error(make_eof_scan_error));
  115|   294k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   294k|                               loc);
  117|   295k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
  121|   351k|    {
  122|   351k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   351k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   351k|                          basic_contiguous_scan_context<char_type>>) {
  126|   351k|            auto rd = make_reader<T, char_type>();
  127|   351k|            return impl(rd, range, value);
  128|   351k|        }
  129|   351k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   351k|            auto rd = make_reader<T, char_type>();
  131|   351k|            if (!is_segment_contiguous(range)) {
  132|   351k|                return impl(rd, range, value);
  133|   351k|            }
  134|   351k|            auto crange = get_as_contiguous(range);
  135|   351k|            SCN_TRY(it, impl(rd, crange, value));
  136|   351k|            return ranges_polyfill::batch_next(
  137|   351k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   351k|        }
  139|   351k|        else {
  140|   351k|            SCN_EXPECT(false);
  141|   351k|            SCN_UNREACHABLE;
  142|   351k|        }
  143|   351k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   351k|    {
  112|   351k|        SCN_TRY(it,
  ------------------
  |  |   71|   351k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   351k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   351k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   351k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.80k, False: 349k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.80k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.80k|    }                                                  \
  |  |  |  |   70|   351k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   349k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   349k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   349k|                    .transform_error(make_eof_scan_error));
  115|   349k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   349k|                               loc);
  117|   351k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
  121|   358k|    {
  122|   358k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   358k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   358k|                          basic_contiguous_scan_context<char_type>>) {
  126|   358k|            auto rd = make_reader<T, char_type>();
  127|   358k|            return impl(rd, range, value);
  128|   358k|        }
  129|   358k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   358k|            auto rd = make_reader<T, char_type>();
  131|   358k|            if (!is_segment_contiguous(range)) {
  132|   358k|                return impl(rd, range, value);
  133|   358k|            }
  134|   358k|            auto crange = get_as_contiguous(range);
  135|   358k|            SCN_TRY(it, impl(rd, crange, value));
  136|   358k|            return ranges_polyfill::batch_next(
  137|   358k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   358k|        }
  139|   358k|        else {
  140|   358k|            SCN_EXPECT(false);
  141|   358k|            SCN_UNREACHABLE;
  142|   358k|        }
  143|   358k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   358k|    {
  112|   358k|        SCN_TRY(it,
  ------------------
  |  |   71|   358k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   358k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   358k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   358k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.91k, False: 356k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.91k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.91k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.91k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.91k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.91k|    }                                                  \
  |  |  |  |   70|   358k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   356k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   356k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   356k|                    .transform_error(make_eof_scan_error));
  115|   356k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   356k|                               loc);
  117|   358k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
  222|   697k|    {
  223|   697k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   697k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   697k|                          basic_contiguous_scan_context<char_type>>) {
  227|   697k|            auto rd = make_reader<T, char_type>();
  228|   697k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   697k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 697k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   697k|            return impl(rd, range, value);
  233|   697k|        }
  234|   697k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   697k|            auto rd = make_reader<T, char_type>();
  236|   697k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   697k|                return unexpected(e);
  238|   697k|            }
  239|       |
  240|   697k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   697k|                return impl(rd, range, value);
  242|   697k|            }
  243|       |
  244|   697k|            auto crange = get_as_contiguous(range);
  245|   697k|            SCN_TRY(it, impl(rd, crange, value));
  246|   697k|            return ranges_polyfill::batch_next(
  247|   697k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   697k|        }
  249|   697k|        else {
  250|   697k|            SCN_EXPECT(false);
  251|   697k|            SCN_UNREACHABLE;
  252|   697k|        }
  253|   697k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   697k|    {
  205|   697k|        SCN_TRY(it,
  ------------------
  |  |   71|   697k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   697k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   697k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   697k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.35k, False: 692k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.35k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.35k|    }                                                  \
  |  |  |  |   70|   697k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   692k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   692k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   692k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   692k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   692k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 692k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   692k|        return rd.read_specs(subr, specs, value, loc);
  218|   692k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
  222|  1.08M|    {
  223|  1.08M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  1.08M|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  1.08M|                          basic_contiguous_scan_context<char_type>>) {
  227|  1.08M|            auto rd = make_reader<T, char_type>();
  228|  1.08M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.08M]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|  1.08M|            return impl(rd, range, value);
  233|  1.08M|        }
  234|  1.08M|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  1.08M|            auto rd = make_reader<T, char_type>();
  236|  1.08M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  1.08M|                return unexpected(e);
  238|  1.08M|            }
  239|       |
  240|  1.08M|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  1.08M|                return impl(rd, range, value);
  242|  1.08M|            }
  243|       |
  244|  1.08M|            auto crange = get_as_contiguous(range);
  245|  1.08M|            SCN_TRY(it, impl(rd, crange, value));
  246|  1.08M|            return ranges_polyfill::batch_next(
  247|  1.08M|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  1.08M|        }
  249|  1.08M|        else {
  250|  1.08M|            SCN_EXPECT(false);
  251|  1.08M|            SCN_UNREACHABLE;
  252|  1.08M|        }
  253|  1.08M|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|  1.08M|    {
  205|  1.08M|        SCN_TRY(it,
  ------------------
  |  |   71|  1.08M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.08M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.08M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.30k, False: 1.07M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.30k|    }                                                  \
  |  |  |  |   70|  1.08M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  1.07M|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  1.07M|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  1.07M|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  1.07M|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 1.07M]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  1.07M|        return rd.read_specs(subr, specs, value, loc);
  218|  1.07M|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
  222|  1.11M|    {
  223|  1.11M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  1.11M|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  1.11M|                          basic_contiguous_scan_context<char_type>>) {
  227|  1.11M|            auto rd = make_reader<T, char_type>();
  228|  1.11M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.11M]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|  1.11M|            return impl(rd, range, value);
  233|  1.11M|        }
  234|  1.11M|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  1.11M|            auto rd = make_reader<T, char_type>();
  236|  1.11M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  1.11M|                return unexpected(e);
  238|  1.11M|            }
  239|       |
  240|  1.11M|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  1.11M|                return impl(rd, range, value);
  242|  1.11M|            }
  243|       |
  244|  1.11M|            auto crange = get_as_contiguous(range);
  245|  1.11M|            SCN_TRY(it, impl(rd, crange, value));
  246|  1.11M|            return ranges_polyfill::batch_next(
  247|  1.11M|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  1.11M|        }
  249|  1.11M|        else {
  250|  1.11M|            SCN_EXPECT(false);
  251|  1.11M|            SCN_UNREACHABLE;
  252|  1.11M|        }
  253|  1.11M|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|  1.11M|    {
  205|  1.11M|        SCN_TRY(it,
  ------------------
  |  |   71|  1.11M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.11M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.11M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.80k, False: 1.10M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.80k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.80k|    }                                                  \
  |  |  |  |   70|  1.11M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  1.10M|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  1.10M|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  1.10M|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  1.10M|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 1.10M]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  1.10M|        return rd.read_specs(subr, specs, value, loc);
  218|  1.10M|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
  222|   726k|    {
  223|   726k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   726k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   726k|                          basic_contiguous_scan_context<char_type>>) {
  227|   726k|            auto rd = make_reader<T, char_type>();
  228|   726k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   726k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 726k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   726k|            return impl(rd, range, value);
  233|   726k|        }
  234|   726k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   726k|            auto rd = make_reader<T, char_type>();
  236|   726k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   726k|                return unexpected(e);
  238|   726k|            }
  239|       |
  240|   726k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   726k|                return impl(rd, range, value);
  242|   726k|            }
  243|       |
  244|   726k|            auto crange = get_as_contiguous(range);
  245|   726k|            SCN_TRY(it, impl(rd, crange, value));
  246|   726k|            return ranges_polyfill::batch_next(
  247|   726k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   726k|        }
  249|   726k|        else {
  250|   726k|            SCN_EXPECT(false);
  251|   726k|            SCN_UNREACHABLE;
  252|   726k|        }
  253|   726k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   726k|    {
  205|   726k|        SCN_TRY(it,
  ------------------
  |  |   71|   726k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   726k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   726k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   726k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.89k, False: 722k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.89k|    }                                                  \
  |  |  |  |   70|   726k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   722k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   722k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   722k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   722k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   722k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 722k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   722k|        return rd.read_specs(subr, specs, value, loc);
  218|   722k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
  222|   910k|    {
  223|   910k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   910k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   910k|                          basic_contiguous_scan_context<char_type>>) {
  227|   910k|            auto rd = make_reader<T, char_type>();
  228|   910k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   910k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 910k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   910k|            return impl(rd, range, value);
  233|   910k|        }
  234|   910k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   910k|            auto rd = make_reader<T, char_type>();
  236|   910k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   910k|                return unexpected(e);
  238|   910k|            }
  239|       |
  240|   910k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   910k|                return impl(rd, range, value);
  242|   910k|            }
  243|       |
  244|   910k|            auto crange = get_as_contiguous(range);
  245|   910k|            SCN_TRY(it, impl(rd, crange, value));
  246|   910k|            return ranges_polyfill::batch_next(
  247|   910k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   910k|        }
  249|   910k|        else {
  250|   910k|            SCN_EXPECT(false);
  251|   910k|            SCN_UNREACHABLE;
  252|   910k|        }
  253|   910k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   910k|    {
  205|   910k|        SCN_TRY(it,
  ------------------
  |  |   71|   910k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   910k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   910k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   910k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.51k, False: 904k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.51k|    }                                                  \
  |  |  |  |   70|   910k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   904k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   904k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   904k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   904k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   904k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 904k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   904k|        return rd.read_specs(subr, specs, value, loc);
  218|   904k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
  222|   930k|    {
  223|   930k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   930k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   930k|                          basic_contiguous_scan_context<char_type>>) {
  227|   930k|            auto rd = make_reader<T, char_type>();
  228|   930k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   930k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 930k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   930k|            return impl(rd, range, value);
  233|   930k|        }
  234|   930k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   930k|            auto rd = make_reader<T, char_type>();
  236|   930k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   930k|                return unexpected(e);
  238|   930k|            }
  239|       |
  240|   930k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   930k|                return impl(rd, range, value);
  242|   930k|            }
  243|       |
  244|   930k|            auto crange = get_as_contiguous(range);
  245|   930k|            SCN_TRY(it, impl(rd, crange, value));
  246|   930k|            return ranges_polyfill::batch_next(
  247|   930k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   930k|        }
  249|   930k|        else {
  250|   930k|            SCN_EXPECT(false);
  251|   930k|            SCN_UNREACHABLE;
  252|   930k|        }
  253|   930k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   930k|    {
  205|   930k|        SCN_TRY(it,
  ------------------
  |  |   71|   930k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   930k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   930k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   930k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.78k, False: 924k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.78k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.78k|    }                                                  \
  |  |  |  |   70|   930k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   924k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   924k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   924k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   924k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   924k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 924k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   924k|        return rd.read_specs(subr, specs, value, loc);
  218|   924k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  27.1k|    {
  122|  27.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  27.1k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  27.1k|            auto rd = make_reader<T, char_type>();
  127|  27.1k|            return impl(rd, range, value);
  128|  27.1k|        }
  129|  27.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  27.1k|            auto rd = make_reader<T, char_type>();
  131|  27.1k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 27.1k, False: 0]
  ------------------
  132|  27.1k|                return impl(rd, range, value);
  133|  27.1k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  27.1k|        else {
  140|  27.1k|            SCN_EXPECT(false);
  141|  27.1k|            SCN_UNREACHABLE;
  142|  27.1k|        }
  143|  27.1k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  27.1k|    {
  112|  27.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  27.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  27.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 27.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  27.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  27.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  27.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  27.1k|                    .transform_error(make_eof_scan_error));
  115|  27.1k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  27.1k|                               loc);
  117|  27.1k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|   886k|{
   43|   886k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   886k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 30, False: 886k]
  |  |  ------------------
  ------------------
   44|     30|        return unexpected(e);
   45|     30|    }
   46|       |
   47|   886k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 886k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|   886k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|   886k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   886k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  27.1k|    {
  122|  27.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  27.1k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  27.1k|            auto rd = make_reader<T, char_type>();
  127|  27.1k|            return impl(rd, range, value);
  128|  27.1k|        }
  129|  27.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  27.1k|            auto rd = make_reader<T, char_type>();
  131|  27.1k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 27.1k, False: 0]
  ------------------
  132|  27.1k|                return impl(rd, range, value);
  133|  27.1k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  27.1k|        else {
  140|  27.1k|            SCN_EXPECT(false);
  141|  27.1k|            SCN_UNREACHABLE;
  142|  27.1k|        }
  143|  27.1k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  27.1k|    {
  112|  27.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  27.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  27.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 27.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  27.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  27.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  27.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  27.1k|                    .transform_error(make_eof_scan_error));
  115|  27.1k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  27.1k|                               loc);
  117|  27.1k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  27.1k|    {
  122|  27.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  27.1k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  27.1k|            auto rd = make_reader<T, char_type>();
  127|  27.1k|            return impl(rd, range, value);
  128|  27.1k|        }
  129|  27.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  27.1k|            auto rd = make_reader<T, char_type>();
  131|  27.1k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 27.1k, False: 0]
  ------------------
  132|  27.1k|                return impl(rd, range, value);
  133|  27.1k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  27.1k|        else {
  140|  27.1k|            SCN_EXPECT(false);
  141|  27.1k|            SCN_UNREACHABLE;
  142|  27.1k|        }
  143|  27.1k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  27.1k|    {
  112|  27.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  27.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  27.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 27.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  27.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  27.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  27.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  27.1k|                    .transform_error(make_eof_scan_error));
  115|  27.1k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  27.1k|                               loc);
  117|  27.1k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  27.1k|    {
  122|  27.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  27.1k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  27.1k|            auto rd = make_reader<T, char_type>();
  127|  27.1k|            return impl(rd, range, value);
  128|  27.1k|        }
  129|  27.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  27.1k|            auto rd = make_reader<T, char_type>();
  131|  27.1k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 27.1k, False: 0]
  ------------------
  132|  27.1k|                return impl(rd, range, value);
  133|  27.1k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  27.1k|        else {
  140|  27.1k|            SCN_EXPECT(false);
  141|  27.1k|            SCN_UNREACHABLE;
  142|  27.1k|        }
  143|  27.1k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  27.1k|    {
  112|  27.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  27.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  27.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 27.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  27.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  27.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  27.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  27.1k|                    .transform_error(make_eof_scan_error));
  115|  27.1k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  27.1k|                               loc);
  117|  27.1k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  27.1k|    {
  122|  27.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  27.1k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  27.1k|            auto rd = make_reader<T, char_type>();
  127|  27.1k|            return impl(rd, range, value);
  128|  27.1k|        }
  129|  27.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  27.1k|            auto rd = make_reader<T, char_type>();
  131|  27.1k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 27.1k, False: 0]
  ------------------
  132|  27.1k|                return impl(rd, range, value);
  133|  27.1k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  27.1k|        else {
  140|  27.1k|            SCN_EXPECT(false);
  141|  27.1k|            SCN_UNREACHABLE;
  142|  27.1k|        }
  143|  27.1k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  27.1k|    {
  112|  27.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  27.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  27.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 27.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  27.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  27.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  27.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  27.1k|                    .transform_error(make_eof_scan_error));
  115|  27.1k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  27.1k|                               loc);
  117|  27.1k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  27.1k|    {
  122|  27.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  27.1k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  27.1k|            auto rd = make_reader<T, char_type>();
  127|  27.1k|            return impl(rd, range, value);
  128|  27.1k|        }
  129|  27.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  27.1k|            auto rd = make_reader<T, char_type>();
  131|  27.1k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 27.1k, False: 0]
  ------------------
  132|  27.1k|                return impl(rd, range, value);
  133|  27.1k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  27.1k|        else {
  140|  27.1k|            SCN_EXPECT(false);
  141|  27.1k|            SCN_UNREACHABLE;
  142|  27.1k|        }
  143|  27.1k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  27.1k|    {
  112|  27.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  27.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  27.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 27.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  27.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  27.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  27.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  27.1k|                    .transform_error(make_eof_scan_error));
  115|  27.1k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  27.1k|                               loc);
  117|  27.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|   108k|    {
  223|   108k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   108k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|   108k|            auto rd = make_reader<T, char_type>();
  228|   108k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|   108k|                return unexpected(e);
  230|   108k|            }
  231|       |
  232|   108k|            return impl(rd, range, value);
  233|   108k|        }
  234|   108k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|   108k|            auto rd = make_reader<T, char_type>();
  236|   108k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 108k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|   108k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 108k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|   108k|                return impl(rd, range, value);
  242|   108k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|   108k|        else {
  250|   108k|            SCN_EXPECT(false);
  251|   108k|            SCN_UNREACHABLE;
  252|   108k|        }
  253|   108k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|   108k|    {
  205|   108k|        SCN_TRY(it,
  ------------------
  |  |   71|   108k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   108k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   108k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2, False: 108k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      2|    }                                                  \
  |  |  |  |   70|   108k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   108k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   108k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   108k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   108k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 108k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   108k|        return rd.read_specs(subr, specs, value, loc);
  218|   108k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|   126k|    {
  223|   126k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   126k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|   126k|            auto rd = make_reader<T, char_type>();
  228|   126k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|   126k|                return unexpected(e);
  230|   126k|            }
  231|       |
  232|   126k|            return impl(rd, range, value);
  233|   126k|        }
  234|   126k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|   126k|            auto rd = make_reader<T, char_type>();
  236|   126k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 126k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|   126k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 126k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|   126k|                return impl(rd, range, value);
  242|   126k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|   126k|        else {
  250|   126k|            SCN_EXPECT(false);
  251|   126k|            SCN_UNREACHABLE;
  252|   126k|        }
  253|   126k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|   126k|    {
  205|   126k|        SCN_TRY(it,
  ------------------
  |  |   71|   126k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   126k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   126k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 126k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|   126k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   126k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   126k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   126k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   126k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 126k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   126k|        return rd.read_specs(subr, specs, value, loc);
  218|   126k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|   126k|    {
  223|   126k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   126k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|   126k|            auto rd = make_reader<T, char_type>();
  228|   126k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|   126k|                return unexpected(e);
  230|   126k|            }
  231|       |
  232|   126k|            return impl(rd, range, value);
  233|   126k|        }
  234|   126k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|   126k|            auto rd = make_reader<T, char_type>();
  236|   126k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 126k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|   126k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 126k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|   126k|                return impl(rd, range, value);
  242|   126k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|   126k|        else {
  250|   126k|            SCN_EXPECT(false);
  251|   126k|            SCN_UNREACHABLE;
  252|   126k|        }
  253|   126k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|   126k|    {
  205|   126k|        SCN_TRY(it,
  ------------------
  |  |   71|   126k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   126k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   126k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 126k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|   126k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   126k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   126k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   126k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   126k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 126k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   126k|        return rd.read_specs(subr, specs, value, loc);
  218|   126k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|   108k|    {
  223|   108k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   108k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|   108k|            auto rd = make_reader<T, char_type>();
  228|   108k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|   108k|                return unexpected(e);
  230|   108k|            }
  231|       |
  232|   108k|            return impl(rd, range, value);
  233|   108k|        }
  234|   108k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|   108k|            auto rd = make_reader<T, char_type>();
  236|   108k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 108k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|   108k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 108k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|   108k|                return impl(rd, range, value);
  242|   108k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|   108k|        else {
  250|   108k|            SCN_EXPECT(false);
  251|   108k|            SCN_UNREACHABLE;
  252|   108k|        }
  253|   108k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|   108k|    {
  205|   108k|        SCN_TRY(it,
  ------------------
  |  |   71|   108k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   108k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   108k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4, False: 108k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      4|    }                                                  \
  |  |  |  |   70|   108k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   108k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   108k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   108k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   108k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 108k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   108k|        return rd.read_specs(subr, specs, value, loc);
  218|   108k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|   126k|    {
  223|   126k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   126k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|   126k|            auto rd = make_reader<T, char_type>();
  228|   126k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|   126k|                return unexpected(e);
  230|   126k|            }
  231|       |
  232|   126k|            return impl(rd, range, value);
  233|   126k|        }
  234|   126k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|   126k|            auto rd = make_reader<T, char_type>();
  236|   126k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 126k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|   126k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 126k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|   126k|                return impl(rd, range, value);
  242|   126k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|   126k|        else {
  250|   126k|            SCN_EXPECT(false);
  251|   126k|            SCN_UNREACHABLE;
  252|   126k|        }
  253|   126k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|   126k|    {
  205|   126k|        SCN_TRY(it,
  ------------------
  |  |   71|   126k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   126k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   126k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 126k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|   126k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   126k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   126k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   126k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   126k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 126k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   126k|        return rd.read_specs(subr, specs, value, loc);
  218|   126k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|   126k|    {
  223|   126k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   126k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|   126k|            auto rd = make_reader<T, char_type>();
  228|   126k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|   126k|                return unexpected(e);
  230|   126k|            }
  231|       |
  232|   126k|            return impl(rd, range, value);
  233|   126k|        }
  234|   126k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|   126k|            auto rd = make_reader<T, char_type>();
  236|   126k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 126k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|   126k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 126k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|   126k|                return impl(rd, range, value);
  242|   126k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|   126k|        else {
  250|   126k|            SCN_EXPECT(false);
  251|   126k|            SCN_UNREACHABLE;
  252|   126k|        }
  253|   126k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|   126k|    {
  205|   126k|        SCN_TRY(it,
  ------------------
  |  |   71|   126k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   126k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   126k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 126k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|   126k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   126k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   126k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   126k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   126k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 126k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   126k|        return rd.read_specs(subr, specs, value, loc);
  218|   126k|    }

_ZN3scn2v24impl39code_point_length_by_starting_code_unitIcEEmT_:
  109|   238k|{
  110|   238k|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|   238k|}
_ZN3scn2v24impl19get_next_code_pointIcEENS1_21iterator_value_resultIDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEEEEDiEESC_:
  262|   128k|{
  263|   128k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|   128k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   128k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  264|       |
  265|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  266|   128k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 9.13k, False: 119k]
  |  |  ------------------
  ------------------
  267|  9.13k|        return {get_start_of_next_code_point(input),
  268|  9.13k|                detail::invalid_code_point};
  269|  9.13k|    }
  270|   119k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  153|   119k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.16k, False: 118k]
  |  |  ------------------
  ------------------
  271|  1.16k|        return {input.end(), detail::invalid_code_point};
  272|  1.16k|    }
  273|       |
  274|   118k|    constexpr auto enc = get_encoding<CharT>();
  275|   118k|    std::size_t result{1};
  276|   118k|    char32_t output{};
  277|   118k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (277:19): [Folded - Ignored]
  ------------------
  278|   118k|        result = simdutf::convert_utf8_to_utf32(
  279|   118k|            reinterpret_cast<const char*>(input.data()), len, &output);
  280|   118k|    }
  281|   118k|    else if constexpr (enc == encoding::utf16) {
  282|   118k|        result = simdutf::convert_utf16_to_utf32(
  283|   118k|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  284|   118k|    }
  285|   118k|    else if constexpr (enc == encoding::utf32) {
  286|   118k|        SCN_EXPECT(len == 1);
  287|   118k|        output = static_cast<char32_t>(input[0]);
  288|   118k|    }
  289|       |
  290|   118k|    if (SCN_UNLIKELY(result != 1)) {
  ------------------
  |  |  153|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.45k, False: 112k]
  |  |  ------------------
  ------------------
  291|  6.45k|        return {get_start_of_next_code_point(input.substr(1)),
  292|  6.45k|                detail::invalid_code_point};
  293|  6.45k|    }
  294|       |
  295|   112k|    return {input.begin() + len, output};
  296|   118k|}
_ZN3scn2v24impl28get_start_of_next_code_pointIcEEDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEEESB_:
  247|  15.5k|{
  248|  15.5k|    auto it = input.begin();
  249|   112k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (249:12): [True: 110k, False: 2.72k]
  ------------------
  250|   110k|        if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (250:13): [True: 12.8k, False: 97.1k]
  ------------------
  251|  12.8k|            break;
  252|  12.8k|        }
  253|   110k|    }
  254|       |
  255|  15.5k|    return it;
  256|  15.5k|}
_ZN3scn2v24impl39code_point_length_by_starting_code_unitIwEEmT_:
  109|   117M|{
  110|   117M|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|   117M|}
_ZN3scn2v24impl26transcode_possibly_invalidIwDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EE:
  448|  8.49M|{
  449|  8.49M|    if (input.empty()) {
  ------------------
  |  Branch (449:9): [True: 0, False: 8.49M]
  ------------------
  450|      0|        return 0;
  451|      0|    }
  452|       |
  453|  8.49M|    if constexpr (get_encoding<SourceCharT>() == get_encoding<DestCharT>()) {
  ------------------
  |  Branch (453:19): [Folded - Ignored]
  ------------------
  454|  8.49M|        SCN_EXPECT(output.size() >= input.size());
  ------------------
  |  |  242|  8.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  8.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|        std::memcpy(output.data(), input.data(),
  456|  8.49M|                    input.size() * sizeof(SourceCharT));
  457|  8.49M|        return input.size();
  458|  8.49M|    }
  459|       |
  460|      0|    const auto result = [&]() {
  461|      0|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|      0|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|      0|        if constexpr (src_enc == encoding::utf8) {
  465|      0|            if constexpr (dest_enc == encoding::utf16) {
  466|      0|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|      0|                    input.data(), input.size(),
  468|      0|                    reinterpret_cast<char16_t*>(output.data()));
  469|      0|            }
  470|      0|            else {
  471|      0|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|      0|                    input.data(), input.size(),
  473|      0|                    reinterpret_cast<char32_t*>(output.data()));
  474|      0|            }
  475|      0|        }
  476|      0|        else if constexpr (src_enc == encoding::utf16) {
  477|      0|            if constexpr (dest_enc == encoding::utf8) {
  478|      0|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  480|      0|                    input.size(), output.data());
  481|      0|            }
  482|      0|            else {
  483|      0|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  485|      0|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|      0|            }
  487|      0|        }
  488|      0|        else if constexpr (src_enc == encoding::utf32) {
  489|      0|            if constexpr (dest_enc == encoding::utf8) {
  490|      0|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  492|      0|                    input.size(), output.data());
  493|      0|            }
  494|      0|            else {
  495|      0|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  497|      0|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|      0|            }
  499|      0|        }
  500|      0|    }();
  501|       |
  502|      0|    if (SCN_UNLIKELY(result.error != simdutf::SUCCESS)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  503|      0|        return std::nullopt;
  504|      0|    }
  505|      0|    SCN_ENSURE(result.count <= output.size());
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  506|      0|    return result.count;
  507|      0|}

_ZN3scn2v24impl11is_cp_spaceEDi:
   28|  16.5M|{
   29|       |    // Pattern_White_Space property
   30|  16.5M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (30:13): [True: 16.4M, False: 26.0k]
  |  Branch (30:27): [True: 7.82M, False: 8.65M]
  ------------------
   31|  16.5M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (31:12): [True: 134k, False: 8.55M]
  ------------------
   32|  16.5M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (32:12): [True: 3.96k, False: 8.54M]
  ------------------
   33|  16.5M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (33:12): [True: 3.04k, False: 8.54M]
  ------------------
   34|  16.5M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (34:12): [True: 3.18k, False: 8.54M]
  ------------------
   35|  16.5M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (35:12): [True: 3.58k, False: 8.53M]
  ------------------
   36|  16.5M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (36:12): [True: 0, False: 8.53M]
  ------------------
   37|  16.5M|}

_ZN3scn2v24impl14is_ascii_spaceEc:
   57|  18.1M|{
   58|  18.1M|    return is_ascii_space_lookup[static_cast<size_t>(
   59|  18.1M|        static_cast<unsigned char>(ch))];
   60|  18.1M|}

_ZN3scn2v24impl16has_byte_greaterEmh:
   91|  8.97M|{
   92|  8.97M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
   93|  8.97M|}

_ZN3scn2v24impl29basic_contiguous_scan_contextIcEC2IRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
   56|  6.17M|    {
   57|  6.17M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5beginEv:
   60|  18.0M|    {
   61|  18.0M|        return m_current;
   62|  18.0M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE3endEv:
   65|  11.9M|    {
   66|  11.9M|        return m_range.end();
   67|  11.9M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
   80|  5.84M|    {
   81|  5.84M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|  5.84M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.84M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  5.84M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  5.84M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 5.84M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  5.84M|        }
   87|  5.84M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  5.84M|    static_cast<    \
  |  |  247|  5.84M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  5.84M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5rangeEv:
   70|  6.06M|    {
   71|  6.06M|        return ranges::subrange{begin(), end()};
   72|  6.06M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwEC2IRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
   56|  5.78M|    {
   57|  5.78M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5beginEv:
   60|  16.0M|    {
   61|  16.0M|        return m_current;
   62|  16.0M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE3endEv:
   65|  10.2M|    {
   66|  10.2M|        return m_range.end();
   67|  10.2M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
   80|  4.80M|    {
   81|  4.80M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|  4.80M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.80M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  4.80M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  4.80M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 4.80M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  4.80M|        }
   87|  4.80M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  4.80M|    static_cast<    \
  |  |  247|  4.80M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  4.80M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5rangeEv:
   70|  5.46M|    {
   71|  5.46M|        return ranges::subrange{begin(), end()};
   72|  5.46M|    }

_ZNK3scn2v24impl12function_refIFbcES3_EclEc:
  204|   614k|    {
  205|   614k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|   614k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   614k|    }
_ZN3scn2v24impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|   271k|    {
  196|   271k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  185|   307k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   307k|              cvref<T> obj = *get<T>(fn);
  187|   307k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   307k|                  obj(static_cast<decltype(args)>(args)...);
  189|   307k|              }
  190|   307k|              else {
  191|   307k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   307k|              }
  193|   307k|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  125|   307k|    {
  126|   307k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   307k|            return static_cast<T*>(s.m_cp);
  128|   307k|        }
  129|   307k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   307k|            return static_cast<T*>(s.m_p);
  131|   307k|        }
  132|   307k|        else {
  133|   307k|            return reinterpret_cast<T*>(s.m_fp);
  134|   307k|        }
  135|   307k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  103|   271k|        {
  104|   271k|        }
_ZNK3scn2v24impl12function_refIFbDiES3_EclEDi:
  204|  32.7M|    {
  205|  32.7M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  32.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  32.7M|    }
_ZN3scn2v24impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|  8.45M|    {
  196|  8.45M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  185|  16.3M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  16.3M|              cvref<T> obj = *get<T>(fn);
  187|  16.3M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  16.3M|                  obj(static_cast<decltype(args)>(args)...);
  189|  16.3M|              }
  190|  16.3M|              else {
  191|  16.3M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  16.3M|              }
  193|  16.3M|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  125|  16.3M|    {
  126|  16.3M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  16.3M|            return static_cast<T*>(s.m_cp);
  128|  16.3M|        }
  129|  16.3M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  16.3M|            return static_cast<T*>(s.m_p);
  131|  16.3M|        }
  132|  16.3M|        else {
  133|  16.3M|            return reinterpret_cast<T*>(s.m_fp);
  134|  16.3M|        }
  135|  16.3M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  103|  8.45M|        {
  104|  8.45M|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_SO_LPv0EEEOSK_:
  195|   271k|    {
  196|   271k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_SO_LPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEcE_clEST_c:
  185|   307k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   307k|              cvref<T> obj = *get<T>(fn);
  187|   307k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   307k|                  obj(static_cast<decltype(args)>(args)...);
  189|   307k|              }
  190|   307k|              else {
  191|   307k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   307k|              }
  193|   307k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_iEUlcE_EEDaNS3_7storageE:
  125|   307k|    {
  126|   307k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   307k|            return static_cast<T*>(s.m_cp);
  128|   307k|        }
  129|   307k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   307k|            return static_cast<T*>(s.m_p);
  131|   307k|        }
  132|   307k|        else {
  133|   307k|            return reinterpret_cast<T*>(s.m_fp);
  134|   307k|        }
  135|   307k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_LPv0EEEPSK_:
  103|   271k|        {
  104|   271k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_:
  195|  7.57M|    {
  196|  7.57M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  185|  15.4M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  15.4M|              cvref<T> obj = *get<T>(fn);
  187|  15.4M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  15.4M|                  obj(static_cast<decltype(args)>(args)...);
  189|  15.4M|              }
  190|  15.4M|              else {
  191|  15.4M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  15.4M|              }
  193|  15.4M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_EUlDiE_EEDaNS3_7storageE:
  125|  15.4M|    {
  126|  15.4M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  15.4M|            return static_cast<T*>(s.m_cp);
  128|  15.4M|        }
  129|  15.4M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  15.4M|            return static_cast<T*>(s.m_p);
  131|  15.4M|        }
  132|  15.4M|        else {
  133|  15.4M|            return reinterpret_cast<T*>(s.m_fp);
  134|  15.4M|        }
  135|  15.4M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_LPv0EEEPSI_:
  103|  7.57M|        {
  104|  7.57M|        }
_ZNK3scn2v24impl12function_refIFbwES3_EclEw:
  204|  2.20M|    {
  205|  2.20M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  2.20M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  2.20M|    }
_ZN3scn2v24impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|   777k|    {
  196|   777k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  185|  1.10M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  1.10M|              cvref<T> obj = *get<T>(fn);
  187|  1.10M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  1.10M|                  obj(static_cast<decltype(args)>(args)...);
  189|  1.10M|              }
  190|  1.10M|              else {
  191|  1.10M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  1.10M|              }
  193|  1.10M|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  125|  1.10M|    {
  126|  1.10M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  1.10M|            return static_cast<T*>(s.m_cp);
  128|  1.10M|        }
  129|  1.10M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  1.10M|            return static_cast<T*>(s.m_p);
  131|  1.10M|        }
  132|  1.10M|        else {
  133|  1.10M|            return reinterpret_cast<T*>(s.m_fp);
  134|  1.10M|        }
  135|  1.10M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  103|   777k|        {
  104|   777k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_:
  195|   886k|    {
  196|   886k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  185|   886k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   886k|              cvref<T> obj = *get<T>(fn);
  187|   886k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   886k|                  obj(static_cast<decltype(args)>(args)...);
  189|   886k|              }
  190|   886k|              else {
  191|   886k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   886k|              }
  193|   886k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_EUlDiE_EEDaNS3_7storageE:
  125|   886k|    {
  126|   886k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   886k|            return static_cast<T*>(s.m_cp);
  128|   886k|        }
  129|   886k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   886k|            return static_cast<T*>(s.m_p);
  131|   886k|        }
  132|   886k|        else {
  133|   886k|            return reinterpret_cast<T*>(s.m_fp);
  134|   886k|        }
  135|   886k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_LPv0EEEPSL_:
  103|   886k|        {
  104|   886k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_SO_LPv0EEEOSK_:
  195|   777k|    {
  196|   777k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_SO_LPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEwE_clEST_w:
  185|  1.10M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  1.10M|              cvref<T> obj = *get<T>(fn);
  187|  1.10M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  1.10M|                  obj(static_cast<decltype(args)>(args)...);
  189|  1.10M|              }
  190|  1.10M|              else {
  191|  1.10M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  1.10M|              }
  193|  1.10M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_iEUlwE_EEDaNS3_7storageE:
  125|  1.10M|    {
  126|  1.10M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  1.10M|            return static_cast<T*>(s.m_cp);
  128|  1.10M|        }
  129|  1.10M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  1.10M|            return static_cast<T*>(s.m_p);
  131|  1.10M|        }
  132|  1.10M|        else {
  133|  1.10M|            return reinterpret_cast<T*>(s.m_fp);
  134|  1.10M|        }
  135|  1.10M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_LPv0EEEPSK_:
  103|   777k|        {
  104|   777k|        }

_ZN3scn2v24impl19make_eof_scan_errorENS1_9eof_errorE:
   43|  81.8k|{
   44|  81.8k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  242|  81.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  81.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   45|      0|    return scan_error{scan_error::end_of_range, "EOF"};
   46|  81.8k|}
_ZN3scn2v24implntENS1_9eof_errorE:
   29|  73.4M|{
   30|  73.4M|    return e != eof_error::good;
   31|  73.4M|}
_ZN3scn2v24impl20make_eof_parse_errorENS1_9eof_errorE:
   90|   215k|{
   91|   215k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  242|   215k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   215k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   92|      0|    return parse_error::eof;
   93|   215k|}
_ZN3scn2v24impleqENS1_11parse_errorES2_:
   68|  18.2M|    {
   69|  18.2M|        return a.m_code == b.m_code;
   70|  18.2M|    }
_ZN3scn2v24impl11parse_errorC2ENS2_4codeE:
   54|  84.0M|    {
   55|  84.0M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|  84.0M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   56|  84.0M|    }
_ZZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  114|   904k|    return [code, msg](parse_error err) {
  115|   904k|        return make_scan_error_from_parse_error(err, code, msg);
  116|   904k|    };
_ZN3scn2v24impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
   99|   904k|{
  100|   904k|    if (err == parse_error::good) {
  ------------------
  |  Branch (100:9): [True: 0, False: 904k]
  ------------------
  101|      0|        return {};
  102|      0|    }
  103|       |
  104|   904k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (104:9): [True: 0, False: 904k]
  ------------------
  105|      0|        return scan_error{scan_error::end_of_range, "EOF"};
  106|      0|    }
  107|       |
  108|   904k|    return scan_error{code, msg};
  109|   904k|}
_ZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  113|  1.04M|{
  114|  1.04M|    return [code, msg](parse_error err) {
  115|  1.04M|        return make_scan_error_from_parse_error(err, code, msg);
  116|  1.04M|    };
  117|  1.04M|}

_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  586|  3.91M|{
  587|  3.91M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  588|  3.91M|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  594|   198k|{
  595|   198k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  596|   198k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   198k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 18.0k, False: 180k]
  |  |  ------------------
  ------------------
  597|  18.0k|        source.sync(*n);
  598|  18.0k|    }
  599|   180k|    else {
  600|   180k|        source.sync_all();
  601|   180k|    }
  602|   198k|    return n;
  603|   198k|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  610|  3.60M|{
  611|  3.60M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  612|  3.60M|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  618|   578k|{
  619|   578k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  620|   578k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   578k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 36.1k, False: 542k]
  |  |  ------------------
  ------------------
  621|  36.1k|        source.sync(*n);
  622|  36.1k|    }
  623|   542k|    else {
  624|   542k|        source.sync_all();
  625|   542k|    }
  626|   578k|    return n;
  627|   578k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  543|  3.91M|{
  544|  3.91M|    return vscan_internal(source, format, args);
  545|  3.91M|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  549|   198k|{
  550|   198k|    auto n = vscan_internal(source, format, args);
  551|   198k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   198k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 18.0k, False: 180k]
  |  |  ------------------
  ------------------
  552|  18.0k|        source.sync(*n);
  553|  18.0k|    }
  554|   180k|    else {
  555|   180k|        source.sync_all();
  556|   180k|    }
  557|   198k|    return n;
  558|   198k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  563|  3.60M|{
  564|  3.60M|    return vscan_internal(source, format, args);
  565|  3.60M|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  569|   578k|{
  570|   578k|    auto n = vscan_internal(source, format, args);
  571|   578k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   578k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 36.1k, False: 542k]
  |  |  ------------------
  ------------------
  572|  36.1k|        source.sync(*n);
  573|  36.1k|    }
  574|   542k|    else {
  575|   542k|        source.sync_all();
  576|   542k|    }
  577|   578k|    return n;
  578|   578k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  653|   829k|{
  654|   829k|    return vscan_value_internal(source, arg);
  655|   829k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  658|  18.0k|{
  659|  18.0k|    auto n = vscan_value_internal(source, arg);
  660|  18.0k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  18.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 18.0k]
  |  |  ------------------
  ------------------
  661|      0|        source.sync(*n);
  662|      0|    }
  663|  18.0k|    else {
  664|  18.0k|        source.sync_all();
  665|  18.0k|    }
  666|  18.0k|    return n;
  667|  18.0k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  672|   716k|{
  673|   716k|    return vscan_value_internal(source, arg);
  674|   716k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  678|  54.2k|{
  679|  54.2k|    auto n = vscan_value_internal(source, arg);
  680|  54.2k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  54.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 54.2k]
  |  |  ------------------
  ------------------
  681|      0|        source.sync(*n);
  682|      0|    }
  683|  54.2k|    else {
  684|  54.2k|        source.sync_all();
  685|  54.2k|    }
  686|  54.2k|    return n;
  687|  54.2k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|   397k|{
  476|   397k|    const auto argcount = args.size();
  477|   397k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 36.1k, False: 361k]
  |  Branch (477:60): [True: 36.1k, False: 0]
  ------------------
  478|  36.1k|        auto arg = args.get(0);
  479|  36.1k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  36.1k|    static_cast<    \
  |  |  247|  36.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  36.1k|    }
  481|       |
  482|   361k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 361k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|   361k|    SCN_UNLIKELY_ATTR
  490|   361k|    {
  491|   361k|        auto handler = format_handler<false, CharT>{
  492|   361k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   361k|    static_cast<    \
  |  |  247|   361k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   361k|    static_cast<    \
  |  |  247|   361k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|   361k|        return vscan_parse_format_string(format, handler);
  494|   361k|    }
  495|   361k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  8.23M|{
   36|  8.23M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 6.53M, False: 1.69M]
  ------------------
   37|  6.53M|        return false;
   38|  6.53M|    }
   39|  1.69M|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 1.69M, False: 0]
  |  Branch (39:39): [True: 1.69M, False: 0]
  ------------------
   40|  8.23M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|  54.2k|{
   69|  54.2k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  54.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 54.2k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|  54.2k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  152|  54.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 54.2k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|  54.2k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|  54.2k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  246|  54.2k|    static_cast<    \
  |  |  247|  54.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|  54.2k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  54.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  54.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  54.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  54.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 54.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  54.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  54.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  54.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  54.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  54.2k|    }                                                  \
  |  |  |  |   70|  54.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|      0|    return it.position();
   86|  54.2k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIcNSF_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
  313|  6.17M|    {
  314|  6.17M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_baseC2Em:
  132|  13.3M|    {
  133|  13.3M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  153|  13.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 13.3M]
  |  |  ------------------
  ------------------
  134|      0|            visited_args_upper.resize((args_count - 64) / 8);
  135|      0|        }
  136|  13.3M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcEC2EN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
  263|  6.17M|    {
  264|  6.17M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  6.17M|{
  441|  6.17M|    const auto beg = handler.get_ctx().begin();
  442|  6.17M|    detail::parse_format_string<false>(format, handler);
  443|  6.17M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  6.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 325k, False: 5.84M]
  |  |  ------------------
  ------------------
  444|   325k|        return unexpected(handler.error);
  445|   325k|    }
  446|  5.84M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  6.17M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
  424|  42.3M|    {
  425|  42.3M|        return ctx.get();
  426|  42.3M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
  267|  42.3M|    {
  268|  42.3M|        return contiguous_ctx;
  269|  42.3M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
  317|  12.0M|    {
  318|  12.0M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 12.0M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  12.0M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
   91|  6.17M|{
   92|  6.17M|    auto arg = ctx.arg(id);
   93|  6.17M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  6.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 6.17M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  6.17M|    return arg;
   97|  6.17M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
  207|  13.3M|    {
  208|  13.3M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|  13.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 13.3M]
  |  |  ------------------
  ------------------
  209|      0|            on_error("Invalid out-of-range argument ID");
  210|      0|            return;
  211|      0|        }
  212|       |
  213|  13.3M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  153|  13.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 13.3M]
  |  |  ------------------
  ------------------
  214|      0|            return on_error("Argument with this ID has already been scanned");
  215|      0|        }
  216|       |
  217|  13.3M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|  13.3M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 13.3M, False: 0]
  |  |  ------------------
  ------------------
  218|  13.3M|            visited_args_lower64 |= (1ull << id);
  219|  13.3M|            return;
  220|  13.3M|        }
  221|       |
  222|      0|        id -= 64;
  223|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
  224|      0|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
  192|  13.3M|    {
  193|  13.3M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|  13.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 13.3M]
  |  |  ------------------
  ------------------
  194|      0|            on_error("Invalid out-of-range argument ID");
  195|      0|            return false;
  196|      0|        }
  197|       |
  198|  13.3M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|  13.3M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 13.3M, False: 0]
  |  |  ------------------
  ------------------
  199|  13.3M|            return (visited_args_lower64 >> id) & 1ull;
  200|  13.3M|        }
  201|       |
  202|      0|        id -= 64;
  203|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
  204|  13.3M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
  176|  1.73M|    {
  177|  1.73M|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  153|  1.73M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.73M, False: 0]
  |  |  ------------------
  ------------------
  178|  1.73M|            error = err;
  179|  1.73M|        }
  180|  1.73M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
  346|  6.17M|    {
  347|  6.17M|        return parse_ctx.next_arg_id();
  348|  6.17M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
  387|  6.17M|    {
  388|  6.17M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  6.17M|        set_arg_as_visited(arg_id);
  390|       |
  391|  6.17M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 6.17M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  6.17M|        auto specs = detail::format_specs{};
  401|  6.17M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  6.17M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  6.17M|            arg.type()};
  404|       |
  405|  6.17M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  6.17M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 6.17M]
  |  Branch (406:29): [True: 72.3k, False: 6.10M]
  ------------------
  407|  72.3k|            SCN_UNLIKELY_ATTR
  408|  72.3k|            on_error("Missing '}' in format string");
  409|  72.3k|            return parse_ctx.begin();
  410|  72.3k|        }
  411|  6.10M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  6.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 36.1k, False: 6.06M]
  |  |  ------------------
  ------------------
  412|  36.1k|            return parse_ctx.begin();
  413|  36.1k|        }
  414|  6.06M|        parse_ctx.advance_to(begin);
  415|       |
  416|  6.06M|        on_visit_scan_arg(
  417|  6.06M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  6.06M|                                           get_ctx().locale()},
  419|  6.06M|            arg);
  420|  6.06M|        return parse_ctx.begin();
  421|  6.10M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
  111|  6.17M|    {
  112|  6.17M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  358|  6.06M|    {
  359|  6.06M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 6.06M]
  |  Branch (359:23): [True: 0, False: 6.06M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  6.06M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  6.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  6.06M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  6.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 217k, False: 5.84M]
  |  |  ------------------
  ------------------
  366|   217k|            on_error(r.error());
  367|   217k|        }
  368|  5.84M|        else {
  369|  5.84M|            get_ctx().advance_to(*r);
  370|  5.84M|        }
  371|  6.06M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorEPKc:
  171|  1.44M|    {
  172|  1.44M|        SCN_UNLIKELY_ATTR
  173|  1.44M|        error = scan_error{scan_error::invalid_format_string, msg};
  174|  1.44M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
  139|  13.3M|    {
  140|  13.3M|        {
  141|  13.3M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (141:45): [True: 0, False: 13.3M]
  ------------------
  142|  13.3M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (142:35): [True: 0, False: 13.3M]
  ------------------
  143|  13.3M|                                      ? std::numeric_limits<uint64_t>::max()
  144|  13.3M|                                      : (1ull << args_count_lower64) - 1;
  145|       |
  146|  13.3M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (146:17): [True: 0, False: 13.3M]
  ------------------
  147|      0|                return on_error("Argument list not exhausted");
  148|      0|            }
  149|  13.3M|        }
  150|       |
  151|  13.3M|        if (args_count < 64) {
  ------------------
  |  Branch (151:13): [True: 13.3M, False: 0]
  ------------------
  152|  13.3M|            return;
  153|  13.3M|        }
  154|       |
  155|      0|        auto last_args_count = args_count - 64;
  156|      0|        for (auto it = visited_args_upper.begin();
  157|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (157:14): [True: 0, False: 0]
  ------------------
  158|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (158:17): [True: 0, False: 0]
  ------------------
  159|      0|                return on_error("Argument list not exhausted");
  160|      0|            }
  161|      0|            last_args_count -= 8;
  162|      0|        }
  163|       |
  164|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
  165|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (165:13): [True: 0, False: 0]
  ------------------
  166|      0|            return on_error("Argument list not exhausted");
  167|      0|        }
  168|      0|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_base9get_errorEv:
  187|  13.3M|    {
  188|  13.3M|        return error;
  189|  13.3M|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_basecvbEv:
  183|  39.2M|    {
  184|  39.2M|        return static_cast<bool>(error);
  185|  39.2M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
  313|   361k|    {
  314|   361k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
  240|   361k|    {
  241|   361k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   361k|{
  441|   361k|    const auto beg = handler.get_ctx().begin();
  442|   361k|    detail::parse_format_string<false>(format, handler);
  443|   361k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 325k, False: 36.1k]
  |  |  ------------------
  ------------------
  444|   325k|        return unexpected(handler.error);
  445|   325k|    }
  446|  36.1k|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   361k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
  424|  1.66M|    {
  425|  1.66M|        return ctx.get();
  426|  1.66M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcE3getEv:
  244|  1.66M|    {
  245|  1.66M|        return ctx;
  246|  1.66M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
  317|   397k|    {
  318|   397k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 397k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|   397k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
   91|   361k|{
   92|   361k|    auto arg = ctx.arg(id);
   93|   361k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 361k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   361k|    return arg;
   97|   361k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
  346|   361k|    {
  347|   361k|        return parse_ctx.next_arg_id();
  348|   361k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
  387|   361k|    {
  388|   361k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   361k|        set_arg_as_visited(arg_id);
  390|       |
  391|   361k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 361k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   361k|        auto specs = detail::format_specs{};
  401|   361k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   361k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   361k|            arg.type()};
  404|       |
  405|   361k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   361k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 361k]
  |  Branch (406:29): [True: 72.3k, False: 289k]
  ------------------
  407|  72.3k|            SCN_UNLIKELY_ATTR
  408|  72.3k|            on_error("Missing '}' in format string");
  409|  72.3k|            return parse_ctx.begin();
  410|  72.3k|        }
  411|   289k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   289k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 36.1k, False: 253k]
  |  |  ------------------
  ------------------
  412|  36.1k|            return parse_ctx.begin();
  413|  36.1k|        }
  414|   253k|        parse_ctx.advance_to(begin);
  415|       |
  416|   253k|        on_visit_scan_arg(
  417|   253k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   253k|                                           get_ctx().locale()},
  419|   253k|            arg);
  420|   253k|        return parse_ctx.begin();
  421|   289k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
  111|   361k|    {
  112|   361k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|   253k|    {
  359|   253k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 253k]
  |  Branch (359:23): [True: 0, False: 253k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   253k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|   253k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   253k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   253k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 217k, False: 36.1k]
  |  |  ------------------
  ------------------
  366|   217k|            on_error(r.error());
  367|   217k|        }
  368|  36.1k|        else {
  369|  36.1k|            get_ctx().advance_to(*r);
  370|  36.1k|        }
  371|   253k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  7.83M|{
  456|  7.83M|    const auto argcount = args.size();
  457|  7.83M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 1.65M, False: 6.17M]
  |  Branch (457:60): [True: 1.65M, False: 0]
  ------------------
  458|  1.65M|        auto arg = args.get(0);
  459|  1.65M|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  1.65M|    static_cast<    \
  |  |  247|  1.65M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|  1.65M|    }
  461|       |
  462|  6.17M|    auto handler = format_handler<true, CharT>{
  463|  6.17M|        ranges::subrange<const CharT*>{source.data(),
  464|  6.17M|                                       source.data() + source.size()},
  465|  6.17M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  6.17M|    static_cast<    \
  |  |  247|  6.17M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  6.17M|    static_cast<    \
  |  |  247|  6.17M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  6.17M|    return vscan_parse_format_string(format, handler);
  467|  7.83M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|  2.48M|{
   49|  2.48M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  2.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.48M]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|  2.48M|    auto reader =
   55|  2.48M|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|  2.48M|            ranges::subrange<const CharT*>{source.data(),
   57|  2.48M|                                           source.data() + source.size()},
   58|  2.48M|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|  2.48M|    static_cast<    \
  |  |  247|  2.48M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  2.48M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  2.48M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.48M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.48M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 54.2k, False: 2.43M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  54.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  54.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  54.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  54.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  54.2k|    }                                                  \
  |  |  |  |   70|  2.48M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|  2.43M|    return ranges::distance(source.data(), it);
   61|  2.48M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  7.21M|{
  456|  7.21M|    const auto argcount = args.size();
  457|  7.21M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 1.43M, False: 5.78M]
  |  Branch (457:60): [True: 1.43M, False: 0]
  ------------------
  458|  1.43M|        auto arg = args.get(0);
  459|  1.43M|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  1.43M|    static_cast<    \
  |  |  247|  1.43M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|  1.43M|    }
  461|       |
  462|  5.78M|    auto handler = format_handler<true, CharT>{
  463|  5.78M|        ranges::subrange<const CharT*>{source.data(),
  464|  5.78M|                                       source.data() + source.size()},
  465|  5.78M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  5.78M|    static_cast<    \
  |  |  247|  5.78M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  5.78M|    static_cast<    \
  |  |  247|  5.78M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  5.78M|    return vscan_parse_format_string(format, handler);
  467|  7.21M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  8.37M|{
   36|  8.37M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 6.83M, False: 1.54M]
  ------------------
   37|  6.83M|        return false;
   38|  6.83M|    }
   39|  1.54M|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 1.54M, False: 0]
  |  Branch (39:39): [True: 1.54M, False: 0]
  ------------------
   40|  8.37M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|  2.14M|{
   49|  2.14M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  2.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.14M]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|  2.14M|    auto reader =
   55|  2.14M|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|  2.14M|            ranges::subrange<const CharT*>{source.data(),
   57|  2.14M|                                           source.data() + source.size()},
   58|  2.14M|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|  2.14M|    static_cast<    \
  |  |  247|  2.14M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  2.14M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  2.14M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.14M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.14M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 162k, False: 1.98M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|   162k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|   162k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   162k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|   162k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|   162k|    }                                                  \
  |  |  |  |   70|  2.14M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|  1.98M|    return ranges::distance(source.data(), it);
   61|  2.14M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIwNSF_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
  313|  5.78M|    {
  314|  5.78M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwEC2EN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
  263|  5.78M|    {
  264|  5.78M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  5.78M|{
  441|  5.78M|    const auto beg = handler.get_ctx().begin();
  442|  5.78M|    detail::parse_format_string<false>(format, handler);
  443|  5.78M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  5.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 976k, False: 4.80M]
  |  |  ------------------
  ------------------
  444|   976k|        return unexpected(handler.error);
  445|   976k|    }
  446|  4.80M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  5.78M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
  424|  37.8M|    {
  425|  37.8M|        return ctx.get();
  426|  37.8M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
  267|  37.8M|    {
  268|  37.8M|        return contiguous_ctx;
  269|  37.8M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
  317|  10.5M|    {
  318|  10.5M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 10.5M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  10.5M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
   91|  5.78M|{
   92|  5.78M|    auto arg = ctx.arg(id);
   93|  5.78M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  5.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.78M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  5.78M|    return arg;
   97|  5.78M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
  346|  5.78M|    {
  347|  5.78M|        return parse_ctx.next_arg_id();
  348|  5.78M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
  387|  5.78M|    {
  388|  5.78M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  5.78M|        set_arg_as_visited(arg_id);
  390|       |
  391|  5.78M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 5.78M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  5.78M|        auto specs = detail::format_specs{};
  401|  5.78M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  5.78M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  5.78M|            arg.type()};
  404|       |
  405|  5.78M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  5.78M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 5.78M]
  |  Branch (406:29): [True: 217k, False: 5.56M]
  ------------------
  407|   217k|            SCN_UNLIKELY_ATTR
  408|   217k|            on_error("Missing '}' in format string");
  409|   217k|            return parse_ctx.begin();
  410|   217k|        }
  411|  5.56M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  5.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 108k, False: 5.46M]
  |  |  ------------------
  ------------------
  412|   108k|            return parse_ctx.begin();
  413|   108k|        }
  414|  5.46M|        parse_ctx.advance_to(begin);
  415|       |
  416|  5.46M|        on_visit_scan_arg(
  417|  5.46M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  5.46M|                                           get_ctx().locale()},
  419|  5.46M|            arg);
  420|  5.46M|        return parse_ctx.begin();
  421|  5.56M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
  111|  5.78M|    {
  112|  5.78M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  358|  5.46M|    {
  359|  5.46M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 5.46M]
  |  Branch (359:23): [True: 0, False: 5.46M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  5.46M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  5.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  5.46M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  5.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 651k, False: 4.80M]
  |  |  ------------------
  ------------------
  366|   651k|            on_error(r.error());
  367|   651k|        }
  368|  4.80M|        else {
  369|  4.80M|            get_ctx().advance_to(*r);
  370|  4.80M|        }
  371|  5.46M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|  1.15M|{
  476|  1.15M|    const auto argcount = args.size();
  477|  1.15M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 108k, False: 1.04M]
  |  Branch (477:60): [True: 108k, False: 0]
  ------------------
  478|   108k|        auto arg = args.get(0);
  479|   108k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  246|   108k|    static_cast<    \
  |  |  247|   108k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|   108k|    }
  481|       |
  482|  1.04M|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 1.04M]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|  1.04M|    SCN_UNLIKELY_ATTR
  490|  1.04M|    {
  491|  1.04M|        auto handler = format_handler<false, CharT>{
  492|  1.04M|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  1.04M|    static_cast<    \
  |  |  247|  1.04M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  1.04M|    static_cast<    \
  |  |  247|  1.04M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|  1.04M|        return vscan_parse_format_string(format, handler);
  494|  1.04M|    }
  495|  1.04M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|   162k|{
   69|   162k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 162k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|   162k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  152|   162k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 162k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|   162k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|   162k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  246|   162k|    static_cast<    \
  |  |  247|   162k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|   162k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|   162k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   162k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   162k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 162k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|   162k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|   162k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   162k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|   162k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|   162k|    }                                                  \
  |  |  |  |   70|   162k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|      0|    return it.position();
   86|   162k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
  313|  1.04M|    {
  314|  1.04M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
  240|  1.04M|    {
  241|  1.04M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  1.04M|{
  441|  1.04M|    const auto beg = handler.get_ctx().begin();
  442|  1.04M|    detail::parse_format_string<false>(format, handler);
  443|  1.04M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 976k, False: 72.3k]
  |  |  ------------------
  ------------------
  444|   976k|        return unexpected(handler.error);
  445|   976k|    }
  446|  72.3k|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  1.04M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
  424|  4.73M|    {
  425|  4.73M|        return ctx.get();
  426|  4.73M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwE3getEv:
  244|  4.73M|    {
  245|  4.73M|        return ctx;
  246|  4.73M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
  317|  1.12M|    {
  318|  1.12M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 1.12M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  1.12M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
   91|  1.04M|{
   92|  1.04M|    auto arg = ctx.arg(id);
   93|  1.04M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.04M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  1.04M|    return arg;
   97|  1.04M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
  346|  1.04M|    {
  347|  1.04M|        return parse_ctx.next_arg_id();
  348|  1.04M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
  387|  1.04M|    {
  388|  1.04M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  1.04M|        set_arg_as_visited(arg_id);
  390|       |
  391|  1.04M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 1.04M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  1.04M|        auto specs = detail::format_specs{};
  401|  1.04M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  1.04M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  1.04M|            arg.type()};
  404|       |
  405|  1.04M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  1.04M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 1.04M]
  |  Branch (406:29): [True: 217k, False: 831k]
  ------------------
  407|   217k|            SCN_UNLIKELY_ATTR
  408|   217k|            on_error("Missing '}' in format string");
  409|   217k|            return parse_ctx.begin();
  410|   217k|        }
  411|   831k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   831k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 108k, False: 723k]
  |  |  ------------------
  ------------------
  412|   108k|            return parse_ctx.begin();
  413|   108k|        }
  414|   723k|        parse_ctx.advance_to(begin);
  415|       |
  416|   723k|        on_visit_scan_arg(
  417|   723k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   723k|                                           get_ctx().locale()},
  419|   723k|            arg);
  420|   723k|        return parse_ctx.begin();
  421|   831k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
  111|  1.04M|    {
  112|  1.04M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|   723k|    {
  359|   723k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 723k]
  |  Branch (359:23): [True: 0, False: 723k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   723k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|   723k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   723k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   723k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 651k, False: 72.3k]
  |  |  ------------------
  ------------------
  366|   651k|            on_error(r.error());
  367|   651k|        }
  368|  72.3k|        else {
  369|  72.3k|            get_ctx().advance_to(*r);
  370|  72.3k|        }
  371|   723k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   829k|{
  502|   829k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|   829k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   829k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  18.0k|{
  502|  18.0k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  18.0k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   716k|{
  502|   716k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|   716k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   716k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  54.2k|{
  502|  54.2k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  54.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  54.2k|}

_ZN3scn4fuzz16make_input_viewsENS_2v24spanIKhEE:
   53|  3.01k|{
   54|  3.01k|    SCN_EXPECT(data.size() <= max_input_bytes);
  ------------------
  |  |  242|  3.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   55|       |
   56|       |    // narrow
   57|      0|    string_buffer.resize(data.size());
   58|  3.01k|    std::copy(data.begin(), data.end(),
   59|  3.01k|              reinterpret_cast<uint8_t*>(&string_buffer[0]));
   60|  3.01k|    auto sv = std::string_view{string_buffer};
   61|       |
   62|       |    // wide, direct copy
   63|  3.01k|    wstring_buffer_direct.resize(data.size());
   64|  3.01k|    std::copy(data.begin(), data.end(),
   65|  3.01k|              reinterpret_cast<uint8_t*>(&wstring_buffer_direct[0]));
   66|  3.01k|    auto wsv_direct = std::wstring_view{wstring_buffer_direct};
   67|       |
   68|       |    // wide, bitwise reinterpret
   69|  3.01k|    const auto wsv_reinterpret_size =
   70|  3.01k|        data.size() < sizeof(wchar_t) ? 1 : (data.size() / sizeof(wchar_t));
  ------------------
  |  Branch (70:9): [True: 135, False: 2.87k]
  ------------------
   71|  3.01k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   72|  3.01k|    std::memcpy(wstring_buffer_reinterpreted.data(), data.data(), data.size());
   73|  3.01k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   74|       |
   75|       |    // wide, transcode to correct encoding (utf16 or utf32)
   76|  3.01k|    std::wstring_view wsv_transcoded;
   77|  3.01k|    if (!simdutf::validate_utf8(sv.data(), sv.size())) {
  ------------------
  |  Branch (77:9): [True: 684, False: 2.33k]
  ------------------
   78|    684|        wsv_transcoded = {wstring_buffer_direct};
   79|    684|    }
   80|  2.33k|    else {
   81|  2.33k|        if constexpr (sizeof(wchar_t) == 2) {
  ------------------
  |  Branch (81:23): [Folded - Ignored]
  ------------------
   82|      0|            auto size = simdutf::utf16_length_from_utf8(sv.data(), sv.size());
   83|      0|            wstring_buffer_transcoded_wide.resize(size);
   84|      0|            (void)simdutf::convert_valid_utf8_to_utf16(
   85|      0|                sv.data(), sv.size(),
   86|      0|                reinterpret_cast<char16_t*>(
   87|      0|                    wstring_buffer_transcoded_wide.data()));
   88|      0|        }
   89|  2.33k|        else {
   90|  2.33k|            auto size = simdutf::utf32_length_from_utf8(sv.data(), sv.size());
   91|  2.33k|            wstring_buffer_transcoded_wide.resize(size);
   92|  2.33k|            (void)simdutf::convert_valid_utf8_to_utf32(
   93|  2.33k|                sv.data(), sv.size(),
   94|  2.33k|                reinterpret_cast<char32_t*>(
   95|  2.33k|                    wstring_buffer_transcoded_wide.data()));
   96|  2.33k|        }
   97|  2.33k|        wsv_transcoded = {wstring_buffer_transcoded_wide};
   98|  2.33k|    }
   99|       |
  100|  3.01k|    return std::make_tuple(sv, wsv_direct, wsv_reintepreted, wsv_transcoded);
  101|  3.01k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  150|  3.01k|{
  151|  3.01k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  152|  3.01k|    auto& buf = get_format_string_view_buffer<CharT>();
  153|  3.01k|    buf.resize(sizeof...(Args));
  154|  3.01k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  155|  3.01k|    return {buf.data(), buf.size()};
  156|  3.01k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  136|  3.01k|{
  137|  3.01k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (137:19): [Folded - Ignored]
  ------------------
  138|  3.01k|        return format_string_view_buffer;
  139|  3.01k|    }
  140|  3.01k|    else {
  141|  3.01k|        return wformat_string_view_buffer;
  142|  3.01k|    }
  143|  3.01k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  210|  3.01k|{
  211|  3.01k|    do_basic_run_for_source<CharT>(data, format_strings);
  212|  3.01k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  213|  3.01k|                                   format_strings);
  214|  3.01k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  3.01k|{
  162|       |    // Regular scan
  163|  30.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 30.1k, False: 3.01k]
  ------------------
  164|  30.1k|        auto it = scn::ranges::begin(source);
  165|   504k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   504k|            auto result = scn::scan<T>(
  167|   504k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   504k|                scn::runtime_format(f));
  169|   504k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 30.1k, False: 474k]
  ------------------
  170|  30.1k|                break;
  171|  30.1k|            }
  172|   474k|            it = result->begin();
  173|   474k|        }
  174|  30.1k|    }
  175|       |
  176|       |    // scan localized
  177|  30.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 30.1k, False: 3.01k]
  ------------------
  178|  30.1k|        auto it = scn::ranges::begin(source);
  179|   504k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   504k|            auto result = scn::scan<T>(
  181|   504k|                global_locale,
  182|   504k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   504k|                scn::runtime_format(f));
  184|   504k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 30.1k, False: 474k]
  ------------------
  185|  30.1k|                break;
  186|  30.1k|            }
  187|   474k|            it = result->begin();
  188|   474k|        }
  189|  30.1k|    }
  190|       |
  191|       |    // scan_value
  192|  3.01k|    {
  193|  3.01k|        auto it = scn::ranges::begin(source);
  194|   116k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|   116k|            auto result = scn::scan_value<T>(
  196|   116k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|   116k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 3.01k, False: 113k]
  ------------------
  198|  3.01k|                break;
  199|  3.01k|            }
  200|   113k|            it = result->begin();
  201|   113k|        }
  202|  3.01k|    }
  203|  3.01k|}
_ZN3scn4fuzz21do_basic_run_for_typeIchNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  3.01k|{
  162|       |    // Regular scan
  163|  30.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 30.1k, False: 3.01k]
  ------------------
  164|  30.1k|        auto it = scn::ranges::begin(source);
  165|   518k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   518k|            auto result = scn::scan<T>(
  167|   518k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   518k|                scn::runtime_format(f));
  169|   518k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 30.1k, False: 488k]
  ------------------
  170|  30.1k|                break;
  171|  30.1k|            }
  172|   488k|            it = result->begin();
  173|   488k|        }
  174|  30.1k|    }
  175|       |
  176|       |    // scan localized
  177|  30.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 30.1k, False: 3.01k]
  ------------------
  178|  30.1k|        auto it = scn::ranges::begin(source);
  179|   518k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   518k|            auto result = scn::scan<T>(
  181|   518k|                global_locale,
  182|   518k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   518k|                scn::runtime_format(f));
  184|   518k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 30.1k, False: 488k]
  ------------------
  185|  30.1k|                break;
  186|  30.1k|            }
  187|   488k|            it = result->begin();
  188|   488k|        }
  189|  30.1k|    }
  190|       |
  191|       |    // scan_value
  192|  3.01k|    {
  193|  3.01k|        auto it = scn::ranges::begin(source);
  194|   113k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|   113k|            auto result = scn::scan_value<T>(
  196|   113k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|   113k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 3.01k, False: 110k]
  ------------------
  198|  3.01k|                break;
  199|  3.01k|            }
  200|   110k|            it = result->begin();
  201|   110k|        }
  202|  3.01k|    }
  203|  3.01k|}
_ZN3scn4fuzz21do_basic_run_for_typeIciNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  3.01k|{
  162|       |    // Regular scan
  163|  30.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 30.1k, False: 3.01k]
  ------------------
  164|  30.1k|        auto it = scn::ranges::begin(source);
  165|   778k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   778k|            auto result = scn::scan<T>(
  167|   778k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   778k|                scn::runtime_format(f));
  169|   778k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 30.1k, False: 748k]
  ------------------
  170|  30.1k|                break;
  171|  30.1k|            }
  172|   748k|            it = result->begin();
  173|   748k|        }
  174|  30.1k|    }
  175|       |
  176|       |    // scan localized
  177|  30.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 30.1k, False: 3.01k]
  ------------------
  178|  30.1k|        auto it = scn::ranges::begin(source);
  179|   778k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   778k|            auto result = scn::scan<T>(
  181|   778k|                global_locale,
  182|   778k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   778k|                scn::runtime_format(f));
  184|   778k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 30.1k, False: 748k]
  ------------------
  185|  30.1k|                break;
  186|  30.1k|            }
  187|   748k|            it = result->begin();
  188|   748k|        }
  189|  30.1k|    }
  190|       |
  191|       |    // scan_value
  192|  3.01k|    {
  193|  3.01k|        auto it = scn::ranges::begin(source);
  194|   160k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|   160k|            auto result = scn::scan_value<T>(
  196|   160k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|   160k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 3.01k, False: 157k]
  ------------------
  198|  3.01k|                break;
  199|  3.01k|            }
  200|   157k|            it = result->begin();
  201|   157k|        }
  202|  3.01k|    }
  203|  3.01k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  3.01k|{
  162|       |    // Regular scan
  163|  30.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 30.1k, False: 3.01k]
  ------------------
  164|  30.1k|        auto it = scn::ranges::begin(source);
  165|   646k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   646k|            auto result = scn::scan<T>(
  167|   646k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   646k|                scn::runtime_format(f));
  169|   646k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 30.1k, False: 616k]
  ------------------
  170|  30.1k|                break;
  171|  30.1k|            }
  172|   616k|            it = result->begin();
  173|   616k|        }
  174|  30.1k|    }
  175|       |
  176|       |    // scan localized
  177|  30.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 30.1k, False: 3.01k]
  ------------------
  178|  30.1k|        auto it = scn::ranges::begin(source);
  179|   646k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   646k|            auto result = scn::scan<T>(
  181|   646k|                global_locale,
  182|   646k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   646k|                scn::runtime_format(f));
  184|   646k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 30.1k, False: 616k]
  ------------------
  185|  30.1k|                break;
  186|  30.1k|            }
  187|   616k|            it = result->begin();
  188|   616k|        }
  189|  30.1k|    }
  190|       |
  191|       |    // scan_value
  192|  3.01k|    {
  193|  3.01k|        auto it = scn::ranges::begin(source);
  194|   135k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|   135k|            auto result = scn::scan_value<T>(
  196|   135k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|   135k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 3.01k, False: 132k]
  ------------------
  198|  3.01k|                break;
  199|  3.01k|            }
  200|   132k|            it = result->begin();
  201|   132k|        }
  202|  3.01k|    }
  203|  3.01k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  3.01k|{
  162|       |    // Regular scan
  163|  30.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 30.1k, False: 3.01k]
  ------------------
  164|  30.1k|        auto it = scn::ranges::begin(source);
  165|   805k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   805k|            auto result = scn::scan<T>(
  167|   805k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   805k|                scn::runtime_format(f));
  169|   805k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 30.1k, False: 775k]
  ------------------
  170|  30.1k|                break;
  171|  30.1k|            }
  172|   775k|            it = result->begin();
  173|   775k|        }
  174|  30.1k|    }
  175|       |
  176|       |    // scan localized
  177|  30.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 30.1k, False: 3.01k]
  ------------------
  178|  30.1k|        auto it = scn::ranges::begin(source);
  179|   805k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   805k|            auto result = scn::scan<T>(
  181|   805k|                global_locale,
  182|   805k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   805k|                scn::runtime_format(f));
  184|   805k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 30.1k, False: 775k]
  ------------------
  185|  30.1k|                break;
  186|  30.1k|            }
  187|   775k|            it = result->begin();
  188|   775k|        }
  189|  30.1k|    }
  190|       |
  191|       |    // scan_value
  192|  3.01k|    {
  193|  3.01k|        auto it = scn::ranges::begin(source);
  194|   166k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|   166k|            auto result = scn::scan_value<T>(
  196|   166k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|   166k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 3.01k, False: 163k]
  ------------------
  198|  3.01k|                break;
  199|  3.01k|            }
  200|   163k|            it = result->begin();
  201|   163k|        }
  202|  3.01k|    }
  203|  3.01k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  3.01k|{
  162|       |    // Regular scan
  163|  30.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 30.1k, False: 3.01k]
  ------------------
  164|  30.1k|        auto it = scn::ranges::begin(source);
  165|   661k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   661k|            auto result = scn::scan<T>(
  167|   661k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   661k|                scn::runtime_format(f));
  169|   661k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 30.1k, False: 631k]
  ------------------
  170|  30.1k|                break;
  171|  30.1k|            }
  172|   631k|            it = result->begin();
  173|   631k|        }
  174|  30.1k|    }
  175|       |
  176|       |    // scan localized
  177|  30.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 30.1k, False: 3.01k]
  ------------------
  178|  30.1k|        auto it = scn::ranges::begin(source);
  179|   661k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   661k|            auto result = scn::scan<T>(
  181|   661k|                global_locale,
  182|   661k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   661k|                scn::runtime_format(f));
  184|   661k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 30.1k, False: 631k]
  ------------------
  185|  30.1k|                break;
  186|  30.1k|            }
  187|   631k|            it = result->begin();
  188|   631k|        }
  189|  30.1k|    }
  190|       |
  191|       |    // scan_value
  192|  3.01k|    {
  193|  3.01k|        auto it = scn::ranges::begin(source);
  194|   137k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|   137k|            auto result = scn::scan_value<T>(
  196|   137k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|   137k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 3.01k, False: 134k]
  ------------------
  198|  3.01k|                break;
  199|  3.01k|            }
  200|   134k|            it = result->begin();
  201|   134k|        }
  202|  3.01k|    }
  203|  3.01k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  3.01k|{
  162|       |    // Regular scan
  163|  30.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 30.1k, False: 3.01k]
  ------------------
  164|  30.1k|        auto it = scn::ranges::begin(source);
  165|  33.1k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  33.1k|            auto result = scn::scan<T>(
  167|  33.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  33.1k|                scn::runtime_format(f));
  169|  33.1k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 30.1k, False: 3.01k]
  ------------------
  170|  30.1k|                break;
  171|  30.1k|            }
  172|  3.01k|            it = result->begin();
  173|  3.01k|        }
  174|  30.1k|    }
  175|       |
  176|       |    // scan localized
  177|  30.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 30.1k, False: 3.01k]
  ------------------
  178|  30.1k|        auto it = scn::ranges::begin(source);
  179|  33.1k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  33.1k|            auto result = scn::scan<T>(
  181|  33.1k|                global_locale,
  182|  33.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  33.1k|                scn::runtime_format(f));
  184|  33.1k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 30.1k, False: 3.01k]
  ------------------
  185|  30.1k|                break;
  186|  30.1k|            }
  187|  3.01k|            it = result->begin();
  188|  3.01k|        }
  189|  30.1k|    }
  190|       |
  191|       |    // scan_value
  192|  3.01k|    {
  193|  3.01k|        auto it = scn::ranges::begin(source);
  194|  3.01k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  3.01k|            auto result = scn::scan_value<T>(
  196|  3.01k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  3.01k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 3.01k, False: 0]
  ------------------
  198|  3.01k|                break;
  199|  3.01k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  3.01k|    }
  203|  3.01k|}
_ZN3scn4fuzz21do_basic_run_for_typeIchKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  3.01k|{
  162|       |    // Regular scan
  163|  30.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 30.1k, False: 3.01k]
  ------------------
  164|  30.1k|        auto it = scn::ranges::begin(source);
  165|  33.1k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  33.1k|            auto result = scn::scan<T>(
  167|  33.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  33.1k|                scn::runtime_format(f));
  169|  33.1k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 30.1k, False: 3.01k]
  ------------------
  170|  30.1k|                break;
  171|  30.1k|            }
  172|  3.01k|            it = result->begin();
  173|  3.01k|        }
  174|  30.1k|    }
  175|       |
  176|       |    // scan localized
  177|  30.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 30.1k, False: 3.01k]
  ------------------
  178|  30.1k|        auto it = scn::ranges::begin(source);
  179|  33.1k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  33.1k|            auto result = scn::scan<T>(
  181|  33.1k|                global_locale,
  182|  33.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  33.1k|                scn::runtime_format(f));
  184|  33.1k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 30.1k, False: 3.01k]
  ------------------
  185|  30.1k|                break;
  186|  30.1k|            }
  187|  3.01k|            it = result->begin();
  188|  3.01k|        }
  189|  30.1k|    }
  190|       |
  191|       |    // scan_value
  192|  3.01k|    {
  193|  3.01k|        auto it = scn::ranges::begin(source);
  194|  3.01k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  3.01k|            auto result = scn::scan_value<T>(
  196|  3.01k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  3.01k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 3.01k, False: 0]
  ------------------
  198|  3.01k|                break;
  199|  3.01k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  3.01k|    }
  203|  3.01k|}
_ZN3scn4fuzz21do_basic_run_for_typeIciKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  3.01k|{
  162|       |    // Regular scan
  163|  30.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 30.1k, False: 3.01k]
  ------------------
  164|  30.1k|        auto it = scn::ranges::begin(source);
  165|  33.1k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  33.1k|            auto result = scn::scan<T>(
  167|  33.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  33.1k|                scn::runtime_format(f));
  169|  33.1k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 30.1k, False: 3.01k]
  ------------------
  170|  30.1k|                break;
  171|  30.1k|            }
  172|  3.01k|            it = result->begin();
  173|  3.01k|        }
  174|  30.1k|    }
  175|       |
  176|       |    // scan localized
  177|  30.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 30.1k, False: 3.01k]
  ------------------
  178|  30.1k|        auto it = scn::ranges::begin(source);
  179|  33.1k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  33.1k|            auto result = scn::scan<T>(
  181|  33.1k|                global_locale,
  182|  33.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  33.1k|                scn::runtime_format(f));
  184|  33.1k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 30.1k, False: 3.01k]
  ------------------
  185|  30.1k|                break;
  186|  30.1k|            }
  187|  3.01k|            it = result->begin();
  188|  3.01k|        }
  189|  30.1k|    }
  190|       |
  191|       |    // scan_value
  192|  3.01k|    {
  193|  3.01k|        auto it = scn::ranges::begin(source);
  194|  3.01k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  3.01k|            auto result = scn::scan_value<T>(
  196|  3.01k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  3.01k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 3.01k, False: 0]
  ------------------
  198|  3.01k|                break;
  199|  3.01k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  3.01k|    }
  203|  3.01k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  3.01k|{
  162|       |    // Regular scan
  163|  30.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 30.1k, False: 3.01k]
  ------------------
  164|  30.1k|        auto it = scn::ranges::begin(source);
  165|  33.1k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  33.1k|            auto result = scn::scan<T>(
  167|  33.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  33.1k|                scn::runtime_format(f));
  169|  33.1k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 30.1k, False: 3.01k]
  ------------------
  170|  30.1k|                break;
  171|  30.1k|            }
  172|  3.01k|            it = result->begin();
  173|  3.01k|        }
  174|  30.1k|    }
  175|       |
  176|       |    // scan localized
  177|  30.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 30.1k, False: 3.01k]
  ------------------
  178|  30.1k|        auto it = scn::ranges::begin(source);
  179|  33.1k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  33.1k|            auto result = scn::scan<T>(
  181|  33.1k|                global_locale,
  182|  33.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  33.1k|                scn::runtime_format(f));
  184|  33.1k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 30.1k, False: 3.01k]
  ------------------
  185|  30.1k|                break;
  186|  30.1k|            }
  187|  3.01k|            it = result->begin();
  188|  3.01k|        }
  189|  30.1k|    }
  190|       |
  191|       |    // scan_value
  192|  3.01k|    {
  193|  3.01k|        auto it = scn::ranges::begin(source);
  194|  3.01k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  3.01k|            auto result = scn::scan_value<T>(
  196|  3.01k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  3.01k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 3.01k, False: 0]
  ------------------
  198|  3.01k|                break;
  199|  3.01k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  3.01k|    }
  203|  3.01k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  3.01k|{
  162|       |    // Regular scan
  163|  30.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 30.1k, False: 3.01k]
  ------------------
  164|  30.1k|        auto it = scn::ranges::begin(source);
  165|  33.1k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  33.1k|            auto result = scn::scan<T>(
  167|  33.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  33.1k|                scn::runtime_format(f));
  169|  33.1k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 30.1k, False: 3.01k]
  ------------------
  170|  30.1k|                break;
  171|  30.1k|            }
  172|  3.01k|            it = result->begin();
  173|  3.01k|        }
  174|  30.1k|    }
  175|       |
  176|       |    // scan localized
  177|  30.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 30.1k, False: 3.01k]
  ------------------
  178|  30.1k|        auto it = scn::ranges::begin(source);
  179|  33.1k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  33.1k|            auto result = scn::scan<T>(
  181|  33.1k|                global_locale,
  182|  33.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  33.1k|                scn::runtime_format(f));
  184|  33.1k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 30.1k, False: 3.01k]
  ------------------
  185|  30.1k|                break;
  186|  30.1k|            }
  187|  3.01k|            it = result->begin();
  188|  3.01k|        }
  189|  30.1k|    }
  190|       |
  191|       |    // scan_value
  192|  3.01k|    {
  193|  3.01k|        auto it = scn::ranges::begin(source);
  194|  3.01k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  3.01k|            auto result = scn::scan_value<T>(
  196|  3.01k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  3.01k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 3.01k, False: 0]
  ------------------
  198|  3.01k|                break;
  199|  3.01k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  3.01k|    }
  203|  3.01k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  3.01k|{
  162|       |    // Regular scan
  163|  30.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 30.1k, False: 3.01k]
  ------------------
  164|  30.1k|        auto it = scn::ranges::begin(source);
  165|  33.1k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  33.1k|            auto result = scn::scan<T>(
  167|  33.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  33.1k|                scn::runtime_format(f));
  169|  33.1k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 30.1k, False: 3.01k]
  ------------------
  170|  30.1k|                break;
  171|  30.1k|            }
  172|  3.01k|            it = result->begin();
  173|  3.01k|        }
  174|  30.1k|    }
  175|       |
  176|       |    // scan localized
  177|  30.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 30.1k, False: 3.01k]
  ------------------
  178|  30.1k|        auto it = scn::ranges::begin(source);
  179|  33.1k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  33.1k|            auto result = scn::scan<T>(
  181|  33.1k|                global_locale,
  182|  33.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  33.1k|                scn::runtime_format(f));
  184|  33.1k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 30.1k, False: 3.01k]
  ------------------
  185|  30.1k|                break;
  186|  30.1k|            }
  187|  3.01k|            it = result->begin();
  188|  3.01k|        }
  189|  30.1k|    }
  190|       |
  191|       |    // scan_value
  192|  3.01k|    {
  193|  3.01k|        auto it = scn::ranges::begin(source);
  194|  3.01k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  3.01k|            auto result = scn::scan_value<T>(
  196|  3.01k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  3.01k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 3.01k, False: 0]
  ------------------
  198|  3.01k|                break;
  199|  3.01k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  3.01k|    }
  203|  3.01k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
  119|  3.01k|{
  120|  3.01k|    using char_type = ranges::range_value_t<Source>;
  121|  3.01k|    auto& deque = get_noncontiguous_buffer<char_type>();
  122|  3.01k|    std::copy(ranges::begin(source), ranges::end(source),
  123|  3.01k|              std::back_inserter(deque));
  124|  3.01k|    return deque;
  125|  3.01k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
  108|  3.01k|{
  109|  3.01k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (109:19): [Folded - Ignored]
  ------------------
  110|  3.01k|        return noncontiguous_buffer;
  111|  3.01k|    }
  112|  3.01k|    else {
  113|  3.01k|        return wnoncontiguous_buffer;
  114|  3.01k|    }
  115|  3.01k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  150|  3.01k|{
  151|  3.01k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  152|  3.01k|    auto& buf = get_format_string_view_buffer<CharT>();
  153|  3.01k|    buf.resize(sizeof...(Args));
  154|  3.01k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  155|  3.01k|    return {buf.data(), buf.size()};
  156|  3.01k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  136|  3.01k|{
  137|  3.01k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (137:19): [Folded - Ignored]
  ------------------
  138|  3.01k|        return format_string_view_buffer;
  139|  3.01k|    }
  140|  3.01k|    else {
  141|  3.01k|        return wformat_string_view_buffer;
  142|  3.01k|    }
  143|  3.01k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  210|  9.04k|{
  211|  9.04k|    do_basic_run_for_source<CharT>(data, format_strings);
  212|  9.04k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  213|  9.04k|                                   format_strings);
  214|  9.04k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  9.04k|{
  162|       |    // Regular scan
  163|  90.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 90.4k, False: 9.04k]
  ------------------
  164|  90.4k|        auto it = scn::ranges::begin(source);
  165|   476k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   476k|            auto result = scn::scan<T>(
  167|   476k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   476k|                scn::runtime_format(f));
  169|   476k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 90.4k, False: 386k]
  ------------------
  170|  90.4k|                break;
  171|  90.4k|            }
  172|   386k|            it = result->begin();
  173|   386k|        }
  174|  90.4k|    }
  175|       |
  176|       |    // scan localized
  177|  90.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 90.4k, False: 9.04k]
  ------------------
  178|  90.4k|        auto it = scn::ranges::begin(source);
  179|   476k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   476k|            auto result = scn::scan<T>(
  181|   476k|                global_locale,
  182|   476k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   476k|                scn::runtime_format(f));
  184|   476k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 90.4k, False: 386k]
  ------------------
  185|  90.4k|                break;
  186|  90.4k|            }
  187|   386k|            it = result->begin();
  188|   386k|        }
  189|  90.4k|    }
  190|       |
  191|       |    // scan_value
  192|  9.04k|    {
  193|  9.04k|        auto it = scn::ranges::begin(source);
  194|   100k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|   100k|            auto result = scn::scan_value<T>(
  196|   100k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|   100k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 9.04k, False: 91.8k]
  ------------------
  198|  9.04k|                break;
  199|  9.04k|            }
  200|  91.8k|            it = result->begin();
  201|  91.8k|        }
  202|  9.04k|    }
  203|  9.04k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  9.04k|{
  162|       |    // Regular scan
  163|  90.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 90.4k, False: 9.04k]
  ------------------
  164|  90.4k|        auto it = scn::ranges::begin(source);
  165|   488k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   488k|            auto result = scn::scan<T>(
  167|   488k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   488k|                scn::runtime_format(f));
  169|   488k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 90.4k, False: 398k]
  ------------------
  170|  90.4k|                break;
  171|  90.4k|            }
  172|   398k|            it = result->begin();
  173|   398k|        }
  174|  90.4k|    }
  175|       |
  176|       |    // scan localized
  177|  90.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 90.4k, False: 9.04k]
  ------------------
  178|  90.4k|        auto it = scn::ranges::begin(source);
  179|   488k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   488k|            auto result = scn::scan<T>(
  181|   488k|                global_locale,
  182|   488k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   488k|                scn::runtime_format(f));
  184|   488k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 90.4k, False: 398k]
  ------------------
  185|  90.4k|                break;
  186|  90.4k|            }
  187|   398k|            it = result->begin();
  188|   398k|        }
  189|  90.4k|    }
  190|       |
  191|       |    // scan_value
  192|  9.04k|    {
  193|  9.04k|        auto it = scn::ranges::begin(source);
  194|  98.4k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  98.4k|            auto result = scn::scan_value<T>(
  196|  98.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  98.4k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 9.04k, False: 89.4k]
  ------------------
  198|  9.04k|                break;
  199|  9.04k|            }
  200|  89.4k|            it = result->begin();
  201|  89.4k|        }
  202|  9.04k|    }
  203|  9.04k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  9.04k|{
  162|       |    // Regular scan
  163|  90.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 90.4k, False: 9.04k]
  ------------------
  164|  90.4k|        auto it = scn::ranges::begin(source);
  165|   706k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   706k|            auto result = scn::scan<T>(
  167|   706k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   706k|                scn::runtime_format(f));
  169|   706k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 90.4k, False: 616k]
  ------------------
  170|  90.4k|                break;
  171|  90.4k|            }
  172|   616k|            it = result->begin();
  173|   616k|        }
  174|  90.4k|    }
  175|       |
  176|       |    // scan localized
  177|  90.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 90.4k, False: 9.04k]
  ------------------
  178|  90.4k|        auto it = scn::ranges::begin(source);
  179|   706k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   706k|            auto result = scn::scan<T>(
  181|   706k|                global_locale,
  182|   706k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   706k|                scn::runtime_format(f));
  184|   706k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 90.4k, False: 616k]
  ------------------
  185|  90.4k|                break;
  186|  90.4k|            }
  187|   616k|            it = result->begin();
  188|   616k|        }
  189|  90.4k|    }
  190|       |
  191|       |    // scan_value
  192|  9.04k|    {
  193|  9.04k|        auto it = scn::ranges::begin(source);
  194|   138k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|   138k|            auto result = scn::scan_value<T>(
  196|   138k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|   138k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 9.04k, False: 129k]
  ------------------
  198|  9.04k|                break;
  199|  9.04k|            }
  200|   129k|            it = result->begin();
  201|   129k|        }
  202|  9.04k|    }
  203|  9.04k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  9.04k|{
  162|       |    // Regular scan
  163|  90.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 90.4k, False: 9.04k]
  ------------------
  164|  90.4k|        auto it = scn::ranges::begin(source);
  165|   599k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   599k|            auto result = scn::scan<T>(
  167|   599k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   599k|                scn::runtime_format(f));
  169|   599k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 90.4k, False: 508k]
  ------------------
  170|  90.4k|                break;
  171|  90.4k|            }
  172|   508k|            it = result->begin();
  173|   508k|        }
  174|  90.4k|    }
  175|       |
  176|       |    // scan localized
  177|  90.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 90.4k, False: 9.04k]
  ------------------
  178|  90.4k|        auto it = scn::ranges::begin(source);
  179|   599k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   599k|            auto result = scn::scan<T>(
  181|   599k|                global_locale,
  182|   599k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   599k|                scn::runtime_format(f));
  184|   599k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 90.4k, False: 508k]
  ------------------
  185|  90.4k|                break;
  186|  90.4k|            }
  187|   508k|            it = result->begin();
  188|   508k|        }
  189|  90.4k|    }
  190|       |
  191|       |    // scan_value
  192|  9.04k|    {
  193|  9.04k|        auto it = scn::ranges::begin(source);
  194|   117k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|   117k|            auto result = scn::scan_value<T>(
  196|   117k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|   117k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 9.04k, False: 108k]
  ------------------
  198|  9.04k|                break;
  199|  9.04k|            }
  200|   108k|            it = result->begin();
  201|   108k|        }
  202|  9.04k|    }
  203|  9.04k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  9.04k|{
  162|       |    // Regular scan
  163|  90.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 90.4k, False: 9.04k]
  ------------------
  164|  90.4k|        auto it = scn::ranges::begin(source);
  165|   726k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   726k|            auto result = scn::scan<T>(
  167|   726k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   726k|                scn::runtime_format(f));
  169|   726k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 90.4k, False: 635k]
  ------------------
  170|  90.4k|                break;
  171|  90.4k|            }
  172|   635k|            it = result->begin();
  173|   635k|        }
  174|  90.4k|    }
  175|       |
  176|       |    // scan localized
  177|  90.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 90.4k, False: 9.04k]
  ------------------
  178|  90.4k|        auto it = scn::ranges::begin(source);
  179|   726k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   726k|            auto result = scn::scan<T>(
  181|   726k|                global_locale,
  182|   726k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   726k|                scn::runtime_format(f));
  184|   726k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 90.4k, False: 635k]
  ------------------
  185|  90.4k|                break;
  186|  90.4k|            }
  187|   635k|            it = result->begin();
  188|   635k|        }
  189|  90.4k|    }
  190|       |
  191|       |    // scan_value
  192|  9.04k|    {
  193|  9.04k|        auto it = scn::ranges::begin(source);
  194|   142k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|   142k|            auto result = scn::scan_value<T>(
  196|   142k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|   142k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 9.04k, False: 133k]
  ------------------
  198|  9.04k|                break;
  199|  9.04k|            }
  200|   133k|            it = result->begin();
  201|   133k|        }
  202|  9.04k|    }
  203|  9.04k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  9.04k|{
  162|       |    // Regular scan
  163|  90.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 90.4k, False: 9.04k]
  ------------------
  164|  90.4k|        auto it = scn::ranges::begin(source);
  165|   611k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   611k|            auto result = scn::scan<T>(
  167|   611k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   611k|                scn::runtime_format(f));
  169|   611k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 90.4k, False: 521k]
  ------------------
  170|  90.4k|                break;
  171|  90.4k|            }
  172|   521k|            it = result->begin();
  173|   521k|        }
  174|  90.4k|    }
  175|       |
  176|       |    // scan localized
  177|  90.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 90.4k, False: 9.04k]
  ------------------
  178|  90.4k|        auto it = scn::ranges::begin(source);
  179|   611k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   611k|            auto result = scn::scan<T>(
  181|   611k|                global_locale,
  182|   611k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   611k|                scn::runtime_format(f));
  184|   611k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 90.4k, False: 521k]
  ------------------
  185|  90.4k|                break;
  186|  90.4k|            }
  187|   521k|            it = result->begin();
  188|   521k|        }
  189|  90.4k|    }
  190|       |
  191|       |    // scan_value
  192|  9.04k|    {
  193|  9.04k|        auto it = scn::ranges::begin(source);
  194|   119k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|   119k|            auto result = scn::scan_value<T>(
  196|   119k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|   119k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 9.04k, False: 110k]
  ------------------
  198|  9.04k|                break;
  199|  9.04k|            }
  200|   110k|            it = result->begin();
  201|   110k|        }
  202|  9.04k|    }
  203|  9.04k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  9.04k|{
  162|       |    // Regular scan
  163|  90.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 90.4k, False: 9.04k]
  ------------------
  164|  90.4k|        auto it = scn::ranges::begin(source);
  165|  90.4k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  90.4k|            auto result = scn::scan<T>(
  167|  90.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  90.4k|                scn::runtime_format(f));
  169|  90.4k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 90.4k, False: 1]
  ------------------
  170|  90.4k|                break;
  171|  90.4k|            }
  172|      1|            it = result->begin();
  173|      1|        }
  174|  90.4k|    }
  175|       |
  176|       |    // scan localized
  177|  90.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 90.4k, False: 9.04k]
  ------------------
  178|  90.4k|        auto it = scn::ranges::begin(source);
  179|  90.4k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  90.4k|            auto result = scn::scan<T>(
  181|  90.4k|                global_locale,
  182|  90.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  90.4k|                scn::runtime_format(f));
  184|  90.4k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 90.4k, False: 1]
  ------------------
  185|  90.4k|                break;
  186|  90.4k|            }
  187|      1|            it = result->begin();
  188|      1|        }
  189|  90.4k|    }
  190|       |
  191|       |    // scan_value
  192|  9.04k|    {
  193|  9.04k|        auto it = scn::ranges::begin(source);
  194|  9.04k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  9.04k|            auto result = scn::scan_value<T>(
  196|  9.04k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  9.04k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 9.04k, False: 0]
  ------------------
  198|  9.04k|                break;
  199|  9.04k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  9.04k|    }
  203|  9.04k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  9.04k|{
  162|       |    // Regular scan
  163|  90.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 90.4k, False: 9.04k]
  ------------------
  164|  90.4k|        auto it = scn::ranges::begin(source);
  165|  90.4k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  90.4k|            auto result = scn::scan<T>(
  167|  90.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  90.4k|                scn::runtime_format(f));
  169|  90.4k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 90.4k, False: 2]
  ------------------
  170|  90.4k|                break;
  171|  90.4k|            }
  172|      2|            it = result->begin();
  173|      2|        }
  174|  90.4k|    }
  175|       |
  176|       |    // scan localized
  177|  90.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 90.4k, False: 9.04k]
  ------------------
  178|  90.4k|        auto it = scn::ranges::begin(source);
  179|  90.4k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  90.4k|            auto result = scn::scan<T>(
  181|  90.4k|                global_locale,
  182|  90.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  90.4k|                scn::runtime_format(f));
  184|  90.4k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 90.4k, False: 2]
  ------------------
  185|  90.4k|                break;
  186|  90.4k|            }
  187|      2|            it = result->begin();
  188|      2|        }
  189|  90.4k|    }
  190|       |
  191|       |    // scan_value
  192|  9.04k|    {
  193|  9.04k|        auto it = scn::ranges::begin(source);
  194|  9.04k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  9.04k|            auto result = scn::scan_value<T>(
  196|  9.04k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  9.04k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 9.04k, False: 0]
  ------------------
  198|  9.04k|                break;
  199|  9.04k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  9.04k|    }
  203|  9.04k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  9.04k|{
  162|       |    // Regular scan
  163|  90.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 90.4k, False: 9.04k]
  ------------------
  164|  90.4k|        auto it = scn::ranges::begin(source);
  165|  99.4k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  99.4k|            auto result = scn::scan<T>(
  167|  99.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  99.4k|                scn::runtime_format(f));
  169|  99.4k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 90.4k, False: 9.04k]
  ------------------
  170|  90.4k|                break;
  171|  90.4k|            }
  172|  9.04k|            it = result->begin();
  173|  9.04k|        }
  174|  90.4k|    }
  175|       |
  176|       |    // scan localized
  177|  90.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 90.4k, False: 9.04k]
  ------------------
  178|  90.4k|        auto it = scn::ranges::begin(source);
  179|  99.4k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  99.4k|            auto result = scn::scan<T>(
  181|  99.4k|                global_locale,
  182|  99.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  99.4k|                scn::runtime_format(f));
  184|  99.4k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 90.4k, False: 9.04k]
  ------------------
  185|  90.4k|                break;
  186|  90.4k|            }
  187|  9.04k|            it = result->begin();
  188|  9.04k|        }
  189|  90.4k|    }
  190|       |
  191|       |    // scan_value
  192|  9.04k|    {
  193|  9.04k|        auto it = scn::ranges::begin(source);
  194|  9.04k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  9.04k|            auto result = scn::scan_value<T>(
  196|  9.04k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  9.04k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 9.04k, False: 0]
  ------------------
  198|  9.04k|                break;
  199|  9.04k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  9.04k|    }
  203|  9.04k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  9.04k|{
  162|       |    // Regular scan
  163|  90.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 90.4k, False: 9.04k]
  ------------------
  164|  90.4k|        auto it = scn::ranges::begin(source);
  165|  99.4k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  99.4k|            auto result = scn::scan<T>(
  167|  99.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  99.4k|                scn::runtime_format(f));
  169|  99.4k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 90.4k, False: 9.04k]
  ------------------
  170|  90.4k|                break;
  171|  90.4k|            }
  172|  9.04k|            it = result->begin();
  173|  9.04k|        }
  174|  90.4k|    }
  175|       |
  176|       |    // scan localized
  177|  90.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 90.4k, False: 9.04k]
  ------------------
  178|  90.4k|        auto it = scn::ranges::begin(source);
  179|  99.4k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  99.4k|            auto result = scn::scan<T>(
  181|  99.4k|                global_locale,
  182|  99.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  99.4k|                scn::runtime_format(f));
  184|  99.4k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 90.4k, False: 9.04k]
  ------------------
  185|  90.4k|                break;
  186|  90.4k|            }
  187|  9.04k|            it = result->begin();
  188|  9.04k|        }
  189|  90.4k|    }
  190|       |
  191|       |    // scan_value
  192|  9.04k|    {
  193|  9.04k|        auto it = scn::ranges::begin(source);
  194|  9.04k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  9.04k|            auto result = scn::scan_value<T>(
  196|  9.04k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  9.04k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 9.04k, False: 0]
  ------------------
  198|  9.04k|                break;
  199|  9.04k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  9.04k|    }
  203|  9.04k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  9.04k|{
  162|       |    // Regular scan
  163|  90.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 90.4k, False: 9.04k]
  ------------------
  164|  90.4k|        auto it = scn::ranges::begin(source);
  165|  99.4k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  99.4k|            auto result = scn::scan<T>(
  167|  99.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  99.4k|                scn::runtime_format(f));
  169|  99.4k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 90.4k, False: 9.04k]
  ------------------
  170|  90.4k|                break;
  171|  90.4k|            }
  172|  9.04k|            it = result->begin();
  173|  9.04k|        }
  174|  90.4k|    }
  175|       |
  176|       |    // scan localized
  177|  90.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 90.4k, False: 9.04k]
  ------------------
  178|  90.4k|        auto it = scn::ranges::begin(source);
  179|  99.4k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  99.4k|            auto result = scn::scan<T>(
  181|  99.4k|                global_locale,
  182|  99.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  99.4k|                scn::runtime_format(f));
  184|  99.4k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 90.4k, False: 9.04k]
  ------------------
  185|  90.4k|                break;
  186|  90.4k|            }
  187|  9.04k|            it = result->begin();
  188|  9.04k|        }
  189|  90.4k|    }
  190|       |
  191|       |    // scan_value
  192|  9.04k|    {
  193|  9.04k|        auto it = scn::ranges::begin(source);
  194|  9.04k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  9.04k|            auto result = scn::scan_value<T>(
  196|  9.04k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  9.04k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 9.04k, False: 0]
  ------------------
  198|  9.04k|                break;
  199|  9.04k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  9.04k|    }
  203|  9.04k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  9.04k|{
  162|       |    // Regular scan
  163|  90.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 90.4k, False: 9.04k]
  ------------------
  164|  90.4k|        auto it = scn::ranges::begin(source);
  165|  99.4k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  99.4k|            auto result = scn::scan<T>(
  167|  99.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  99.4k|                scn::runtime_format(f));
  169|  99.4k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 90.4k, False: 9.04k]
  ------------------
  170|  90.4k|                break;
  171|  90.4k|            }
  172|  9.04k|            it = result->begin();
  173|  9.04k|        }
  174|  90.4k|    }
  175|       |
  176|       |    // scan localized
  177|  90.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 90.4k, False: 9.04k]
  ------------------
  178|  90.4k|        auto it = scn::ranges::begin(source);
  179|  99.4k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  99.4k|            auto result = scn::scan<T>(
  181|  99.4k|                global_locale,
  182|  99.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  99.4k|                scn::runtime_format(f));
  184|  99.4k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 90.4k, False: 9.04k]
  ------------------
  185|  90.4k|                break;
  186|  90.4k|            }
  187|  9.04k|            it = result->begin();
  188|  9.04k|        }
  189|  90.4k|    }
  190|       |
  191|       |    // scan_value
  192|  9.04k|    {
  193|  9.04k|        auto it = scn::ranges::begin(source);
  194|  9.04k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  9.04k|            auto result = scn::scan_value<T>(
  196|  9.04k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  9.04k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 9.04k, False: 0]
  ------------------
  198|  9.04k|                break;
  199|  9.04k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  9.04k|    }
  203|  9.04k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
  119|  9.04k|{
  120|  9.04k|    using char_type = ranges::range_value_t<Source>;
  121|  9.04k|    auto& deque = get_noncontiguous_buffer<char_type>();
  122|  9.04k|    std::copy(ranges::begin(source), ranges::end(source),
  123|  9.04k|              std::back_inserter(deque));
  124|  9.04k|    return deque;
  125|  9.04k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
  108|  9.04k|{
  109|  9.04k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (109:19): [Folded - Ignored]
  ------------------
  110|  9.04k|        return noncontiguous_buffer;
  111|  9.04k|    }
  112|  9.04k|    else {
  113|  9.04k|        return wnoncontiguous_buffer;
  114|  9.04k|    }
  115|  9.04k|}

LLVMFuzzerTestOneInput:
   59|  3.01k|{
   60|  3.01k|    scn::fuzz::run({data, size});
   61|  3.01k|    return 0;
   62|  3.01k|}
int_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runENS_2v24spanIKhEE:
   35|  3.01k|{
   36|  3.01k|    if (data.size() > max_input_bytes || data.size() == 0) {
  ------------------
  |  Branch (36:9): [True: 0, False: 3.01k]
  |  Branch (36:42): [True: 0, False: 3.01k]
  ------------------
   37|      0|        return;
   38|      0|    }
   39|       |
   40|  3.01k|    auto [sv, wsv_direct, wsv_reinterpret, wsv_transcode] =
   41|  3.01k|        make_input_views(data);
   42|       |
   43|  3.01k|    auto f =
   44|  3.01k|        get_format_strings<char>("{}", "{:i}", "{:d}", "{:L}", "{:x}", "{:b}",
   45|  3.01k|                                 "{:o}", "{:B36}", "{:'}", "{:'L}");
   46|  3.01k|    do_basic_run(sv, f);
   47|       |
   48|  3.01k|    auto wf = get_format_strings<wchar_t>(L"{}", L"{:i}", L"{:d}", L"{:L}",
   49|  3.01k|                                          L"{:x}", L"{:b}", L"{:o}", L"{:B36}",
   50|  3.01k|                                          L"{:'}", L"{:'L}");
   51|  3.01k|    do_basic_run(wsv_direct, wf);
   52|  3.01k|    do_basic_run(wsv_reinterpret, wf);
   53|  3.01k|    do_basic_run(wsv_transcode, wf);
   54|  3.01k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  3.01k|{
   25|  3.01k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  3.01k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  3.01k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  3.01k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  3.01k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  3.01k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  3.01k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  3.01k|{
   25|  3.01k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  3.01k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  3.01k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  3.01k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  3.01k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  3.01k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  3.01k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  9.04k|{
   25|  9.04k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  9.04k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  9.04k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  9.04k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  9.04k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  9.04k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  9.04k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  9.04k|{
   25|  9.04k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  9.04k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  9.04k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  9.04k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  9.04k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  9.04k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  9.04k|}

