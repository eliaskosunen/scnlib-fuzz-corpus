_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  865|   463k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  865|  82.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  865|  82.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4067|   868k|{
 4068|   868k|    if constexpr (sizeof(U) == 1) {
 4069|   868k|        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|       |    else {
 4075|       |        // utf-32
 4076|       |        static_assert(sizeof(U) == 4);
 4077|       |        SCN_UNUSED(ch);
 4078|       |        return 1;
 4079|       |    }
 4080|   868k|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4031|   868k|{
 4032|   868k|    static_assert(sizeof(U8) == 1);
 4033|       |
 4034|   868k|    SCN_GCC_COMPAT_PUSH
 4035|   868k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4036|   868k|    constexpr char lengths[] =
 4037|   868k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4038|   868k|        "\1\1\1\1\1\1\1\1"
 4039|   868k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4040|       |                            // byte
 4041|   868k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4042|   868k|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4043|   868k|        "\4";               // highest bits 11110 -> 4-byte cp
 4044|   868k|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4045|   868k|    SCN_GCC_COMPAT_POP
 4046|   868k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|   851k|{
 4274|   851k|    if constexpr (sizeof(CharT) == 1) {
 4275|   851k|        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|       |    else {
 4281|       |        SCN_EXPECT(input.size() == 1);
 4282|       |        auto cp = static_cast<char32_t>(input.front());
 4283|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4284|       |            return invalid_code_point;
 4285|       |        }
 4286|       |        return cp;
 4287|       |    }
 4288|   851k|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4086|   851k|{
 4087|   851k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  930|   851k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   851k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4088|       |
 4089|   851k|    const auto is_trailing_code_unit = [](char ch) {
 4090|   851k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|   851k|    };
 4092|       |
 4093|   851k|    if (input.size() == 1) {
  ------------------
  |  Branch (4093:9): [True: 842k, False: 8.97k]
  ------------------
 4094|   842k|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4094:13): [True: 1.02k, False: 841k]
  ------------------
 4095|  1.02k|            SCN_UNLIKELY_ATTR
 4096|  1.02k|            return invalid_code_point;
 4097|  1.02k|        }
 4098|   841k|        return static_cast<char32_t>(input[0]);
 4099|   842k|    }
 4100|       |
 4101|  8.97k|    if (input.size() == 2) {
  ------------------
  |  Branch (4101:9): [True: 3.65k, False: 5.31k]
  ------------------
 4102|  3.65k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4102:13): [True: 44, False: 3.61k]
  ------------------
 4103|     44|            SCN_UNLIKELY_ATTR
 4104|     44|            return invalid_code_point;
 4105|     44|        }
 4106|  3.61k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4106:13): [True: 830, False: 2.78k]
  ------------------
 4107|    830|            SCN_UNLIKELY_ATTR
 4108|    830|            return invalid_code_point;
 4109|    830|        }
 4110|       |
 4111|  2.78k|        char32_t cp{};
 4112|  2.78k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4113|  2.78k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4114|  2.78k|        return cp;
 4115|  3.61k|    }
 4116|       |
 4117|  5.31k|    if (input.size() == 3) {
  ------------------
  |  Branch (4117:9): [True: 4.14k, False: 1.17k]
  ------------------
 4118|  4.14k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4118:13): [True: 53, False: 4.08k]
  ------------------
 4119|     53|            SCN_UNLIKELY_ATTR
 4120|     53|            return invalid_code_point;
 4121|     53|        }
 4122|  4.08k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4122:13): [True: 613, False: 3.47k]
  ------------------
 4123|  4.08k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4123:13): [True: 260, False: 3.21k]
  ------------------
 4124|    873|            SCN_UNLIKELY_ATTR
 4125|    873|            return invalid_code_point;
 4126|    873|        }
 4127|       |
 4128|  3.21k|        char32_t cp{};
 4129|  3.21k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4130|  3.21k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4131|  3.21k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4132|  3.21k|        return cp;
 4133|  4.08k|    }
 4134|       |
 4135|  1.17k|    if (input.size() == 4) {
  ------------------
  |  Branch (4135:9): [True: 1.17k, False: 0]
  ------------------
 4136|  1.17k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 1.17k]
  ------------------
 4137|      0|            SCN_UNLIKELY_ATTR
 4138|      0|            return invalid_code_point;
 4139|      0|        }
 4140|  1.17k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4140:13): [True: 275, False: 901]
  ------------------
 4141|    275|            SCN_UNLIKELY_ATTR
 4142|    275|            return invalid_code_point;
 4143|    275|        }
 4144|    901|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4144:13): [True: 391, False: 510]
  ------------------
 4145|    901|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4145:13): [True: 13, False: 497]
  ------------------
 4146|    901|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4146:13): [True: 10, False: 487]
  ------------------
 4147|    414|            SCN_UNLIKELY_ATTR
 4148|    414|            return invalid_code_point;
 4149|    414|        }
 4150|       |
 4151|    487|        char32_t cp{};
 4152|    487|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4153|    487|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4154|    487|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4155|    487|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4156|    487|        return cp;
 4157|    901|    }
 4158|       |
 4159|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4160|       |    // gcc 7 thinks we'll get here, even when we won't
 4161|      0|    SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4162|      0|#endif
 4163|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4164|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4089|  13.0k|    const auto is_trailing_code_unit = [](char ch) {
 4090|  13.0k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  13.0k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|   597k|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|   597k|    else {
 3966|   597k|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|   597k|                                       to_address(first), to_address(last)))};
 3968|   597k|    }
 3969|   597k|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  1.80M|{
  316|  1.80M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  1.80M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  1.80M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  4.60M|{
  294|  4.60M|    return p;
  295|  4.60M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3990|  1.38M|{
 3991|       |    if constexpr (std::is_constructible_v<
 3992|       |                      typename std::basic_string_view<CharT>::iterator,
 3993|       |                      decltype(it)> &&
 3994|  1.38M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3995|  1.38M|        SCN_UNUSED(sv);
  ------------------
  |  |  915|  1.38M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3996|  1.38M|        return it;
 3997|       |    }
 3998|       |    else {
 3999|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4000|       |    }
 4001|  1.38M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  87.6k|    {
 2869|  87.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  87.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  87.6k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  87.6k|    {
 2850|  87.6k|        return decay_copy(t.begin());
 2851|  87.6k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2093|  4.33M|{
 2094|  4.33M|    return SCN_FWD(t);
  ------------------
  |  |  936|  4.33M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  4.33M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   908k|    {
 2926|   908k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   908k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   908k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   908k|    {
 2908|   908k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   908k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   908k|    }
_ZN3scn2v44scanIJaENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9680|  34.2k|{
 9681|  34.2k|    auto result = make_scan_result<Source, Args...>();
 9682|  34.2k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  34.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  34.2k|                                   make_scan_args(result->values())));
 9684|  34.2k|    return result;
 9685|  34.2k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEEDav:
 9636|  73.8k|{
 9637|  73.8k|    return scan_result_type<Source, Args...>();
 9638|  73.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEC2Ev:
 1551|  73.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2Ev:
  426|  73.8k|        : m_value(T{}), m_has_value(true)
  427|  73.8k|    {
  428|  73.8k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEC2Ev:
 6570|  73.8k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6413|   453k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3459|   453k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJaEEC2Ev:
 6344|   209k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  73.8k|{
 9622|  73.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  73.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.4k, False: 59.3k]
  |  |  ------------------
  ------------------
 9623|  14.4k|        out = unexpected(in.error());
 9624|  14.4k|    }
 9625|  59.3k|    else {
 9626|  59.3k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  59.3k|    static_cast<    \
  |  |  935|  59.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  59.3k|    }
 9628|  73.8k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1739|   453k|    {
 1740|   453k|        return has_value();
 1741|   453k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   907k|    {
  490|   907k|        return m_has_value;
  491|   907k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1745|  86.9k|    {
 1746|  86.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  86.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  86.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  86.9k|        return this->get_unexpected().error();
 1748|  86.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  86.9k|    {
  473|  86.9k|        return m_unexpected;
  474|  86.9k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  364|  5.87M|    {
  365|  5.87M|        return m_unexpected;
  366|  5.87M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  349|  2.62M|        : m_unexpected(std::forward<Err>(e))
  350|  2.62M|    {
  351|  2.62M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  2.62M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  2.62M|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  14.4k|        : base(unexpect, std::move(e.error())),
 1616|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.4k|    {
 1618|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.4k|          m_has_value(false)
  451|  14.4k|    {
  452|  14.4k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  358|  3.37M|        : m_unexpected(std::forward<Args>(args)...)
  359|  3.37M|    {
  360|  3.37M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  3.37M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  3.37M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.4k|    {
 1316|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEaSEOSC_:
 1556|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorEvEaSEOSD_:
  902|  14.4k|    {
  903|  14.4k|        assign_common(std::move(other));
  904|  14.4k|        return *this;
  905|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  14.4k|    {
  950|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.4k, False: 0]
  ------------------
  951|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   295k|    {
  490|   295k|        return m_has_value;
  491|   295k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   192k|    {
  456|   192k|        return m_value;
  457|   192k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  14.4k|    {
 1046|  14.4k|        this->destroy_value();
 1047|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  14.4k|    {
  504|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.4k|                                  std::forward<Args>(args)...);
  506|  14.4k|        m_has_value = false;
  507|  14.4k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  395|   521k|{
  396|   521k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   521k|        T(std::forward<Args>(args)...);
  398|   521k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.4k|    {
  473|  14.4k|        return m_unexpected;
  474|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.4k|    {
  481|  14.4k|        return std::move(m_unexpected);
  482|  14.4k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6444|   366k|    {
 6445|   366k|        m_range = std::forward<Other>(r);
 6446|   366k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|   366k|    {
 1795|   366k|        return value();
 1796|   366k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   366k|    {
 1769|   366k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   366k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   366k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   366k|        return this->get_value();
 1771|   366k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   366k|    {
  456|   366k|        return m_value;
  457|   366k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9460|   210k|{
 9461|   210k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|   210k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9462|   210k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9397|   210k|{
 9398|   210k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|   210k|    auto result = vscan_impl(buffer, format, args);
 9401|   210k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   210k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 41.4k, False: 169k]
  |  |  ------------------
  ------------------
 9402|  41.4k|        return unexpected(result.error());
 9403|  41.4k|    }
 9404|   169k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|   210k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5380|   453k|{
 5381|   453k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   453k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   453k|                  "\n"
 5385|   453k|                  "Unsupported range type given as input to a scanning "
 5386|   453k|                  "function.\n"
 5387|   453k|                  "A range needs to have a character type (value type) "
 5388|   453k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   453k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   453k|                  "to be included.\n"
 5391|   453k|                  "See the scnlib documentation for more details.");
 5392|   453k|    static_assert(
 5393|   453k|        !std::is_same_v<T, custom_char_traits>,
 5394|   453k|        "\n"
 5395|   453k|        "Unsupported range type given as input to a scanning "
 5396|   453k|        "function.\n"
 5397|   453k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   453k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   453k|        "not supported.");
 5400|   453k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   453k|                  "\n"
 5402|   453k|                  "Unsupported range type given as input to a scanning "
 5403|   453k|                  "function.\n"
 5404|   453k|                  "file_marker_found cannot be used as an "
 5405|   453k|                  "source range type to scn::scan.\n"
 5406|   453k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   453k|                  "and do not provide an explicit source range, "
 5408|   453k|                  "or use scn::scan with a FILE* directly.");
 5409|   453k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   453k|                  "\n"
 5411|   453k|                  "Unsupported range type given as input to a scanning "
 5412|   453k|                  "function.\n"
 5413|   453k|                  "In order to be scannable, a range needs to satisfy "
 5414|   453k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   453k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   453k|                  "\n"
 5417|   453k|                  "Unsupported range type given as input to a scanning "
 5418|   453k|                  "function.\n"
 5419|   453k|                  "A range needs to model forward_range and have a valid "
 5420|   453k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   453k|                  "Examples of scannable ranges are std::string, "
 5422|   453k|                  "std::string_view, "
 5423|   453k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   453k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   453k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   453k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|   453k|{
 5320|   453k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|   453k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|   453k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   453k|    {
 3000|   453k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   453k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   453k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   453k|    {
 2981|   453k|        return t.data();
 2982|   453k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3382|   453k|    {
 3383|   453k|        return detail::to_address(ranges::begin(derived()));
 3384|   453k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  2.80M|{
  316|  2.80M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  2.80M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  2.80M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   820k|    {
 2869|   820k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   820k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   820k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   820k|    {
 2850|   820k|        return decay_copy(t.begin());
 2851|   820k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3479|  8.07M|    {
 3480|  8.07M|        return m_iterator;
 3481|  8.07M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3338|   453k|    {
 3339|   453k|        return static_cast<const D&>(*this);
 3340|   453k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|   453k|    {
 3075|   453k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   453k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|   453k|    {
 3041|   453k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   453k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   453k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2093|  1.28M|{
 2094|  1.28M|    return SCN_FWD(t);
  ------------------
  |  |  936|  1.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  1.28M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|  1.89M|    {
 3496|  1.89M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|  1.89M|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1739|  1.91M|    {
 1740|  1.91M|        return has_value();
 1741|  1.91M|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  489|  3.57M|    {
  490|  3.57M|        return m_has_value;
  491|  3.57M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1745|   521k|    {
 1746|   521k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   521k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   521k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   521k|        return this->get_unexpected().error();
 1748|   521k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   521k|    {
  473|   521k|        return m_unexpected;
  474|   521k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  86.9k|        : base(unexpect, std::move(e.error())),
 1616|  86.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  86.9k|    {
 1618|  86.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  86.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  86.9k|          m_has_value(false)
  451|  86.9k|    {
  452|  86.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   453k|    {
 1316|   453k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6674|   366k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|   366k|                      ranges::iterator_t<SourceRange>>) {
 6677|   366k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|   366k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  2.15M|    {
 2869|  2.15M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  2.15M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  2.15M|    {
 2850|  2.15M|        return decay_copy(t.begin());
 2851|  2.15M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6661|   366k|{
 6662|   366k|    return ranges::end(source);
 6663|   366k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   366k|    {
 2926|   366k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   366k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   366k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   366k|    {
 2908|   366k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   366k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   366k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3483|  5.60M|    {
 3484|  5.60M|        return m_sentinel;
 3485|  5.60M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1794|  1.13M|    {
 1795|  1.13M|        return value();
 1796|  1.13M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1768|  1.13M|    {
 1769|  1.13M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.13M|        return this->get_value();
 1771|  1.13M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  455|  1.13M|    {
  456|  1.13M|        return m_value;
  457|  1.13M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   366k|        : base(std::in_place, std::forward<U>(val)),
 1570|   366k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   366k|    {
 1572|   366k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|   366k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   366k|    {
  442|   366k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8767|  68.4k|    {
 8768|  68.4k|        return m_str;
 8769|  68.4k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJaEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|   136k|{
 6110|   136k|    detail::check_scan_arg_types<Args...>();
 6111|   136k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|   136k|}
_ZN3scn2v46detail20check_scan_arg_typesIJaEEEbv:
 5824|   209k|{
 5825|   209k|    constexpr bool default_constructible_constraint =
 5826|   209k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|   209k|    static_assert(default_constructible_constraint,
 5828|   209k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|   209k|    constexpr bool destructible_constraint =
 5831|   209k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|   209k|    static_assert(destructible_constraint,
 5833|   209k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|   209k|    constexpr bool non_reference_constraint =
 5836|   209k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|   209k|    static_assert(non_reference_constraint,
 5838|   209k|                  "Scan argument types must not be references");
 5839|       |
 5840|   209k|    constexpr bool movable_constraint =
 5841|   209k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|   209k|    static_assert(movable_constraint,
 5843|   209k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|   209k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|   209k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|   209k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJaEEC2ERNSt3__15tupleIJaEEE:
 6085|   136k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|   136k|    {
 6087|   136k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJaEE12make_argptrsIJaEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|   136k|    {
 6095|   136k|        return {detail::make_arg<
 6096|   136k|            kind, Context,
 6097|   136k|            mapped_type_constant<remove_cvref_t<A>,
 6098|   136k|                                 typename Context::char_type>::value>(args)...};
 6099|   136k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE1EavEEPvRT2_:
 5874|   136k|{
 5875|   136k|    return make_value<Context>(value).ref_value;
 5876|   136k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEaEEDaRT0_:
 5809|   147k|{
 5810|   147k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|   147k|                                  needs_context_tag>) {
 5814|   147k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   147k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|   147k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERa:
 5648|   147k|    {                                                                        \
 5649|   147k|        return val;                                                          \
 5650|   147k|    }
_ZN3scn2v46detail15make_value_implIaRaEEDaOT0_:
 5778|   209k|{
 5779|   209k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|   209k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|   209k|    constexpr bool scannable_char =
 5783|   209k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|   209k|    static_assert(scannable_char,
 5785|   209k|                  "Cannot scan an argument of an unsupported character "
 5786|   209k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|   209k|    constexpr bool scannable_const =
 5789|   209k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|   209k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|   209k|    constexpr bool scannable_disabled =
 5793|   209k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|   209k|    static_assert(scannable_disabled,
 5795|   209k|                  "Cannot scan an argument that has been disabled by "
 5796|   209k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|   209k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|   209k|    static_assert(
 5800|   209k|        scannable,
 5801|   209k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|   209k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|   209k|    return arg_value{arg};
 5805|   209k|}
_ZN3scn2v46detail9arg_valueC2IaEERT_:
 5562|   209k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|   209k|    {
 5564|   209k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJaEE6valuesEv:
 6353|   195k|    {
 6354|   195k|        return m_values;
 6355|   195k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJaEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|   136k|        : basic_scan_args(store.desc, store.args.data())
 6136|   136k|    {
 6137|   136k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 6187|   843k|        : m_desc(desc), m_builtin_values(data)
 6188|   843k|    {
 6189|   843k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|  4.19M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  4.19M|    static_cast<    \
  |  |  935|  4.19M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  4.19M|    static_cast<    \
  |  |  935|  4.19M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  4.19M|    {
 3466|  4.19M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8440|   843k|{
 8441|   843k|    return s;
 8442|   843k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8417|   843k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  68.4k|        : m_str(r.str)
 8763|  68.4k|    {
 8764|  68.4k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEcvbEv:
 1739|  73.8k|    {
 1740|  73.8k|        return has_value();
 1741|  73.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEptEv:
 1814|   192k|    {
 1815|   192k|        return &value();
 1816|   192k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   192k|    {
 1769|   192k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   192k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   192k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   192k|        return this->get_value();
 1771|   192k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6433|   366k|    {
 6434|   366k|        return ranges::begin(m_range);
 6435|   366k|    }
_ZN3scn2v44scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9749|  34.2k|{
 9750|  34.2k|    auto result = make_scan_result<Source, Args...>();
 9751|  34.2k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  34.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  34.2k|                                   make_scan_args(result->values())));
 9753|  34.2k|    return result;
 9754|  34.2k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9478|   210k|{
 9479|   210k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|   210k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9480|   210k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9413|   210k|{
 9414|   210k|#if !SCN_DISABLE_LOCALE
 9415|   210k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|   210k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|   210k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|   210k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|   210k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   210k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 41.4k, False: 169k]
  |  |  ------------------
  ------------------
 9422|  41.4k|        return unexpected(result.error());
 9423|  41.4k|    }
 9424|   169k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|   210k|}
_ZN3scn2v410scan_valueIaNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9790|  5.33k|{
 9791|  5.33k|    auto result = make_scan_result<Source, T>();
 9792|  5.33k|    fill_scan_result(
 9793|  5.33k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  5.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  5.33k|                            detail::make_arg<scan_context>(result->value())));
 9795|  5.33k|    return result;
 9796|  5.33k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9491|  32.0k|{
 9492|  32.0k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|  32.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9493|  32.0k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|  32.0k|{
 9438|  32.0k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|  32.0k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|  32.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  32.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.14k, False: 27.9k]
  |  |  ------------------
  ------------------
 9442|  4.14k|        return unexpected(result.error());
 9443|  4.14k|    }
 9444|  27.9k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  27.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|  32.0k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEaEENS0_14basic_scan_argIT_EERT0_:
 5859|  10.6k|{
 5860|  10.6k|    check_scan_arg_types<T>();
 5861|       |
 5862|  10.6k|    basic_scan_arg<Context> arg;
 5863|  10.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  10.6k|    arg.m_value = make_value<Context>(value);
 5865|  10.6k|    return arg;
 5866|  10.6k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 5954|   906k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5559|  1.27M|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJaEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|  13.4k|    {
 6376|  13.4k|        return std::get<0>(m_values);
 6377|  13.4k|    }
_ZN3scn2v44scanIJhENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9680|  30.1k|{
 9681|  30.1k|    auto result = make_scan_result<Source, Args...>();
 9682|  30.1k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  30.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  30.1k|                                   make_scan_args(result->values())));
 9684|  30.1k|    return result;
 9685|  30.1k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEEDav:
 9636|  64.7k|{
 9637|  64.7k|    return scan_result_type<Source, Args...>();
 9638|  64.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEC2Ev:
 1551|  64.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2Ev:
  426|  64.7k|        : m_value(T{}), m_has_value(true)
  427|  64.7k|    {
  428|  64.7k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEC2Ev:
 6570|  64.7k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJhEEC2Ev:
 6344|   191k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  64.7k|{
 9622|  64.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  64.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.4k, False: 50.2k]
  |  |  ------------------
  ------------------
 9623|  14.4k|        out = unexpected(in.error());
 9624|  14.4k|    }
 9625|  50.2k|    else {
 9626|  50.2k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  50.2k|    static_cast<    \
  |  |  935|  50.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  50.2k|    }
 9628|  64.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  14.4k|        : base(unexpect, std::move(e.error())),
 1616|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.4k|    {
 1618|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.4k|          m_has_value(false)
  451|  14.4k|    {
  452|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.4k|    {
 1316|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEaSEOSC_:
 1556|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorEvEaSEOSD_:
  902|  14.4k|    {
  903|  14.4k|        assign_common(std::move(other));
  904|  14.4k|        return *this;
  905|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  14.4k|    {
  950|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.4k, False: 0]
  ------------------
  951|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   259k|    {
  490|   259k|        return m_has_value;
  491|   259k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   165k|    {
  456|   165k|        return m_value;
  457|   165k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  14.4k|    {
 1046|  14.4k|        this->destroy_value();
 1047|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  14.4k|    {
  504|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.4k|                                  std::forward<Args>(args)...);
  506|  14.4k|        m_has_value = false;
  507|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.4k|    {
  473|  14.4k|        return m_unexpected;
  474|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.4k|    {
  481|  14.4k|        return std::move(m_unexpected);
  482|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8767|  60.3k|    {
 8768|  60.3k|        return m_str;
 8769|  60.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJhEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|   120k|{
 6110|   120k|    detail::check_scan_arg_types<Args...>();
 6111|   120k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|   120k|}
_ZN3scn2v46detail20check_scan_arg_typesIJhEEEbv:
 5824|   191k|{
 5825|   191k|    constexpr bool default_constructible_constraint =
 5826|   191k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|   191k|    static_assert(default_constructible_constraint,
 5828|   191k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|   191k|    constexpr bool destructible_constraint =
 5831|   191k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|   191k|    static_assert(destructible_constraint,
 5833|   191k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|   191k|    constexpr bool non_reference_constraint =
 5836|   191k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|   191k|    static_assert(non_reference_constraint,
 5838|   191k|                  "Scan argument types must not be references");
 5839|       |
 5840|   191k|    constexpr bool movable_constraint =
 5841|   191k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|   191k|    static_assert(movable_constraint,
 5843|   191k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|   191k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|   191k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|   191k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJhEEC2ERNSt3__15tupleIJhEEE:
 6085|   120k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|   120k|    {
 6087|   120k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJhEE12make_argptrsIJhEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|   120k|    {
 6095|   120k|        return {detail::make_arg<
 6096|   120k|            kind, Context,
 6097|   120k|            mapped_type_constant<remove_cvref_t<A>,
 6098|   120k|                                 typename Context::char_type>::value>(args)...};
 6099|   120k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE6EhvEEPvRT2_:
 5874|   120k|{
 5875|   120k|    return make_value<Context>(value).ref_value;
 5876|   120k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEhEEDaRT0_:
 5809|   129k|{
 5810|   129k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|   129k|                                  needs_context_tag>) {
 5814|   129k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   129k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|   129k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERh:
 5648|   129k|    {                                                                        \
 5649|   129k|        return val;                                                          \
 5650|   129k|    }
_ZN3scn2v46detail15make_value_implIhRhEEDaOT0_:
 5778|   191k|{
 5779|   191k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|   191k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|   191k|    constexpr bool scannable_char =
 5783|   191k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|   191k|    static_assert(scannable_char,
 5785|   191k|                  "Cannot scan an argument of an unsupported character "
 5786|   191k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|   191k|    constexpr bool scannable_const =
 5789|   191k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|   191k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|   191k|    constexpr bool scannable_disabled =
 5793|   191k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|   191k|    static_assert(scannable_disabled,
 5795|   191k|                  "Cannot scan an argument that has been disabled by "
 5796|   191k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|   191k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|   191k|    static_assert(
 5800|   191k|        scannable,
 5801|   191k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|   191k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|   191k|    return arg_value{arg};
 5805|   191k|}
_ZN3scn2v46detail9arg_valueC2IhEERT_:
 5562|   191k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|   191k|    {
 5564|   191k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJhEE6valuesEv:
 6353|   179k|    {
 6354|   179k|        return m_values;
 6355|   179k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJhEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|   120k|        : basic_scan_args(store.desc, store.args.data())
 6136|   120k|    {
 6137|   120k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  60.3k|        : m_str(r.str)
 8763|  60.3k|    {
 8764|  60.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEcvbEv:
 1739|  64.7k|    {
 1740|  64.7k|        return has_value();
 1741|  64.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEptEv:
 1814|   165k|    {
 1815|   165k|        return &value();
 1816|   165k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   165k|    {
 1769|   165k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   165k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   165k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   165k|        return this->get_value();
 1771|   165k|    }
_ZN3scn2v44scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9749|  30.1k|{
 9750|  30.1k|    auto result = make_scan_result<Source, Args...>();
 9751|  30.1k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  30.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  30.1k|                                   make_scan_args(result->values())));
 9753|  30.1k|    return result;
 9754|  30.1k|}
_ZN3scn2v410scan_valueIhNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9790|  4.45k|{
 9791|  4.45k|    auto result = make_scan_result<Source, T>();
 9792|  4.45k|    fill_scan_result(
 9793|  4.45k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  4.45k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  4.45k|                            detail::make_arg<scan_context>(result->value())));
 9795|  4.45k|    return result;
 9796|  4.45k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEhEENS0_14basic_scan_argIT_EERT0_:
 5859|  8.90k|{
 5860|  8.90k|    check_scan_arg_types<T>();
 5861|       |
 5862|  8.90k|    basic_scan_arg<Context> arg;
 5863|  8.90k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  8.90k|    arg.m_value = make_value<Context>(value);
 5865|  8.90k|    return arg;
 5866|  8.90k|}
_ZNR3scn2v46detail25scan_result_value_storageIJhEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|  11.7k|    {
 6376|  11.7k|        return std::get<0>(m_values);
 6377|  11.7k|    }
_ZN3scn2v44scanIJiENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9680|  40.0k|{
 9681|  40.0k|    auto result = make_scan_result<Source, Args...>();
 9682|  40.0k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  40.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  40.0k|                                   make_scan_args(result->values())));
 9684|  40.0k|    return result;
 9685|  40.0k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEEDav:
 9636|  86.2k|{
 9637|  86.2k|    return scan_result_type<Source, Args...>();
 9638|  86.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2Ev:
 1551|  86.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  426|  86.2k|        : m_value(T{}), m_has_value(true)
  427|  86.2k|    {
  428|  86.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEC2Ev:
 6570|  86.2k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJiEEC2Ev:
 6344|   233k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  86.2k|{
 9622|  86.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  86.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.4k, False: 71.7k]
  |  |  ------------------
  ------------------
 9623|  14.4k|        out = unexpected(in.error());
 9624|  14.4k|    }
 9625|  71.7k|    else {
 9626|  71.7k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  71.7k|    static_cast<    \
  |  |  935|  71.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  71.7k|    }
 9628|  86.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  14.4k|        : base(unexpect, std::move(e.error())),
 1616|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.4k|    {
 1618|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.4k|          m_has_value(false)
  451|  14.4k|    {
  452|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.4k|    {
 1316|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEaSEOSC_:
 1556|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvEaSEOSD_:
  902|  14.4k|    {
  903|  14.4k|        assign_common(std::move(other));
  904|  14.4k|        return *this;
  905|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  14.4k|    {
  950|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.4k, False: 0]
  ------------------
  951|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   344k|    {
  490|   344k|        return m_has_value;
  491|   344k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   229k|    {
  456|   229k|        return m_value;
  457|   229k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  14.4k|    {
 1046|  14.4k|        this->destroy_value();
 1047|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  14.4k|    {
  504|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.4k|                                  std::forward<Args>(args)...);
  506|  14.4k|        m_has_value = false;
  507|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.4k|    {
  473|  14.4k|        return m_unexpected;
  474|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.4k|    {
  481|  14.4k|        return std::move(m_unexpected);
  482|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8767|  80.0k|    {
 8768|  80.0k|        return m_str;
 8769|  80.0k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJiEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|   159k|{
 6110|   159k|    detail::check_scan_arg_types<Args...>();
 6111|   159k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|   159k|}
_ZN3scn2v46detail20check_scan_arg_typesIJiEEEbv:
 5824|   233k|{
 5825|   233k|    constexpr bool default_constructible_constraint =
 5826|   233k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|   233k|    static_assert(default_constructible_constraint,
 5828|   233k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|   233k|    constexpr bool destructible_constraint =
 5831|   233k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|   233k|    static_assert(destructible_constraint,
 5833|   233k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|   233k|    constexpr bool non_reference_constraint =
 5836|   233k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|   233k|    static_assert(non_reference_constraint,
 5838|   233k|                  "Scan argument types must not be references");
 5839|       |
 5840|   233k|    constexpr bool movable_constraint =
 5841|   233k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|   233k|    static_assert(movable_constraint,
 5843|   233k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|   233k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|   233k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|   233k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJiEEC2ERNSt3__15tupleIJiEEE:
 6085|   159k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|   159k|    {
 6087|   159k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|   159k|    {
 6095|   159k|        return {detail::make_arg<
 6096|   159k|            kind, Context,
 6097|   159k|            mapped_type_constant<remove_cvref_t<A>,
 6098|   159k|                                 typename Context::char_type>::value>(args)...};
 6099|   159k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE3EivEEPvRT2_:
 5874|   159k|{
 5875|   159k|    return make_value<Context>(value).ref_value;
 5876|   159k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEiEEDaRT0_:
 5809|   172k|{
 5810|   172k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|   172k|                                  needs_context_tag>) {
 5814|   172k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   172k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|   172k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERi:
 5648|   172k|    {                                                                        \
 5649|   172k|        return val;                                                          \
 5650|   172k|    }
_ZN3scn2v46detail15make_value_implIiRiEEDaOT0_:
 5778|   233k|{
 5779|   233k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|   233k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|   233k|    constexpr bool scannable_char =
 5783|   233k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|   233k|    static_assert(scannable_char,
 5785|   233k|                  "Cannot scan an argument of an unsupported character "
 5786|   233k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|   233k|    constexpr bool scannable_const =
 5789|   233k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|   233k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|   233k|    constexpr bool scannable_disabled =
 5793|   233k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|   233k|    static_assert(scannable_disabled,
 5795|   233k|                  "Cannot scan an argument that has been disabled by "
 5796|   233k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|   233k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|   233k|    static_assert(
 5800|   233k|        scannable,
 5801|   233k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|   233k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|   233k|    return arg_value{arg};
 5805|   233k|}
_ZN3scn2v46detail9arg_valueC2IiEERT_:
 5562|   233k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|   233k|    {
 5564|   233k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJiEE6valuesEv:
 6353|   218k|    {
 6354|   218k|        return m_values;
 6355|   218k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJiEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|   159k|        : basic_scan_args(store.desc, store.args.data())
 6136|   159k|    {
 6137|   159k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  80.0k|        : m_str(r.str)
 8763|  80.0k|    {
 8764|  80.0k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEcvbEv:
 1739|  86.2k|    {
 1740|  86.2k|        return has_value();
 1741|  86.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEptEv:
 1814|   229k|    {
 1815|   229k|        return &value();
 1816|   229k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   229k|    {
 1769|   229k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   229k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   229k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   229k|        return this->get_value();
 1771|   229k|    }
_ZN3scn2v44scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9749|  40.0k|{
 9750|  40.0k|    auto result = make_scan_result<Source, Args...>();
 9751|  40.0k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  40.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  40.0k|                                   make_scan_args(result->values())));
 9753|  40.0k|    return result;
 9754|  40.0k|}
_ZN3scn2v410scan_valueIiNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9790|  6.16k|{
 9791|  6.16k|    auto result = make_scan_result<Source, T>();
 9792|  6.16k|    fill_scan_result(
 9793|  6.16k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  6.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  6.16k|                            detail::make_arg<scan_context>(result->value())));
 9795|  6.16k|    return result;
 9796|  6.16k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEiEENS0_14basic_scan_argIT_EERT0_:
 5859|  12.1k|{
 5860|  12.1k|    check_scan_arg_types<T>();
 5861|       |
 5862|  12.1k|    basic_scan_arg<Context> arg;
 5863|  12.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  12.1k|    arg.m_value = make_value<Context>(value);
 5865|  12.1k|    return arg;
 5866|  12.1k|}
_ZNR3scn2v46detail25scan_result_value_storageIJiEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|  14.9k|    {
 6376|  14.9k|        return std::get<0>(m_values);
 6377|  14.9k|    }
_ZN3scn2v44scanIJjENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9680|  32.6k|{
 9681|  32.6k|    auto result = make_scan_result<Source, Args...>();
 9682|  32.6k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  32.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  32.6k|                                   make_scan_args(result->values())));
 9684|  32.6k|    return result;
 9685|  32.6k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEEDav:
 9636|  70.2k|{
 9637|  70.2k|    return scan_result_type<Source, Args...>();
 9638|  70.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2Ev:
 1551|  70.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  426|  70.2k|        : m_value(T{}), m_has_value(true)
  427|  70.2k|    {
  428|  70.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEC2Ev:
 6570|  70.2k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJjEEC2Ev:
 6344|   202k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  70.2k|{
 9622|  70.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  70.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.4k, False: 55.7k]
  |  |  ------------------
  ------------------
 9623|  14.4k|        out = unexpected(in.error());
 9624|  14.4k|    }
 9625|  55.7k|    else {
 9626|  55.7k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  55.7k|    static_cast<    \
  |  |  935|  55.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  55.7k|    }
 9628|  70.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  14.4k|        : base(unexpect, std::move(e.error())),
 1616|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.4k|    {
 1618|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.4k|          m_has_value(false)
  451|  14.4k|    {
  452|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.4k|    {
 1316|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEaSEOSC_:
 1556|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvEaSEOSD_:
  902|  14.4k|    {
  903|  14.4k|        assign_common(std::move(other));
  904|  14.4k|        return *this;
  905|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  14.4k|    {
  950|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.4k, False: 0]
  ------------------
  951|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   280k|    {
  490|   280k|        return m_has_value;
  491|   280k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   181k|    {
  456|   181k|        return m_value;
  457|   181k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  14.4k|    {
 1046|  14.4k|        this->destroy_value();
 1047|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  14.4k|    {
  504|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.4k|                                  std::forward<Args>(args)...);
  506|  14.4k|        m_has_value = false;
  507|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.4k|    {
  473|  14.4k|        return m_unexpected;
  474|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.4k|    {
  481|  14.4k|        return std::move(m_unexpected);
  482|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8767|  65.3k|    {
 8768|  65.3k|        return m_str;
 8769|  65.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJjEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|   130k|{
 6110|   130k|    detail::check_scan_arg_types<Args...>();
 6111|   130k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|   130k|}
_ZN3scn2v46detail20check_scan_arg_typesIJjEEEbv:
 5824|   202k|{
 5825|   202k|    constexpr bool default_constructible_constraint =
 5826|   202k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|   202k|    static_assert(default_constructible_constraint,
 5828|   202k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|   202k|    constexpr bool destructible_constraint =
 5831|   202k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|   202k|    static_assert(destructible_constraint,
 5833|   202k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|   202k|    constexpr bool non_reference_constraint =
 5836|   202k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|   202k|    static_assert(non_reference_constraint,
 5838|   202k|                  "Scan argument types must not be references");
 5839|       |
 5840|   202k|    constexpr bool movable_constraint =
 5841|   202k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|   202k|    static_assert(movable_constraint,
 5843|   202k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|   202k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|   202k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|   202k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJjEEC2ERNSt3__15tupleIJjEEE:
 6085|   130k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|   130k|    {
 6087|   130k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|   130k|    {
 6095|   130k|        return {detail::make_arg<
 6096|   130k|            kind, Context,
 6097|   130k|            mapped_type_constant<remove_cvref_t<A>,
 6098|   130k|                                 typename Context::char_type>::value>(args)...};
 6099|   130k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE8EjvEEPvRT2_:
 5874|   130k|{
 5875|   130k|    return make_value<Context>(value).ref_value;
 5876|   130k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEjEEDaRT0_:
 5809|   140k|{
 5810|   140k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|   140k|                                  needs_context_tag>) {
 5814|   140k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|   140k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERj:
 5648|   140k|    {                                                                        \
 5649|   140k|        return val;                                                          \
 5650|   140k|    }
_ZN3scn2v46detail15make_value_implIjRjEEDaOT0_:
 5778|   202k|{
 5779|   202k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|   202k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|   202k|    constexpr bool scannable_char =
 5783|   202k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|   202k|    static_assert(scannable_char,
 5785|   202k|                  "Cannot scan an argument of an unsupported character "
 5786|   202k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|   202k|    constexpr bool scannable_const =
 5789|   202k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|   202k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|   202k|    constexpr bool scannable_disabled =
 5793|   202k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|   202k|    static_assert(scannable_disabled,
 5795|   202k|                  "Cannot scan an argument that has been disabled by "
 5796|   202k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|   202k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|   202k|    static_assert(
 5800|   202k|        scannable,
 5801|   202k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|   202k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|   202k|    return arg_value{arg};
 5805|   202k|}
_ZN3scn2v46detail9arg_valueC2IjEERT_:
 5562|   202k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|   202k|    {
 5564|   202k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJjEE6valuesEv:
 6353|   189k|    {
 6354|   189k|        return m_values;
 6355|   189k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJjEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|   130k|        : basic_scan_args(store.desc, store.args.data())
 6136|   130k|    {
 6137|   130k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  65.3k|        : m_str(r.str)
 8763|  65.3k|    {
 8764|  65.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEcvbEv:
 1739|  70.2k|    {
 1740|  70.2k|        return has_value();
 1741|  70.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEptEv:
 1814|   181k|    {
 1815|   181k|        return &value();
 1816|   181k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   181k|    {
 1769|   181k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   181k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   181k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   181k|        return this->get_value();
 1771|   181k|    }
_ZN3scn2v44scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9749|  32.6k|{
 9750|  32.6k|    auto result = make_scan_result<Source, Args...>();
 9751|  32.6k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  32.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  32.6k|                                   make_scan_args(result->values())));
 9753|  32.6k|    return result;
 9754|  32.6k|}
_ZN3scn2v410scan_valueIjNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9790|  4.89k|{
 9791|  4.89k|    auto result = make_scan_result<Source, T>();
 9792|  4.89k|    fill_scan_result(
 9793|  4.89k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  4.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  4.89k|                            detail::make_arg<scan_context>(result->value())));
 9795|  4.89k|    return result;
 9796|  4.89k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEjEENS0_14basic_scan_argIT_EERT0_:
 5859|  9.77k|{
 5860|  9.77k|    check_scan_arg_types<T>();
 5861|       |
 5862|  9.77k|    basic_scan_arg<Context> arg;
 5863|  9.77k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  9.77k|    arg.m_value = make_value<Context>(value);
 5865|  9.77k|    return arg;
 5866|  9.77k|}
_ZNR3scn2v46detail25scan_result_value_storageIJjEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|  12.5k|    {
 6376|  12.5k|        return std::get<0>(m_values);
 6377|  12.5k|    }
_ZN3scn2v44scanIJxENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9680|  40.7k|{
 9681|  40.7k|    auto result = make_scan_result<Source, Args...>();
 9682|  40.7k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  40.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  40.7k|                                   make_scan_args(result->values())));
 9684|  40.7k|    return result;
 9685|  40.7k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEEDav:
 9636|  87.7k|{
 9637|  87.7k|    return scan_result_type<Source, Args...>();
 9638|  87.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEC2Ev:
 1551|  87.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2Ev:
  426|  87.7k|        : m_value(T{}), m_has_value(true)
  427|  87.7k|    {
  428|  87.7k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEC2Ev:
 6570|  87.7k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJxEEC2Ev:
 6344|   237k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  87.7k|{
 9622|  87.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  87.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.4k, False: 73.2k]
  |  |  ------------------
  ------------------
 9623|  14.4k|        out = unexpected(in.error());
 9624|  14.4k|    }
 9625|  73.2k|    else {
 9626|  73.2k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  73.2k|    static_cast<    \
  |  |  935|  73.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  73.2k|    }
 9628|  87.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  14.4k|        : base(unexpect, std::move(e.error())),
 1616|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.4k|    {
 1618|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.4k|          m_has_value(false)
  451|  14.4k|    {
  452|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.4k|    {
 1316|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEaSEOSC_:
 1556|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorEvEaSEOSD_:
  902|  14.4k|    {
  903|  14.4k|        assign_common(std::move(other));
  904|  14.4k|        return *this;
  905|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  14.4k|    {
  950|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.4k, False: 0]
  ------------------
  951|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   350k|    {
  490|   350k|        return m_has_value;
  491|   350k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   234k|    {
  456|   234k|        return m_value;
  457|   234k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  14.4k|    {
 1046|  14.4k|        this->destroy_value();
 1047|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  14.4k|    {
  504|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.4k|                                  std::forward<Args>(args)...);
  506|  14.4k|        m_has_value = false;
  507|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.4k|    {
  473|  14.4k|        return m_unexpected;
  474|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.4k|    {
  481|  14.4k|        return std::move(m_unexpected);
  482|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8767|  81.4k|    {
 8768|  81.4k|        return m_str;
 8769|  81.4k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJxEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|   162k|{
 6110|   162k|    detail::check_scan_arg_types<Args...>();
 6111|   162k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|   162k|}
_ZN3scn2v46detail20check_scan_arg_typesIJxEEEbv:
 5824|   237k|{
 5825|   237k|    constexpr bool default_constructible_constraint =
 5826|   237k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|   237k|    static_assert(default_constructible_constraint,
 5828|   237k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|   237k|    constexpr bool destructible_constraint =
 5831|   237k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|   237k|    static_assert(destructible_constraint,
 5833|   237k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|   237k|    constexpr bool non_reference_constraint =
 5836|   237k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|   237k|    static_assert(non_reference_constraint,
 5838|   237k|                  "Scan argument types must not be references");
 5839|       |
 5840|   237k|    constexpr bool movable_constraint =
 5841|   237k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|   237k|    static_assert(movable_constraint,
 5843|   237k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|   237k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|   237k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|   237k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJxEEC2ERNSt3__15tupleIJxEEE:
 6085|   162k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|   162k|    {
 6087|   162k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJxEE12make_argptrsIJxEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|   162k|    {
 6095|   162k|        return {detail::make_arg<
 6096|   162k|            kind, Context,
 6097|   162k|            mapped_type_constant<remove_cvref_t<A>,
 6098|   162k|                                 typename Context::char_type>::value>(args)...};
 6099|   162k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE5ExvEEPvRT2_:
 5874|   162k|{
 5875|   162k|    return make_value<Context>(value).ref_value;
 5876|   162k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEExEEDaRT0_:
 5809|   174k|{
 5810|   174k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|   174k|                                  needs_context_tag>) {
 5814|   174k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|   174k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERx:
 5648|   174k|    {                                                                        \
 5649|   174k|        return val;                                                          \
 5650|   174k|    }
_ZN3scn2v46detail15make_value_implIxRxEEDaOT0_:
 5778|   237k|{
 5779|   237k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|   237k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|   237k|    constexpr bool scannable_char =
 5783|   237k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|   237k|    static_assert(scannable_char,
 5785|   237k|                  "Cannot scan an argument of an unsupported character "
 5786|   237k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|   237k|    constexpr bool scannable_const =
 5789|   237k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|   237k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|   237k|    constexpr bool scannable_disabled =
 5793|   237k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|   237k|    static_assert(scannable_disabled,
 5795|   237k|                  "Cannot scan an argument that has been disabled by "
 5796|   237k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|   237k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|   237k|    static_assert(
 5800|   237k|        scannable,
 5801|   237k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|   237k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|   237k|    return arg_value{arg};
 5805|   237k|}
_ZN3scn2v46detail9arg_valueC2IxEERT_:
 5562|   237k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|   237k|    {
 5564|   237k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJxEE6valuesEv:
 6353|   221k|    {
 6354|   221k|        return m_values;
 6355|   221k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJxEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|   162k|        : basic_scan_args(store.desc, store.args.data())
 6136|   162k|    {
 6137|   162k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  81.4k|        : m_str(r.str)
 8763|  81.4k|    {
 8764|  81.4k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEcvbEv:
 1739|  87.7k|    {
 1740|  87.7k|        return has_value();
 1741|  87.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEptEv:
 1814|   234k|    {
 1815|   234k|        return &value();
 1816|   234k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   234k|    {
 1769|   234k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   234k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   234k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   234k|        return this->get_value();
 1771|   234k|    }
_ZN3scn2v44scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9749|  40.7k|{
 9750|  40.7k|    auto result = make_scan_result<Source, Args...>();
 9751|  40.7k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  40.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  40.7k|                                   make_scan_args(result->values())));
 9753|  40.7k|    return result;
 9754|  40.7k|}
_ZN3scn2v410scan_valueIxNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9790|  6.27k|{
 9791|  6.27k|    auto result = make_scan_result<Source, T>();
 9792|  6.27k|    fill_scan_result(
 9793|  6.27k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  6.27k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  6.27k|                            detail::make_arg<scan_context>(result->value())));
 9795|  6.27k|    return result;
 9796|  6.27k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEExEENS0_14basic_scan_argIT_EERT0_:
 5859|  12.3k|{
 5860|  12.3k|    check_scan_arg_types<T>();
 5861|       |
 5862|  12.3k|    basic_scan_arg<Context> arg;
 5863|  12.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  12.3k|    arg.m_value = make_value<Context>(value);
 5865|  12.3k|    return arg;
 5866|  12.3k|}
_ZNR3scn2v46detail25scan_result_value_storageIJxEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|  15.2k|    {
 6376|  15.2k|        return std::get<0>(m_values);
 6377|  15.2k|    }
_ZN3scn2v44scanIJyENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9680|  33.0k|{
 9681|  33.0k|    auto result = make_scan_result<Source, Args...>();
 9682|  33.0k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  33.0k|                                   make_scan_args(result->values())));
 9684|  33.0k|    return result;
 9685|  33.0k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEEDav:
 9636|  71.0k|{
 9637|  71.0k|    return scan_result_type<Source, Args...>();
 9638|  71.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEC2Ev:
 1551|  71.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2Ev:
  426|  71.0k|        : m_value(T{}), m_has_value(true)
  427|  71.0k|    {
  428|  71.0k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEC2Ev:
 6570|  71.0k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJyEEC2Ev:
 6344|   203k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  71.0k|{
 9622|  71.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  71.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.4k, False: 56.5k]
  |  |  ------------------
  ------------------
 9623|  14.4k|        out = unexpected(in.error());
 9624|  14.4k|    }
 9625|  56.5k|    else {
 9626|  56.5k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  56.5k|    static_cast<    \
  |  |  935|  56.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  56.5k|    }
 9628|  71.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  14.4k|        : base(unexpect, std::move(e.error())),
 1616|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.4k|    {
 1618|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.4k|          m_has_value(false)
  451|  14.4k|    {
  452|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.4k|    {
 1316|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEaSEOSC_:
 1556|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorEvEaSEOSD_:
  902|  14.4k|    {
  903|  14.4k|        assign_common(std::move(other));
  904|  14.4k|        return *this;
  905|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  14.4k|    {
  950|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.4k, False: 0]
  ------------------
  951|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   284k|    {
  490|   284k|        return m_has_value;
  491|   284k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   184k|    {
  456|   184k|        return m_value;
  457|   184k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  14.4k|    {
 1046|  14.4k|        this->destroy_value();
 1047|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  14.4k|    {
  504|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.4k|                                  std::forward<Args>(args)...);
  506|  14.4k|        m_has_value = false;
  507|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.4k|    {
  473|  14.4k|        return m_unexpected;
  474|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.4k|    {
  481|  14.4k|        return std::move(m_unexpected);
  482|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8767|  66.0k|    {
 8768|  66.0k|        return m_str;
 8769|  66.0k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJyEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|   132k|{
 6110|   132k|    detail::check_scan_arg_types<Args...>();
 6111|   132k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|   132k|}
_ZN3scn2v46detail20check_scan_arg_typesIJyEEEbv:
 5824|   203k|{
 5825|   203k|    constexpr bool default_constructible_constraint =
 5826|   203k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|   203k|    static_assert(default_constructible_constraint,
 5828|   203k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|   203k|    constexpr bool destructible_constraint =
 5831|   203k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|   203k|    static_assert(destructible_constraint,
 5833|   203k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|   203k|    constexpr bool non_reference_constraint =
 5836|   203k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|   203k|    static_assert(non_reference_constraint,
 5838|   203k|                  "Scan argument types must not be references");
 5839|       |
 5840|   203k|    constexpr bool movable_constraint =
 5841|   203k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|   203k|    static_assert(movable_constraint,
 5843|   203k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|   203k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|   203k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|   203k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJyEEC2ERNSt3__15tupleIJyEEE:
 6085|   132k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|   132k|    {
 6087|   132k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJyEE12make_argptrsIJyEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|   132k|    {
 6095|   132k|        return {detail::make_arg<
 6096|   132k|            kind, Context,
 6097|   132k|            mapped_type_constant<remove_cvref_t<A>,
 6098|   132k|                                 typename Context::char_type>::value>(args)...};
 6099|   132k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE10EyvEEPvRT2_:
 5874|   132k|{
 5875|   132k|    return make_value<Context>(value).ref_value;
 5876|   132k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEyEEDaRT0_:
 5809|   142k|{
 5810|   142k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|   142k|                                  needs_context_tag>) {
 5814|   142k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|   142k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERy:
 5648|   142k|    {                                                                        \
 5649|   142k|        return val;                                                          \
 5650|   142k|    }
_ZN3scn2v46detail15make_value_implIyRyEEDaOT0_:
 5778|   203k|{
 5779|   203k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|   203k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|   203k|    constexpr bool scannable_char =
 5783|   203k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|   203k|    static_assert(scannable_char,
 5785|   203k|                  "Cannot scan an argument of an unsupported character "
 5786|   203k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|   203k|    constexpr bool scannable_const =
 5789|   203k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|   203k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|   203k|    constexpr bool scannable_disabled =
 5793|   203k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|   203k|    static_assert(scannable_disabled,
 5795|   203k|                  "Cannot scan an argument that has been disabled by "
 5796|   203k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|   203k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|   203k|    static_assert(
 5800|   203k|        scannable,
 5801|   203k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|   203k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|   203k|    return arg_value{arg};
 5805|   203k|}
_ZN3scn2v46detail9arg_valueC2IyEERT_:
 5562|   203k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|   203k|    {
 5564|   203k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJyEE6valuesEv:
 6353|   191k|    {
 6354|   191k|        return m_values;
 6355|   191k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJyEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|   132k|        : basic_scan_args(store.desc, store.args.data())
 6136|   132k|    {
 6137|   132k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  66.0k|        : m_str(r.str)
 8763|  66.0k|    {
 8764|  66.0k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEcvbEv:
 1739|  71.0k|    {
 1740|  71.0k|        return has_value();
 1741|  71.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEptEv:
 1814|   184k|    {
 1815|   184k|        return &value();
 1816|   184k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   184k|    {
 1769|   184k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   184k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   184k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   184k|        return this->get_value();
 1771|   184k|    }
_ZN3scn2v44scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9749|  33.0k|{
 9750|  33.0k|    auto result = make_scan_result<Source, Args...>();
 9751|  33.0k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  33.0k|                                   make_scan_args(result->values())));
 9753|  33.0k|    return result;
 9754|  33.0k|}
_ZN3scn2v410scan_valueIyNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9790|  4.95k|{
 9791|  4.95k|    auto result = make_scan_result<Source, T>();
 9792|  4.95k|    fill_scan_result(
 9793|  4.95k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  4.95k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  4.95k|                            detail::make_arg<scan_context>(result->value())));
 9795|  4.95k|    return result;
 9796|  4.95k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEyEENS0_14basic_scan_argIT_EERT0_:
 5859|  9.89k|{
 5860|  9.89k|    check_scan_arg_types<T>();
 5861|       |
 5862|  9.89k|    basic_scan_arg<Context> arg;
 5863|  9.89k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  9.89k|    arg.m_value = make_value<Context>(value);
 5865|  9.89k|    return arg;
 5866|  9.89k|}
_ZNR3scn2v46detail25scan_result_value_storageIJyEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|  12.7k|    {
 6376|  12.7k|        return std::get<0>(m_values);
 6377|  12.7k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  86.9k|    {
 2869|  86.9k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  86.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  86.9k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  86.9k|    {
 2850|  86.9k|        return decay_copy(t.begin());
 2851|  86.9k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2093|  9.27M|{
 2094|  9.27M|    return SCN_FWD(t);
  ------------------
  |  |  936|  9.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  9.27M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   905k|    {
 2926|   905k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   905k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   905k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   905k|    {
 2908|   905k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   905k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   905k|    }
_ZN3scn2v44scanIJaENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9680|  34.2k|{
 9681|  34.2k|    auto result = make_scan_result<Source, Args...>();
 9682|  34.2k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  34.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  34.2k|                                   make_scan_args(result->values())));
 9684|  34.2k|    return result;
 9685|  34.2k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEEDav:
 9636|  73.8k|{
 9637|  73.8k|    return scan_result_type<Source, Args...>();
 9638|  73.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEC2Ev:
 1551|  73.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2Ev:
  426|  73.8k|        : m_value(T{}), m_has_value(true)
  427|  73.8k|    {
  428|  73.8k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEC2Ev:
 6570|  73.8k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6413|   452k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3459|   452k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|  73.8k|{
 9622|  73.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  73.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.4k, False: 59.3k]
  |  |  ------------------
  ------------------
 9623|  14.4k|        out = unexpected(in.error());
 9624|  14.4k|    }
 9625|  59.3k|    else {
 9626|  59.3k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  59.3k|    static_cast<    \
  |  |  935|  59.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  59.3k|    }
 9628|  73.8k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1739|   452k|    {
 1740|   452k|        return has_value();
 1741|   452k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   905k|    {
  490|   905k|        return m_has_value;
  491|   905k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1745|  86.9k|    {
 1746|  86.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  86.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  86.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  86.9k|        return this->get_unexpected().error();
 1748|  86.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  86.9k|    {
  473|  86.9k|        return m_unexpected;
  474|  86.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  14.4k|        : base(unexpect, std::move(e.error())),
 1616|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.4k|    {
 1618|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.4k|          m_has_value(false)
  451|  14.4k|    {
  452|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.4k|    {
 1316|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEaSEOSI_:
 1556|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorEvEaSEOSJ_:
  902|  14.4k|    {
  903|  14.4k|        assign_common(std::move(other));
  904|  14.4k|        return *this;
  905|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  14.4k|    {
  950|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.4k, False: 0]
  ------------------
  951|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   295k|    {
  490|   295k|        return m_has_value;
  491|   295k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   192k|    {
  456|   192k|        return m_value;
  457|   192k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  14.4k|    {
 1046|  14.4k|        this->destroy_value();
 1047|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  14.4k|    {
  504|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.4k|                                  std::forward<Args>(args)...);
  506|  14.4k|        m_has_value = false;
  507|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.4k|    {
  473|  14.4k|        return m_unexpected;
  474|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.4k|    {
  481|  14.4k|        return std::move(m_unexpected);
  482|  14.4k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6444|   366k|    {
 6445|   366k|        m_range = std::forward<Other>(r);
 6446|   366k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|   366k|    {
 1795|   366k|        return value();
 1796|   366k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|   366k|    {
 1769|   366k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   366k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   366k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   366k|        return this->get_value();
 1771|   366k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   366k|    {
  456|   366k|        return m_value;
  457|   366k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9460|   210k|{
 9461|   210k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|   210k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9462|   210k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9397|   210k|{
 9398|   210k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|   210k|    auto result = vscan_impl(buffer, format, args);
 9401|   210k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   210k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 41.4k, False: 169k]
  |  |  ------------------
  ------------------
 9402|  41.4k|        return unexpected(result.error());
 9403|  41.4k|    }
 9404|   169k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|   210k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5380|   452k|{
 5381|   452k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   452k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   452k|                  "\n"
 5385|   452k|                  "Unsupported range type given as input to a scanning "
 5386|   452k|                  "function.\n"
 5387|   452k|                  "A range needs to have a character type (value type) "
 5388|   452k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   452k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   452k|                  "to be included.\n"
 5391|   452k|                  "See the scnlib documentation for more details.");
 5392|   452k|    static_assert(
 5393|   452k|        !std::is_same_v<T, custom_char_traits>,
 5394|   452k|        "\n"
 5395|   452k|        "Unsupported range type given as input to a scanning "
 5396|   452k|        "function.\n"
 5397|   452k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   452k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   452k|        "not supported.");
 5400|   452k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   452k|                  "\n"
 5402|   452k|                  "Unsupported range type given as input to a scanning "
 5403|   452k|                  "function.\n"
 5404|   452k|                  "file_marker_found cannot be used as an "
 5405|   452k|                  "source range type to scn::scan.\n"
 5406|   452k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   452k|                  "and do not provide an explicit source range, "
 5408|   452k|                  "or use scn::scan with a FILE* directly.");
 5409|   452k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   452k|                  "\n"
 5411|   452k|                  "Unsupported range type given as input to a scanning "
 5412|   452k|                  "function.\n"
 5413|   452k|                  "In order to be scannable, a range needs to satisfy "
 5414|   452k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   452k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   452k|                  "\n"
 5417|   452k|                  "Unsupported range type given as input to a scanning "
 5418|   452k|                  "function.\n"
 5419|   452k|                  "A range needs to model forward_range and have a valid "
 5420|   452k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   452k|                  "Examples of scannable ranges are std::string, "
 5422|   452k|                  "std::string_view, "
 5423|   452k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   452k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   452k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   452k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|   452k|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|   452k|    else {
 5366|   452k|        return make_forward_scan_buffer(r);
 5367|   452k|    }
 5368|   452k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5184|   452k|{
 5185|   452k|    return basic_scan_forward_buffer_impl(range);
 5186|   452k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|   452k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|   452k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|   452k|          m_cursor(ranges::begin(*m_range))
 4766|   452k|    {
 4767|   452k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4736|   452k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|   452k|    {
 4738|   452k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4427|   452k|        : m_current_view(sv), m_is_contiguous(false)
 4428|   452k|    {
 4429|   452k|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4340|   452k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   818k|    {
 2869|   818k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   818k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   818k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   818k|    {
 2850|   818k|        return decay_copy(t.begin());
 2851|   818k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3479|  1.18M|    {
 3480|  1.18M|        return m_iterator;
 3481|  1.18M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4770|  2.33M|    {
 4771|  2.33M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 143k, False: 2.19M]
  ------------------
 4772|   143k|            return false;
 4773|   143k|        }
 4774|  2.19M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|  2.19M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|  2.19M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.19M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|  2.19M|        }
 4777|  2.19M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 1.77M, False: 419k]
  ------------------
 4778|  1.77M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|  1.77M|                                          this->m_current_view.begin(),
 4780|  1.77M|                                          this->m_current_view.end());
 4781|  1.77M|        }
 4782|  2.19M|        m_latest = *m_cursor;
 4783|  2.19M|        ++m_cursor;
 4784|  2.19M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|  2.19M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|  2.19M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|  2.19M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.19M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|  2.19M|        }
 4788|  2.19M|        return true;
 4789|  2.33M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  6.73M|    {
 2926|  6.73M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  6.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  6.73M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  6.73M|    {
 2908|  6.73M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  6.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  6.73M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3483|  7.09M|    {
 3484|  7.09M|        return m_sentinel;
 3485|  7.09M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4345|   452k|    {
 4346|   452k|        SCN_UNUSED(position);
  ------------------
  |  |  915|   452k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|   452k|        return true;
 4348|   452k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  86.9k|        : base(unexpect, std::move(e.error())),
 1616|  86.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  86.9k|    {
 1618|  86.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  86.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  86.9k|          m_has_value(false)
  451|  86.9k|    {
  452|  86.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   452k|    {
 1316|   452k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6674|   366k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|   366k|                      ranges::iterator_t<SourceRange>>) {
 6677|   366k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|   366k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   366k|    {
 2869|   366k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   366k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   366k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   366k|    {
 2850|   366k|        return decay_copy(t.begin());
 2851|   366k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6661|   366k|{
 6662|   366k|    return ranges::end(source);
 6663|   366k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   366k|    {
 2926|   366k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   366k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   366k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   366k|    {
 2908|   366k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   366k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   366k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|   366k|        : base(std::in_place, std::forward<U>(val)),
 1570|   366k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   366k|    {
 1572|   366k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|   366k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   366k|    {
  442|   366k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8767|  68.4k|    {
 8768|  68.4k|        return m_str;
 8769|  68.4k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|   818k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   818k|    static_cast<    \
  |  |  935|   818k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   818k|    static_cast<    \
  |  |  935|   818k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   818k|    {
 3466|   818k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  68.4k|        : m_str(r.str)
 8763|  68.4k|    {
 8764|  68.4k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEcvbEv:
 1739|  73.8k|    {
 1740|  73.8k|        return has_value();
 1741|  73.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEptEv:
 1814|   192k|    {
 1815|   192k|        return &value();
 1816|   192k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   192k|    {
 1769|   192k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   192k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   192k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   192k|        return this->get_value();
 1771|   192k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6433|   366k|    {
 6434|   366k|        return ranges::begin(m_range);
 6435|   366k|    }
_ZN3scn2v44scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9749|  34.2k|{
 9750|  34.2k|    auto result = make_scan_result<Source, Args...>();
 9751|  34.2k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  34.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  34.2k|                                   make_scan_args(result->values())));
 9753|  34.2k|    return result;
 9754|  34.2k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9478|   210k|{
 9479|   210k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|   210k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9480|   210k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9413|   210k|{
 9414|   210k|#if !SCN_DISABLE_LOCALE
 9415|   210k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|   210k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|   210k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|   210k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|   210k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   210k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 41.4k, False: 169k]
  |  |  ------------------
  ------------------
 9422|  41.4k|        return unexpected(result.error());
 9423|  41.4k|    }
 9424|   169k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|   210k|}
_ZN3scn2v410scan_valueIaNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9790|  5.33k|{
 9791|  5.33k|    auto result = make_scan_result<Source, T>();
 9792|  5.33k|    fill_scan_result(
 9793|  5.33k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  5.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  5.33k|                            detail::make_arg<scan_context>(result->value())));
 9795|  5.33k|    return result;
 9796|  5.33k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9491|  31.6k|{
 9492|  31.6k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|  31.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9493|  31.6k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|  31.6k|{
 9438|  31.6k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|  31.6k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|  31.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  31.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.14k, False: 27.4k]
  |  |  ------------------
  ------------------
 9442|  4.14k|        return unexpected(result.error());
 9443|  4.14k|    }
 9444|  27.4k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  27.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|  31.6k|}
_ZN3scn2v44scanIJhENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9680|  30.1k|{
 9681|  30.1k|    auto result = make_scan_result<Source, Args...>();
 9682|  30.1k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  30.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  30.1k|                                   make_scan_args(result->values())));
 9684|  30.1k|    return result;
 9685|  30.1k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEEDav:
 9636|  64.7k|{
 9637|  64.7k|    return scan_result_type<Source, Args...>();
 9638|  64.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEC2Ev:
 1551|  64.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2Ev:
  426|  64.7k|        : m_value(T{}), m_has_value(true)
  427|  64.7k|    {
  428|  64.7k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEC2Ev:
 6570|  64.7k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|  64.7k|{
 9622|  64.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  64.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.4k, False: 50.3k]
  |  |  ------------------
  ------------------
 9623|  14.4k|        out = unexpected(in.error());
 9624|  14.4k|    }
 9625|  50.3k|    else {
 9626|  50.3k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  50.3k|    static_cast<    \
  |  |  935|  50.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  50.3k|    }
 9628|  64.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  14.4k|        : base(unexpect, std::move(e.error())),
 1616|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.4k|    {
 1618|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.4k|          m_has_value(false)
  451|  14.4k|    {
  452|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.4k|    {
 1316|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEaSEOSI_:
 1556|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorEvEaSEOSJ_:
  902|  14.4k|    {
  903|  14.4k|        assign_common(std::move(other));
  904|  14.4k|        return *this;
  905|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  14.4k|    {
  950|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.4k, False: 0]
  ------------------
  951|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   259k|    {
  490|   259k|        return m_has_value;
  491|   259k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   165k|    {
  456|   165k|        return m_value;
  457|   165k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  14.4k|    {
 1046|  14.4k|        this->destroy_value();
 1047|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  14.4k|    {
  504|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.4k|                                  std::forward<Args>(args)...);
  506|  14.4k|        m_has_value = false;
  507|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.4k|    {
  473|  14.4k|        return m_unexpected;
  474|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.4k|    {
  481|  14.4k|        return std::move(m_unexpected);
  482|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8767|  60.3k|    {
 8768|  60.3k|        return m_str;
 8769|  60.3k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  60.3k|        : m_str(r.str)
 8763|  60.3k|    {
 8764|  60.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEcvbEv:
 1739|  64.7k|    {
 1740|  64.7k|        return has_value();
 1741|  64.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEptEv:
 1814|   165k|    {
 1815|   165k|        return &value();
 1816|   165k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   165k|    {
 1769|   165k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   165k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   165k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   165k|        return this->get_value();
 1771|   165k|    }
_ZN3scn2v44scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9749|  30.1k|{
 9750|  30.1k|    auto result = make_scan_result<Source, Args...>();
 9751|  30.1k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  30.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  30.1k|                                   make_scan_args(result->values())));
 9753|  30.1k|    return result;
 9754|  30.1k|}
_ZN3scn2v410scan_valueIhNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9790|  4.44k|{
 9791|  4.44k|    auto result = make_scan_result<Source, T>();
 9792|  4.44k|    fill_scan_result(
 9793|  4.44k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  4.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  4.44k|                            detail::make_arg<scan_context>(result->value())));
 9795|  4.44k|    return result;
 9796|  4.44k|}
_ZN3scn2v44scanIJiENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9680|  39.8k|{
 9681|  39.8k|    auto result = make_scan_result<Source, Args...>();
 9682|  39.8k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  39.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  39.8k|                                   make_scan_args(result->values())));
 9684|  39.8k|    return result;
 9685|  39.8k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEEDav:
 9636|  85.7k|{
 9637|  85.7k|    return scan_result_type<Source, Args...>();
 9638|  85.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEC2Ev:
 1551|  85.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  426|  85.7k|        : m_value(T{}), m_has_value(true)
  427|  85.7k|    {
  428|  85.7k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEC2Ev:
 6570|  85.7k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|  85.7k|{
 9622|  85.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  85.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.4k, False: 71.2k]
  |  |  ------------------
  ------------------
 9623|  14.4k|        out = unexpected(in.error());
 9624|  14.4k|    }
 9625|  71.2k|    else {
 9626|  71.2k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  71.2k|    static_cast<    \
  |  |  935|  71.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  71.2k|    }
 9628|  85.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  14.4k|        : base(unexpect, std::move(e.error())),
 1616|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.4k|    {
 1618|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.4k|          m_has_value(false)
  451|  14.4k|    {
  452|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.4k|    {
 1316|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEaSEOSI_:
 1556|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorEvEaSEOSJ_:
  902|  14.4k|    {
  903|  14.4k|        assign_common(std::move(other));
  904|  14.4k|        return *this;
  905|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  14.4k|    {
  950|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.4k, False: 0]
  ------------------
  951|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   343k|    {
  490|   343k|        return m_has_value;
  491|   343k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   228k|    {
  456|   228k|        return m_value;
  457|   228k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  14.4k|    {
 1046|  14.4k|        this->destroy_value();
 1047|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  14.4k|    {
  504|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.4k|                                  std::forward<Args>(args)...);
  506|  14.4k|        m_has_value = false;
  507|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.4k|    {
  473|  14.4k|        return m_unexpected;
  474|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.4k|    {
  481|  14.4k|        return std::move(m_unexpected);
  482|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8767|  79.7k|    {
 8768|  79.7k|        return m_str;
 8769|  79.7k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  79.7k|        : m_str(r.str)
 8763|  79.7k|    {
 8764|  79.7k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEcvbEv:
 1739|  85.7k|    {
 1740|  85.7k|        return has_value();
 1741|  85.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEptEv:
 1814|   228k|    {
 1815|   228k|        return &value();
 1816|   228k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   228k|    {
 1769|   228k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   228k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   228k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   228k|        return this->get_value();
 1771|   228k|    }
_ZN3scn2v44scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9749|  39.8k|{
 9750|  39.8k|    auto result = make_scan_result<Source, Args...>();
 9751|  39.8k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  39.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  39.8k|                                   make_scan_args(result->values())));
 9753|  39.8k|    return result;
 9754|  39.8k|}
_ZN3scn2v410scan_valueIiNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9790|  5.97k|{
 9791|  5.97k|    auto result = make_scan_result<Source, T>();
 9792|  5.97k|    fill_scan_result(
 9793|  5.97k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  5.97k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  5.97k|                            detail::make_arg<scan_context>(result->value())));
 9795|  5.97k|    return result;
 9796|  5.97k|}
_ZN3scn2v44scanIJjENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9680|  32.7k|{
 9681|  32.7k|    auto result = make_scan_result<Source, Args...>();
 9682|  32.7k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  32.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  32.7k|                                   make_scan_args(result->values())));
 9684|  32.7k|    return result;
 9685|  32.7k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEEDav:
 9636|  70.2k|{
 9637|  70.2k|    return scan_result_type<Source, Args...>();
 9638|  70.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEC2Ev:
 1551|  70.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  426|  70.2k|        : m_value(T{}), m_has_value(true)
  427|  70.2k|    {
  428|  70.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEC2Ev:
 6570|  70.2k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|  70.2k|{
 9622|  70.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  70.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.4k, False: 55.7k]
  |  |  ------------------
  ------------------
 9623|  14.4k|        out = unexpected(in.error());
 9624|  14.4k|    }
 9625|  55.7k|    else {
 9626|  55.7k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  55.7k|    static_cast<    \
  |  |  935|  55.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  55.7k|    }
 9628|  70.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  14.4k|        : base(unexpect, std::move(e.error())),
 1616|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.4k|    {
 1618|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.4k|          m_has_value(false)
  451|  14.4k|    {
  452|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.4k|    {
 1316|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEaSEOSI_:
 1556|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorEvEaSEOSJ_:
  902|  14.4k|    {
  903|  14.4k|        assign_common(std::move(other));
  904|  14.4k|        return *this;
  905|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  14.4k|    {
  950|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.4k, False: 0]
  ------------------
  951|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   281k|    {
  490|   281k|        return m_has_value;
  491|   281k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   181k|    {
  456|   181k|        return m_value;
  457|   181k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  14.4k|    {
 1046|  14.4k|        this->destroy_value();
 1047|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  14.4k|    {
  504|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.4k|                                  std::forward<Args>(args)...);
  506|  14.4k|        m_has_value = false;
  507|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.4k|    {
  473|  14.4k|        return m_unexpected;
  474|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.4k|    {
  481|  14.4k|        return std::move(m_unexpected);
  482|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8767|  65.4k|    {
 8768|  65.4k|        return m_str;
 8769|  65.4k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  65.4k|        : m_str(r.str)
 8763|  65.4k|    {
 8764|  65.4k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEcvbEv:
 1739|  70.2k|    {
 1740|  70.2k|        return has_value();
 1741|  70.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEptEv:
 1814|   181k|    {
 1815|   181k|        return &value();
 1816|   181k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   181k|    {
 1769|   181k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   181k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   181k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   181k|        return this->get_value();
 1771|   181k|    }
_ZN3scn2v44scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9749|  32.7k|{
 9750|  32.7k|    auto result = make_scan_result<Source, Args...>();
 9751|  32.7k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  32.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  32.7k|                                   make_scan_args(result->values())));
 9753|  32.7k|    return result;
 9754|  32.7k|}
_ZN3scn2v410scan_valueIjNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9790|  4.87k|{
 9791|  4.87k|    auto result = make_scan_result<Source, T>();
 9792|  4.87k|    fill_scan_result(
 9793|  4.87k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  4.87k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  4.87k|                            detail::make_arg<scan_context>(result->value())));
 9795|  4.87k|    return result;
 9796|  4.87k|}
_ZN3scn2v44scanIJxENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9680|  40.5k|{
 9681|  40.5k|    auto result = make_scan_result<Source, Args...>();
 9682|  40.5k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  40.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  40.5k|                                   make_scan_args(result->values())));
 9684|  40.5k|    return result;
 9685|  40.5k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEEDav:
 9636|  87.2k|{
 9637|  87.2k|    return scan_result_type<Source, Args...>();
 9638|  87.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEC2Ev:
 1551|  87.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2Ev:
  426|  87.2k|        : m_value(T{}), m_has_value(true)
  427|  87.2k|    {
  428|  87.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEC2Ev:
 6570|  87.2k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|  87.2k|{
 9622|  87.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  87.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.4k, False: 72.7k]
  |  |  ------------------
  ------------------
 9623|  14.4k|        out = unexpected(in.error());
 9624|  14.4k|    }
 9625|  72.7k|    else {
 9626|  72.7k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  72.7k|    static_cast<    \
  |  |  935|  72.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  72.7k|    }
 9628|  87.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  14.4k|        : base(unexpect, std::move(e.error())),
 1616|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.4k|    {
 1618|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.4k|          m_has_value(false)
  451|  14.4k|    {
  452|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.4k|    {
 1316|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEaSEOSI_:
 1556|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorEvEaSEOSJ_:
  902|  14.4k|    {
  903|  14.4k|        assign_common(std::move(other));
  904|  14.4k|        return *this;
  905|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  14.4k|    {
  950|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.4k, False: 0]
  ------------------
  951|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   348k|    {
  490|   348k|        return m_has_value;
  491|   348k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   232k|    {
  456|   232k|        return m_value;
  457|   232k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  14.4k|    {
 1046|  14.4k|        this->destroy_value();
 1047|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  14.4k|    {
  504|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.4k|                                  std::forward<Args>(args)...);
  506|  14.4k|        m_has_value = false;
  507|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.4k|    {
  473|  14.4k|        return m_unexpected;
  474|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.4k|    {
  481|  14.4k|        return std::move(m_unexpected);
  482|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8767|  81.1k|    {
 8768|  81.1k|        return m_str;
 8769|  81.1k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  81.1k|        : m_str(r.str)
 8763|  81.1k|    {
 8764|  81.1k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEcvbEv:
 1739|  87.2k|    {
 1740|  87.2k|        return has_value();
 1741|  87.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEptEv:
 1814|   232k|    {
 1815|   232k|        return &value();
 1816|   232k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   232k|    {
 1769|   232k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   232k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   232k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   232k|        return this->get_value();
 1771|   232k|    }
_ZN3scn2v44scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9749|  40.5k|{
 9750|  40.5k|    auto result = make_scan_result<Source, Args...>();
 9751|  40.5k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  40.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  40.5k|                                   make_scan_args(result->values())));
 9753|  40.5k|    return result;
 9754|  40.5k|}
_ZN3scn2v410scan_valueIxNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9790|  6.07k|{
 9791|  6.07k|    auto result = make_scan_result<Source, T>();
 9792|  6.07k|    fill_scan_result(
 9793|  6.07k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  6.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  6.07k|                            detail::make_arg<scan_context>(result->value())));
 9795|  6.07k|    return result;
 9796|  6.07k|}
_ZN3scn2v44scanIJyENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9680|  33.0k|{
 9681|  33.0k|    auto result = make_scan_result<Source, Args...>();
 9682|  33.0k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  33.0k|                                   make_scan_args(result->values())));
 9684|  33.0k|    return result;
 9685|  33.0k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEEDav:
 9636|  71.0k|{
 9637|  71.0k|    return scan_result_type<Source, Args...>();
 9638|  71.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEC2Ev:
 1551|  71.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2Ev:
  426|  71.0k|        : m_value(T{}), m_has_value(true)
  427|  71.0k|    {
  428|  71.0k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEC2Ev:
 6570|  71.0k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|  71.0k|{
 9622|  71.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  71.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.4k, False: 56.5k]
  |  |  ------------------
  ------------------
 9623|  14.4k|        out = unexpected(in.error());
 9624|  14.4k|    }
 9625|  56.5k|    else {
 9626|  56.5k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  56.5k|    static_cast<    \
  |  |  935|  56.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  56.5k|    }
 9628|  71.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  14.4k|        : base(unexpect, std::move(e.error())),
 1616|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.4k|    {
 1618|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.4k|          m_has_value(false)
  451|  14.4k|    {
  452|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.4k|    {
 1316|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEaSEOSI_:
 1556|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorEvEaSEOSJ_:
  902|  14.4k|    {
  903|  14.4k|        assign_common(std::move(other));
  904|  14.4k|        return *this;
  905|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  14.4k|    {
  950|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.4k, False: 0]
  ------------------
  951|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   284k|    {
  490|   284k|        return m_has_value;
  491|   284k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   184k|    {
  456|   184k|        return m_value;
  457|   184k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  14.4k|    {
 1046|  14.4k|        this->destroy_value();
 1047|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  14.4k|    {
  504|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.4k|                                  std::forward<Args>(args)...);
  506|  14.4k|        m_has_value = false;
  507|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.4k|    {
  473|  14.4k|        return m_unexpected;
  474|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.4k|    {
  481|  14.4k|        return std::move(m_unexpected);
  482|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8767|  66.1k|    {
 8768|  66.1k|        return m_str;
 8769|  66.1k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  66.1k|        : m_str(r.str)
 8763|  66.1k|    {
 8764|  66.1k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEcvbEv:
 1739|  71.0k|    {
 1740|  71.0k|        return has_value();
 1741|  71.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEptEv:
 1814|   184k|    {
 1815|   184k|        return &value();
 1816|   184k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   184k|    {
 1769|   184k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   184k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   184k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   184k|        return this->get_value();
 1771|   184k|    }
_ZN3scn2v44scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9749|  33.0k|{
 9750|  33.0k|    auto result = make_scan_result<Source, Args...>();
 9751|  33.0k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  33.0k|                                   make_scan_args(result->values())));
 9753|  33.0k|    return result;
 9754|  33.0k|}
_ZN3scn2v410scan_valueIyNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9790|  4.93k|{
 9791|  4.93k|    auto result = make_scan_result<Source, T>();
 9792|  4.93k|    fill_scan_result(
 9793|  4.93k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  4.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  4.93k|                            detail::make_arg<scan_context>(result->value())));
 9795|  4.93k|    return result;
 9796|  4.93k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   175k|    {
 2869|   175k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   175k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   175k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   175k|    {
 2850|   175k|        return decay_copy(t.begin());
 2851|   175k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2093|  1.19M|{
 2094|  1.19M|    return SCN_FWD(t);
  ------------------
  |  |  936|  1.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  1.19M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   371k|    {
 2926|   371k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   371k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   371k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   371k|    {
 2908|   371k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   371k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   371k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEEDav:
 9636|  30.8k|{
 9637|  30.8k|    return scan_result_type<Source, Args...>();
 9638|  30.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEC2Ev:
 1551|  30.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.8k|        : m_value(T{}), m_has_value(true)
  427|  30.8k|    {
  428|  30.8k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEC2Ev:
 6570|  30.8k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6413|   185k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3459|   185k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  30.8k|{
 9622|  30.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  30.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28.9k, False: 1.84k]
  |  |  ------------------
  ------------------
 9623|  28.9k|        out = unexpected(in.error());
 9624|  28.9k|    }
 9625|  1.84k|    else {
 9626|  1.84k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  1.84k|    static_cast<    \
  |  |  935|  1.84k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  1.84k|    }
 9628|  30.8k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1739|   185k|    {
 1740|   185k|        return has_value();
 1741|   185k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   370k|    {
  490|   370k|        return m_has_value;
  491|   370k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1745|   173k|    {
 1746|   173k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   173k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   173k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   173k|        return this->get_unexpected().error();
 1748|   173k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   173k|    {
  473|   173k|        return m_unexpected;
  474|   173k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  28.9k|        : base(unexpect, std::move(e.error())),
 1616|  28.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  28.9k|    {
 1618|  28.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  28.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.9k|          m_has_value(false)
  451|  28.9k|    {
  452|  28.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  28.9k|    {
 1316|  28.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEaSEOSC_:
 1556|  28.9k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorEvEaSEOSD_:
  902|  28.9k|    {
  903|  28.9k|        assign_common(std::move(other));
  904|  28.9k|        return *this;
  905|  28.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  28.9k|    {
  950|  28.9k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 28.9k, False: 0]
  ------------------
  951|  28.9k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 28.9k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  28.9k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  28.9k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   123k|    {
  490|   123k|        return m_has_value;
  491|   123k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  34.5k|    {
  456|  34.5k|        return m_value;
  457|  34.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  28.9k|    {
 1046|  28.9k|        this->destroy_value();
 1047|  28.9k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  28.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  28.9k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  28.9k|    {
  504|  28.9k|        scn::detail::construct_at(&get_unexpected(),
  505|  28.9k|                                  std::forward<Args>(args)...);
  506|  28.9k|        m_has_value = false;
  507|  28.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.9k|    {
  473|  28.9k|        return m_unexpected;
  474|  28.9k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  28.9k|    {
  481|  28.9k|        return std::move(m_unexpected);
  482|  28.9k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6444|  11.4k|    {
 6445|  11.4k|        m_range = std::forward<Other>(r);
 6446|  11.4k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|  11.4k|    {
 1795|  11.4k|        return value();
 1796|  11.4k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|  11.4k|    {
 1769|  11.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  11.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  11.4k|        return this->get_value();
 1771|  11.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  11.4k|    {
  456|  11.4k|        return m_value;
  457|  11.4k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9397|  88.3k|{
 9398|  88.3k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|  88.3k|    auto result = vscan_impl(buffer, format, args);
 9401|  88.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  88.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 82.8k, False: 5.59k]
  |  |  ------------------
  ------------------
 9402|  82.8k|        return unexpected(result.error());
 9403|  82.8k|    }
 9404|  5.59k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  5.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|  88.3k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5380|   185k|{
 5381|   185k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   185k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   185k|                  "\n"
 5385|   185k|                  "Unsupported range type given as input to a scanning "
 5386|   185k|                  "function.\n"
 5387|   185k|                  "A range needs to have a character type (value type) "
 5388|   185k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   185k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   185k|                  "to be included.\n"
 5391|   185k|                  "See the scnlib documentation for more details.");
 5392|   185k|    static_assert(
 5393|   185k|        !std::is_same_v<T, custom_char_traits>,
 5394|   185k|        "\n"
 5395|   185k|        "Unsupported range type given as input to a scanning "
 5396|   185k|        "function.\n"
 5397|   185k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   185k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   185k|        "not supported.");
 5400|   185k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   185k|                  "\n"
 5402|   185k|                  "Unsupported range type given as input to a scanning "
 5403|   185k|                  "function.\n"
 5404|   185k|                  "file_marker_found cannot be used as an "
 5405|   185k|                  "source range type to scn::scan.\n"
 5406|   185k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   185k|                  "and do not provide an explicit source range, "
 5408|   185k|                  "or use scn::scan with a FILE* directly.");
 5409|   185k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   185k|                  "\n"
 5411|   185k|                  "Unsupported range type given as input to a scanning "
 5412|   185k|                  "function.\n"
 5413|   185k|                  "In order to be scannable, a range needs to satisfy "
 5414|   185k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   185k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   185k|                  "\n"
 5417|   185k|                  "Unsupported range type given as input to a scanning "
 5418|   185k|                  "function.\n"
 5419|   185k|                  "A range needs to model forward_range and have a valid "
 5420|   185k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   185k|                  "Examples of scannable ranges are std::string, "
 5422|   185k|                  "std::string_view, "
 5423|   185k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   185k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   185k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   185k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|   185k|{
 5320|   185k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|   185k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|   185k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   185k|    {
 3000|   185k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   185k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   185k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   185k|    {
 2981|   185k|        return t.data();
 2982|   185k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3382|   185k|    {
 3383|   185k|        return detail::to_address(ranges::begin(derived()));
 3384|   185k|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   618k|{
  316|   618k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   618k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   618k|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  293|   618k|{
  294|   618k|    return p;
  295|   618k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   196k|    {
 2869|   196k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   196k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   196k|    {
 2850|   196k|        return decay_copy(t.begin());
 2851|   196k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3479|  36.8M|    {
 3480|  36.8M|        return m_iterator;
 3481|  36.8M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3338|   185k|    {
 3339|   185k|        return static_cast<const D&>(*this);
 3340|   185k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|   185k|    {
 3075|   185k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   185k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|   185k|    {
 3041|   185k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   185k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   185k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|   553k|    {
 3496|   553k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|   553k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|   173k|        : base(unexpect, std::move(e.error())),
 1616|   173k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   173k|    {
 1618|   173k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|   173k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   173k|          m_has_value(false)
  451|   173k|    {
  452|   173k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   185k|    {
 1316|   185k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6674|  11.4k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|  11.4k|                      ranges::iterator_t<SourceRange>>) {
 6677|  11.4k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|  11.4k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   438k|    {
 2869|   438k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   438k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   438k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   438k|    {
 2850|   438k|        return decay_copy(t.begin());
 2851|   438k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6661|  11.4k|{
 6662|  11.4k|    return ranges::end(source);
 6663|  11.4k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  11.4k|    {
 2926|  11.4k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  11.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  11.4k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  11.4k|    {
 2908|  11.4k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  11.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  11.4k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3483|  35.7M|    {
 3484|  35.7M|        return m_sentinel;
 3485|  35.7M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  11.4k|        : base(std::in_place, std::forward<U>(val)),
 1570|  11.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  11.4k|    {
 1572|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  11.4k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  11.4k|    {
  442|  11.4k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8767|  29.4k|    {
 8768|  29.4k|        return m_str;
 8769|  29.4k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJaEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  58.8k|{
 6110|  58.8k|    detail::check_scan_arg_types<Args...>();
 6111|  58.8k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  58.8k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJaEEC2ERNSt3__15tupleIJaEEE:
 6085|  58.8k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  58.8k|    {
 6087|  58.8k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJaEE12make_argptrsIJaEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  58.8k|    {
 6095|  58.8k|        return {detail::make_arg<
 6096|  58.8k|            kind, Context,
 6097|  58.8k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  58.8k|                                 typename Context::char_type>::value>(args)...};
 6099|  58.8k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE1EavEEPvRT2_:
 5874|  58.8k|{
 5875|  58.8k|    return make_value<Context>(value).ref_value;
 5876|  58.8k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEaEEDaRT0_:
 5809|  61.6k|{
 5810|  61.6k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  61.6k|                                  needs_context_tag>) {
 5814|  61.6k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  61.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  61.6k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERa:
 5648|  61.6k|    {                                                                        \
 5649|  61.6k|        return val;                                                          \
 5650|  61.6k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJaEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  58.8k|        : basic_scan_args(store.desc, store.args.data())
 6136|  58.8k|    {
 6137|  58.8k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 6187|   353k|        : m_desc(desc), m_builtin_values(data)
 6188|   353k|    {
 6189|   353k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|  1.44M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.44M|    static_cast<    \
  |  |  935|  1.44M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.44M|    static_cast<    \
  |  |  935|  1.44M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  1.44M|    {
 3466|  1.44M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8445|   353k|{
 8446|   353k|    return s;
 8447|   353k|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8417|   353k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  29.4k|        : m_str(r.str)
 8763|  29.4k|    {
 8764|  29.4k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEcvbEv:
 1739|  30.8k|    {
 1740|  30.8k|        return has_value();
 1741|  30.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEptEv:
 1814|  34.5k|    {
 1815|  34.5k|        return &value();
 1816|  34.5k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  34.5k|    {
 1769|  34.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  34.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  34.5k|        return this->get_value();
 1771|  34.5k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6433|  11.4k|    {
 6434|  11.4k|        return ranges::begin(m_range);
 6435|  11.4k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9413|  88.3k|{
 9414|  88.3k|#if !SCN_DISABLE_LOCALE
 9415|  88.3k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|  88.3k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|  88.3k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|  88.3k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|  88.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  88.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 82.8k, False: 5.59k]
  |  |  ------------------
  ------------------
 9422|  82.8k|        return unexpected(result.error());
 9423|  82.8k|    }
 9424|  5.59k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  5.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|  88.3k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|  8.51k|{
 9438|  8.51k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|  8.51k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|  8.51k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  8.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.28k, False: 234]
  |  |  ------------------
  ------------------
 9442|  8.28k|        return unexpected(result.error());
 9443|  8.28k|    }
 9444|    234|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|    234|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|  8.51k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEaEENS0_14basic_scan_argIT_EERT0_:
 5859|  2.82k|{
 5860|  2.82k|    check_scan_arg_types<T>();
 5861|       |
 5862|  2.82k|    basic_scan_arg<Context> arg;
 5863|  2.82k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  2.82k|    arg.m_value = make_value<Context>(value);
 5865|  2.82k|    return arg;
 5866|  2.82k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 5954|   370k|    constexpr basic_scan_arg() = default;
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEEDav:
 9636|  30.7k|{
 9637|  30.7k|    return scan_result_type<Source, Args...>();
 9638|  30.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEC2Ev:
 1551|  30.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.7k|        : m_value(T{}), m_has_value(true)
  427|  30.7k|    {
  428|  30.7k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEC2Ev:
 6570|  30.7k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  30.7k|{
 9622|  30.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28.9k, False: 1.77k]
  |  |  ------------------
  ------------------
 9623|  28.9k|        out = unexpected(in.error());
 9624|  28.9k|    }
 9625|  1.77k|    else {
 9626|  1.77k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  1.77k|    static_cast<    \
  |  |  935|  1.77k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  1.77k|    }
 9628|  30.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  28.9k|        : base(unexpect, std::move(e.error())),
 1616|  28.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  28.9k|    {
 1618|  28.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  28.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.9k|          m_has_value(false)
  451|  28.9k|    {
  452|  28.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  28.9k|    {
 1316|  28.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEaSEOSC_:
 1556|  28.9k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorEvEaSEOSD_:
  902|  28.9k|    {
  903|  28.9k|        assign_common(std::move(other));
  904|  28.9k|        return *this;
  905|  28.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  28.9k|    {
  950|  28.9k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 28.9k, False: 0]
  ------------------
  951|  28.9k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 28.9k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  28.9k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  28.9k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   123k|    {
  490|   123k|        return m_has_value;
  491|   123k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  34.2k|    {
  456|  34.2k|        return m_value;
  457|  34.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  28.9k|    {
 1046|  28.9k|        this->destroy_value();
 1047|  28.9k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  28.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  28.9k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  28.9k|    {
  504|  28.9k|        scn::detail::construct_at(&get_unexpected(),
  505|  28.9k|                                  std::forward<Args>(args)...);
  506|  28.9k|        m_has_value = false;
  507|  28.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.9k|    {
  473|  28.9k|        return m_unexpected;
  474|  28.9k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  28.9k|    {
  481|  28.9k|        return std::move(m_unexpected);
  482|  28.9k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8767|  29.3k|    {
 8768|  29.3k|        return m_str;
 8769|  29.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJhEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  58.6k|{
 6110|  58.6k|    detail::check_scan_arg_types<Args...>();
 6111|  58.6k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  58.6k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJhEEC2ERNSt3__15tupleIJhEEE:
 6085|  58.6k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  58.6k|    {
 6087|  58.6k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJhEE12make_argptrsIJhEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  58.6k|    {
 6095|  58.6k|        return {detail::make_arg<
 6096|  58.6k|            kind, Context,
 6097|  58.6k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  58.6k|                                 typename Context::char_type>::value>(args)...};
 6099|  58.6k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE6EhvEEPvRT2_:
 5874|  58.6k|{
 5875|  58.6k|    return make_value<Context>(value).ref_value;
 5876|  58.6k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEhEEDaRT0_:
 5809|  61.5k|{
 5810|  61.5k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  61.5k|                                  needs_context_tag>) {
 5814|  61.5k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  61.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  61.5k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERh:
 5648|  61.5k|    {                                                                        \
 5649|  61.5k|        return val;                                                          \
 5650|  61.5k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJhEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  58.6k|        : basic_scan_args(store.desc, store.args.data())
 6136|  58.6k|    {
 6137|  58.6k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  29.3k|        : m_str(r.str)
 8763|  29.3k|    {
 8764|  29.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEcvbEv:
 1739|  30.7k|    {
 1740|  30.7k|        return has_value();
 1741|  30.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEptEv:
 1814|  34.2k|    {
 1815|  34.2k|        return &value();
 1816|  34.2k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  34.2k|    {
 1769|  34.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  34.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  34.2k|        return this->get_value();
 1771|  34.2k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEhEENS0_14basic_scan_argIT_EERT0_:
 5859|  2.81k|{
 5860|  2.81k|    check_scan_arg_types<T>();
 5861|       |
 5862|  2.81k|    basic_scan_arg<Context> arg;
 5863|  2.81k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  2.81k|    arg.m_value = make_value<Context>(value);
 5865|  2.81k|    return arg;
 5866|  2.81k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEEDav:
 9636|  30.9k|{
 9637|  30.9k|    return scan_result_type<Source, Args...>();
 9638|  30.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2Ev:
 1551|  30.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.9k|        : m_value(T{}), m_has_value(true)
  427|  30.9k|    {
  428|  30.9k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEC2Ev:
 6570|  30.9k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  30.9k|{
 9622|  30.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  30.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28.9k, False: 1.96k]
  |  |  ------------------
  ------------------
 9623|  28.9k|        out = unexpected(in.error());
 9624|  28.9k|    }
 9625|  1.96k|    else {
 9626|  1.96k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  1.96k|    static_cast<    \
  |  |  935|  1.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  1.96k|    }
 9628|  30.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  28.9k|        : base(unexpect, std::move(e.error())),
 1616|  28.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  28.9k|    {
 1618|  28.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  28.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.9k|          m_has_value(false)
  451|  28.9k|    {
  452|  28.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  28.9k|    {
 1316|  28.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEaSEOSC_:
 1556|  28.9k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvEaSEOSD_:
  902|  28.9k|    {
  903|  28.9k|        assign_common(std::move(other));
  904|  28.9k|        return *this;
  905|  28.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  28.9k|    {
  950|  28.9k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 28.9k, False: 0]
  ------------------
  951|  28.9k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 28.9k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  28.9k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  28.9k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   123k|    {
  490|   123k|        return m_has_value;
  491|   123k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  34.8k|    {
  456|  34.8k|        return m_value;
  457|  34.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  28.9k|    {
 1046|  28.9k|        this->destroy_value();
 1047|  28.9k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  28.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  28.9k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  28.9k|    {
  504|  28.9k|        scn::detail::construct_at(&get_unexpected(),
  505|  28.9k|                                  std::forward<Args>(args)...);
  506|  28.9k|        m_has_value = false;
  507|  28.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.9k|    {
  473|  28.9k|        return m_unexpected;
  474|  28.9k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  28.9k|    {
  481|  28.9k|        return std::move(m_unexpected);
  482|  28.9k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8767|  29.5k|    {
 8768|  29.5k|        return m_str;
 8769|  29.5k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJiEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  59.0k|{
 6110|  59.0k|    detail::check_scan_arg_types<Args...>();
 6111|  59.0k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  59.0k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJiEEC2ERNSt3__15tupleIJiEEE:
 6085|  59.0k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  59.0k|    {
 6087|  59.0k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  59.0k|    {
 6095|  59.0k|        return {detail::make_arg<
 6096|  59.0k|            kind, Context,
 6097|  59.0k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  59.0k|                                 typename Context::char_type>::value>(args)...};
 6099|  59.0k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE3EivEEPvRT2_:
 5874|  59.0k|{
 5875|  59.0k|    return make_value<Context>(value).ref_value;
 5876|  59.0k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEiEEDaRT0_:
 5809|  61.8k|{
 5810|  61.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  61.8k|                                  needs_context_tag>) {
 5814|  61.8k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  61.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  61.8k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERi:
 5648|  61.8k|    {                                                                        \
 5649|  61.8k|        return val;                                                          \
 5650|  61.8k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJiEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  59.0k|        : basic_scan_args(store.desc, store.args.data())
 6136|  59.0k|    {
 6137|  59.0k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  29.5k|        : m_str(r.str)
 8763|  29.5k|    {
 8764|  29.5k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEcvbEv:
 1739|  30.9k|    {
 1740|  30.9k|        return has_value();
 1741|  30.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEptEv:
 1814|  34.8k|    {
 1815|  34.8k|        return &value();
 1816|  34.8k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  34.8k|    {
 1769|  34.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  34.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  34.8k|        return this->get_value();
 1771|  34.8k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEiEENS0_14basic_scan_argIT_EERT0_:
 5859|  2.84k|{
 5860|  2.84k|    check_scan_arg_types<T>();
 5861|       |
 5862|  2.84k|    basic_scan_arg<Context> arg;
 5863|  2.84k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  2.84k|    arg.m_value = make_value<Context>(value);
 5865|  2.84k|    return arg;
 5866|  2.84k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEEDav:
 9636|  30.8k|{
 9637|  30.8k|    return scan_result_type<Source, Args...>();
 9638|  30.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2Ev:
 1551|  30.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.8k|        : m_value(T{}), m_has_value(true)
  427|  30.8k|    {
  428|  30.8k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEC2Ev:
 6570|  30.8k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  30.8k|{
 9622|  30.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  30.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28.9k, False: 1.83k]
  |  |  ------------------
  ------------------
 9623|  28.9k|        out = unexpected(in.error());
 9624|  28.9k|    }
 9625|  1.83k|    else {
 9626|  1.83k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  1.83k|    static_cast<    \
  |  |  935|  1.83k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  1.83k|    }
 9628|  30.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  28.9k|        : base(unexpect, std::move(e.error())),
 1616|  28.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  28.9k|    {
 1618|  28.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  28.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.9k|          m_has_value(false)
  451|  28.9k|    {
  452|  28.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  28.9k|    {
 1316|  28.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEaSEOSC_:
 1556|  28.9k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvEaSEOSD_:
  902|  28.9k|    {
  903|  28.9k|        assign_common(std::move(other));
  904|  28.9k|        return *this;
  905|  28.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  28.9k|    {
  950|  28.9k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 28.9k, False: 0]
  ------------------
  951|  28.9k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 28.9k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  28.9k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  28.9k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   123k|    {
  490|   123k|        return m_has_value;
  491|   123k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  34.4k|    {
  456|  34.4k|        return m_value;
  457|  34.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  28.9k|    {
 1046|  28.9k|        this->destroy_value();
 1047|  28.9k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  28.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  28.9k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  28.9k|    {
  504|  28.9k|        scn::detail::construct_at(&get_unexpected(),
  505|  28.9k|                                  std::forward<Args>(args)...);
  506|  28.9k|        m_has_value = false;
  507|  28.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.9k|    {
  473|  28.9k|        return m_unexpected;
  474|  28.9k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  28.9k|    {
  481|  28.9k|        return std::move(m_unexpected);
  482|  28.9k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8767|  29.4k|    {
 8768|  29.4k|        return m_str;
 8769|  29.4k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJjEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  58.8k|{
 6110|  58.8k|    detail::check_scan_arg_types<Args...>();
 6111|  58.8k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  58.8k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJjEEC2ERNSt3__15tupleIJjEEE:
 6085|  58.8k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  58.8k|    {
 6087|  58.8k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  58.8k|    {
 6095|  58.8k|        return {detail::make_arg<
 6096|  58.8k|            kind, Context,
 6097|  58.8k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  58.8k|                                 typename Context::char_type>::value>(args)...};
 6099|  58.8k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE8EjvEEPvRT2_:
 5874|  58.8k|{
 5875|  58.8k|    return make_value<Context>(value).ref_value;
 5876|  58.8k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEjEEDaRT0_:
 5809|  61.6k|{
 5810|  61.6k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  61.6k|                                  needs_context_tag>) {
 5814|  61.6k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  61.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  61.6k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERj:
 5648|  61.6k|    {                                                                        \
 5649|  61.6k|        return val;                                                          \
 5650|  61.6k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJjEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  58.8k|        : basic_scan_args(store.desc, store.args.data())
 6136|  58.8k|    {
 6137|  58.8k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  29.4k|        : m_str(r.str)
 8763|  29.4k|    {
 8764|  29.4k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEcvbEv:
 1739|  30.8k|    {
 1740|  30.8k|        return has_value();
 1741|  30.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEptEv:
 1814|  34.4k|    {
 1815|  34.4k|        return &value();
 1816|  34.4k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  34.4k|    {
 1769|  34.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  34.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  34.4k|        return this->get_value();
 1771|  34.4k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEjEENS0_14basic_scan_argIT_EERT0_:
 5859|  2.82k|{
 5860|  2.82k|    check_scan_arg_types<T>();
 5861|       |
 5862|  2.82k|    basic_scan_arg<Context> arg;
 5863|  2.82k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  2.82k|    arg.m_value = make_value<Context>(value);
 5865|  2.82k|    return arg;
 5866|  2.82k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEEDav:
 9636|  31.0k|{
 9637|  31.0k|    return scan_result_type<Source, Args...>();
 9638|  31.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEC2Ev:
 1551|  31.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2Ev:
  426|  31.0k|        : m_value(T{}), m_has_value(true)
  427|  31.0k|    {
  428|  31.0k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEC2Ev:
 6570|  31.0k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  31.0k|{
 9622|  31.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  31.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28.9k, False: 2.07k]
  |  |  ------------------
  ------------------
 9623|  28.9k|        out = unexpected(in.error());
 9624|  28.9k|    }
 9625|  2.07k|    else {
 9626|  2.07k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  2.07k|    static_cast<    \
  |  |  935|  2.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  2.07k|    }
 9628|  31.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  28.9k|        : base(unexpect, std::move(e.error())),
 1616|  28.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  28.9k|    {
 1618|  28.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  28.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.9k|          m_has_value(false)
  451|  28.9k|    {
  452|  28.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  28.9k|    {
 1316|  28.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEaSEOSC_:
 1556|  28.9k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorEvEaSEOSD_:
  902|  28.9k|    {
  903|  28.9k|        assign_common(std::move(other));
  904|  28.9k|        return *this;
  905|  28.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  28.9k|    {
  950|  28.9k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 28.9k, False: 0]
  ------------------
  951|  28.9k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 28.9k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  28.9k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  28.9k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   124k|    {
  490|   124k|        return m_has_value;
  491|   124k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  35.2k|    {
  456|  35.2k|        return m_value;
  457|  35.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  28.9k|    {
 1046|  28.9k|        this->destroy_value();
 1047|  28.9k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  28.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  28.9k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  28.9k|    {
  504|  28.9k|        scn::detail::construct_at(&get_unexpected(),
  505|  28.9k|                                  std::forward<Args>(args)...);
  506|  28.9k|        m_has_value = false;
  507|  28.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.9k|    {
  473|  28.9k|        return m_unexpected;
  474|  28.9k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  28.9k|    {
  481|  28.9k|        return std::move(m_unexpected);
  482|  28.9k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8767|  29.6k|    {
 8768|  29.6k|        return m_str;
 8769|  29.6k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJxEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  59.2k|{
 6110|  59.2k|    detail::check_scan_arg_types<Args...>();
 6111|  59.2k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  59.2k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJxEEC2ERNSt3__15tupleIJxEEE:
 6085|  59.2k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  59.2k|    {
 6087|  59.2k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJxEE12make_argptrsIJxEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  59.2k|    {
 6095|  59.2k|        return {detail::make_arg<
 6096|  59.2k|            kind, Context,
 6097|  59.2k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  59.2k|                                 typename Context::char_type>::value>(args)...};
 6099|  59.2k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE5ExvEEPvRT2_:
 5874|  59.2k|{
 5875|  59.2k|    return make_value<Context>(value).ref_value;
 5876|  59.2k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEExEEDaRT0_:
 5809|  62.1k|{
 5810|  62.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  62.1k|                                  needs_context_tag>) {
 5814|  62.1k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  62.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  62.1k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERx:
 5648|  62.1k|    {                                                                        \
 5649|  62.1k|        return val;                                                          \
 5650|  62.1k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJxEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  59.2k|        : basic_scan_args(store.desc, store.args.data())
 6136|  59.2k|    {
 6137|  59.2k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  29.6k|        : m_str(r.str)
 8763|  29.6k|    {
 8764|  29.6k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEcvbEv:
 1739|  31.0k|    {
 1740|  31.0k|        return has_value();
 1741|  31.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEptEv:
 1814|  35.2k|    {
 1815|  35.2k|        return &value();
 1816|  35.2k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  35.2k|    {
 1769|  35.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  35.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  35.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  35.2k|        return this->get_value();
 1771|  35.2k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEExEENS0_14basic_scan_argIT_EERT0_:
 5859|  2.87k|{
 5860|  2.87k|    check_scan_arg_types<T>();
 5861|       |
 5862|  2.87k|    basic_scan_arg<Context> arg;
 5863|  2.87k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  2.87k|    arg.m_value = make_value<Context>(value);
 5865|  2.87k|    return arg;
 5866|  2.87k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEEDav:
 9636|  30.9k|{
 9637|  30.9k|    return scan_result_type<Source, Args...>();
 9638|  30.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEC2Ev:
 1551|  30.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.9k|        : m_value(T{}), m_has_value(true)
  427|  30.9k|    {
  428|  30.9k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEC2Ev:
 6570|  30.9k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  30.9k|{
 9622|  30.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  30.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28.9k, False: 1.92k]
  |  |  ------------------
  ------------------
 9623|  28.9k|        out = unexpected(in.error());
 9624|  28.9k|    }
 9625|  1.92k|    else {
 9626|  1.92k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  1.92k|    static_cast<    \
  |  |  935|  1.92k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  1.92k|    }
 9628|  30.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  28.9k|        : base(unexpect, std::move(e.error())),
 1616|  28.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  28.9k|    {
 1618|  28.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  28.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.9k|          m_has_value(false)
  451|  28.9k|    {
  452|  28.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  28.9k|    {
 1316|  28.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEaSEOSC_:
 1556|  28.9k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorEvEaSEOSD_:
  902|  28.9k|    {
  903|  28.9k|        assign_common(std::move(other));
  904|  28.9k|        return *this;
  905|  28.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  28.9k|    {
  950|  28.9k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 28.9k, False: 0]
  ------------------
  951|  28.9k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 28.9k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  28.9k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  28.9k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   123k|    {
  490|   123k|        return m_has_value;
  491|   123k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  34.7k|    {
  456|  34.7k|        return m_value;
  457|  34.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  28.9k|    {
 1046|  28.9k|        this->destroy_value();
 1047|  28.9k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  28.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  28.9k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  28.9k|    {
  504|  28.9k|        scn::detail::construct_at(&get_unexpected(),
  505|  28.9k|                                  std::forward<Args>(args)...);
  506|  28.9k|        m_has_value = false;
  507|  28.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.9k|    {
  473|  28.9k|        return m_unexpected;
  474|  28.9k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  28.9k|    {
  481|  28.9k|        return std::move(m_unexpected);
  482|  28.9k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8767|  29.4k|    {
 8768|  29.4k|        return m_str;
 8769|  29.4k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJyEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  58.9k|{
 6110|  58.9k|    detail::check_scan_arg_types<Args...>();
 6111|  58.9k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  58.9k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJyEEC2ERNSt3__15tupleIJyEEE:
 6085|  58.9k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  58.9k|    {
 6087|  58.9k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJyEE12make_argptrsIJyEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  58.9k|    {
 6095|  58.9k|        return {detail::make_arg<
 6096|  58.9k|            kind, Context,
 6097|  58.9k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  58.9k|                                 typename Context::char_type>::value>(args)...};
 6099|  58.9k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE10EyvEEPvRT2_:
 5874|  58.9k|{
 5875|  58.9k|    return make_value<Context>(value).ref_value;
 5876|  58.9k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEyEEDaRT0_:
 5809|  61.8k|{
 5810|  61.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  61.8k|                                  needs_context_tag>) {
 5814|  61.8k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  61.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  61.8k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERy:
 5648|  61.8k|    {                                                                        \
 5649|  61.8k|        return val;                                                          \
 5650|  61.8k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJyEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  58.9k|        : basic_scan_args(store.desc, store.args.data())
 6136|  58.9k|    {
 6137|  58.9k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  29.4k|        : m_str(r.str)
 8763|  29.4k|    {
 8764|  29.4k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEcvbEv:
 1739|  30.9k|    {
 1740|  30.9k|        return has_value();
 1741|  30.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEptEv:
 1814|  34.7k|    {
 1815|  34.7k|        return &value();
 1816|  34.7k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  34.7k|    {
 1769|  34.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  34.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  34.7k|        return this->get_value();
 1771|  34.7k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEyEENS0_14basic_scan_argIT_EERT0_:
 5859|  2.84k|{
 5860|  2.84k|    check_scan_arg_types<T>();
 5861|       |
 5862|  2.84k|    basic_scan_arg<Context> arg;
 5863|  2.84k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  2.84k|    arg.m_value = make_value<Context>(value);
 5865|  2.84k|    return arg;
 5866|  2.84k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   173k|    {
 2869|   173k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   173k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   173k|    {
 2850|   173k|        return decay_copy(t.begin());
 2851|   173k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2093|   103M|{
 2094|   103M|    return SCN_FWD(t);
  ------------------
  |  |  936|   103M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   103M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   370k|    {
 2926|   370k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   370k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   370k|    {
 2908|   370k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   370k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEEDav:
 9636|  30.8k|{
 9637|  30.8k|    return scan_result_type<Source, Args...>();
 9638|  30.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEC2Ev:
 1551|  30.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.8k|        : m_value(T{}), m_has_value(true)
  427|  30.8k|    {
  428|  30.8k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEC2Ev:
 6570|  30.8k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6413|   185k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3459|   185k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|  30.8k|{
 9622|  30.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  30.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28.9k, False: 1.84k]
  |  |  ------------------
  ------------------
 9623|  28.9k|        out = unexpected(in.error());
 9624|  28.9k|    }
 9625|  1.84k|    else {
 9626|  1.84k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  1.84k|    static_cast<    \
  |  |  935|  1.84k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  1.84k|    }
 9628|  30.8k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1739|   185k|    {
 1740|   185k|        return has_value();
 1741|   185k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   370k|    {
  490|   370k|        return m_has_value;
  491|   370k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1745|   173k|    {
 1746|   173k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   173k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   173k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   173k|        return this->get_unexpected().error();
 1748|   173k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   173k|    {
  473|   173k|        return m_unexpected;
  474|   173k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  28.9k|        : base(unexpect, std::move(e.error())),
 1616|  28.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  28.9k|    {
 1618|  28.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  28.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.9k|          m_has_value(false)
  451|  28.9k|    {
  452|  28.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  28.9k|    {
 1316|  28.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEaSEOSI_:
 1556|  28.9k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorEvEaSEOSJ_:
  902|  28.9k|    {
  903|  28.9k|        assign_common(std::move(other));
  904|  28.9k|        return *this;
  905|  28.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  28.9k|    {
  950|  28.9k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 28.9k, False: 0]
  ------------------
  951|  28.9k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 28.9k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  28.9k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  28.9k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   123k|    {
  490|   123k|        return m_has_value;
  491|   123k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  34.5k|    {
  456|  34.5k|        return m_value;
  457|  34.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  28.9k|    {
 1046|  28.9k|        this->destroy_value();
 1047|  28.9k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  28.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  28.9k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  28.9k|    {
  504|  28.9k|        scn::detail::construct_at(&get_unexpected(),
  505|  28.9k|                                  std::forward<Args>(args)...);
  506|  28.9k|        m_has_value = false;
  507|  28.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.9k|    {
  473|  28.9k|        return m_unexpected;
  474|  28.9k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  28.9k|    {
  481|  28.9k|        return std::move(m_unexpected);
  482|  28.9k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6444|  11.4k|    {
 6445|  11.4k|        m_range = std::forward<Other>(r);
 6446|  11.4k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|  11.4k|    {
 1795|  11.4k|        return value();
 1796|  11.4k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|  11.4k|    {
 1769|  11.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  11.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  11.4k|        return this->get_value();
 1771|  11.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  11.4k|    {
  456|  11.4k|        return m_value;
  457|  11.4k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9397|  88.3k|{
 9398|  88.3k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|  88.3k|    auto result = vscan_impl(buffer, format, args);
 9401|  88.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  88.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 82.8k, False: 5.59k]
  |  |  ------------------
  ------------------
 9402|  82.8k|        return unexpected(result.error());
 9403|  82.8k|    }
 9404|  5.59k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  5.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|  88.3k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5380|   185k|{
 5381|   185k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   185k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   185k|                  "\n"
 5385|   185k|                  "Unsupported range type given as input to a scanning "
 5386|   185k|                  "function.\n"
 5387|   185k|                  "A range needs to have a character type (value type) "
 5388|   185k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   185k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   185k|                  "to be included.\n"
 5391|   185k|                  "See the scnlib documentation for more details.");
 5392|   185k|    static_assert(
 5393|   185k|        !std::is_same_v<T, custom_char_traits>,
 5394|   185k|        "\n"
 5395|   185k|        "Unsupported range type given as input to a scanning "
 5396|   185k|        "function.\n"
 5397|   185k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   185k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   185k|        "not supported.");
 5400|   185k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   185k|                  "\n"
 5402|   185k|                  "Unsupported range type given as input to a scanning "
 5403|   185k|                  "function.\n"
 5404|   185k|                  "file_marker_found cannot be used as an "
 5405|   185k|                  "source range type to scn::scan.\n"
 5406|   185k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   185k|                  "and do not provide an explicit source range, "
 5408|   185k|                  "or use scn::scan with a FILE* directly.");
 5409|   185k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   185k|                  "\n"
 5411|   185k|                  "Unsupported range type given as input to a scanning "
 5412|   185k|                  "function.\n"
 5413|   185k|                  "In order to be scannable, a range needs to satisfy "
 5414|   185k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   185k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   185k|                  "\n"
 5417|   185k|                  "Unsupported range type given as input to a scanning "
 5418|   185k|                  "function.\n"
 5419|   185k|                  "A range needs to model forward_range and have a valid "
 5420|   185k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   185k|                  "Examples of scannable ranges are std::string, "
 5422|   185k|                  "std::string_view, "
 5423|   185k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   185k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   185k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   185k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|   185k|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|   185k|    else {
 5366|   185k|        return make_forward_scan_buffer(r);
 5367|   185k|    }
 5368|   185k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5184|   185k|{
 5185|   185k|    return basic_scan_forward_buffer_impl(range);
 5186|   185k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|   185k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|   185k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|   185k|          m_cursor(ranges::begin(*m_range))
 4766|   185k|    {
 4767|   185k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4736|   185k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|   185k|    {
 4738|   185k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4427|   185k|        : m_current_view(sv), m_is_contiguous(false)
 4428|   185k|    {
 4429|   185k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4340|   185k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   196k|    {
 2869|   196k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   196k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   196k|    {
 2850|   196k|        return decay_copy(t.begin());
 2851|   196k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3479|   208k|    {
 3480|   208k|        return m_iterator;
 3481|   208k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4770|  34.3M|    {
 4771|  34.3M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 104k, False: 34.2M]
  ------------------
 4772|   104k|            return false;
 4773|   104k|        }
 4774|  34.2M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|  34.2M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|  34.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|  34.2M|        }
 4777|  34.2M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 34.0M, False: 134k]
  ------------------
 4778|  34.0M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|  34.0M|                                          this->m_current_view.begin(),
 4780|  34.0M|                                          this->m_current_view.end());
 4781|  34.0M|        }
 4782|  34.2M|        m_latest = *m_cursor;
 4783|  34.2M|        ++m_cursor;
 4784|  34.2M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|  34.2M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|  34.2M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|  34.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|  34.2M|        }
 4788|  34.2M|        return true;
 4789|  34.3M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   102M|    {
 2926|   102M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   102M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   102M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   102M|    {
 2908|   102M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   102M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   102M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3483|   102M|    {
 3484|   102M|        return m_sentinel;
 3485|   102M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4345|   185k|    {
 4346|   185k|        SCN_UNUSED(position);
  ------------------
  |  |  915|   185k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|   185k|        return true;
 4348|   185k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|   173k|        : base(unexpect, std::move(e.error())),
 1616|   173k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   173k|    {
 1618|   173k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|   173k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   173k|          m_has_value(false)
  451|   173k|    {
  452|   173k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   185k|    {
 1316|   185k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6674|  11.4k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|  11.4k|                      ranges::iterator_t<SourceRange>>) {
 6677|  11.4k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|  11.4k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  11.4k|    {
 2869|  11.4k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  11.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  11.4k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  11.4k|    {
 2850|  11.4k|        return decay_copy(t.begin());
 2851|  11.4k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6661|  11.4k|{
 6662|  11.4k|    return ranges::end(source);
 6663|  11.4k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  11.4k|    {
 2926|  11.4k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  11.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  11.4k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  11.4k|    {
 2908|  11.4k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  11.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  11.4k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|  11.4k|        : base(std::in_place, std::forward<U>(val)),
 1570|  11.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  11.4k|    {
 1572|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|  11.4k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  11.4k|    {
  442|  11.4k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8767|  29.4k|    {
 8768|  29.4k|        return m_str;
 8769|  29.4k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|   196k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   196k|    static_cast<    \
  |  |  935|   196k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   196k|    static_cast<    \
  |  |  935|   196k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   196k|    {
 3466|   196k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  29.4k|        : m_str(r.str)
 8763|  29.4k|    {
 8764|  29.4k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEcvbEv:
 1739|  30.8k|    {
 1740|  30.8k|        return has_value();
 1741|  30.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEptEv:
 1814|  34.5k|    {
 1815|  34.5k|        return &value();
 1816|  34.5k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  34.5k|    {
 1769|  34.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  34.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  34.5k|        return this->get_value();
 1771|  34.5k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6433|  11.4k|    {
 6434|  11.4k|        return ranges::begin(m_range);
 6435|  11.4k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9413|  88.3k|{
 9414|  88.3k|#if !SCN_DISABLE_LOCALE
 9415|  88.3k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|  88.3k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|  88.3k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|  88.3k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|  88.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  88.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 82.8k, False: 5.59k]
  |  |  ------------------
  ------------------
 9422|  82.8k|        return unexpected(result.error());
 9423|  82.8k|    }
 9424|  5.59k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  5.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|  88.3k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|  8.51k|{
 9438|  8.51k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|  8.51k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|  8.51k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  8.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.28k, False: 234]
  |  |  ------------------
  ------------------
 9442|  8.28k|        return unexpected(result.error());
 9443|  8.28k|    }
 9444|    234|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|    234|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|  8.51k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEEDav:
 9636|  30.7k|{
 9637|  30.7k|    return scan_result_type<Source, Args...>();
 9638|  30.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEC2Ev:
 1551|  30.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.7k|        : m_value(T{}), m_has_value(true)
  427|  30.7k|    {
  428|  30.7k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEC2Ev:
 6570|  30.7k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|  30.7k|{
 9622|  30.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28.9k, False: 1.77k]
  |  |  ------------------
  ------------------
 9623|  28.9k|        out = unexpected(in.error());
 9624|  28.9k|    }
 9625|  1.77k|    else {
 9626|  1.77k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  1.77k|    static_cast<    \
  |  |  935|  1.77k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  1.77k|    }
 9628|  30.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  28.9k|        : base(unexpect, std::move(e.error())),
 1616|  28.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  28.9k|    {
 1618|  28.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  28.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.9k|          m_has_value(false)
  451|  28.9k|    {
  452|  28.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  28.9k|    {
 1316|  28.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEaSEOSI_:
 1556|  28.9k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorEvEaSEOSJ_:
  902|  28.9k|    {
  903|  28.9k|        assign_common(std::move(other));
  904|  28.9k|        return *this;
  905|  28.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  28.9k|    {
  950|  28.9k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 28.9k, False: 0]
  ------------------
  951|  28.9k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 28.9k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  28.9k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  28.9k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   123k|    {
  490|   123k|        return m_has_value;
  491|   123k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  34.2k|    {
  456|  34.2k|        return m_value;
  457|  34.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  28.9k|    {
 1046|  28.9k|        this->destroy_value();
 1047|  28.9k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  28.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  28.9k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  28.9k|    {
  504|  28.9k|        scn::detail::construct_at(&get_unexpected(),
  505|  28.9k|                                  std::forward<Args>(args)...);
  506|  28.9k|        m_has_value = false;
  507|  28.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.9k|    {
  473|  28.9k|        return m_unexpected;
  474|  28.9k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  28.9k|    {
  481|  28.9k|        return std::move(m_unexpected);
  482|  28.9k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8767|  29.3k|    {
 8768|  29.3k|        return m_str;
 8769|  29.3k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  29.3k|        : m_str(r.str)
 8763|  29.3k|    {
 8764|  29.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEcvbEv:
 1739|  30.7k|    {
 1740|  30.7k|        return has_value();
 1741|  30.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEptEv:
 1814|  34.2k|    {
 1815|  34.2k|        return &value();
 1816|  34.2k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  34.2k|    {
 1769|  34.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  34.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  34.2k|        return this->get_value();
 1771|  34.2k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEEDav:
 9636|  30.9k|{
 9637|  30.9k|    return scan_result_type<Source, Args...>();
 9638|  30.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEC2Ev:
 1551|  30.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.9k|        : m_value(T{}), m_has_value(true)
  427|  30.9k|    {
  428|  30.9k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEC2Ev:
 6570|  30.9k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|  30.9k|{
 9622|  30.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  30.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28.9k, False: 1.96k]
  |  |  ------------------
  ------------------
 9623|  28.9k|        out = unexpected(in.error());
 9624|  28.9k|    }
 9625|  1.96k|    else {
 9626|  1.96k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  1.96k|    static_cast<    \
  |  |  935|  1.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  1.96k|    }
 9628|  30.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  28.9k|        : base(unexpect, std::move(e.error())),
 1616|  28.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  28.9k|    {
 1618|  28.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  28.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.9k|          m_has_value(false)
  451|  28.9k|    {
  452|  28.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  28.9k|    {
 1316|  28.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEaSEOSI_:
 1556|  28.9k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorEvEaSEOSJ_:
  902|  28.9k|    {
  903|  28.9k|        assign_common(std::move(other));
  904|  28.9k|        return *this;
  905|  28.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  28.9k|    {
  950|  28.9k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 28.9k, False: 0]
  ------------------
  951|  28.9k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 28.9k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  28.9k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  28.9k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   123k|    {
  490|   123k|        return m_has_value;
  491|   123k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  34.8k|    {
  456|  34.8k|        return m_value;
  457|  34.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  28.9k|    {
 1046|  28.9k|        this->destroy_value();
 1047|  28.9k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  28.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  28.9k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  28.9k|    {
  504|  28.9k|        scn::detail::construct_at(&get_unexpected(),
  505|  28.9k|                                  std::forward<Args>(args)...);
  506|  28.9k|        m_has_value = false;
  507|  28.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.9k|    {
  473|  28.9k|        return m_unexpected;
  474|  28.9k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  28.9k|    {
  481|  28.9k|        return std::move(m_unexpected);
  482|  28.9k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8767|  29.5k|    {
 8768|  29.5k|        return m_str;
 8769|  29.5k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  29.5k|        : m_str(r.str)
 8763|  29.5k|    {
 8764|  29.5k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEcvbEv:
 1739|  30.9k|    {
 1740|  30.9k|        return has_value();
 1741|  30.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEptEv:
 1814|  34.8k|    {
 1815|  34.8k|        return &value();
 1816|  34.8k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  34.8k|    {
 1769|  34.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  34.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  34.8k|        return this->get_value();
 1771|  34.8k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEEDav:
 9636|  30.8k|{
 9637|  30.8k|    return scan_result_type<Source, Args...>();
 9638|  30.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEC2Ev:
 1551|  30.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.8k|        : m_value(T{}), m_has_value(true)
  427|  30.8k|    {
  428|  30.8k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEC2Ev:
 6570|  30.8k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|  30.8k|{
 9622|  30.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  30.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28.9k, False: 1.83k]
  |  |  ------------------
  ------------------
 9623|  28.9k|        out = unexpected(in.error());
 9624|  28.9k|    }
 9625|  1.83k|    else {
 9626|  1.83k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  1.83k|    static_cast<    \
  |  |  935|  1.83k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  1.83k|    }
 9628|  30.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  28.9k|        : base(unexpect, std::move(e.error())),
 1616|  28.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  28.9k|    {
 1618|  28.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  28.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.9k|          m_has_value(false)
  451|  28.9k|    {
  452|  28.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  28.9k|    {
 1316|  28.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEaSEOSI_:
 1556|  28.9k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorEvEaSEOSJ_:
  902|  28.9k|    {
  903|  28.9k|        assign_common(std::move(other));
  904|  28.9k|        return *this;
  905|  28.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  28.9k|    {
  950|  28.9k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 28.9k, False: 0]
  ------------------
  951|  28.9k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 28.9k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  28.9k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  28.9k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   123k|    {
  490|   123k|        return m_has_value;
  491|   123k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  34.4k|    {
  456|  34.4k|        return m_value;
  457|  34.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  28.9k|    {
 1046|  28.9k|        this->destroy_value();
 1047|  28.9k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  28.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  28.9k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  28.9k|    {
  504|  28.9k|        scn::detail::construct_at(&get_unexpected(),
  505|  28.9k|                                  std::forward<Args>(args)...);
  506|  28.9k|        m_has_value = false;
  507|  28.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.9k|    {
  473|  28.9k|        return m_unexpected;
  474|  28.9k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  28.9k|    {
  481|  28.9k|        return std::move(m_unexpected);
  482|  28.9k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8767|  29.4k|    {
 8768|  29.4k|        return m_str;
 8769|  29.4k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  29.4k|        : m_str(r.str)
 8763|  29.4k|    {
 8764|  29.4k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEcvbEv:
 1739|  30.8k|    {
 1740|  30.8k|        return has_value();
 1741|  30.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEptEv:
 1814|  34.4k|    {
 1815|  34.4k|        return &value();
 1816|  34.4k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  34.4k|    {
 1769|  34.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  34.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  34.4k|        return this->get_value();
 1771|  34.4k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEEDav:
 9636|  31.0k|{
 9637|  31.0k|    return scan_result_type<Source, Args...>();
 9638|  31.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEC2Ev:
 1551|  31.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2Ev:
  426|  31.0k|        : m_value(T{}), m_has_value(true)
  427|  31.0k|    {
  428|  31.0k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEC2Ev:
 6570|  31.0k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|  31.0k|{
 9622|  31.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  31.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28.9k, False: 2.07k]
  |  |  ------------------
  ------------------
 9623|  28.9k|        out = unexpected(in.error());
 9624|  28.9k|    }
 9625|  2.07k|    else {
 9626|  2.07k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  2.07k|    static_cast<    \
  |  |  935|  2.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  2.07k|    }
 9628|  31.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  28.9k|        : base(unexpect, std::move(e.error())),
 1616|  28.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  28.9k|    {
 1618|  28.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  28.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.9k|          m_has_value(false)
  451|  28.9k|    {
  452|  28.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  28.9k|    {
 1316|  28.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEaSEOSI_:
 1556|  28.9k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorEvEaSEOSJ_:
  902|  28.9k|    {
  903|  28.9k|        assign_common(std::move(other));
  904|  28.9k|        return *this;
  905|  28.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  28.9k|    {
  950|  28.9k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 28.9k, False: 0]
  ------------------
  951|  28.9k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 28.9k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  28.9k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  28.9k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   124k|    {
  490|   124k|        return m_has_value;
  491|   124k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  35.2k|    {
  456|  35.2k|        return m_value;
  457|  35.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  28.9k|    {
 1046|  28.9k|        this->destroy_value();
 1047|  28.9k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  28.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  28.9k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  28.9k|    {
  504|  28.9k|        scn::detail::construct_at(&get_unexpected(),
  505|  28.9k|                                  std::forward<Args>(args)...);
  506|  28.9k|        m_has_value = false;
  507|  28.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.9k|    {
  473|  28.9k|        return m_unexpected;
  474|  28.9k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  28.9k|    {
  481|  28.9k|        return std::move(m_unexpected);
  482|  28.9k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8767|  29.6k|    {
 8768|  29.6k|        return m_str;
 8769|  29.6k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  29.6k|        : m_str(r.str)
 8763|  29.6k|    {
 8764|  29.6k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEcvbEv:
 1739|  31.0k|    {
 1740|  31.0k|        return has_value();
 1741|  31.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEptEv:
 1814|  35.2k|    {
 1815|  35.2k|        return &value();
 1816|  35.2k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  35.2k|    {
 1769|  35.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  35.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  35.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  35.2k|        return this->get_value();
 1771|  35.2k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEEDav:
 9636|  30.9k|{
 9637|  30.9k|    return scan_result_type<Source, Args...>();
 9638|  30.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEC2Ev:
 1551|  30.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.9k|        : m_value(T{}), m_has_value(true)
  427|  30.9k|    {
  428|  30.9k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEC2Ev:
 6570|  30.9k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|  30.9k|{
 9622|  30.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  30.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28.9k, False: 1.92k]
  |  |  ------------------
  ------------------
 9623|  28.9k|        out = unexpected(in.error());
 9624|  28.9k|    }
 9625|  1.92k|    else {
 9626|  1.92k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  1.92k|    static_cast<    \
  |  |  935|  1.92k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  1.92k|    }
 9628|  30.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  28.9k|        : base(unexpect, std::move(e.error())),
 1616|  28.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  28.9k|    {
 1618|  28.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  28.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.9k|          m_has_value(false)
  451|  28.9k|    {
  452|  28.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  28.9k|    {
 1316|  28.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEaSEOSI_:
 1556|  28.9k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorEvEaSEOSJ_:
  902|  28.9k|    {
  903|  28.9k|        assign_common(std::move(other));
  904|  28.9k|        return *this;
  905|  28.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  28.9k|    {
  950|  28.9k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 28.9k, False: 0]
  ------------------
  951|  28.9k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 28.9k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  28.9k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  28.9k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   123k|    {
  490|   123k|        return m_has_value;
  491|   123k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  34.7k|    {
  456|  34.7k|        return m_value;
  457|  34.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  28.9k|    {
 1046|  28.9k|        this->destroy_value();
 1047|  28.9k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  28.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  28.9k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  28.9k|    {
  504|  28.9k|        scn::detail::construct_at(&get_unexpected(),
  505|  28.9k|                                  std::forward<Args>(args)...);
  506|  28.9k|        m_has_value = false;
  507|  28.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.9k|    {
  473|  28.9k|        return m_unexpected;
  474|  28.9k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  28.9k|    {
  481|  28.9k|        return std::move(m_unexpected);
  482|  28.9k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8767|  29.4k|    {
 8768|  29.4k|        return m_str;
 8769|  29.4k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  29.4k|        : m_str(r.str)
 8763|  29.4k|    {
 8764|  29.4k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEcvbEv:
 1739|  30.9k|    {
 1740|  30.9k|        return has_value();
 1741|  30.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEptEv:
 1814|  34.7k|    {
 1815|  34.7k|        return &value();
 1816|  34.7k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  34.7k|    {
 1769|  34.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  34.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  34.7k|        return this->get_value();
 1771|  34.7k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3740|   720k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3741|   720k|    {
 3742|   720k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|   720k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3743|   720k|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   599k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   599k|    else {
 3981|   599k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   599k|    }
 3983|   599k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  10.6M|    {
 3480|  10.6M|        return m_iterator;
 3481|  10.6M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  36.7M|    {
 3480|  36.7M|        return m_iterator;
 3481|  36.7M|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  571|  5.94M|    {
  572|  5.94M|        return m_has_value;
  573|  5.94M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  554|   580k|    {
  555|   580k|        return m_unexpected;
  556|   580k|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1745|   447k|    {
 1746|   447k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   447k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   447k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   447k|        return this->get_unexpected().error();
 1748|   447k|    }
_ZNK3scn2v46detail12format_specs8get_baseEv:
 6973|   864k|    {
 6974|   864k|        SCN_GCC_COMPAT_PUSH
 6975|   864k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6976|   864k|        switch (type) {
 6977|   175k|            case presentation_type::none:
  ------------------
  |  Branch (6977:13): [True: 175k, False: 688k]
  ------------------
 6978|   175k|                return 10;
 6979|   176k|            case presentation_type::int_generic:
  ------------------
  |  Branch (6979:13): [True: 176k, False: 688k]
  ------------------
 6980|   176k|                return 0;
 6981|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6981:13): [True: 0, False: 864k]
  ------------------
 6982|      0|                return arbitrary_base;
 6983|       |
 6984|  76.8k|            case presentation_type::int_binary:
  ------------------
  |  Branch (6984:13): [True: 76.8k, False: 787k]
  ------------------
 6985|  76.8k|                return 2;
 6986|   111k|            case presentation_type::int_octal:
  ------------------
  |  Branch (6986:13): [True: 111k, False: 752k]
  ------------------
 6987|   111k|                return 8;
 6988|   158k|            case presentation_type::int_decimal:
  ------------------
  |  Branch (6988:13): [True: 158k, False: 706k]
  ------------------
 6989|   158k|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (6989:13): [True: 0, False: 864k]
  ------------------
 6990|   158k|                return 10;
 6991|   165k|            case presentation_type::int_hex:
  ------------------
  |  Branch (6991:13): [True: 165k, False: 699k]
  ------------------
 6992|   165k|                return 16;
 6993|       |
 6994|      0|            default:
  ------------------
  |  Branch (6994:13): [True: 0, False: 864k]
  ------------------
 6995|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6996|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6997|   864k|        }
 6998|   864k|        SCN_GCC_COMPAT_POP
 6999|   864k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 7011|  1.03M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 7055|   755k|    {
 7056|   755k|        m_specs.type = type;
 7057|   755k|    }
_ZN3scn2v46detail12specs_setter8on_errorEPKc:
 7117|  99.3k|    {
 7118|  99.3k|        SCN_UNLIKELY_ATTR
 7119|  99.3k|        m_error = unexpected_scan_error(scan_error::invalid_format_string, msg);
 7120|  99.3k|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 7128|   935k|    {
 7129|   935k|        return m_error;
 7130|   935k|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3917|   594k|{
 3918|   594k|    return unexpected(scan_error{c, m});
 3919|   594k|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4307|  1.08M|{
 4308|       |    // Pattern_White_Space property
 4309|  1.08M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4309:13): [True: 952k, False: 130k]
  |  Branch (4309:27): [True: 381k, False: 570k]
  ------------------
 4310|  1.08M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4310:12): [True: 9.25k, False: 692k]
  ------------------
 4311|  1.08M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4311:12): [True: 3.48k, False: 688k]
  ------------------
 4312|  1.08M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4312:12): [True: 1.56k, False: 686k]
  ------------------
 4313|  1.08M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4313:12): [True: 2.08k, False: 684k]
  ------------------
 4314|  1.08M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4314:12): [True: 2.41k, False: 682k]
  ------------------
 4315|  1.08M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4315:12): [True: 0, False: 682k]
  ------------------
 4316|  1.08M|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7811|   180k|{
 7812|   180k|    switch (type) {
 7813|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7813:9): [True: 0, False: 180k]
  ------------------
 7814|      0|            return arg_type_category::none;
 7815|       |
 7816|  30.0k|        case arg_type::schar_type:
  ------------------
  |  Branch (7816:9): [True: 30.0k, False: 150k]
  ------------------
 7817|  30.0k|        case arg_type::short_type:
  ------------------
  |  Branch (7817:9): [True: 0, False: 180k]
  ------------------
 7818|  63.4k|        case arg_type::int_type:
  ------------------
  |  Branch (7818:9): [True: 33.4k, False: 147k]
  ------------------
 7819|  63.4k|        case arg_type::long_type:
  ------------------
  |  Branch (7819:9): [True: 0, False: 180k]
  ------------------
 7820|  97.4k|        case arg_type::llong_type:
  ------------------
  |  Branch (7820:9): [True: 34.0k, False: 146k]
  ------------------
 7821|  97.4k|            return arg_type_category::integer;
 7822|       |
 7823|  26.4k|        case arg_type::uchar_type:
  ------------------
  |  Branch (7823:9): [True: 26.4k, False: 154k]
  ------------------
 7824|  26.4k|        case arg_type::ushort_type:
  ------------------
  |  Branch (7824:9): [True: 0, False: 180k]
  ------------------
 7825|  54.6k|        case arg_type::uint_type:
  ------------------
  |  Branch (7825:9): [True: 28.2k, False: 152k]
  ------------------
 7826|  54.6k|        case arg_type::ulong_type:
  ------------------
  |  Branch (7826:9): [True: 0, False: 180k]
  ------------------
 7827|  83.1k|        case arg_type::ullong_type:
  ------------------
  |  Branch (7827:9): [True: 28.5k, False: 152k]
  ------------------
 7828|  83.1k|            return arg_type_category::unsigned_integer;
 7829|       |
 7830|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7830:9): [True: 0, False: 180k]
  ------------------
 7831|      0|            return arg_type_category::pointer;
 7832|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7832:9): [True: 0, False: 180k]
  ------------------
 7833|      0|            return arg_type_category::boolean;
 7834|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7834:9): [True: 0, False: 180k]
  ------------------
 7835|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7835:9): [True: 0, False: 180k]
  ------------------
 7836|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7836:9): [True: 0, False: 180k]
  ------------------
 7837|      0|            return arg_type_category::character;
 7838|       |
 7839|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7839:9): [True: 0, False: 180k]
  ------------------
 7840|      0|        case arg_type::double_type:
  ------------------
  |  Branch (7840:9): [True: 0, False: 180k]
  ------------------
 7841|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7841:9): [True: 0, False: 180k]
  ------------------
 7842|      0|            return arg_type_category::floating;
 7843|       |
 7844|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7844:9): [True: 0, False: 180k]
  ------------------
 7845|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7845:9): [True: 0, False: 180k]
  ------------------
 7846|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7846:9): [True: 0, False: 180k]
  ------------------
 7847|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7847:9): [True: 0, False: 180k]
  ------------------
 7848|      0|            return arg_type_category::string;
 7849|       |
 7850|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7850:9): [True: 0, False: 180k]
  ------------------
 7851|      0|            return arg_type_category::custom;
 7852|       |
 7853|      0|            SCN_CLANG_PUSH
 7854|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7855|      0|        default:
  ------------------
  |  Branch (7855:9): [True: 0, False: 180k]
  ------------------
 7856|      0|            SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7857|   180k|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7858|   180k|            SCN_CLANG_POP
 7859|   180k|    }
 7860|       |
 7861|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7862|   180k|}
_ZNO3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1755|   133k|    {
 1756|   133k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|   133k|        return std::move(this->get_unexpected().error());
 1758|   133k|    }
_ZN3scn2v46detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7897|   886k|{
 7898|   886k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  865|   886k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 886k]
  |  |  ------------------
  ------------------
 7899|      0|        return handler.on_error("Invalid type specifier for integer type");
 7900|      0|    }
 7901|   886k|    if (specs.localized) {
  ------------------
  |  Branch (7901:9): [True: 180k, False: 705k]
  ------------------
 7902|   180k|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  865|   180k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 180k]
  |  |  ------------------
  ------------------
 7903|       |            // clang-format off
 7904|      0|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7905|       |            // clang-format on
 7906|      0|            return;
 7907|      0|        }
 7908|   180k|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  865|   180k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 180k]
  |  |  ------------------
  ------------------
 7909|       |            // clang-format off
 7910|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7911|       |            // clang-format on
 7912|      0|        }
 7913|   180k|    }
 7914|   886k|}
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1739|  5.36M|    {
 1740|  5.36M|        return has_value();
 1741|  5.36M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4472|  62.4M|    {
 4473|  62.4M|        assert(m_begin);
 4474|  62.4M|        return m_end == nullptr;
 4475|  62.4M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4489|  1.42M|    {
 4490|  1.42M|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 0, False: 1.42M]
  ------------------
 4491|      0|            return make_string_view_from_pointers(
 4492|      0|                static_cast<const CharT*>(m_begin) + position(),
 4493|      0|                static_cast<const CharT*>(m_end));
 4494|      0|        }
 4495|  1.42M|        return parent()->get_segment_starting_at(position());
 4496|  1.42M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4483|  34.3M|    {
 4484|  34.3M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  34.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|  34.3M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|  34.3M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4376|  1.42M|    {
 4377|  1.42M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  1.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 381k, False: 1.04M]
  |  |  ------------------
  ------------------
 4378|  1.42M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4379|   381k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4380|   381k|        }
 4381|  1.04M|        const auto start = pos - m_putback_buffer.size();
 4382|  1.04M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  930|  1.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4383|  1.04M|        return m_current_view.substr(start);
 4384|  1.04M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4478|   339k|    {
 4479|   339k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|   339k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   339k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4480|   339k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4481|   339k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4467|  2.20M|    {
 4468|  2.20M|        return m_position;
 4469|  2.20M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4398|  1.35M|    {
 4399|  1.35M|        return m_is_contiguous;
 4400|  1.35M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4472|   139G|    {
 4473|   139G|        assert(m_begin);
 4474|   139G|        return m_end == nullptr;
 4475|   139G|    }
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|  22.0k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|  22.0k|    else {
 3981|  22.0k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|  22.0k|    }
 3983|  22.0k|}
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4489|   141k|    {
 4490|   141k|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 0, False: 141k]
  ------------------
 4491|      0|            return make_string_view_from_pointers(
 4492|      0|                static_cast<const CharT*>(m_begin) + position(),
 4493|      0|                static_cast<const CharT*>(m_end));
 4494|      0|        }
 4495|   141k|        return parent()->get_segment_starting_at(position());
 4496|   141k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4483|  69.7G|    {
 4484|  69.7G|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  69.7G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  69.7G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|  69.7G|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|  69.7G|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4376|   141k|    {
 4377|   141k|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.75k, False: 138k]
  |  |  ------------------
  ------------------
 4378|   141k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4379|  2.75k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4380|  2.75k|        }
 4381|   138k|        const auto start = pos - m_putback_buffer.size();
 4382|   138k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  930|   138k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   138k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4383|   138k|        return m_current_view.substr(start);
 4384|   138k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4478|   100k|    {
 4479|   100k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4480|   100k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4481|   100k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4467|   246k|    {
 4468|   246k|        return m_position;
 4469|   246k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4398|   555k|    {
 4399|   555k|        return m_is_contiguous;
 4400|   555k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3333|  1.78M|    {
 3334|  1.78M|        return static_cast<D&>(*this);
 3335|  1.78M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3374|  1.78M|    {
 3375|  1.78M|        return detail::to_address(ranges::begin(derived()));
 3376|  1.78M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3333|   427k|    {
 3334|   427k|        return static_cast<D&>(*this);
 3335|   427k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3374|   427k|    {
 3375|   427k|        return detail::to_address(ranges::begin(derived()));
 3376|   427k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 8964|   333k|    {
 8965|   333k|        return ranges::subrange{begin(), end()};
 8966|   333k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 8956|   333k|    {
 8957|   333k|        return ranges::default_sentinel;
 8958|   333k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|  3.47M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  3.47M|    static_cast<    \
  |  |  935|  3.47M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  3.47M|    static_cast<    \
  |  |  935|  3.47M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  3.47M|    {
 3466|  3.47M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8783|   840k|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   428k|    {
 1979|   428k|        return detail::transform_error_impl(std::move(*this),
 1980|   428k|                                            std::forward<F>(f));
 1981|   428k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   428k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   428k|    else {
 1472|   428k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   428k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   428k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 416k, False: 12.0k]
  |  |  ------------------
  ------------------
 1474|   428k|                   ? result(*std::forward<Exp>(exp))
 1475|   428k|                   : result(unexpect,
 1476|  12.0k|                            trivial_invoke(std::forward<F>(f),
 1477|  12.0k|                                           std::forward<Exp>(exp).error()));
 1478|   428k|    }
 1479|   428k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  2.15M|    {
  490|  2.15M|        return m_has_value;
  491|  2.15M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   744k|    {
 1805|   744k|        return std::move(value());
 1806|   744k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   840k|    {
 1769|   840k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   840k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   840k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   840k|        return this->get_value();
 1771|   840k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   840k|    {
  456|   840k|        return m_value;
  457|   840k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|  1.34M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.34M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.34M|    {
 1572|  1.34M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  1.34M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.34M|    {
  442|  1.34M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.49M|    {
 1316|  1.49M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|  26.8k|{
 1350|  26.8k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  26.8k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  23.5k|    {
 1756|  23.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  23.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  23.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  23.5k|        return std::move(this->get_unexpected().error());
 1758|  23.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  23.8k|    {
  473|  23.8k|        return m_unexpected;
  474|  23.8k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  364|   153k|    {
  365|   153k|        return m_unexpected;
  366|   153k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|  40.3k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  40.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  40.3k|    {
 1628|  40.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|   142k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   142k|          m_has_value(false)
  451|   142k|    {
  452|   142k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 8964|   110k|    {
 8965|   110k|        return ranges::subrange{begin(), end()};
 8966|   110k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 8956|   110k|    {
 8957|   110k|        return ranges::default_sentinel;
 8958|   110k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|   977k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   977k|    static_cast<    \
  |  |  935|   977k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   977k|    static_cast<    \
  |  |  935|   977k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   977k|    {
 3466|   977k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   135k|    {
 1979|   135k|        return detail::transform_error_impl(std::move(*this),
 1980|   135k|                                            std::forward<F>(f));
 1981|   135k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   135k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   135k|    else {
 1472|   135k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   135k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   135k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 133k, False: 1.77k]
  |  |  ------------------
  ------------------
 1474|   135k|                   ? result(*std::forward<Exp>(exp))
 1475|   135k|                   : result(unexpect,
 1476|  1.77k|                            trivial_invoke(std::forward<F>(f),
 1477|  1.77k|                                           std::forward<Exp>(exp).error()));
 1478|   135k|    }
 1479|   135k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   649k|    {
  490|   649k|        return m_has_value;
  491|   649k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   215k|    {
 1805|   215k|        return std::move(value());
 1806|   215k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   225k|    {
 1769|   225k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   225k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   225k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   225k|        return this->get_value();
 1771|   225k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   225k|    {
  456|   225k|        return m_value;
  457|   225k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|   158k|        : base(std::in_place, std::forward<U>(val)),
 1570|   158k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   158k|    {
 1572|   158k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   158k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   158k|    {
  442|   158k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   487k|    {
 1316|   487k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  20.6k|    {
 1756|  20.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  20.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  20.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  20.6k|        return std::move(this->get_unexpected().error());
 1758|  20.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  20.7k|    {
  473|  20.7k|        return m_unexpected;
  474|  20.7k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|   106k|        : base(unexpect, std::forward<Args>(args)...),
 1626|   106k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|   106k|    {
 1628|   106k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|   329k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   329k|          m_has_value(false)
  451|   329k|    {
  452|   329k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  349|   594k|        : m_unexpected(std::forward<Err>(e))
  350|   594k|    {
  351|   594k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   594k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   594k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   521k|        : base(unexpect, std::move(e.error())),
 1616|   521k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   521k|    {
 1618|   521k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  449|   521k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   521k|          m_has_value(false)
  451|   521k|    {
  452|   521k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.27M|    {
 1316|  1.27M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|   160k|        : base(unexpect, std::move(e.error())),
 1616|   160k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   160k|    {
 1618|   160k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|   171k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   171k|          m_has_value(false)
  451|   171k|    {
  452|   171k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.70M|    {
 1316|  2.70M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|  2.53M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.53M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.53M|    {
 1572|  2.53M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  2.53M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.53M|    {
  442|  2.53M|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1739|  2.70M|    {
 1740|  2.70M|        return has_value();
 1741|  2.70M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  489|  5.40M|    {
  490|  5.40M|        return m_has_value;
  491|  5.40M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1745|   171k|    {
 1746|   171k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   171k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   171k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   171k|        return this->get_unexpected().error();
 1748|   171k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   171k|    {
  473|   171k|        return m_unexpected;
  474|   171k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  2.24M|    {
 1805|  2.24M|        return std::move(value());
 1806|  2.24M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  2.53M|    {
 1769|  2.53M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.53M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.53M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.53M|        return this->get_value();
 1771|  2.53M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  455|  2.53M|    {
  456|  2.53M|        return m_value;
  457|  2.53M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|   329k|        : base(unexpect, std::move(e.error())),
 1616|   329k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   329k|    {
 1618|   329k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|   330k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   330k|          m_has_value(false)
  451|   330k|    {
  452|   330k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   637k|    {
 1316|   637k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|   306k|        : base(std::in_place, std::forward<U>(val)),
 1570|   306k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   306k|    {
 1572|   306k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   306k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   306k|    {
  442|   306k|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1739|   637k|    {
 1740|   637k|        return has_value();
 1741|   637k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  489|  1.27M|    {
  490|  1.27M|        return m_has_value;
  491|  1.27M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1745|   330k|    {
 1746|   330k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   330k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   330k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   330k|        return this->get_unexpected().error();
 1748|   330k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   330k|    {
  473|   330k|        return m_unexpected;
  474|   330k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|   295k|    {
 1805|   295k|        return std::move(value());
 1806|   295k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|   306k|    {
 1769|   306k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   306k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   306k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   306k|        return this->get_value();
 1771|   306k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  455|   306k|    {
  456|   306k|        return m_value;
  457|   306k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|   428k|    {
 1979|   428k|        return detail::transform_error_impl(std::move(*this),
 1980|   428k|                                            std::forward<F>(f));
 1981|   428k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|   428k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   428k|    else {
 1472|   428k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   428k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   428k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 417k, False: 11.2k]
  |  |  ------------------
  ------------------
 1474|   428k|                   ? result(*std::forward<Exp>(exp))
 1475|   428k|                   : result(unexpect,
 1476|  11.2k|                            trivial_invoke(std::forward<F>(f),
 1477|  11.2k|                                           std::forward<Exp>(exp).error()));
 1478|   428k|    }
 1479|   428k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  1.48M|    {
  490|  1.48M|        return m_has_value;
  491|  1.48M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|   417k|    {
 1805|   417k|        return std::move(value());
 1806|   417k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|   514k|    {
 1769|   514k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   514k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   514k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   514k|        return this->get_value();
 1771|   514k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   514k|    {
  456|   514k|        return m_value;
  457|   514k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1755|  11.2k|    {
 1756|  11.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  11.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  11.2k|        return std::move(this->get_unexpected().error());
 1758|  11.2k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  11.5k|    {
  473|  11.5k|        return m_unexpected;
  474|  11.5k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|  11.2k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  11.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  11.2k|    {
 1628|  11.2k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 8948|   974k|    {
 8949|   974k|        return m_current;
 8950|   974k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8841|   665k|    {
 8842|   665k|        return m_locale;
 8843|   665k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8847|   715k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   715k|    static_cast<    \
  |  |  935|   715k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   715k|    static_cast<    \
  |  |  935|   715k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8848|   715k|    {
 8849|   715k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   102k|        : base(unexpect, std::move(e.error())),
 1616|   102k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   102k|    {
 1618|   102k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 8948|   280k|    {
 8949|   280k|        return m_current;
 8950|   280k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8841|   220k|    {
 8842|   220k|        return m_locale;
 8843|   220k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8847|   319k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   319k|    static_cast<    \
  |  |  935|   319k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   319k|    static_cast<    \
  |  |  935|   319k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8848|   319k|    {
 8849|   319k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   222k|        : base(unexpect, std::move(e.error())),
 1616|   222k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   222k|    {
 1618|   222k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   779k|        : base(unexpect, std::move(e.error())),
 1616|   779k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   779k|    {
 1618|   779k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  548|   779k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  549|   779k|          m_has_value(false)
  550|   779k|    {
  551|   779k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   779k|    {
 1316|   779k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1551|  4.57M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  528|  4.57M|        : m_deferred_init(), m_has_value(true)
  529|  4.57M|    {
  530|  4.57M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|  2.31M|    {
 4559|  2.31M|        return x.is_at_end();
 4560|  2.31M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4602|  4.89M|    {
 4603|  4.89M|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 4.89M]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|  4.89M|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 4.89M]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|  4.89M|        return !read_at_position();
 4610|  4.89M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4582|  19.8M|    {
 4583|  19.8M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  19.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|  19.8M|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 19.8M]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|  19.8M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|  19.8M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 17.4M, False: 2.33M]
  |  |  ------------------
  ------------------
 4590|  17.4M|            return true;
 4591|  17.4M|        }
 4592|       |
 4593|  4.53M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 2.33M, False: 2.19M]
  ------------------
 4594|  2.33M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 143k, False: 2.19M]
  ------------------
 4595|   143k|                return false;
 4596|   143k|            }
 4597|  2.33M|        }
 4598|  2.19M|        return true;
 4599|  2.33M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4517|  6.19M|    {
 4518|  6.19M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  6.19M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.19M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|  6.19M|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 6.19M]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|  6.19M|        auto res = read_at_position();
 4527|  6.19M|        SCN_EXPECT(res);
  ------------------
  |  |  930|  6.19M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.19M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|  6.19M|        return parent()->get_character_at(m_position);
 4529|  6.19M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4387|  6.19M|    {
 4388|  6.19M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  6.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.94M, False: 2.25M]
  |  |  ------------------
  ------------------
 4389|  6.19M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|  3.94M|            return m_putback_buffer[pos];
 4391|  3.94M|        }
 4392|  2.25M|        const auto start = pos - m_putback_buffer.size();
 4393|  2.25M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|  2.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|  2.25M|        return m_current_view[start];
 4395|  2.25M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|  1.26M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.26M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.26M|    {
 1572|  1.26M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  1.26M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.26M|    {
  442|  1.26M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.29M|    {
 1316|  1.29M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  349|  49.2k|        : m_unexpected(std::forward<Err>(e))
  350|  49.2k|    {
  351|  49.2k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  49.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  49.2k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  23.8k|        : base(unexpect, std::move(e.error())),
 1616|  23.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  23.8k|    {
 1618|  23.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  23.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  23.8k|          m_has_value(false)
  451|  23.8k|    {
  452|  23.8k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|  76.9k|        : m_unexpected(std::forward<Args>(args)...)
  359|  76.9k|    {
  360|  76.9k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  76.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  76.9k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4503|  8.71M|    {
 4504|  8.71M|        ++m_position;
 4505|  8.71M|        (void)read_at_position();
 4506|  8.71M|        return *this;
 4507|  8.71M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1739|   524k|    {
 1740|   524k|        return has_value();
 1741|   524k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|  96.6k|    {
 1795|  96.6k|        return value();
 1796|  96.6k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4552|  5.47M|    {
 4553|  5.47M|        return !(lhs == rhs);
 4554|  5.47M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4547|  5.78M|    {
 4548|  5.78M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 5.78M, False: 0]
  |  Branch (4548:46): [True: 534k, False: 5.25M]
  ------------------
 4549|  5.78M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  349|  27.6k|        : m_unexpected(std::forward<Err>(e))
  350|  27.6k|    {
  351|  27.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  27.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  27.6k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  9.73k|        : base(unexpect, std::move(e.error())),
 1616|  9.73k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  9.73k|    {
 1618|  9.73k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  9.73k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  9.73k|          m_has_value(false)
  451|  9.73k|    {
  452|  9.73k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   610k|    {
 1316|   610k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   600k|        : base(std::in_place, std::forward<U>(val)),
 1570|   600k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   600k|    {
 1572|   600k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|   600k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   600k|    {
  442|   600k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1739|   610k|    {
 1740|   610k|        return has_value();
 1741|   610k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.22M|    {
  490|  1.22M|        return m_has_value;
  491|  1.22M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1745|  9.73k|    {
 1746|  9.73k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  9.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  9.73k|        return this->get_unexpected().error();
 1748|  9.73k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  9.73k|    {
  473|  9.73k|        return m_unexpected;
  474|  9.73k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   600k|    {
 1805|   600k|        return std::move(value());
 1806|   600k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   600k|    {
 1769|   600k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   600k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   600k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   600k|        return this->get_value();
 1771|   600k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|   600k|    {
  456|   600k|        return m_value;
  457|   600k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  7.58M|    {
 3484|  7.58M|        return m_sentinel;
 3485|  7.58M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  349|  12.5k|        : m_unexpected(std::forward<Err>(e))
  350|  12.5k|    {
  351|  12.5k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  12.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  12.5k|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_errorEE5errorEv:
  364|  1.21M|    {
  365|  1.21M|        return m_unexpected;
  366|  1.21M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|   111k|        : m_unexpected(std::forward<Args>(args)...)
  359|   111k|    {
  360|   111k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   111k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|   111k|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  349|  2.31M|        : m_unexpected(std::forward<Err>(e))
  350|  2.31M|    {
  351|  2.31M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  2.31M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  2.31M|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  364|  2.31M|    {
  365|  2.31M|        return m_unexpected;
  366|  2.31M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  358|  2.31M|        : m_unexpected(std::forward<Args>(args)...)
  359|  2.31M|    {
  360|  2.31M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  2.31M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  2.31M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|  49.2k|{
 1350|  49.2k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  49.2k|}
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  349|  49.2k|        : m_unexpected(std::forward<Err>(e))
  350|  49.2k|    {
  351|  49.2k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  49.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  49.2k|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1349|   133k|{
 1350|   133k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|   133k|}
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  395|  38.8k|{
  396|  38.8k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  38.8k|        T(std::forward<Args>(args)...);
  398|  38.8k|}
_ZNK3scn2v46ranges6detail6ssize_2fnclIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSF_:
 3106|   130k|    {
 3107|   130k|        return fn::impl(std::forward<T>(t));
 3108|   130k|    }
_ZN3scn2v46ranges6detail6ssize_2fn4implIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISF_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSF_EEEEE15difference_typeEE4typeELm8EElSO_E4typeE_EEOSF_:
 3097|   130k|    {
 3098|   130k|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 3099|   130k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSF_:
 3074|   130k|    {
 3075|   130k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   130k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESG_E4typeEOSH_NS0_6detail12priority_tagILm2EEE:
 3040|   130k|    {
 3041|   130k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   130k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  401|  38.8k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  38.8k|    else {
  408|  38.8k|        p->~T();
  409|  38.8k|    }
  410|  38.8k|}
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1745|    360|    {
 1746|    360|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    360|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    360|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    360|        return this->get_unexpected().error();
 1748|    360|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  11.8k|        : base(unexpect, std::move(e.error())),
 1616|  11.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.8k|    {
 1618|  11.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  23.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  23.3k|          m_has_value(false)
  451|  23.3k|    {
  452|  23.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.62M|    {
 1316|  1.62M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1569|   139k|        : base(std::in_place, std::forward<U>(val)),
 1570|   139k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   139k|    {
 1572|   139k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|   139k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   139k|    {
  442|   139k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|   848k|        : base(unexpect, std::move(e.error())),
 1616|   848k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   848k|    {
 1618|   848k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|   848k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   848k|          m_has_value(false)
  451|   848k|    {
  452|   848k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1739|  1.31M|    {
 1740|  1.31M|        return has_value();
 1741|  1.31M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  2.78M|    {
  490|  2.78M|        return m_has_value;
  491|  2.78M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1745|   372k|    {
 1746|   372k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   372k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   372k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   372k|        return this->get_unexpected().error();
 1748|   372k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|   401k|    {
  473|   401k|        return m_unexpected;
  474|   401k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1569|   416k|        : base(std::in_place, std::forward<U>(val)),
 1570|   416k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   416k|    {
 1572|   416k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|   416k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   416k|    {
  442|   416k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   416k|    {
 1316|   416k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|   142k|    {
 1795|   142k|        return value();
 1796|   142k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   754k|    {
 1769|   754k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   754k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   754k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   754k|        return this->get_value();
 1771|   754k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  455|   754k|    {
  456|   754k|        return m_value;
  457|   754k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1739|   416k|    {
 1740|   416k|        return has_value();
 1741|   416k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  489|   832k|    {
  490|   832k|        return m_has_value;
  491|   832k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   416k|    {
 1316|   416k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|   416k|    {
 1805|   416k|        return std::move(value());
 1806|   416k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|   416k|    {
 1769|   416k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   416k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   416k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   416k|        return this->get_value();
 1771|   416k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  455|   416k|    {
  456|   416k|        return m_value;
  457|   416k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   339k|    {
 1979|   339k|        return detail::transform_error_impl(std::move(*this),
 1980|   339k|                                            std::forward<F>(f));
 1981|   339k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   339k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   339k|    else {
 1472|   339k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   339k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   339k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 328k, False: 11.4k]
  |  |  ------------------
  ------------------
 1474|   339k|                   ? result(*std::forward<Exp>(exp))
 1475|   339k|                   : result(unexpect,
 1476|  11.4k|                            trivial_invoke(std::forward<F>(f),
 1477|  11.4k|                                           std::forward<Exp>(exp).error()));
 1478|   339k|    }
 1479|   339k|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1569|   614k|        : base(std::in_place, std::forward<U>(val)),
 1570|   614k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   614k|    {
 1572|   614k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   614k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   614k|    {
  442|   614k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1625|  11.4k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  11.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  11.4k|    {
 1628|  11.4k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   612k|    {
 1805|   612k|        return std::move(value());
 1806|   612k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1569|   416k|        : base(std::in_place, std::forward<U>(val)),
 1570|   416k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   416k|    {
 1572|   416k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|   416k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   416k|    {
  442|   416k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|   416k|    {
 1979|   416k|        return detail::transform_error_impl(std::move(*this),
 1980|   416k|                                            std::forward<F>(f));
 1981|   416k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|   416k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   416k|    else {
 1472|   416k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   416k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   416k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 416k, False: 0]
  |  |  ------------------
  ------------------
 1474|   416k|                   ? result(*std::forward<Exp>(exp))
 1475|   416k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|   416k|    }
 1479|   416k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  489|   832k|    {
  490|   832k|        return m_has_value;
  491|   832k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1804|   416k|    {
 1805|   416k|        return std::move(value());
 1806|   416k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   416k|    {
 1769|   416k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   416k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   416k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   416k|        return this->get_value();
 1771|   416k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  455|   416k|    {
  456|   416k|        return m_value;
  457|   416k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   416k|        : base(std::in_place, std::forward<U>(val)),
 1570|   416k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   416k|    {
 1572|   416k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|   416k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   416k|    {
  442|   416k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   416k|    {
 1316|   416k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1739|   416k|    {
 1740|   416k|        return has_value();
 1741|   416k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   832k|    {
  490|   832k|        return m_has_value;
  491|   832k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1804|   416k|    {
 1805|   416k|        return std::move(value());
 1806|   416k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   416k|    {
 1769|   416k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   416k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   416k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   416k|        return this->get_value();
 1771|   416k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   416k|    {
  456|   416k|        return m_value;
  457|   416k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|   312k|    {
 1979|   312k|        return detail::transform_error_impl(std::move(*this),
 1980|   312k|                                            std::forward<F>(f));
 1981|   312k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1461|   312k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   312k|    else {
 1472|   312k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   312k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   312k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 284k, False: 28.2k]
  |  |  ------------------
  ------------------
 1474|   312k|                   ? result(*std::forward<Exp>(exp))
 1475|   312k|                   : result(unexpect,
 1476|  28.2k|                            trivial_invoke(std::forward<F>(f),
 1477|  28.2k|                                           std::forward<Exp>(exp).error()));
 1478|   312k|    }
 1479|   312k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1755|  28.2k|    {
 1756|  28.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  28.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  28.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  28.2k|        return std::move(this->get_unexpected().error());
 1758|  28.2k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISF_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  3.26k|        : base(unexpect, std::move(e.error())),
 1616|  3.26k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.26k|    {
 1618|  3.26k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSF_EvEENS0_10unexpect_tEDpOT_:
  636|  3.26k|        : m_has_value(false)
  637|  3.26k|    {
  638|  3.26k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  3.26k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESF_EEEvDpOT_:
  700|  3.26k|    {
  701|  3.26k|        scn::detail::construct_at(unexpected_ptr(),
  702|  3.26k|                                  std::forward<Args>(args)...);
  703|  3.26k|        m_has_value = false;
  704|  3.26k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  9.78k|    {
  730|  9.78k|        return reinterpret_cast<unexpected<E>*>(
  731|  9.78k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  9.78k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  9.78k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  61.1k|    {
 1316|  61.1k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|  57.9k|        : base(std::in_place, std::forward<U>(val)),
 1570|  57.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  57.9k|    {
 1572|  57.9k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS3_10in_place_tEDpOT_:
  626|  57.9k|        : m_has_value(true)
  627|  57.9k|    {
  628|  57.9k|        construct(std::forward<Args>(args)...);
  629|  57.9k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9constructIJSE_EEEvDpOT_:
  693|  57.9k|    {
  694|  57.9k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  57.9k|        m_has_value = true;
  696|  57.9k|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEJSE_EEEPT_SG_DpOT0_:
  395|  57.9k|{
  396|  57.9k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  57.9k|        T(std::forward<Args>(args)...);
  398|  57.9k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   173k|    {
  718|   173k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   173k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   173k|    }
_ZNK3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEcvbEv:
 1739|  61.1k|    {
 1740|  61.1k|        return has_value();
 1741|  61.1k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9has_valueEv:
  686|   183k|    {
  687|   183k|        return m_has_value;
  688|   183k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5errorEv:
 1745|  3.26k|    {
 1746|  3.26k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  3.26k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.26k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  3.26k|        return this->get_unexpected().error();
 1748|  3.26k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|  3.26k|    {
  670|  3.26k|        return *unexpected_ptr();
  671|  3.26k|    }
_ZNO3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEdeISE_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1804|  57.9k|    {
 1805|  57.9k|        return std::move(value());
 1806|  57.9k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5valueISE_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|  57.9k|    {
 1769|  57.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  57.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  57.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  57.9k|        return this->get_value();
 1771|  57.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9get_valueEv:
  652|  57.9k|    {
  653|  57.9k|        return *value_ptr();
  654|  57.9k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EED2Ev:
  642|  61.1k|    {
  643|  61.1k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 57.9k, False: 3.26k]
  ------------------
  644|  57.9k|            destroy_value();
  645|  57.9k|        }
  646|  3.26k|        else {
  647|  3.26k|            destroy_unexpected();
  648|  3.26k|        }
  649|  61.1k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  57.9k|    {
  708|  57.9k|        scn::detail::destroy_at(value_ptr());
  709|  57.9k|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEEEvPT_:
  401|  57.9k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  57.9k|    else {
  408|  57.9k|        p->~T();
  409|  57.9k|    }
  410|  57.9k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  3.26k|    {
  712|  3.26k|        scn::detail::destroy_at(unexpected_ptr());
  713|  3.26k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|  1.49M|    {
 1740|  1.49M|        return has_value();
 1741|  1.49M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.98M|    {
  490|  2.98M|        return m_has_value;
  491|  2.98M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|   142k|    {
 1746|   142k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   142k|        return this->get_unexpected().error();
 1748|   142k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   142k|    {
  473|   142k|        return m_unexpected;
  474|   142k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  1.06M|    {
 1805|  1.06M|        return std::move(value());
 1806|  1.06M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  1.34M|    {
 1769|  1.34M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.34M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.34M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.34M|        return this->get_value();
 1771|  1.34M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.34M|    {
  456|  1.34M|        return m_value;
  457|  1.34M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3479|   642k|    {
 3480|   642k|        return m_iterator;
 3481|   642k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3483|   642k|    {
 3484|   642k|        return m_sentinel;
 3485|   642k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3464|   284k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   284k|    static_cast<    \
  |  |  935|   284k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   284k|    static_cast<    \
  |  |  935|   284k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   284k|    {
 3466|   284k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|  2.58M|    {
 4570|  2.58M|        return !x.is_at_end();
 4571|  2.58M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  11.5k|        : base(unexpect, std::move(e.error())),
 1616|  11.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.5k|    {
 1618|  11.5k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  11.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  11.5k|          m_has_value(false)
  451|  11.5k|    {
  452|  11.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   955k|    {
 1316|   955k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|   944k|        : base(std::in_place, std::forward<U>(val)),
 1570|   944k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   944k|    {
 1572|   944k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   944k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   944k|    {
  442|   944k|    }
_ZNK3scn2v48expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1739|   526k|    {
 1740|   526k|        return has_value();
 1741|   526k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|  96.6k|    {
 1795|  96.6k|        return value();
 1796|  96.6k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  8.77k|        : base(unexpect, std::move(e.error())),
 1616|  8.77k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  8.77k|    {
 1618|  8.77k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  8.77k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  8.77k|          m_has_value(false)
  451|  8.77k|    {
  452|  8.77k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   609k|    {
 1316|   609k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|   600k|        : base(std::in_place, std::forward<U>(val)),
 1570|   600k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   600k|    {
 1572|   600k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|   600k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   600k|    {
  442|   600k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1739|   609k|    {
 1740|   609k|        return has_value();
 1741|   609k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.21M|    {
  490|  1.21M|        return m_has_value;
  491|  1.21M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1745|  8.77k|    {
 1746|  8.77k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  8.77k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.77k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  8.77k|        return this->get_unexpected().error();
 1748|  8.77k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  8.77k|    {
  473|  8.77k|        return m_unexpected;
  474|  8.77k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   600k|    {
 1805|   600k|        return std::move(value());
 1806|   600k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   600k|    {
 1769|   600k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   600k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   600k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   600k|        return this->get_value();
 1771|   600k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  455|   600k|    {
  456|   600k|        return m_value;
  457|   600k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1745|    360|    {
 1746|    360|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    360|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    360|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    360|        return this->get_unexpected().error();
 1748|    360|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  12.0k|        : base(unexpect, std::move(e.error())),
 1616|  12.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  12.0k|    {
 1618|  12.0k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  12.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  12.0k|          m_has_value(false)
  451|  12.0k|    {
  452|  12.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   976k|    {
 1316|   976k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1569|   139k|        : base(std::in_place, std::forward<U>(val)),
 1570|   139k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   139k|    {
 1572|   139k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  440|   139k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   139k|    {
  442|   139k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   822k|        : base(unexpect, std::move(e.error())),
 1616|   822k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   822k|    {
 1618|   822k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|   822k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   822k|          m_has_value(false)
  451|   822k|    {
  452|   822k|    }
_ZNK3scn2v48expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1739|   976k|    {
 1740|   976k|        return has_value();
 1741|   976k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  1.48M|    {
  490|  1.48M|        return m_has_value;
  491|  1.48M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1745|   362k|    {
 1746|   362k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   362k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   362k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   362k|        return this->get_unexpected().error();
 1748|   362k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|   362k|    {
  473|   362k|        return m_unexpected;
  474|   362k|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1569|   417k|        : base(std::in_place, std::forward<U>(val)),
 1570|   417k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   417k|    {
 1572|   417k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|   417k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   417k|    {
  442|   417k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   417k|    {
 1316|   417k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|   142k|    {
 1795|   142k|        return value();
 1796|   142k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|   142k|    {
 1769|   142k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   142k|        return this->get_value();
 1771|   142k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|   142k|    {
  456|   142k|        return m_value;
  457|   142k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1739|   417k|    {
 1740|   417k|        return has_value();
 1741|   417k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|   835k|    {
  490|   835k|        return m_has_value;
  491|   835k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   417k|    {
 1316|   417k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   417k|    {
 1805|   417k|        return std::move(value());
 1806|   417k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   417k|    {
 1769|   417k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   417k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   417k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   417k|        return this->get_value();
 1771|   417k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|   417k|    {
  456|   417k|        return m_value;
  457|   417k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1569|  2.59k|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.59k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.59k|    {
 1572|  2.59k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  2.59k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.59k|    {
  442|  2.59k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1569|   417k|        : base(std::in_place, std::forward<U>(val)),
 1570|   417k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   417k|    {
 1572|   417k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|   417k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   417k|    {
  442|   417k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   417k|    {
 1979|   417k|        return detail::transform_error_impl(std::move(*this),
 1980|   417k|                                            std::forward<F>(f));
 1981|   417k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1461|   417k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   417k|    else {
 1472|   417k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   417k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   417k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 417k, False: 0]
  |  |  ------------------
  ------------------
 1474|   417k|                   ? result(*std::forward<Exp>(exp))
 1475|   417k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|   417k|    }
 1479|   417k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  489|   835k|    {
  490|   835k|        return m_has_value;
  491|   835k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   417k|    {
 1805|   417k|        return std::move(value());
 1806|   417k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   417k|    {
 1769|   417k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   417k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   417k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   417k|        return this->get_value();
 1771|   417k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  455|   417k|    {
  456|   417k|        return m_value;
  457|   417k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|   417k|        : base(std::in_place, std::forward<U>(val)),
 1570|   417k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   417k|    {
 1572|   417k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|   417k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   417k|    {
  442|   417k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   417k|    {
 1316|   417k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1739|   417k|    {
 1740|   417k|        return has_value();
 1741|   417k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  489|   835k|    {
  490|   835k|        return m_has_value;
  491|   835k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   417k|    {
 1805|   417k|        return std::move(value());
 1806|   417k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   417k|    {
 1769|   417k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   417k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   417k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   417k|        return this->get_value();
 1771|   417k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  455|   417k|    {
  456|   417k|        return m_value;
  457|   417k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISD_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SD_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  3.50k|        : base(unexpect, std::move(e.error())),
 1616|  3.50k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.50k|    {
 1618|  3.50k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  636|  3.50k|        : m_has_value(false)
  637|  3.50k|    {
  638|  3.50k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  3.50k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  700|  3.50k|    {
  701|  3.50k|        scn::detail::construct_at(unexpected_ptr(),
  702|  3.50k|                                  std::forward<Args>(args)...);
  703|  3.50k|        m_has_value = false;
  704|  3.50k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  10.5k|    {
  730|  10.5k|        return reinterpret_cast<unexpected<E>*>(
  731|  10.5k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  10.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  10.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  61.3k|    {
 1316|  61.3k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISC_vEEOT_:
 1569|  57.8k|        : base(std::in_place, std::forward<U>(val)),
 1570|  57.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  57.8k|    {
 1572|  57.8k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSD_EvEENS3_10in_place_tEDpOT_:
  626|  57.8k|        : m_has_value(true)
  627|  57.8k|    {
  628|  57.8k|        construct(std::forward<Args>(args)...);
  629|  57.8k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9constructIJSD_EEEvDpOT_:
  693|  57.8k|    {
  694|  57.8k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  57.8k|        m_has_value = true;
  696|  57.8k|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEJSD_EEEPT_SF_DpOT0_:
  395|  57.8k|{
  396|  57.8k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  57.8k|        T(std::forward<Args>(args)...);
  398|  57.8k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   173k|    {
  718|   173k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   173k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   173k|    }
_ZNK3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1739|  61.3k|    {
 1740|  61.3k|        return has_value();
 1741|  61.3k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  686|   184k|    {
  687|   184k|        return m_has_value;
  688|   184k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1745|  3.50k|    {
 1746|  3.50k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  3.50k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.50k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  3.50k|        return this->get_unexpected().error();
 1748|  3.50k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|  3.50k|    {
  670|  3.50k|        return *unexpected_ptr();
  671|  3.50k|    }
_ZNO3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEdeISC_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSH_v:
 1804|  57.8k|    {
 1805|  57.8k|        return std::move(value());
 1806|  57.8k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5valueISC_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  57.8k|    {
 1769|  57.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  57.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  57.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  57.8k|        return this->get_value();
 1771|  57.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9get_valueEv:
  652|  57.8k|    {
  653|  57.8k|        return *value_ptr();
  654|  57.8k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  642|  61.3k|    {
  643|  61.3k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 57.8k, False: 3.50k]
  ------------------
  644|  57.8k|            destroy_value();
  645|  57.8k|        }
  646|  3.50k|        else {
  647|  3.50k|            destroy_unexpected();
  648|  3.50k|        }
  649|  61.3k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  57.8k|    {
  708|  57.8k|        scn::detail::destroy_at(value_ptr());
  709|  57.8k|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEEEvPT_:
  401|  57.8k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  57.8k|    else {
  408|  57.8k|        p->~T();
  409|  57.8k|    }
  410|  57.8k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  3.50k|    {
  712|  3.50k|        scn::detail::destroy_at(unexpected_ptr());
  713|  3.50k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  1.45M|    {
 3000|  1.45M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  1.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  1.45M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  1.45M|    {
 2981|  1.45M|        return t.data();
 2982|  1.45M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1569|   755k|        : base(std::in_place, std::forward<U>(val)),
 1570|   755k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   755k|    {
 1572|   755k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  440|   755k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   755k|    {
  442|   755k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|   283k|    {
 1795|   283k|        return value();
 1796|   283k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|   283k|    {
 1795|   283k|        return value();
 1796|   283k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3910|   312k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|   312k|    static_cast<    \
  |  |  935|   312k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|   312k|    {
 3912|   312k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|   637k|    {
 4559|   637k|        return x.is_at_end();
 4560|   637k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4602|  34.8M|    {
 4603|  34.8M|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 34.8M]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|  34.8M|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 34.8M]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|  34.8M|        return !read_at_position();
 4610|  34.8M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4582|  69.6G|    {
 4583|  69.6G|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  69.6G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  69.6G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|  69.6G|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 69.6G]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|  69.6G|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|  69.6G|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 69.5G, False: 34.3M]
  |  |  ------------------
  ------------------
 4590|  69.5G|            return true;
 4591|  69.5G|        }
 4592|       |
 4593|  68.5M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 34.3M, False: 34.2M]
  ------------------
 4594|  34.3M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 104k, False: 34.2M]
  ------------------
 4595|   104k|                return false;
 4596|   104k|            }
 4597|  34.3M|        }
 4598|  34.2M|        return true;
 4599|  34.3M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4356|  69.6G|    {
 4357|  69.6G|        return m_putback_buffer.size() + m_current_view.size();
 4358|  69.6G|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4517|  34.9M|    {
 4518|  34.9M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  34.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|  34.9M|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 34.9M]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|  34.9M|        auto res = read_at_position();
 4527|  34.9M|        SCN_EXPECT(res);
  ------------------
  |  |  930|  34.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|  34.9M|        return parent()->get_character_at(m_position);
 4529|  34.9M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4387|  34.9M|    {
 4388|  34.9M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  34.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 660k, False: 34.2M]
  |  |  ------------------
  ------------------
 4389|  34.9M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|   660k|            return m_putback_buffer[pos];
 4391|   660k|        }
 4392|  34.2M|        const auto start = pos - m_putback_buffer.size();
 4393|  34.2M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|  34.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|  34.2M|        return m_current_view[start];
 4395|  34.2M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|   382k|        : base(std::in_place, std::forward<U>(val)),
 1570|   382k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   382k|    {
 1572|   382k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   382k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   382k|    {
  442|   382k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   403k|    {
 1316|   403k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  20.7k|        : base(unexpect, std::move(e.error())),
 1616|  20.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  20.7k|    {
 1618|  20.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  20.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  20.7k|          m_has_value(false)
  451|  20.7k|    {
  452|  20.7k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4503|  69.5G|    {
 4504|  69.5G|        ++m_position;
 4505|  69.5G|        (void)read_at_position();
 4506|  69.5G|        return *this;
 4507|  69.5G|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1739|   167k|    {
 1740|   167k|        return has_value();
 1741|   167k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|  10.4k|    {
 1795|  10.4k|        return value();
 1796|  10.4k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4552|  69.5G|    {
 4553|  69.5G|        return !(lhs == rhs);
 4554|  69.5G|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4547|  69.5G|    {
 4548|  69.5G|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 69.5G, False: 0]
  |  Branch (4548:46): [True: 34.0M, False: 69.4G]
  ------------------
 4549|  69.5G|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4067|   272k|{
 4068|       |    if constexpr (sizeof(U) == 1) {
 4069|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|   272k|    else {
 4075|       |        // utf-32
 4076|   272k|        static_assert(sizeof(U) == 4);
 4077|   272k|        SCN_UNUSED(ch);
  ------------------
  |  |  915|   272k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4078|   272k|        return 1;
 4079|   272k|    }
 4080|   272k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|   272k|{
 4274|       |    if constexpr (sizeof(CharT) == 1) {
 4275|       |        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|   272k|    else {
 4281|   272k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  930|   272k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   272k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4282|   272k|        auto cp = static_cast<char32_t>(input.front());
 4283|   272k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|   272k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 105k, False: 166k]
  |  |  ------------------
  ------------------
 4284|   105k|            return invalid_code_point;
 4285|   105k|        }
 4286|   166k|        return cp;
 4287|   272k|    }
 4288|   272k|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  1.43k|        : base(unexpect, std::move(e.error())),
 1616|  1.43k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.43k|    {
 1618|  1.43k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  1.43k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.43k|          m_has_value(false)
  451|  1.43k|    {
  452|  1.43k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   120k|    {
 1316|   120k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   118k|        : base(std::in_place, std::forward<U>(val)),
 1570|   118k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   118k|    {
 1572|   118k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|   118k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   118k|    {
  442|   118k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1739|   120k|    {
 1740|   120k|        return has_value();
 1741|   120k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|   240k|    {
  490|   240k|        return m_has_value;
  491|   240k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1745|  1.43k|    {
 1746|  1.43k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.43k|        return this->get_unexpected().error();
 1748|  1.43k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.43k|    {
  473|  1.43k|        return m_unexpected;
  474|  1.43k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   118k|    {
 1805|   118k|        return std::move(value());
 1806|   118k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   118k|    {
 1769|   118k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   118k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   118k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   118k|        return this->get_value();
 1771|   118k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|   118k|    {
  456|   118k|        return m_value;
  457|   118k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  35.5M|    {
 3484|  35.5M|        return m_sentinel;
 3485|  35.5M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1745|     72|    {
 1746|     72|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|     72|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     72|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|     72|        return this->get_unexpected().error();
 1748|     72|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  18.9k|        : base(unexpect, std::move(e.error())),
 1616|  18.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  18.9k|    {
 1618|  18.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  37.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  37.8k|          m_has_value(false)
  451|  37.8k|    {
  452|  37.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   509k|    {
 1316|   509k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1569|  10.7k|        : base(std::in_place, std::forward<U>(val)),
 1570|  10.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  10.7k|    {
 1572|  10.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|  10.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  10.7k|    {
  442|  10.7k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|   376k|        : base(unexpect, std::move(e.error())),
 1616|   376k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   376k|    {
 1618|   376k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|   376k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   376k|          m_has_value(false)
  451|   376k|    {
  452|   376k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1739|   401k|    {
 1740|   401k|        return has_value();
 1741|   401k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  489|   852k|    {
  490|   852k|        return m_has_value;
  491|   852k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1745|   142k|    {
 1746|   142k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   142k|        return this->get_unexpected().error();
 1748|   142k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|   247k|    {
  473|   247k|        return m_unexpected;
  474|   247k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1569|   133k|        : base(std::in_place, std::forward<U>(val)),
 1570|   133k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   133k|    {
 1572|   133k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|   133k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   133k|    {
  442|   133k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   133k|    {
 1316|   133k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|  10.7k|    {
 1795|  10.7k|        return value();
 1796|  10.7k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  95.1k|    {
 1769|  95.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  95.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  95.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  95.1k|        return this->get_value();
 1771|  95.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  95.1k|    {
  456|  95.1k|        return m_value;
  457|  95.1k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1739|   133k|    {
 1740|   133k|        return has_value();
 1741|   133k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  489|   267k|    {
  490|   267k|        return m_has_value;
  491|   267k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   133k|    {
 1316|   133k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|   133k|    {
 1805|   133k|        return std::move(value());
 1806|   133k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|   133k|    {
 1769|   133k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   133k|        return this->get_value();
 1771|   133k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  455|   133k|    {
  456|   133k|        return m_value;
  457|   133k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   100k|    {
 1979|   100k|        return detail::transform_error_impl(std::move(*this),
 1980|   100k|                                            std::forward<F>(f));
 1981|   100k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   100k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   100k|    else {
 1472|   100k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   100k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   100k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 81.5k, False: 18.8k]
  |  |  ------------------
  ------------------
 1474|   100k|                   ? result(*std::forward<Exp>(exp))
 1475|   100k|                   : result(unexpect,
 1476|  18.8k|                            trivial_invoke(std::forward<F>(f),
 1477|  18.8k|                                           std::forward<Exp>(exp).error()));
 1478|   100k|    }
 1479|   100k|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1569|  84.3k|        : base(std::in_place, std::forward<U>(val)),
 1570|  84.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  84.3k|    {
 1572|  84.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  84.3k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  84.3k|    {
  442|  84.3k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1625|  18.8k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  18.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  18.8k|    {
 1628|  18.8k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  84.3k|    {
 1805|  84.3k|        return std::move(value());
 1806|  84.3k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1569|   133k|        : base(std::in_place, std::forward<U>(val)),
 1570|   133k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   133k|    {
 1572|   133k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|   133k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   133k|    {
  442|   133k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|   133k|    {
 1979|   133k|        return detail::transform_error_impl(std::move(*this),
 1980|   133k|                                            std::forward<F>(f));
 1981|   133k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|   133k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   133k|    else {
 1472|   133k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   133k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   133k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 133k, False: 0]
  |  |  ------------------
  ------------------
 1474|   133k|                   ? result(*std::forward<Exp>(exp))
 1475|   133k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|   133k|    }
 1479|   133k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  489|   267k|    {
  490|   267k|        return m_has_value;
  491|   267k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1804|   133k|    {
 1805|   133k|        return std::move(value());
 1806|   133k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   133k|    {
 1769|   133k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   133k|        return this->get_value();
 1771|   133k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  455|   133k|    {
  456|   133k|        return m_value;
  457|   133k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   133k|        : base(std::in_place, std::forward<U>(val)),
 1570|   133k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   133k|    {
 1572|   133k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|   133k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   133k|    {
  442|   133k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   133k|    {
 1316|   133k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1739|   133k|    {
 1740|   133k|        return has_value();
 1741|   133k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   267k|    {
  490|   267k|        return m_has_value;
  491|   267k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1804|   133k|    {
 1805|   133k|        return std::move(value());
 1806|   133k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   133k|    {
 1769|   133k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   133k|        return this->get_value();
 1771|   133k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   133k|    {
  456|   133k|        return m_value;
  457|   133k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|   107k|    {
 1979|   107k|        return detail::transform_error_impl(std::move(*this),
 1980|   107k|                                            std::forward<F>(f));
 1981|   107k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1461|   107k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   107k|    else {
 1472|   107k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   107k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   107k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2.79k, False: 105k]
  |  |  ------------------
  ------------------
 1474|   107k|                   ? result(*std::forward<Exp>(exp))
 1475|   107k|                   : result(unexpect,
 1476|   105k|                            trivial_invoke(std::forward<F>(f),
 1477|   105k|                                           std::forward<Exp>(exp).error()));
 1478|   107k|    }
 1479|   107k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1755|   105k|    {
 1756|   105k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|   105k|        return std::move(this->get_unexpected().error());
 1758|   105k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISI_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  16.0k|        : base(unexpect, std::move(e.error())),
 1616|  16.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  16.0k|    {
 1618|  16.0k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  636|  16.0k|        : m_has_value(false)
  637|  16.0k|    {
  638|  16.0k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  16.0k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  700|  16.0k|    {
  701|  16.0k|        scn::detail::construct_at(unexpected_ptr(),
  702|  16.0k|                                  std::forward<Args>(args)...);
  703|  16.0k|        m_has_value = false;
  704|  16.0k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  48.1k|    {
  730|  48.1k|        return reinterpret_cast<unexpected<E>*>(
  731|  48.1k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  48.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  48.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  24.8k|    {
 1316|  24.8k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1569|  8.84k|        : base(std::in_place, std::forward<U>(val)),
 1570|  8.84k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  8.84k|    {
 1572|  8.84k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS3_10in_place_tEDpOT_:
  626|  8.84k|        : m_has_value(true)
  627|  8.84k|    {
  628|  8.84k|        construct(std::forward<Args>(args)...);
  629|  8.84k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSH_EEEvDpOT_:
  693|  8.84k|    {
  694|  8.84k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  8.84k|        m_has_value = true;
  696|  8.84k|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEJSH_EEEPT_SJ_DpOT0_:
  395|  8.84k|{
  396|  8.84k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  8.84k|        T(std::forward<Args>(args)...);
  398|  8.84k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  26.5k|    {
  718|  26.5k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  26.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  26.5k|    }
_ZNK3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1739|  24.8k|    {
 1740|  24.8k|        return has_value();
 1741|  24.8k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  74.6k|    {
  687|  74.6k|        return m_has_value;
  688|  74.6k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1745|  16.0k|    {
 1746|  16.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  16.0k|        return this->get_unexpected().error();
 1748|  16.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|  16.0k|    {
  670|  16.0k|        return *unexpected_ptr();
  671|  16.0k|    }
_ZNO3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEdeISH_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSM_v:
 1804|  8.84k|    {
 1805|  8.84k|        return std::move(value());
 1806|  8.84k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5valueISH_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  8.84k|    {
 1769|  8.84k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  8.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  8.84k|        return this->get_value();
 1771|  8.84k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  8.84k|    {
  653|  8.84k|        return *value_ptr();
  654|  8.84k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  24.8k|    {
  643|  24.8k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 8.84k, False: 16.0k]
  ------------------
  644|  8.84k|            destroy_value();
  645|  8.84k|        }
  646|  16.0k|        else {
  647|  16.0k|            destroy_unexpected();
  648|  16.0k|        }
  649|  24.8k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  8.84k|    {
  708|  8.84k|        scn::detail::destroy_at(value_ptr());
  709|  8.84k|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEEEvPT_:
  401|  8.84k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  8.84k|    else {
  408|  8.84k|        p->~T();
  409|  8.84k|    }
  410|  8.84k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  16.0k|    {
  712|  16.0k|        scn::detail::destroy_at(unexpected_ptr());
  713|  16.0k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|   487k|    {
 1740|   487k|        return has_value();
 1741|   487k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|   975k|    {
  490|   975k|        return m_has_value;
  491|   975k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|   329k|    {
 1746|   329k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   329k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   329k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   329k|        return this->get_unexpected().error();
 1748|   329k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   329k|    {
  473|   329k|        return m_unexpected;
  474|   329k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   148k|    {
 1805|   148k|        return std::move(value());
 1806|   148k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   158k|    {
 1769|   158k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   158k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   158k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   158k|        return this->get_value();
 1771|   158k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|   158k|    {
  456|   158k|        return m_value;
  457|   158k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3479|  6.95k|    {
 3480|  6.95k|        return m_iterator;
 3481|  6.95k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3483|  6.95k|    {
 3484|  6.95k|        return m_sentinel;
 3485|  6.95k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3464|  2.79k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  2.79k|    static_cast<    \
  |  |  935|  2.79k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  2.79k|    static_cast<    \
  |  |  935|  2.79k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  2.79k|    {
 3466|  2.79k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|  34.2M|    {
 4570|  34.2M|        return !x.is_at_end();
 4571|  34.2M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  20.7k|        : base(unexpect, std::move(e.error())),
 1616|  20.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  20.7k|    {
 1618|  20.7k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  20.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  20.7k|          m_has_value(false)
  451|  20.7k|    {
  452|  20.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   403k|    {
 1316|   403k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|   382k|        : base(std::in_place, std::forward<U>(val)),
 1570|   382k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   382k|    {
 1572|   382k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   382k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   382k|    {
  442|   382k|    }
_ZNK3scn2v48expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1739|   167k|    {
 1740|   167k|        return has_value();
 1741|   167k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   649k|    {
  490|   649k|        return m_has_value;
  491|   649k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|  10.4k|    {
 1795|  10.4k|        return value();
 1796|  10.4k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|   225k|    {
 1769|   225k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   225k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   225k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   225k|        return this->get_value();
 1771|   225k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   225k|    {
  456|   225k|        return m_value;
  457|   225k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  1.43k|        : base(unexpect, std::move(e.error())),
 1616|  1.43k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.43k|    {
 1618|  1.43k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  1.43k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.43k|          m_has_value(false)
  451|  1.43k|    {
  452|  1.43k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   120k|    {
 1316|   120k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|   118k|        : base(std::in_place, std::forward<U>(val)),
 1570|   118k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   118k|    {
 1572|   118k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|   118k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   118k|    {
  442|   118k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|   135k|    {
 1979|   135k|        return detail::transform_error_impl(std::move(*this),
 1980|   135k|                                            std::forward<F>(f));
 1981|   135k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|   135k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   135k|    else {
 1472|   135k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   135k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   135k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 133k, False: 1.77k]
  |  |  ------------------
  ------------------
 1474|   135k|                   ? result(*std::forward<Exp>(exp))
 1475|   135k|                   : result(unexpect,
 1476|  1.77k|                            trivial_invoke(std::forward<F>(f),
 1477|  1.77k|                                           std::forward<Exp>(exp).error()));
 1478|   135k|    }
 1479|   135k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|   215k|    {
 1805|   215k|        return std::move(value());
 1806|   215k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1755|  20.6k|    {
 1756|  20.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  20.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  20.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  20.6k|        return std::move(this->get_unexpected().error());
 1758|  20.6k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  20.7k|    {
  473|  20.7k|        return m_unexpected;
  474|  20.7k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|  1.77k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  1.77k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  1.77k|    {
 1628|  1.77k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1739|   120k|    {
 1740|   120k|        return has_value();
 1741|   120k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  489|   240k|    {
  490|   240k|        return m_has_value;
  491|   240k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1745|  1.43k|    {
 1746|  1.43k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.43k|        return this->get_unexpected().error();
 1748|  1.43k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.43k|    {
  473|  1.43k|        return m_unexpected;
  474|  1.43k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   118k|    {
 1805|   118k|        return std::move(value());
 1806|   118k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   118k|    {
 1769|   118k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   118k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   118k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   118k|        return this->get_value();
 1771|   118k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  455|   118k|    {
  456|   118k|        return m_value;
  457|   118k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1745|     72|    {
 1746|     72|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|     72|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     72|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|     72|        return this->get_unexpected().error();
 1748|     72|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  18.9k|        : base(unexpect, std::move(e.error())),
 1616|  18.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  18.9k|    {
 1618|  18.9k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  37.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  37.8k|          m_has_value(false)
  451|  37.8k|    {
  452|  37.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   401k|    {
 1316|   401k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1569|  10.7k|        : base(std::in_place, std::forward<U>(val)),
 1570|  10.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  10.7k|    {
 1572|  10.7k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  440|  10.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  10.7k|    {
  442|  10.7k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   271k|        : base(unexpect, std::move(e.error())),
 1616|   271k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   271k|    {
 1618|   271k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|   271k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   271k|          m_has_value(false)
  451|   271k|    {
  452|   271k|    }
_ZNK3scn2v48expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1739|   401k|    {
 1740|   401k|        return has_value();
 1741|   401k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|   636k|    {
  490|   636k|        return m_has_value;
  491|   636k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1745|   142k|    {
 1746|   142k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   142k|        return this->get_unexpected().error();
 1748|   142k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|   142k|    {
  473|   142k|        return m_unexpected;
  474|   142k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1569|   133k|        : base(std::in_place, std::forward<U>(val)),
 1570|   133k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   133k|    {
 1572|   133k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|   133k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   133k|    {
  442|   133k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   133k|    {
 1316|   133k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|  10.7k|    {
 1795|  10.7k|        return value();
 1796|  10.7k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  92.3k|    {
 1769|  92.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  92.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  92.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  92.3k|        return this->get_value();
 1771|  92.3k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  92.3k|    {
  456|  92.3k|        return m_value;
  457|  92.3k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1739|   133k|    {
 1740|   133k|        return has_value();
 1741|   133k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|   267k|    {
  490|   267k|        return m_has_value;
  491|   267k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   133k|    {
 1316|   133k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   133k|    {
 1805|   133k|        return std::move(value());
 1806|   133k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   133k|    {
 1769|   133k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   133k|        return this->get_value();
 1771|   133k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|   133k|    {
  456|   133k|        return m_value;
  457|   133k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|   100k|    {
 1979|   100k|        return detail::transform_error_impl(std::move(*this),
 1980|   100k|                                            std::forward<F>(f));
 1981|   100k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|   100k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   100k|    else {
 1472|   100k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   100k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   100k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 81.5k, False: 18.8k]
  |  |  ------------------
  ------------------
 1474|   100k|                   ? result(*std::forward<Exp>(exp))
 1475|   100k|                   : result(unexpect,
 1476|  18.8k|                            trivial_invoke(std::forward<F>(f),
 1477|  18.8k|                                           std::forward<Exp>(exp).error()));
 1478|   100k|    }
 1479|   100k|}
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1569|  81.5k|        : base(std::in_place, std::forward<U>(val)),
 1570|  81.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  81.5k|    {
 1572|  81.5k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  81.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  81.5k|    {
  442|  81.5k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1625|  18.8k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  18.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  18.8k|    {
 1628|  18.8k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  81.5k|    {
 1805|  81.5k|        return std::move(value());
 1806|  81.5k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1569|   133k|        : base(std::in_place, std::forward<U>(val)),
 1570|   133k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   133k|    {
 1572|   133k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|   133k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   133k|    {
  442|   133k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   133k|    {
 1979|   133k|        return detail::transform_error_impl(std::move(*this),
 1980|   133k|                                            std::forward<F>(f));
 1981|   133k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1461|   133k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   133k|    else {
 1472|   133k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   133k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   133k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 133k, False: 0]
  |  |  ------------------
  ------------------
 1474|   133k|                   ? result(*std::forward<Exp>(exp))
 1475|   133k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|   133k|    }
 1479|   133k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  489|   267k|    {
  490|   267k|        return m_has_value;
  491|   267k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   133k|    {
 1805|   133k|        return std::move(value());
 1806|   133k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   133k|    {
 1769|   133k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   133k|        return this->get_value();
 1771|   133k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  455|   133k|    {
  456|   133k|        return m_value;
  457|   133k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|   133k|        : base(std::in_place, std::forward<U>(val)),
 1570|   133k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   133k|    {
 1572|   133k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|   133k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   133k|    {
  442|   133k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   133k|    {
 1316|   133k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1739|   133k|    {
 1740|   133k|        return has_value();
 1741|   133k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  489|   267k|    {
  490|   267k|        return m_has_value;
  491|   267k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   133k|    {
 1805|   133k|        return std::move(value());
 1806|   133k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   133k|    {
 1769|   133k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   133k|        return this->get_value();
 1771|   133k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  455|   133k|    {
  456|   133k|        return m_value;
  457|   133k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1615|  16.0k|        : base(unexpect, std::move(e.error())),
 1616|  16.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  16.0k|    {
 1618|  16.0k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  636|  16.0k|        : m_has_value(false)
  637|  16.0k|    {
  638|  16.0k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  16.0k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  700|  16.0k|    {
  701|  16.0k|        scn::detail::construct_at(unexpected_ptr(),
  702|  16.0k|                                  std::forward<Args>(args)...);
  703|  16.0k|        m_has_value = false;
  704|  16.0k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  48.1k|    {
  730|  48.1k|        return reinterpret_cast<unexpected<E>*>(
  731|  48.1k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  48.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  48.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  24.8k|    {
 1316|  24.8k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1569|  8.84k|        : base(std::in_place, std::forward<U>(val)),
 1570|  8.84k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  8.84k|    {
 1572|  8.84k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSG_EvEENS3_10in_place_tEDpOT_:
  626|  8.84k|        : m_has_value(true)
  627|  8.84k|    {
  628|  8.84k|        construct(std::forward<Args>(args)...);
  629|  8.84k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSG_EEEvDpOT_:
  693|  8.84k|    {
  694|  8.84k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  8.84k|        m_has_value = true;
  696|  8.84k|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEJSG_EEEPT_SI_DpOT0_:
  395|  8.84k|{
  396|  8.84k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  8.84k|        T(std::forward<Args>(args)...);
  398|  8.84k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  26.5k|    {
  718|  26.5k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  26.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  26.5k|    }
_ZNK3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1739|  24.8k|    {
 1740|  24.8k|        return has_value();
 1741|  24.8k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  74.6k|    {
  687|  74.6k|        return m_has_value;
  688|  74.6k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1745|  16.0k|    {
 1746|  16.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  16.0k|        return this->get_unexpected().error();
 1748|  16.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|  16.0k|    {
  670|  16.0k|        return *unexpected_ptr();
  671|  16.0k|    }
_ZNO3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEdeISF_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSK_v:
 1804|  8.84k|    {
 1805|  8.84k|        return std::move(value());
 1806|  8.84k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5valueISF_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1768|  8.84k|    {
 1769|  8.84k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  8.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  8.84k|        return this->get_value();
 1771|  8.84k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  8.84k|    {
  653|  8.84k|        return *value_ptr();
  654|  8.84k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  24.8k|    {
  643|  24.8k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 8.84k, False: 16.0k]
  ------------------
  644|  8.84k|            destroy_value();
  645|  8.84k|        }
  646|  16.0k|        else {
  647|  16.0k|            destroy_unexpected();
  648|  16.0k|        }
  649|  24.8k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  8.84k|    {
  708|  8.84k|        scn::detail::destroy_at(value_ptr());
  709|  8.84k|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEEEvPT_:
  401|  8.84k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  8.84k|    else {
  408|  8.84k|        p->~T();
  409|  8.84k|    }
  410|  8.84k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  16.0k|    {
  712|  16.0k|        scn::detail::destroy_at(unexpected_ptr());
  713|  16.0k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   427k|    {
 3000|   427k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   427k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   427k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   427k|    {
 2981|   427k|        return t.data();
 2982|   427k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|  10.7k|    {
 1795|  10.7k|        return value();
 1796|  10.7k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|  10.7k|    {
 1795|  10.7k|        return value();
 1796|  10.7k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3910|   107k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|   107k|    static_cast<    \
  |  |  935|   107k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|   107k|    {
 3912|   107k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4356|  24.6M|    {
 4357|  24.6M|        return m_putback_buffer.size() + m_current_view.size();
 4358|  24.6M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6176|   843k|    {
 6177|   843k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   843k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 843k]
  |  |  ------------------
  ------------------
 6178|      0|            return max_size();
 6179|      0|        }
 6180|       |
 6181|   843k|        return static_cast<std::size_t>(m_desc &
 6182|   843k|                                        ((1 << detail::packed_arg_bits) - 1));
 6183|   843k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6202|  1.68M|    {
 6203|  1.68M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6204|  1.68M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6144|   843k|    {
 6145|   843k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   843k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 843k]
  |  |  ------------------
  ------------------
 6146|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6147|      0|                return m_args[id];
 6148|      0|            }
 6149|      0|            return {};
 6150|      0|        }
 6151|       |
 6152|   843k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|   843k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 843k]
  |  |  ------------------
  ------------------
 6153|      0|            return {};
 6154|      0|        }
 6155|       |
 6156|   843k|        const auto t = type(id);
 6157|   843k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|   843k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 843k]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|   843k|        basic_scan_arg<Context> arg;
 6162|   843k|        arg.m_type = t;
 6163|   843k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6163:13): [True: 843k, False: 0]
  ------------------
 6164|   843k|            arg.m_value.ref_value = m_builtin_values[id];
 6165|   843k|        }
 6166|      0|        else {
 6167|      0|            arg.m_value = m_values[id];
 6168|      0|        }
 6169|   843k|        return arg;
 6170|   843k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6211|   843k|    {
 6212|       |        // First (0th) index is size, types start after that
 6213|   843k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6214|   843k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6215|   843k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6216|   843k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6206|   843k|    {
 6207|   843k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6208|   843k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 5960|  1.57M|    {
 5961|  1.57M|        return m_type != detail::arg_type::none_type;
 5962|  1.57M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9299|  96.2k|{
 9300|  96.2k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  96.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  96.2k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  96.2k|{
 9201|  96.2k|#define SCN_VISIT(Type)                                                \
 9202|  96.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  96.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  96.2k|    }                                                                  \
 9205|  96.2k|    else {                                                             \
 9206|  96.2k|        return vis(monostate_val);                                     \
 9207|  96.2k|    }
 9208|       |
 9209|  96.2k|    monostate monostate_val{};
 9210|       |
 9211|  96.2k|    switch (get_arg_type(arg)) {
 9212|  16.0k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 16.0k, False: 80.2k]
  ------------------
 9213|  16.0k|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|  16.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  16.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  16.0k|    }                                                                  \
  |  | 9205|  16.0k|    else {                                                             \
  |  | 9206|  16.0k|        return vis(monostate_val);                                     \
  |  | 9207|  16.0k|    }
  ------------------
 9214|  16.0k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 96.2k]
  ------------------
 9215|  16.0k|            SCN_VISIT(short);
  ------------------
  |  | 9202|  16.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  16.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  16.0k|    }                                                                  \
  |  | 9205|  16.0k|    else {                                                             \
  |  | 9206|  16.0k|        return vis(monostate_val);                                     \
  |  | 9207|  16.0k|    }
  ------------------
 9216|  34.5k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 18.4k, False: 77.7k]
  ------------------
 9217|  34.5k|            SCN_VISIT(int);
  ------------------
  |  | 9202|  34.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  34.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  34.5k|    }                                                                  \
  |  | 9205|  34.5k|    else {                                                             \
  |  | 9206|  34.5k|        return vis(monostate_val);                                     \
  |  | 9207|  34.5k|    }
  ------------------
 9218|  34.5k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 96.2k]
  ------------------
 9219|  34.5k|            SCN_VISIT(long);
  ------------------
  |  | 9202|  34.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  34.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  34.5k|    }                                                                  \
  |  | 9205|  34.5k|    else {                                                             \
  |  | 9206|  34.5k|        return vis(monostate_val);                                     \
  |  | 9207|  34.5k|    }
  ------------------
 9220|  53.3k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 18.8k, False: 77.4k]
  ------------------
 9221|  53.3k|            SCN_VISIT(long long);
  ------------------
  |  | 9202|  53.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  53.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  53.3k|    }                                                                  \
  |  | 9205|  53.3k|    else {                                                             \
  |  | 9206|  53.3k|        return vis(monostate_val);                                     \
  |  | 9207|  53.3k|    }
  ------------------
 9222|  66.6k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 13.3k, False: 82.8k]
  ------------------
 9223|  66.6k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|  66.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  66.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  66.6k|    }                                                                  \
  |  | 9205|  66.6k|    else {                                                             \
  |  | 9206|  66.6k|        return vis(monostate_val);                                     \
  |  | 9207|  66.6k|    }
  ------------------
 9224|  66.6k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 96.2k]
  ------------------
 9225|  66.6k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|  66.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  66.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  66.6k|    }                                                                  \
  |  | 9205|  66.6k|    else {                                                             \
  |  | 9206|  66.6k|        return vis(monostate_val);                                     \
  |  | 9207|  66.6k|    }
  ------------------
 9226|  81.3k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 14.6k, False: 81.5k]
  ------------------
 9227|  81.3k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|  81.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  81.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  81.3k|    }                                                                  \
  |  | 9205|  81.3k|    else {                                                             \
  |  | 9206|  81.3k|        return vis(monostate_val);                                     \
  |  | 9207|  81.3k|    }
  ------------------
 9228|  81.3k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 96.2k]
  ------------------
 9229|  81.3k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|  81.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  81.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  81.3k|    }                                                                  \
  |  | 9205|  81.3k|    else {                                                             \
  |  | 9206|  81.3k|        return vis(monostate_val);                                     \
  |  | 9207|  81.3k|    }
  ------------------
 9230|  96.2k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 14.8k, False: 81.3k]
  ------------------
 9231|  96.2k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|  96.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  96.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  96.2k|    }                                                                  \
  |  | 9205|  96.2k|    else {                                                             \
  |  | 9206|  96.2k|        return vis(monostate_val);                                     \
  |  | 9207|  96.2k|    }
  ------------------
 9232|  96.2k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 96.2k]
  ------------------
 9233|  96.2k|            SCN_VISIT(void*);
  ------------------
  |  | 9202|  96.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  96.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  96.2k|    }                                                                  \
  |  | 9205|  96.2k|    else {                                                             \
  |  | 9206|  96.2k|        return vis(monostate_val);                                     \
  |  | 9207|  96.2k|    }
  ------------------
 9234|  96.2k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 96.2k]
  ------------------
 9235|  96.2k|            SCN_VISIT(bool);
  ------------------
  |  | 9202|  96.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  96.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  96.2k|    }                                                                  \
  |  | 9205|  96.2k|    else {                                                             \
  |  | 9206|  96.2k|        return vis(monostate_val);                                     \
  |  | 9207|  96.2k|    }
  ------------------
 9236|  96.2k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 96.2k]
  ------------------
 9237|  96.2k|            SCN_VISIT(char);
  ------------------
  |  | 9202|  96.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  96.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  96.2k|    }                                                                  \
  |  | 9205|  96.2k|    else {                                                             \
  |  | 9206|  96.2k|        return vis(monostate_val);                                     \
  |  | 9207|  96.2k|    }
  ------------------
 9238|  96.2k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 96.2k]
  ------------------
 9239|  96.2k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|  96.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  96.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  96.2k|    }                                                                  \
  |  | 9205|  96.2k|    else {                                                             \
  |  | 9206|  96.2k|        return vis(monostate_val);                                     \
  |  | 9207|  96.2k|    }
  ------------------
 9240|  96.2k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 96.2k]
  ------------------
 9241|  96.2k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|  96.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  96.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  96.2k|    }                                                                  \
  |  | 9205|  96.2k|    else {                                                             \
  |  | 9206|  96.2k|        return vis(monostate_val);                                     \
  |  | 9207|  96.2k|    }
  ------------------
 9242|  96.2k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 96.2k]
  ------------------
 9243|  96.2k|            SCN_VISIT(float);
  ------------------
  |  | 9202|  96.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  96.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  96.2k|    }                                                                  \
  |  | 9205|  96.2k|    else {                                                             \
  |  | 9206|  96.2k|        return vis(monostate_val);                                     \
  |  | 9207|  96.2k|    }
  ------------------
 9244|  96.2k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 96.2k]
  ------------------
 9245|  96.2k|            SCN_VISIT(double);
  ------------------
  |  | 9202|  96.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  96.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  96.2k|    }                                                                  \
  |  | 9205|  96.2k|    else {                                                             \
  |  | 9206|  96.2k|        return vis(monostate_val);                                     \
  |  | 9207|  96.2k|    }
  ------------------
 9246|  96.2k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 96.2k]
  ------------------
 9247|  96.2k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|  96.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  96.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  96.2k|    }                                                                  \
  |  | 9205|  96.2k|    else {                                                             \
  |  | 9206|  96.2k|        return vis(monostate_val);                                     \
  |  | 9207|  96.2k|    }
  ------------------
 9248|  96.2k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 96.2k]
  ------------------
 9249|  96.2k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|  96.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  96.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  96.2k|    }                                                                  \
  |  | 9205|  96.2k|    else {                                                             \
  |  | 9206|  96.2k|        return vis(monostate_val);                                     \
  |  | 9207|  96.2k|    }
  ------------------
 9250|  96.2k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 96.2k]
  ------------------
 9251|  96.2k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|  96.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  96.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  96.2k|    }                                                                  \
  |  | 9205|  96.2k|    else {                                                             \
  |  | 9206|  96.2k|        return vis(monostate_val);                                     \
  |  | 9207|  96.2k|    }
  ------------------
 9252|  96.2k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 96.2k]
  ------------------
 9253|  96.2k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|  96.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  96.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  96.2k|    }                                                                  \
  |  | 9205|  96.2k|    else {                                                             \
  |  | 9206|  96.2k|        return vis(monostate_val);                                     \
  |  | 9207|  96.2k|    }
  ------------------
 9254|  96.2k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 96.2k]
  ------------------
 9255|  96.2k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|  96.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  96.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  96.2k|    }                                                                  \
  |  | 9205|  96.2k|    else {                                                             \
  |  | 9206|  96.2k|        return vis(monostate_val);                                     \
  |  | 9207|  96.2k|    }
  ------------------
 9256|  96.2k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 96.2k]
  ------------------
 9257|  96.2k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|  96.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  96.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  96.2k|    }                                                                  \
  |  | 9205|  96.2k|    else {                                                             \
  |  | 9206|  96.2k|        return vis(monostate_val);                                     \
  |  | 9207|  96.2k|    }
  ------------------
 9258|  96.2k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 96.2k]
  ------------------
 9259|  96.2k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|  96.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  96.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  96.2k|    }                                                                  \
  |  | 9205|  96.2k|    else {                                                             \
  |  | 9206|  96.2k|        return vis(monostate_val);                                     \
  |  | 9207|  96.2k|    }
  ------------------
 9260|       |
 9261|  96.2k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 96.2k]
  ------------------
 9262|  96.2k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  96.2k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  96.2k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 96.2k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 96.2k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  96.2k|            SCN_CLANG_POP
 9279|  96.2k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6005|  2.28M|{
 6006|  2.28M|    return arg.m_type;
 6007|  2.28M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6017|   857k|{
 6018|   857k|    return arg.m_value;
 6019|   857k|}
_ZN3scn2v424basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 6256|   715k|        : m_format{format}, m_next_arg_id{next_arg_id}
 6257|   715k|    {
 6258|   715k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8932|   358k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|   358k|    static_cast<    \
  |  |  935|   358k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   358k|    {
 8934|   358k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4690|   452k|{
 4691|   452k|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 0, False: 452k]
  ------------------
 4692|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|      0|                                ranges::default_sentinel};
 4694|      0|    }
 4695|   452k|    return ranges::subrange{forward_iterator{this, 0},
 4696|   452k|                            ranges::default_sentinel};
 4697|   452k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4453|   452k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|   452k|    {
 4455|   452k|        SCN_EXPECT(parent);
  ------------------
  |  |  930|   452k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   452k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|   452k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|   452k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   452k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|   452k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9299|  94.9k|{
 9300|  94.9k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  94.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  94.9k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  94.9k|{
 9201|  94.9k|#define SCN_VISIT(Type)                                                \
 9202|  94.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  94.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  94.9k|    }                                                                  \
 9205|  94.9k|    else {                                                             \
 9206|  94.9k|        return vis(monostate_val);                                     \
 9207|  94.9k|    }
 9208|       |
 9209|  94.9k|    monostate monostate_val{};
 9210|       |
 9211|  94.9k|    switch (get_arg_type(arg)) {
 9212|  15.9k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 15.9k, False: 78.9k]
  ------------------
 9213|  15.9k|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|  15.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  15.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  15.9k|    }                                                                  \
  |  | 9205|  15.9k|    else {                                                             \
  |  | 9206|  15.9k|        return vis(monostate_val);                                     \
  |  | 9207|  15.9k|    }
  ------------------
 9214|  15.9k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 94.9k]
  ------------------
 9215|  15.9k|            SCN_VISIT(short);
  ------------------
  |  | 9202|  15.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  15.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  15.9k|    }                                                                  \
  |  | 9205|  15.9k|    else {                                                             \
  |  | 9206|  15.9k|        return vis(monostate_val);                                     \
  |  | 9207|  15.9k|    }
  ------------------
 9216|  33.9k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 17.9k, False: 76.9k]
  ------------------
 9217|  33.9k|            SCN_VISIT(int);
  ------------------
  |  | 9202|  33.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  33.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  33.9k|    }                                                                  \
  |  | 9205|  33.9k|    else {                                                             \
  |  | 9206|  33.9k|        return vis(monostate_val);                                     \
  |  | 9207|  33.9k|    }
  ------------------
 9218|  33.9k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 94.9k]
  ------------------
 9219|  33.9k|            SCN_VISIT(long);
  ------------------
  |  | 9202|  33.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  33.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  33.9k|    }                                                                  \
  |  | 9205|  33.9k|    else {                                                             \
  |  | 9206|  33.9k|        return vis(monostate_val);                                     \
  |  | 9207|  33.9k|    }
  ------------------
 9220|  52.1k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 18.2k, False: 76.6k]
  ------------------
 9221|  52.1k|            SCN_VISIT(long long);
  ------------------
  |  | 9202|  52.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  52.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  52.1k|    }                                                                  \
  |  | 9205|  52.1k|    else {                                                             \
  |  | 9206|  52.1k|        return vis(monostate_val);                                     \
  |  | 9207|  52.1k|    }
  ------------------
 9222|  65.4k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 13.3k, False: 81.5k]
  ------------------
 9223|  65.4k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|  65.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  65.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  65.4k|    }                                                                  \
  |  | 9205|  65.4k|    else {                                                             \
  |  | 9206|  65.4k|        return vis(monostate_val);                                     \
  |  | 9207|  65.4k|    }
  ------------------
 9224|  65.4k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 94.9k]
  ------------------
 9225|  65.4k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|  65.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  65.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  65.4k|    }                                                                  \
  |  | 9205|  65.4k|    else {                                                             \
  |  | 9206|  65.4k|        return vis(monostate_val);                                     \
  |  | 9207|  65.4k|    }
  ------------------
 9226|  80.0k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 14.6k, False: 80.2k]
  ------------------
 9227|  80.0k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|  80.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  80.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  80.0k|    }                                                                  \
  |  | 9205|  80.0k|    else {                                                             \
  |  | 9206|  80.0k|        return vis(monostate_val);                                     \
  |  | 9207|  80.0k|    }
  ------------------
 9228|  80.0k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 94.9k]
  ------------------
 9229|  80.0k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|  80.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  80.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  80.0k|    }                                                                  \
  |  | 9205|  80.0k|    else {                                                             \
  |  | 9206|  80.0k|        return vis(monostate_val);                                     \
  |  | 9207|  80.0k|    }
  ------------------
 9230|  94.9k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 14.8k, False: 80.0k]
  ------------------
 9231|  94.9k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|  94.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  94.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  94.9k|    }                                                                  \
  |  | 9205|  94.9k|    else {                                                             \
  |  | 9206|  94.9k|        return vis(monostate_val);                                     \
  |  | 9207|  94.9k|    }
  ------------------
 9232|  94.9k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 94.9k]
  ------------------
 9233|  94.9k|            SCN_VISIT(void*);
  ------------------
  |  | 9202|  94.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  94.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  94.9k|    }                                                                  \
  |  | 9205|  94.9k|    else {                                                             \
  |  | 9206|  94.9k|        return vis(monostate_val);                                     \
  |  | 9207|  94.9k|    }
  ------------------
 9234|  94.9k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 94.9k]
  ------------------
 9235|  94.9k|            SCN_VISIT(bool);
  ------------------
  |  | 9202|  94.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  94.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  94.9k|    }                                                                  \
  |  | 9205|  94.9k|    else {                                                             \
  |  | 9206|  94.9k|        return vis(monostate_val);                                     \
  |  | 9207|  94.9k|    }
  ------------------
 9236|  94.9k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 94.9k]
  ------------------
 9237|  94.9k|            SCN_VISIT(char);
  ------------------
  |  | 9202|  94.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  94.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  94.9k|    }                                                                  \
  |  | 9205|  94.9k|    else {                                                             \
  |  | 9206|  94.9k|        return vis(monostate_val);                                     \
  |  | 9207|  94.9k|    }
  ------------------
 9238|  94.9k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 94.9k]
  ------------------
 9239|  94.9k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|  94.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  94.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  94.9k|    }                                                                  \
  |  | 9205|  94.9k|    else {                                                             \
  |  | 9206|  94.9k|        return vis(monostate_val);                                     \
  |  | 9207|  94.9k|    }
  ------------------
 9240|  94.9k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 94.9k]
  ------------------
 9241|  94.9k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|  94.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  94.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  94.9k|    }                                                                  \
  |  | 9205|  94.9k|    else {                                                             \
  |  | 9206|  94.9k|        return vis(monostate_val);                                     \
  |  | 9207|  94.9k|    }
  ------------------
 9242|  94.9k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 94.9k]
  ------------------
 9243|  94.9k|            SCN_VISIT(float);
  ------------------
  |  | 9202|  94.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  94.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  94.9k|    }                                                                  \
  |  | 9205|  94.9k|    else {                                                             \
  |  | 9206|  94.9k|        return vis(monostate_val);                                     \
  |  | 9207|  94.9k|    }
  ------------------
 9244|  94.9k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 94.9k]
  ------------------
 9245|  94.9k|            SCN_VISIT(double);
  ------------------
  |  | 9202|  94.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  94.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  94.9k|    }                                                                  \
  |  | 9205|  94.9k|    else {                                                             \
  |  | 9206|  94.9k|        return vis(monostate_val);                                     \
  |  | 9207|  94.9k|    }
  ------------------
 9246|  94.9k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 94.9k]
  ------------------
 9247|  94.9k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|  94.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  94.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  94.9k|    }                                                                  \
  |  | 9205|  94.9k|    else {                                                             \
  |  | 9206|  94.9k|        return vis(monostate_val);                                     \
  |  | 9207|  94.9k|    }
  ------------------
 9248|  94.9k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 94.9k]
  ------------------
 9249|  94.9k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|  94.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  94.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  94.9k|    }                                                                  \
  |  | 9205|  94.9k|    else {                                                             \
  |  | 9206|  94.9k|        return vis(monostate_val);                                     \
  |  | 9207|  94.9k|    }
  ------------------
 9250|  94.9k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 94.9k]
  ------------------
 9251|  94.9k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|  94.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  94.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  94.9k|    }                                                                  \
  |  | 9205|  94.9k|    else {                                                             \
  |  | 9206|  94.9k|        return vis(monostate_val);                                     \
  |  | 9207|  94.9k|    }
  ------------------
 9252|  94.9k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 94.9k]
  ------------------
 9253|  94.9k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|  94.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  94.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  94.9k|    }                                                                  \
  |  | 9205|  94.9k|    else {                                                             \
  |  | 9206|  94.9k|        return vis(monostate_val);                                     \
  |  | 9207|  94.9k|    }
  ------------------
 9254|  94.9k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 94.9k]
  ------------------
 9255|  94.9k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|  94.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  94.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  94.9k|    }                                                                  \
  |  | 9205|  94.9k|    else {                                                             \
  |  | 9206|  94.9k|        return vis(monostate_val);                                     \
  |  | 9207|  94.9k|    }
  ------------------
 9256|  94.9k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 94.9k]
  ------------------
 9257|  94.9k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|  94.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  94.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  94.9k|    }                                                                  \
  |  | 9205|  94.9k|    else {                                                             \
  |  | 9206|  94.9k|        return vis(monostate_val);                                     \
  |  | 9207|  94.9k|    }
  ------------------
 9258|  94.9k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 94.9k]
  ------------------
 9259|  94.9k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|  94.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  94.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  94.9k|    }                                                                  \
  |  | 9205|  94.9k|    else {                                                             \
  |  | 9206|  94.9k|        return vis(monostate_val);                                     \
  |  | 9207|  94.9k|    }
  ------------------
 9260|       |
 9261|  94.9k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 94.9k]
  ------------------
 9262|  94.9k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  94.9k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  94.9k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 94.9k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 94.9k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  94.9k|            SCN_CLANG_POP
 9279|  94.9k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|   357k|    {
 3075|   357k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   357k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|   357k|    {
 3041|   357k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   357k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   357k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|   357k|{
 7793|   357k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|   357k|    handler.check_args_exhausted();
 7795|   357k|    return handler.get_error();
 7796|   357k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|   357k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|   357k|    auto begin = format.data();
 7761|   357k|    auto it = begin;
 7762|   357k|    const auto end = format.data() + format.size();
 7763|       |
 7764|   640k|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 357k, False: 283k]
  ------------------
 7765|   357k|        const auto ch = *it++;
 7766|   357k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 357k, False: 0]
  ------------------
 7767|   357k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|   357k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|   357k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 74.5k, False: 283k]
  ------------------
 7771|  74.5k|                return;
 7772|  74.5k|            }
 7773|   357k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|   357k|    }
 7784|       |
 7785|   283k|    handler.on_literal_text(begin, end);
 7786|   283k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7689|   357k|{
 7690|   357k|    struct id_adapter {
 7691|   357k|        constexpr void operator()()
 7692|   357k|        {
 7693|   357k|            arg_id = handler.on_arg_id();
 7694|   357k|        }
 7695|   357k|        constexpr void operator()(std::size_t id)
 7696|   357k|        {
 7697|   357k|            arg_id = handler.on_arg_id(id);
 7698|   357k|        }
 7699|       |
 7700|   357k|        constexpr void on_error(const char* msg)
 7701|   357k|        {
 7702|   357k|            SCN_UNLIKELY_ATTR
 7703|   357k|            handler.on_error(msg);
 7704|   357k|        }
 7705|       |
 7706|   357k|        Handler& handler;
 7707|   357k|        std::size_t arg_id;
 7708|   357k|    };
 7709|       |
 7710|   357k|    ++begin;
 7711|   357k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   357k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 357k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|   357k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 357k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|   357k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 357k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|   357k|    else {
 7723|   357k|        auto adapter = id_adapter{handler, 0};
 7724|   357k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|   357k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   357k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 357k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|   357k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 357k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|   357k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 357k, False: 0]
  ------------------
 7735|   357k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   357k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 357k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|   357k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|   357k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   715k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 24.8k, False: 332k]
  |  |  |  Branch (865:45): [True: 0, False: 357k]
  |  |  |  Branch (865:45): [True: 24.8k, False: 332k]
  |  |  ------------------
  ------------------
 7741|  24.8k|                handler.on_error("Unknown format specifier");
 7742|  24.8k|                return begin;
 7743|  24.8k|            }
 7744|   357k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|   357k|    }
 7751|   332k|    return begin + 1;
 7752|   357k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8831|   715k|    {
 8832|   715k|        return m_args.get(id);
 8833|   715k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6285|   715k|    {
 6286|   715k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|   715k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 715k]
  |  |  ------------------
  ------------------
 6287|      0|            on_error(
 6288|      0|                "Cannot switch from manual to automatic argument indexing");
 6289|      0|            return 0;
 6290|      0|        }
 6291|       |
 6292|   715k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6293|   715k|        do_check_arg_id(id);
 6294|   715k|        return id;
 6295|   715k|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6805|   715k|{
 6806|   715k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6806:9): [Folded - Ignored]
  ------------------
 6807|   715k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6807:10): [Folded - Ignored]
  |  Branch (6807:22): [Folded - Ignored]
  ------------------
 6808|       |        // The cast below will cause an error on gcc pre-12
 6809|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6810|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6810:13): [True: 0, False: 0]
  ------------------
 6811|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6812|      0|            SCN_UNLIKELY_ATTR
 6813|      0|            on_error("Argument not found");
 6814|      0|        }
 6815|      0|    }
 6816|   715k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|   357k|{
 7191|   357k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   357k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   357k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|   357k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 357k, False: 0]
  |  Branch (7192:26): [True: 0, False: 357k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|   357k|    handler();
 7197|   357k|    return begin;
 7198|   357k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|   357k|        {
 7693|   357k|            arg_id = handler.on_arg_id();
 7694|   357k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6280|   665k|    {
 6281|   665k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6282|   665k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6269|  1.38M|    {
 6270|  1.38M|        return m_format.data();
 6271|  1.38M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7869|   357k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   357k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7870|   357k|    {
 7871|   357k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   357k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   357k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7872|   357k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7605|   357k|{
 7606|   357k|    auto do_presentation = [&]() -> const CharT* {
 7607|   357k|        if (*begin == CharT{'['}) {
 7608|   357k|            auto set = parse_presentation_set(begin, end, handler);
 7609|   357k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7610|       |                // clang-format off
 7611|   357k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|   357k|                return begin;
 7614|   357k|            }
 7615|   357k|            handler.on_character_set_string(set);
 7616|   357k|            return begin;
 7617|   357k|        }
 7618|   357k|        if (*begin == CharT{'/'}) {
 7619|   357k|            return parse_presentation_regex(begin, end, handler);
 7620|   357k|        }
 7621|   357k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   357k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7623|   357k|            handler.on_error("Invalid type specifier in format string");
 7624|   357k|            return begin;
 7625|   357k|        }
 7626|   357k|        handler.on_type(type);
 7627|   357k|        return begin;
 7628|   357k|    };
 7629|       |
 7630|   357k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7630:9): [True: 357k, False: 0]
  |  Branch (7630:28): [True: 341k, False: 16.5k]
  ------------------
 7631|   357k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7631:9): [True: 332k, False: 8.28k]
  |  Branch (7631:36): [True: 267k, False: 64.9k]
  ------------------
 7632|   267k|        return do_presentation();
 7633|   267k|    }
 7634|       |
 7635|  89.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  89.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 89.7k]
  |  |  ------------------
  ------------------
 7636|      0|        handler.on_error("Unexpected end of format string");
 7637|      0|        return begin;
 7638|      0|    }
 7639|       |
 7640|  89.7k|    begin = parse_align(begin, end, handler);
 7641|  89.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  89.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 89.7k]
  |  |  ------------------
  ------------------
 7642|      0|        handler.on_error("Unexpected end of format string");
 7643|      0|        return begin;
 7644|      0|    }
 7645|       |
 7646|  89.7k|    begin = parse_width(begin, end, handler);
 7647|  89.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  89.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 89.7k]
  |  |  ------------------
  ------------------
 7648|      0|        handler.on_error("Unexpected end of format string");
 7649|      0|        return begin;
 7650|      0|    }
 7651|       |
 7652|  89.7k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7652:9): [True: 0, False: 89.7k]
  ------------------
 7653|      0|        ++begin;
 7654|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7655|      0|            handler.on_error("Unexpected end of format string");
 7656|      0|            return begin;
 7657|      0|        }
 7658|      0|        begin = parse_precision(begin, end, handler);
 7659|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7660|      0|            handler.on_error("Unexpected end of format string");
 7661|      0|            return begin;
 7662|      0|        }
 7663|      0|    }
 7664|       |
 7665|  89.7k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7665:9): [True: 64.9k, False: 24.8k]
  ------------------
 7666|  64.9k|        handler.on_localized();
 7667|  64.9k|        ++begin;
 7668|  64.9k|    }
 7669|  89.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  89.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 89.7k]
  |  |  ------------------
  ------------------
 7670|      0|        handler.on_error("Unexpected end of format string");
 7671|      0|        return begin;
 7672|      0|    }
 7673|       |
 7674|  89.7k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7674:9): [True: 89.7k, False: 0]
  |  Branch (7674:25): [True: 24.8k, False: 64.9k]
  ------------------
 7675|  24.8k|        do_presentation();
 7676|  24.8k|    }
 7677|  89.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  89.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 89.7k]
  |  |  ------------------
  ------------------
 7678|      0|        handler.on_error("Unexpected end of format string");
 7679|      0|        return begin;
 7680|      0|    }
 7681|       |
 7682|  89.7k|    return begin;
 7683|  89.7k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 7254|   682k|{
 7255|   682k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7255:13): [True: 535k, False: 146k]
  |  Branch (7255:33): [True: 535k, False: 0]
  ------------------
 7256|   682k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7256:13): [True: 129k, False: 16.5k]
  |  Branch (7256:33): [True: 129k, False: 0]
  ------------------
 7257|   682k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7606|   292k|    auto do_presentation = [&]() -> const CharT* {
 7607|   292k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7607:13): [True: 0, False: 292k]
  ------------------
 7608|      0|            auto set = parse_presentation_set(begin, end, handler);
 7609|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7610|       |                // clang-format off
 7611|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|      0|                return begin;
 7614|      0|            }
 7615|      0|            handler.on_character_set_string(set);
 7616|      0|            return begin;
 7617|      0|        }
 7618|   292k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7618:13): [True: 0, False: 292k]
  ------------------
 7619|      0|            return parse_presentation_regex(begin, end, handler);
 7620|      0|        }
 7621|   292k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   292k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   292k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16.5k, False: 276k]
  |  |  ------------------
  ------------------
 7623|  16.5k|            handler.on_error("Invalid type specifier in format string");
 7624|  16.5k|            return begin;
 7625|  16.5k|        }
 7626|   276k|        handler.on_type(type);
 7627|   276k|        return begin;
 7628|   292k|    };
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 7202|   585k|{
 7203|   585k|    switch (type) {
 7204|  44.7k|        case 'b':
  ------------------
  |  Branch (7204:9): [True: 44.7k, False: 540k]
  ------------------
 7205|  61.3k|        case 'B':
  ------------------
  |  Branch (7205:9): [True: 16.5k, False: 569k]
  ------------------
 7206|  61.3k|            return presentation_type::int_binary;
 7207|   128k|        case 'd':
  ------------------
  |  Branch (7207:9): [True: 128k, False: 457k]
  ------------------
 7208|   128k|            return presentation_type::int_decimal;
 7209|   146k|        case 'i':
  ------------------
  |  Branch (7209:9): [True: 146k, False: 439k]
  ------------------
 7210|   146k|            return presentation_type::int_generic;
 7211|      0|        case 'u':
  ------------------
  |  Branch (7211:9): [True: 0, False: 585k]
  ------------------
 7212|      0|            return presentation_type::int_unsigned_decimal;
 7213|  80.4k|        case 'o':
  ------------------
  |  Branch (7213:9): [True: 80.4k, False: 505k]
  ------------------
 7214|  80.4k|            return presentation_type::int_octal;
 7215|   136k|        case 'x':
  ------------------
  |  Branch (7215:9): [True: 136k, False: 449k]
  ------------------
 7216|   136k|        case 'X':
  ------------------
  |  Branch (7216:9): [True: 0, False: 585k]
  ------------------
 7217|   136k|            return presentation_type::int_hex;
 7218|      0|        case 'r':
  ------------------
  |  Branch (7218:9): [True: 0, False: 585k]
  ------------------
 7219|      0|        case 'R':
  ------------------
  |  Branch (7219:9): [True: 0, False: 585k]
  ------------------
 7220|      0|            return presentation_type::int_arbitrary_base;
 7221|      0|        case 'a':
  ------------------
  |  Branch (7221:9): [True: 0, False: 585k]
  ------------------
 7222|      0|        case 'A':
  ------------------
  |  Branch (7222:9): [True: 0, False: 585k]
  ------------------
 7223|      0|            return presentation_type::float_hex;
 7224|      0|        case 'e':
  ------------------
  |  Branch (7224:9): [True: 0, False: 585k]
  ------------------
 7225|      0|        case 'E':
  ------------------
  |  Branch (7225:9): [True: 0, False: 585k]
  ------------------
 7226|      0|            return presentation_type::float_scientific;
 7227|      0|        case 'f':
  ------------------
  |  Branch (7227:9): [True: 0, False: 585k]
  ------------------
 7228|      0|        case 'F':
  ------------------
  |  Branch (7228:9): [True: 0, False: 585k]
  ------------------
 7229|      0|            return presentation_type::float_fixed;
 7230|      0|        case 'g':
  ------------------
  |  Branch (7230:9): [True: 0, False: 585k]
  ------------------
 7231|      0|        case 'G':
  ------------------
  |  Branch (7231:9): [True: 0, False: 585k]
  ------------------
 7232|      0|            return presentation_type::float_general;
 7233|      0|        case 's':
  ------------------
  |  Branch (7233:9): [True: 0, False: 585k]
  ------------------
 7234|      0|            return presentation_type::string;
 7235|      0|        case 'c':
  ------------------
  |  Branch (7235:9): [True: 0, False: 585k]
  ------------------
 7236|      0|            return presentation_type::character;
 7237|      0|        case '?':
  ------------------
  |  Branch (7237:9): [True: 0, False: 585k]
  ------------------
 7238|      0|            return presentation_type::escaped_character;
 7239|      0|        case 'p':
  ------------------
  |  Branch (7239:9): [True: 0, False: 585k]
  ------------------
 7240|      0|            return presentation_type::pointer;
 7241|      0|        case '[':
  ------------------
  |  Branch (7241:9): [True: 0, False: 585k]
  ------------------
 7242|      0|        case '/':
  ------------------
  |  Branch (7242:9): [True: 0, False: 585k]
  ------------------
 7243|       |            // Should be handled by parse_presentation_set and
 7244|       |            // parse_presentation_regex
 7245|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7246|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7247|  33.1k|        default:
  ------------------
  |  Branch (7247:9): [True: 33.1k, False: 552k]
  ------------------
 7248|  33.1k|            return presentation_type::none;
 7249|   585k|    }
 7250|   585k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7279|  89.7k|{
 7280|  89.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  89.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  89.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7281|       |
 7282|  89.7k|    auto check_align = [](wchar_t ch) {
 7283|  89.7k|        switch (ch) {
 7284|  89.7k|            case L'<':
 7285|  89.7k|                return align_type::left;
 7286|  89.7k|            case L'>':
 7287|  89.7k|                return align_type::right;
 7288|  89.7k|            case L'^':
 7289|  89.7k|                return align_type::center;
 7290|  89.7k|            default:
 7291|  89.7k|                return align_type::none;
 7292|  89.7k|        }
 7293|  89.7k|    };
 7294|       |
 7295|  89.7k|    auto potential_fill_len = code_point_length(begin, end);
 7296|  89.7k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 89.7k]
  |  |  |  Branch (865:45): [True: 0, False: 89.7k]
  |  |  |  Branch (865:45): [True: 0, False: 89.7k]
  |  |  ------------------
  ------------------
 7297|  89.7k|                     std::distance(begin, end) < potential_fill_len)) {
 7298|      0|        handler.on_error("Invalid encoding in fill character");
 7299|      0|        return begin;
 7300|      0|    }
 7301|       |
 7302|  89.7k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7303|       |
 7304|  89.7k|    auto potential_fill = std::basic_string_view<CharT>{
 7305|  89.7k|        begin, static_cast<size_t>(potential_fill_len)};
 7306|  89.7k|    const auto begin_before_fill = begin;
 7307|  89.7k|    begin += potential_fill_len;
 7308|       |
 7309|  89.7k|    if (begin == end) {
  ------------------
  |  Branch (7309:9): [True: 0, False: 89.7k]
  ------------------
 7310|      0|        return begin_before_fill;
 7311|      0|    }
 7312|       |
 7313|  89.7k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7314|  89.7k|    const auto begin_after_fill = begin;
 7315|  89.7k|    ++begin;
 7316|       |
 7317|  89.7k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7317:9): [True: 89.7k, False: 0]
  ------------------
 7318|  89.7k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  89.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 89.7k]
  |  |  ------------------
  ------------------
 7319|      0|            handler.on_error("Invalid fill character '{' in format string");
 7320|      0|            return begin;
 7321|      0|        }
 7322|  89.7k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7322:13): [True: 0, False: 89.7k]
  ------------------
 7323|      0|            return begin_before_fill;
 7324|      0|        }
 7325|  89.7k|    }
 7326|       |
 7327|  89.7k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7327:9): [True: 89.7k, False: 0]
  ------------------
 7328|  89.7k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7328:13): [True: 0, False: 89.7k]
  ------------------
 7329|      0|            handler.on_align(potential_align_on_fill);
 7330|      0|            return begin_after_fill;
 7331|      0|        }
 7332|  89.7k|        return begin_before_fill;
 7333|  89.7k|    }
 7334|       |
 7335|      0|    handler.on_fill(potential_fill);
 7336|      0|    handler.on_align(potential_align_after_fill);
 7337|      0|    return begin;
 7338|  89.7k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 7261|   179k|{
 7262|   179k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   179k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   179k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7263|       |    if constexpr (sizeof(CharT) != 1) {
 7264|       |        return 1;
 7265|       |    }
 7266|   179k|    else {
 7267|   179k|        const auto lengths =
 7268|   179k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7269|   179k|            "\3\4";
 7270|   179k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7271|   179k|        return len;
 7272|   179k|    }
 7273|   179k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7282|   179k|    auto check_align = [](wchar_t ch) {
 7283|   179k|        switch (ch) {
 7284|      0|            case L'<':
  ------------------
  |  Branch (7284:13): [True: 0, False: 179k]
  ------------------
 7285|      0|                return align_type::left;
 7286|      0|            case L'>':
  ------------------
  |  Branch (7286:13): [True: 0, False: 179k]
  ------------------
 7287|      0|                return align_type::right;
 7288|      0|            case L'^':
  ------------------
  |  Branch (7288:13): [True: 0, False: 179k]
  ------------------
 7289|      0|                return align_type::center;
 7290|   179k|            default:
  ------------------
  |  Branch (7290:13): [True: 179k, False: 0]
  ------------------
 7291|   179k|                return align_type::none;
 7292|   179k|        }
 7293|   179k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7344|  89.7k|{
 7345|  89.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  89.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  89.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7346|       |
 7347|  89.7k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7347:9): [True: 73.2k, False: 16.5k]
  |  Branch (7347:33): [True: 0, False: 73.2k]
  ------------------
 7348|      0|        int width = parse_simple_int(begin, end);
 7349|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7350|      0|            handler.on_width(width);
 7351|      0|        }
 7352|      0|        else {
 7353|      0|            handler.on_error("Invalid field width");
 7354|      0|            return begin;
 7355|      0|        }
 7356|      0|    }
 7357|  89.7k|    return begin;
 7358|  89.7k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 7875|  64.9k|    {
 7876|  64.9k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7877|  64.9k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7877:13): [True: 28.9k, False: 36.0k]
  ------------------
 7878|  64.9k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7878:13): [True: 0, False: 28.9k]
  ------------------
 7879|  64.9k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7879:13): [True: 0, False: 0]
  ------------------
 7880|  64.9k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7880:13): [True: 0, False: 0]
  ------------------
 7881|      0|            SCN_UNLIKELY_ATTR
 7882|       |            // clang-format off
 7883|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7884|       |            // clang-format on
 7885|      0|        }
 7886|       |
 7887|  64.9k|        Handler::on_localized();
 7888|  64.9k|    }
_ZN3scn2v46detail12specs_setter12on_localizedILb1EEEvv:
 7024|   180k|    {
 7025|   180k|        if constexpr (!SCN_DISABLE_LOCALE) {
 7026|   180k|            m_specs.localized = true;
 7027|       |        }
 7028|       |        else {
 7029|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 7030|       |        }
 7031|   180k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9299|   332k|{
 9300|   332k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   332k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   332k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   332k|{
 9201|   332k|#define SCN_VISIT(Type)                                                \
 9202|   332k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   332k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   332k|    }                                                                  \
 9205|   332k|    else {                                                             \
 9206|   332k|        return vis(monostate_val);                                     \
 9207|   332k|    }
 9208|       |
 9209|   332k|    monostate monostate_val{};
 9210|       |
 9211|   332k|    switch (get_arg_type(arg)) {
 9212|  53.6k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 53.6k, False: 279k]
  ------------------
 9213|  53.6k|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|  53.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  53.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  53.6k|    }                                                                  \
  |  | 9205|  53.6k|    else {                                                             \
  |  | 9206|  53.6k|        return vis(monostate_val);                                     \
  |  | 9207|  53.6k|    }
  ------------------
 9214|  53.6k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 332k]
  ------------------
 9215|  53.6k|            SCN_VISIT(short);
  ------------------
  |  | 9202|  53.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  53.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  53.6k|    }                                                                  \
  |  | 9205|  53.6k|    else {                                                             \
  |  | 9206|  53.6k|        return vis(monostate_val);                                     \
  |  | 9207|  53.6k|    }
  ------------------
 9216|   117k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 63.6k, False: 269k]
  ------------------
 9217|   117k|            SCN_VISIT(int);
  ------------------
  |  | 9202|   117k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   117k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   117k|    }                                                                  \
  |  | 9205|   117k|    else {                                                             \
  |  | 9206|   117k|        return vis(monostate_val);                                     \
  |  | 9207|   117k|    }
  ------------------
 9218|   117k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 332k]
  ------------------
 9219|   117k|            SCN_VISIT(long);
  ------------------
  |  | 9202|   117k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   117k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   117k|    }                                                                  \
  |  | 9205|   117k|    else {                                                             \
  |  | 9206|   117k|        return vis(monostate_val);                                     \
  |  | 9207|   117k|    }
  ------------------
 9220|   182k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 64.7k, False: 267k]
  ------------------
 9221|   182k|            SCN_VISIT(long long);
  ------------------
  |  | 9202|   182k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   182k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   182k|    }                                                                  \
  |  | 9205|   182k|    else {                                                             \
  |  | 9206|   182k|        return vis(monostate_val);                                     \
  |  | 9207|   182k|    }
  ------------------
 9222|   229k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 47.2k, False: 285k]
  ------------------
 9223|   229k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|   229k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   229k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   229k|    }                                                                  \
  |  | 9205|   229k|    else {                                                             \
  |  | 9206|   229k|        return vis(monostate_val);                                     \
  |  | 9207|   229k|    }
  ------------------
 9224|   229k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 332k]
  ------------------
 9225|   229k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|   229k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   229k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   229k|    }                                                                  \
  |  | 9205|   229k|    else {                                                             \
  |  | 9206|   229k|        return vis(monostate_val);                                     \
  |  | 9207|   229k|    }
  ------------------
 9226|   280k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 51.4k, False: 281k]
  ------------------
 9227|   280k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|   280k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   280k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   280k|    }                                                                  \
  |  | 9205|   280k|    else {                                                             \
  |  | 9206|   280k|        return vis(monostate_val);                                     \
  |  | 9207|   280k|    }
  ------------------
 9228|   280k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 332k]
  ------------------
 9229|   280k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|   280k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   280k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   280k|    }                                                                  \
  |  | 9205|   280k|    else {                                                             \
  |  | 9206|   280k|        return vis(monostate_val);                                     \
  |  | 9207|   280k|    }
  ------------------
 9230|   332k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 52.0k, False: 280k]
  ------------------
 9231|   332k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|   332k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   332k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   332k|    }                                                                  \
  |  | 9205|   332k|    else {                                                             \
  |  | 9206|   332k|        return vis(monostate_val);                                     \
  |  | 9207|   332k|    }
  ------------------
 9232|   332k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 332k]
  ------------------
 9233|   332k|            SCN_VISIT(void*);
  ------------------
  |  | 9202|   332k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   332k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   332k|    }                                                                  \
  |  | 9205|   332k|    else {                                                             \
  |  | 9206|   332k|        return vis(monostate_val);                                     \
  |  | 9207|   332k|    }
  ------------------
 9234|   332k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 332k]
  ------------------
 9235|   332k|            SCN_VISIT(bool);
  ------------------
  |  | 9202|   332k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   332k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   332k|    }                                                                  \
  |  | 9205|   332k|    else {                                                             \
  |  | 9206|   332k|        return vis(monostate_val);                                     \
  |  | 9207|   332k|    }
  ------------------
 9236|   332k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 332k]
  ------------------
 9237|   332k|            SCN_VISIT(char);
  ------------------
  |  | 9202|   332k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   332k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   332k|    }                                                                  \
  |  | 9205|   332k|    else {                                                             \
  |  | 9206|   332k|        return vis(monostate_val);                                     \
  |  | 9207|   332k|    }
  ------------------
 9238|   332k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 332k]
  ------------------
 9239|   332k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|   332k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   332k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   332k|    }                                                                  \
  |  | 9205|   332k|    else {                                                             \
  |  | 9206|   332k|        return vis(monostate_val);                                     \
  |  | 9207|   332k|    }
  ------------------
 9240|   332k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 332k]
  ------------------
 9241|   332k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|   332k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   332k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   332k|    }                                                                  \
  |  | 9205|   332k|    else {                                                             \
  |  | 9206|   332k|        return vis(monostate_val);                                     \
  |  | 9207|   332k|    }
  ------------------
 9242|   332k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 332k]
  ------------------
 9243|   332k|            SCN_VISIT(float);
  ------------------
  |  | 9202|   332k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   332k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   332k|    }                                                                  \
  |  | 9205|   332k|    else {                                                             \
  |  | 9206|   332k|        return vis(monostate_val);                                     \
  |  | 9207|   332k|    }
  ------------------
 9244|   332k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 332k]
  ------------------
 9245|   332k|            SCN_VISIT(double);
  ------------------
  |  | 9202|   332k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   332k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   332k|    }                                                                  \
  |  | 9205|   332k|    else {                                                             \
  |  | 9206|   332k|        return vis(monostate_val);                                     \
  |  | 9207|   332k|    }
  ------------------
 9246|   332k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 332k]
  ------------------
 9247|   332k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|   332k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   332k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   332k|    }                                                                  \
  |  | 9205|   332k|    else {                                                             \
  |  | 9206|   332k|        return vis(monostate_val);                                     \
  |  | 9207|   332k|    }
  ------------------
 9248|   332k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 332k]
  ------------------
 9249|   332k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|   332k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   332k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   332k|    }                                                                  \
  |  | 9205|   332k|    else {                                                             \
  |  | 9206|   332k|        return vis(monostate_val);                                     \
  |  | 9207|   332k|    }
  ------------------
 9250|   332k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 332k]
  ------------------
 9251|   332k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|   332k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   332k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   332k|    }                                                                  \
  |  | 9205|   332k|    else {                                                             \
  |  | 9206|   332k|        return vis(monostate_val);                                     \
  |  | 9207|   332k|    }
  ------------------
 9252|   332k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 332k]
  ------------------
 9253|   332k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|   332k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   332k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   332k|    }                                                                  \
  |  | 9205|   332k|    else {                                                             \
  |  | 9206|   332k|        return vis(monostate_val);                                     \
  |  | 9207|   332k|    }
  ------------------
 9254|   332k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 332k]
  ------------------
 9255|   332k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|   332k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   332k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   332k|    }                                                                  \
  |  | 9205|   332k|    else {                                                             \
  |  | 9206|   332k|        return vis(monostate_val);                                     \
  |  | 9207|   332k|    }
  ------------------
 9256|   332k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 332k]
  ------------------
 9257|   332k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|   332k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   332k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   332k|    }                                                                  \
  |  | 9205|   332k|    else {                                                             \
  |  | 9206|   332k|        return vis(monostate_val);                                     \
  |  | 9207|   332k|    }
  ------------------
 9258|   332k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 332k]
  ------------------
 9259|   332k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|   332k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   332k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   332k|    }                                                                  \
  |  | 9205|   332k|    else {                                                             \
  |  | 9206|   332k|        return vis(monostate_val);                                     \
  |  | 9207|   332k|    }
  ------------------
 9260|       |
 9261|   332k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 332k]
  ------------------
 9262|   332k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   332k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   332k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 332k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 332k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   332k|            SCN_CLANG_POP
 9279|   332k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|   358k|{
 7793|   358k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|   358k|    handler.check_args_exhausted();
 7795|   358k|    return handler.get_error();
 7796|   358k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|   358k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|   358k|    auto begin = format.data();
 7761|   358k|    auto it = begin;
 7762|   358k|    const auto end = format.data() + format.size();
 7763|       |
 7764|   641k|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 358k, False: 283k]
  ------------------
 7765|   358k|        const auto ch = *it++;
 7766|   358k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 358k, False: 0]
  ------------------
 7767|   358k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|   358k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|   358k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 74.5k, False: 283k]
  ------------------
 7771|  74.5k|                return;
 7772|  74.5k|            }
 7773|   358k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|   358k|    }
 7784|       |
 7785|   283k|    handler.on_literal_text(begin, end);
 7786|   283k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 8970|   283k|    {
 8971|   283k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   283k|    static_cast<    \
  |  |  935|   283k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8972|   283k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7689|   358k|{
 7690|   358k|    struct id_adapter {
 7691|   358k|        constexpr void operator()()
 7692|   358k|        {
 7693|   358k|            arg_id = handler.on_arg_id();
 7694|   358k|        }
 7695|   358k|        constexpr void operator()(std::size_t id)
 7696|   358k|        {
 7697|   358k|            arg_id = handler.on_arg_id(id);
 7698|   358k|        }
 7699|       |
 7700|   358k|        constexpr void on_error(const char* msg)
 7701|   358k|        {
 7702|   358k|            SCN_UNLIKELY_ATTR
 7703|   358k|            handler.on_error(msg);
 7704|   358k|        }
 7705|       |
 7706|   358k|        Handler& handler;
 7707|   358k|        std::size_t arg_id;
 7708|   358k|    };
 7709|       |
 7710|   358k|    ++begin;
 7711|   358k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   358k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 358k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|   358k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 358k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|   358k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 358k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|   358k|    else {
 7723|   358k|        auto adapter = id_adapter{handler, 0};
 7724|   358k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|   358k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   358k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 358k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|   358k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 358k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|   358k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 358k, False: 0]
  ------------------
 7735|   358k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   358k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 358k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|   358k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|   358k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   716k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 24.8k, False: 333k]
  |  |  |  Branch (865:45): [True: 0, False: 358k]
  |  |  |  Branch (865:45): [True: 24.8k, False: 333k]
  |  |  ------------------
  ------------------
 7741|  24.8k|                handler.on_error("Unknown format specifier");
 7742|  24.8k|                return begin;
 7743|  24.8k|            }
 7744|   358k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|   358k|    }
 7751|   333k|    return begin + 1;
 7752|   358k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|   358k|{
 7191|   358k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   358k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   358k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|   358k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 358k, False: 0]
  |  Branch (7192:26): [True: 0, False: 358k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|   358k|    handler();
 7197|   358k|    return begin;
 7198|   358k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|   358k|        {
 7693|   358k|            arg_id = handler.on_arg_id();
 7694|   358k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7869|   358k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   358k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7870|   358k|    {
 7871|   358k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   358k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   358k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7872|   358k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7605|   358k|{
 7606|   358k|    auto do_presentation = [&]() -> const CharT* {
 7607|   358k|        if (*begin == CharT{'['}) {
 7608|   358k|            auto set = parse_presentation_set(begin, end, handler);
 7609|   358k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7610|       |                // clang-format off
 7611|   358k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|   358k|                return begin;
 7614|   358k|            }
 7615|   358k|            handler.on_character_set_string(set);
 7616|   358k|            return begin;
 7617|   358k|        }
 7618|   358k|        if (*begin == CharT{'/'}) {
 7619|   358k|            return parse_presentation_regex(begin, end, handler);
 7620|   358k|        }
 7621|   358k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   358k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7623|   358k|            handler.on_error("Invalid type specifier in format string");
 7624|   358k|            return begin;
 7625|   358k|        }
 7626|   358k|        handler.on_type(type);
 7627|   358k|        return begin;
 7628|   358k|    };
 7629|       |
 7630|   358k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7630:9): [True: 358k, False: 0]
  |  Branch (7630:28): [True: 341k, False: 16.5k]
  ------------------
 7631|   358k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7631:9): [True: 333k, False: 8.28k]
  |  Branch (7631:36): [True: 268k, False: 65.0k]
  ------------------
 7632|   268k|        return do_presentation();
 7633|   268k|    }
 7634|       |
 7635|  89.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  89.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 89.8k]
  |  |  ------------------
  ------------------
 7636|      0|        handler.on_error("Unexpected end of format string");
 7637|      0|        return begin;
 7638|      0|    }
 7639|       |
 7640|  89.8k|    begin = parse_align(begin, end, handler);
 7641|  89.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  89.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 89.8k]
  |  |  ------------------
  ------------------
 7642|      0|        handler.on_error("Unexpected end of format string");
 7643|      0|        return begin;
 7644|      0|    }
 7645|       |
 7646|  89.8k|    begin = parse_width(begin, end, handler);
 7647|  89.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  89.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 89.8k]
  |  |  ------------------
  ------------------
 7648|      0|        handler.on_error("Unexpected end of format string");
 7649|      0|        return begin;
 7650|      0|    }
 7651|       |
 7652|  89.8k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7652:9): [True: 0, False: 89.8k]
  ------------------
 7653|      0|        ++begin;
 7654|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7655|      0|            handler.on_error("Unexpected end of format string");
 7656|      0|            return begin;
 7657|      0|        }
 7658|      0|        begin = parse_precision(begin, end, handler);
 7659|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7660|      0|            handler.on_error("Unexpected end of format string");
 7661|      0|            return begin;
 7662|      0|        }
 7663|      0|    }
 7664|       |
 7665|  89.8k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7665:9): [True: 65.0k, False: 24.8k]
  ------------------
 7666|  65.0k|        handler.on_localized();
 7667|  65.0k|        ++begin;
 7668|  65.0k|    }
 7669|  89.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  89.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 89.8k]
  |  |  ------------------
  ------------------
 7670|      0|        handler.on_error("Unexpected end of format string");
 7671|      0|        return begin;
 7672|      0|    }
 7673|       |
 7674|  89.8k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7674:9): [True: 89.8k, False: 0]
  |  Branch (7674:25): [True: 24.8k, False: 65.0k]
  ------------------
 7675|  24.8k|        do_presentation();
 7676|  24.8k|    }
 7677|  89.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  89.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 89.8k]
  |  |  ------------------
  ------------------
 7678|      0|        handler.on_error("Unexpected end of format string");
 7679|      0|        return begin;
 7680|      0|    }
 7681|       |
 7682|  89.8k|    return begin;
 7683|  89.8k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7606|   293k|    auto do_presentation = [&]() -> const CharT* {
 7607|   293k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7607:13): [True: 0, False: 293k]
  ------------------
 7608|      0|            auto set = parse_presentation_set(begin, end, handler);
 7609|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7610|       |                // clang-format off
 7611|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|      0|                return begin;
 7614|      0|            }
 7615|      0|            handler.on_character_set_string(set);
 7616|      0|            return begin;
 7617|      0|        }
 7618|   293k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7618:13): [True: 0, False: 293k]
  ------------------
 7619|      0|            return parse_presentation_regex(begin, end, handler);
 7620|      0|        }
 7621|   293k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   293k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   293k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16.5k, False: 276k]
  |  |  ------------------
  ------------------
 7623|  16.5k|            handler.on_error("Invalid type specifier in format string");
 7624|  16.5k|            return begin;
 7625|  16.5k|        }
 7626|   276k|        handler.on_type(type);
 7627|   276k|        return begin;
 7628|   293k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7279|  89.8k|{
 7280|  89.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  89.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  89.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7281|       |
 7282|  89.8k|    auto check_align = [](wchar_t ch) {
 7283|  89.8k|        switch (ch) {
 7284|  89.8k|            case L'<':
 7285|  89.8k|                return align_type::left;
 7286|  89.8k|            case L'>':
 7287|  89.8k|                return align_type::right;
 7288|  89.8k|            case L'^':
 7289|  89.8k|                return align_type::center;
 7290|  89.8k|            default:
 7291|  89.8k|                return align_type::none;
 7292|  89.8k|        }
 7293|  89.8k|    };
 7294|       |
 7295|  89.8k|    auto potential_fill_len = code_point_length(begin, end);
 7296|  89.8k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 89.8k]
  |  |  |  Branch (865:45): [True: 0, False: 89.8k]
  |  |  |  Branch (865:45): [True: 0, False: 89.8k]
  |  |  ------------------
  ------------------
 7297|  89.8k|                     std::distance(begin, end) < potential_fill_len)) {
 7298|      0|        handler.on_error("Invalid encoding in fill character");
 7299|      0|        return begin;
 7300|      0|    }
 7301|       |
 7302|  89.8k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7303|       |
 7304|  89.8k|    auto potential_fill = std::basic_string_view<CharT>{
 7305|  89.8k|        begin, static_cast<size_t>(potential_fill_len)};
 7306|  89.8k|    const auto begin_before_fill = begin;
 7307|  89.8k|    begin += potential_fill_len;
 7308|       |
 7309|  89.8k|    if (begin == end) {
  ------------------
  |  Branch (7309:9): [True: 0, False: 89.8k]
  ------------------
 7310|      0|        return begin_before_fill;
 7311|      0|    }
 7312|       |
 7313|  89.8k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7314|  89.8k|    const auto begin_after_fill = begin;
 7315|  89.8k|    ++begin;
 7316|       |
 7317|  89.8k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7317:9): [True: 89.8k, False: 0]
  ------------------
 7318|  89.8k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  89.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 89.8k]
  |  |  ------------------
  ------------------
 7319|      0|            handler.on_error("Invalid fill character '{' in format string");
 7320|      0|            return begin;
 7321|      0|        }
 7322|  89.8k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7322:13): [True: 0, False: 89.8k]
  ------------------
 7323|      0|            return begin_before_fill;
 7324|      0|        }
 7325|  89.8k|    }
 7326|       |
 7327|  89.8k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7327:9): [True: 89.8k, False: 0]
  ------------------
 7328|  89.8k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7328:13): [True: 0, False: 89.8k]
  ------------------
 7329|      0|            handler.on_align(potential_align_on_fill);
 7330|      0|            return begin_after_fill;
 7331|      0|        }
 7332|  89.8k|        return begin_before_fill;
 7333|  89.8k|    }
 7334|       |
 7335|      0|    handler.on_fill(potential_fill);
 7336|      0|    handler.on_align(potential_align_after_fill);
 7337|      0|    return begin;
 7338|  89.8k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7282|   179k|    auto check_align = [](wchar_t ch) {
 7283|   179k|        switch (ch) {
 7284|      0|            case L'<':
  ------------------
  |  Branch (7284:13): [True: 0, False: 179k]
  ------------------
 7285|      0|                return align_type::left;
 7286|      0|            case L'>':
  ------------------
  |  Branch (7286:13): [True: 0, False: 179k]
  ------------------
 7287|      0|                return align_type::right;
 7288|      0|            case L'^':
  ------------------
  |  Branch (7288:13): [True: 0, False: 179k]
  ------------------
 7289|      0|                return align_type::center;
 7290|   179k|            default:
  ------------------
  |  Branch (7290:13): [True: 179k, False: 0]
  ------------------
 7291|   179k|                return align_type::none;
 7292|   179k|        }
 7293|   179k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7344|  89.8k|{
 7345|  89.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  89.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  89.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7346|       |
 7347|  89.8k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7347:9): [True: 73.3k, False: 16.5k]
  |  Branch (7347:33): [True: 0, False: 73.3k]
  ------------------
 7348|      0|        int width = parse_simple_int(begin, end);
 7349|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7350|      0|            handler.on_width(width);
 7351|      0|        }
 7352|      0|        else {
 7353|      0|            handler.on_error("Invalid field width");
 7354|      0|            return begin;
 7355|      0|        }
 7356|      0|    }
 7357|  89.8k|    return begin;
 7358|  89.8k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE12on_localizedEv:
 7875|  65.0k|    {
 7876|  65.0k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7877|  65.0k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7877:13): [True: 28.9k, False: 36.0k]
  ------------------
 7878|  65.0k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7878:13): [True: 0, False: 28.9k]
  ------------------
 7879|  65.0k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7879:13): [True: 0, False: 0]
  ------------------
 7880|  65.0k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7880:13): [True: 0, False: 0]
  ------------------
 7881|      0|            SCN_UNLIKELY_ATTR
 7882|       |            // clang-format off
 7883|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7884|       |            // clang-format on
 7885|      0|        }
 7886|       |
 7887|  65.0k|        Handler::on_localized();
 7888|  65.0k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9299|   333k|{
 9300|   333k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   333k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   333k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   333k|{
 9201|   333k|#define SCN_VISIT(Type)                                                \
 9202|   333k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   333k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   333k|    }                                                                  \
 9205|   333k|    else {                                                             \
 9206|   333k|        return vis(monostate_val);                                     \
 9207|   333k|    }
 9208|       |
 9209|   333k|    monostate monostate_val{};
 9210|       |
 9211|   333k|    switch (get_arg_type(arg)) {
 9212|  53.6k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 53.6k, False: 279k]
  ------------------
 9213|  53.6k|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|  53.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  53.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  53.6k|    }                                                                  \
  |  | 9205|  53.6k|    else {                                                             \
  |  | 9206|  53.6k|        return vis(monostate_val);                                     \
  |  | 9207|  53.6k|    }
  ------------------
 9214|  53.6k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 333k]
  ------------------
 9215|  53.6k|            SCN_VISIT(short);
  ------------------
  |  | 9202|  53.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  53.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  53.6k|    }                                                                  \
  |  | 9205|  53.6k|    else {                                                             \
  |  | 9206|  53.6k|        return vis(monostate_val);                                     \
  |  | 9207|  53.6k|    }
  ------------------
 9216|   117k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 63.7k, False: 269k]
  ------------------
 9217|   117k|            SCN_VISIT(int);
  ------------------
  |  | 9202|   117k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   117k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   117k|    }                                                                  \
  |  | 9205|   117k|    else {                                                             \
  |  | 9206|   117k|        return vis(monostate_val);                                     \
  |  | 9207|   117k|    }
  ------------------
 9218|   117k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 333k]
  ------------------
 9219|   117k|            SCN_VISIT(long);
  ------------------
  |  | 9202|   117k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   117k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   117k|    }                                                                  \
  |  | 9205|   117k|    else {                                                             \
  |  | 9206|   117k|        return vis(monostate_val);                                     \
  |  | 9207|   117k|    }
  ------------------
 9220|   182k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 64.8k, False: 268k]
  ------------------
 9221|   182k|            SCN_VISIT(long long);
  ------------------
  |  | 9202|   182k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   182k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   182k|    }                                                                  \
  |  | 9205|   182k|    else {                                                             \
  |  | 9206|   182k|        return vis(monostate_val);                                     \
  |  | 9207|   182k|    }
  ------------------
 9222|   229k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 47.3k, False: 285k]
  ------------------
 9223|   229k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|   229k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   229k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   229k|    }                                                                  \
  |  | 9205|   229k|    else {                                                             \
  |  | 9206|   229k|        return vis(monostate_val);                                     \
  |  | 9207|   229k|    }
  ------------------
 9224|   229k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 333k]
  ------------------
 9225|   229k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|   229k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   229k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   229k|    }                                                                  \
  |  | 9205|   229k|    else {                                                             \
  |  | 9206|   229k|        return vis(monostate_val);                                     \
  |  | 9207|   229k|    }
  ------------------
 9226|   281k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 51.5k, False: 281k]
  ------------------
 9227|   281k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|   281k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   281k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   281k|    }                                                                  \
  |  | 9205|   281k|    else {                                                             \
  |  | 9206|   281k|        return vis(monostate_val);                                     \
  |  | 9207|   281k|    }
  ------------------
 9228|   281k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 333k]
  ------------------
 9229|   281k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|   281k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   281k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   281k|    }                                                                  \
  |  | 9205|   281k|    else {                                                             \
  |  | 9206|   281k|        return vis(monostate_val);                                     \
  |  | 9207|   281k|    }
  ------------------
 9230|   333k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 52.0k, False: 281k]
  ------------------
 9231|   333k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|   333k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   333k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   333k|    }                                                                  \
  |  | 9205|   333k|    else {                                                             \
  |  | 9206|   333k|        return vis(monostate_val);                                     \
  |  | 9207|   333k|    }
  ------------------
 9232|   333k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 333k]
  ------------------
 9233|   333k|            SCN_VISIT(void*);
  ------------------
  |  | 9202|   333k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   333k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   333k|    }                                                                  \
  |  | 9205|   333k|    else {                                                             \
  |  | 9206|   333k|        return vis(monostate_val);                                     \
  |  | 9207|   333k|    }
  ------------------
 9234|   333k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 333k]
  ------------------
 9235|   333k|            SCN_VISIT(bool);
  ------------------
  |  | 9202|   333k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   333k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   333k|    }                                                                  \
  |  | 9205|   333k|    else {                                                             \
  |  | 9206|   333k|        return vis(monostate_val);                                     \
  |  | 9207|   333k|    }
  ------------------
 9236|   333k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 333k]
  ------------------
 9237|   333k|            SCN_VISIT(char);
  ------------------
  |  | 9202|   333k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   333k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   333k|    }                                                                  \
  |  | 9205|   333k|    else {                                                             \
  |  | 9206|   333k|        return vis(monostate_val);                                     \
  |  | 9207|   333k|    }
  ------------------
 9238|   333k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 333k]
  ------------------
 9239|   333k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|   333k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   333k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   333k|    }                                                                  \
  |  | 9205|   333k|    else {                                                             \
  |  | 9206|   333k|        return vis(monostate_val);                                     \
  |  | 9207|   333k|    }
  ------------------
 9240|   333k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 333k]
  ------------------
 9241|   333k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|   333k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   333k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   333k|    }                                                                  \
  |  | 9205|   333k|    else {                                                             \
  |  | 9206|   333k|        return vis(monostate_val);                                     \
  |  | 9207|   333k|    }
  ------------------
 9242|   333k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 333k]
  ------------------
 9243|   333k|            SCN_VISIT(float);
  ------------------
  |  | 9202|   333k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   333k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   333k|    }                                                                  \
  |  | 9205|   333k|    else {                                                             \
  |  | 9206|   333k|        return vis(monostate_val);                                     \
  |  | 9207|   333k|    }
  ------------------
 9244|   333k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 333k]
  ------------------
 9245|   333k|            SCN_VISIT(double);
  ------------------
  |  | 9202|   333k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   333k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   333k|    }                                                                  \
  |  | 9205|   333k|    else {                                                             \
  |  | 9206|   333k|        return vis(monostate_val);                                     \
  |  | 9207|   333k|    }
  ------------------
 9246|   333k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 333k]
  ------------------
 9247|   333k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|   333k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   333k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   333k|    }                                                                  \
  |  | 9205|   333k|    else {                                                             \
  |  | 9206|   333k|        return vis(monostate_val);                                     \
  |  | 9207|   333k|    }
  ------------------
 9248|   333k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 333k]
  ------------------
 9249|   333k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|   333k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   333k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   333k|    }                                                                  \
  |  | 9205|   333k|    else {                                                             \
  |  | 9206|   333k|        return vis(monostate_val);                                     \
  |  | 9207|   333k|    }
  ------------------
 9250|   333k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 333k]
  ------------------
 9251|   333k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|   333k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   333k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   333k|    }                                                                  \
  |  | 9205|   333k|    else {                                                             \
  |  | 9206|   333k|        return vis(monostate_val);                                     \
  |  | 9207|   333k|    }
  ------------------
 9252|   333k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 333k]
  ------------------
 9253|   333k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|   333k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   333k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   333k|    }                                                                  \
  |  | 9205|   333k|    else {                                                             \
  |  | 9206|   333k|        return vis(monostate_val);                                     \
  |  | 9207|   333k|    }
  ------------------
 9254|   333k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 333k]
  ------------------
 9255|   333k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|   333k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   333k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   333k|    }                                                                  \
  |  | 9205|   333k|    else {                                                             \
  |  | 9206|   333k|        return vis(monostate_val);                                     \
  |  | 9207|   333k|    }
  ------------------
 9256|   333k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 333k]
  ------------------
 9257|   333k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|   333k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   333k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   333k|    }                                                                  \
  |  | 9205|   333k|    else {                                                             \
  |  | 9206|   333k|        return vis(monostate_val);                                     \
  |  | 9207|   333k|    }
  ------------------
 9258|   333k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 333k]
  ------------------
 9259|   333k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|   333k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   333k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   333k|    }                                                                  \
  |  | 9205|   333k|    else {                                                             \
  |  | 9206|   333k|        return vis(monostate_val);                                     \
  |  | 9207|   333k|    }
  ------------------
 9260|       |
 9261|   333k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 333k]
  ------------------
 9262|   333k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   333k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   333k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 333k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 333k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   333k|            SCN_CLANG_POP
 9279|   333k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4351|  86.9k|    {
 4352|  86.9k|        return sync(0);
 4353|  86.9k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6176|   353k|    {
 6177|   353k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   353k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 353k]
  |  |  ------------------
  ------------------
 6178|      0|            return max_size();
 6179|      0|        }
 6180|       |
 6181|   353k|        return static_cast<std::size_t>(m_desc &
 6182|   353k|                                        ((1 << detail::packed_arg_bits) - 1));
 6183|   353k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6202|   707k|    {
 6203|   707k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6204|   707k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6144|   353k|    {
 6145|   353k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   353k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 353k]
  |  |  ------------------
  ------------------
 6146|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6147|      0|                return m_args[id];
 6148|      0|            }
 6149|      0|            return {};
 6150|      0|        }
 6151|       |
 6152|   353k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|   353k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 353k]
  |  |  ------------------
  ------------------
 6153|      0|            return {};
 6154|      0|        }
 6155|       |
 6156|   353k|        const auto t = type(id);
 6157|   353k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|   353k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 353k]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|   353k|        basic_scan_arg<Context> arg;
 6162|   353k|        arg.m_type = t;
 6163|   353k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6163:13): [True: 353k, False: 0]
  ------------------
 6164|   353k|            arg.m_value.ref_value = m_builtin_values[id];
 6165|   353k|        }
 6166|      0|        else {
 6167|      0|            arg.m_value = m_values[id];
 6168|      0|        }
 6169|   353k|        return arg;
 6170|   353k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6211|   353k|    {
 6212|       |        // First (0th) index is size, types start after that
 6213|   353k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6214|   353k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6215|   353k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6216|   353k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6206|   353k|    {
 6207|   353k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6208|   353k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 5960|   590k|    {
 5961|   590k|        return m_type != detail::arg_type::none_type;
 5962|   590k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9299|  25.5k|{
 9300|  25.5k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  25.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  25.5k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  25.5k|{
 9201|  25.5k|#define SCN_VISIT(Type)                                                \
 9202|  25.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  25.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  25.5k|    }                                                                  \
 9205|  25.5k|    else {                                                             \
 9206|  25.5k|        return vis(monostate_val);                                     \
 9207|  25.5k|    }
 9208|       |
 9209|  25.5k|    monostate monostate_val{};
 9210|       |
 9211|  25.5k|    switch (get_arg_type(arg)) {
 9212|  4.24k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 4.24k, False: 21.3k]
  ------------------
 9213|  4.24k|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|  4.24k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.24k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.24k|    }                                                                  \
  |  | 9205|  4.24k|    else {                                                             \
  |  | 9206|  4.24k|        return vis(monostate_val);                                     \
  |  | 9207|  4.24k|    }
  ------------------
 9214|  4.24k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 25.5k]
  ------------------
 9215|  4.24k|            SCN_VISIT(short);
  ------------------
  |  | 9202|  4.24k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.24k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.24k|    }                                                                  \
  |  | 9205|  4.24k|    else {                                                             \
  |  | 9206|  4.24k|        return vis(monostate_val);                                     \
  |  | 9207|  4.24k|    }
  ------------------
 9216|  8.51k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 4.27k, False: 21.2k]
  ------------------
 9217|  8.51k|            SCN_VISIT(int);
  ------------------
  |  | 9202|  8.51k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  8.51k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  8.51k|    }                                                                  \
  |  | 9205|  8.51k|    else {                                                             \
  |  | 9206|  8.51k|        return vis(monostate_val);                                     \
  |  | 9207|  8.51k|    }
  ------------------
 9218|  8.51k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 25.5k]
  ------------------
 9219|  8.51k|            SCN_VISIT(long);
  ------------------
  |  | 9202|  8.51k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  8.51k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  8.51k|    }                                                                  \
  |  | 9205|  8.51k|    else {                                                             \
  |  | 9206|  8.51k|        return vis(monostate_val);                                     \
  |  | 9207|  8.51k|    }
  ------------------
 9220|  12.8k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 4.30k, False: 21.2k]
  ------------------
 9221|  12.8k|            SCN_VISIT(long long);
  ------------------
  |  | 9202|  12.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  12.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  12.8k|    }                                                                  \
  |  | 9205|  12.8k|    else {                                                             \
  |  | 9206|  12.8k|        return vis(monostate_val);                                     \
  |  | 9207|  12.8k|    }
  ------------------
 9222|  17.0k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 4.22k, False: 21.3k]
  ------------------
 9223|  17.0k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|  17.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  17.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  17.0k|    }                                                                  \
  |  | 9205|  17.0k|    else {                                                             \
  |  | 9206|  17.0k|        return vis(monostate_val);                                     \
  |  | 9207|  17.0k|    }
  ------------------
 9224|  17.0k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 25.5k]
  ------------------
 9225|  17.0k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|  17.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  17.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  17.0k|    }                                                                  \
  |  | 9205|  17.0k|    else {                                                             \
  |  | 9206|  17.0k|        return vis(monostate_val);                                     \
  |  | 9207|  17.0k|    }
  ------------------
 9226|  21.2k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 4.23k, False: 21.3k]
  ------------------
 9227|  21.2k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|  21.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  21.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  21.2k|    }                                                                  \
  |  | 9205|  21.2k|    else {                                                             \
  |  | 9206|  21.2k|        return vis(monostate_val);                                     \
  |  | 9207|  21.2k|    }
  ------------------
 9228|  21.2k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 25.5k]
  ------------------
 9229|  21.2k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|  21.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  21.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  21.2k|    }                                                                  \
  |  | 9205|  21.2k|    else {                                                             \
  |  | 9206|  21.2k|        return vis(monostate_val);                                     \
  |  | 9207|  21.2k|    }
  ------------------
 9230|  25.5k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 4.26k, False: 21.2k]
  ------------------
 9231|  25.5k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|  25.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.5k|    }                                                                  \
  |  | 9205|  25.5k|    else {                                                             \
  |  | 9206|  25.5k|        return vis(monostate_val);                                     \
  |  | 9207|  25.5k|    }
  ------------------
 9232|  25.5k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 25.5k]
  ------------------
 9233|  25.5k|            SCN_VISIT(void*);
  ------------------
  |  | 9202|  25.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.5k|    }                                                                  \
  |  | 9205|  25.5k|    else {                                                             \
  |  | 9206|  25.5k|        return vis(monostate_val);                                     \
  |  | 9207|  25.5k|    }
  ------------------
 9234|  25.5k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 25.5k]
  ------------------
 9235|  25.5k|            SCN_VISIT(bool);
  ------------------
  |  | 9202|  25.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.5k|    }                                                                  \
  |  | 9205|  25.5k|    else {                                                             \
  |  | 9206|  25.5k|        return vis(monostate_val);                                     \
  |  | 9207|  25.5k|    }
  ------------------
 9236|  25.5k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 25.5k]
  ------------------
 9237|  25.5k|            SCN_VISIT(char);
  ------------------
  |  | 9202|  25.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.5k|    }                                                                  \
  |  | 9205|  25.5k|    else {                                                             \
  |  | 9206|  25.5k|        return vis(monostate_val);                                     \
  |  | 9207|  25.5k|    }
  ------------------
 9238|  25.5k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 25.5k]
  ------------------
 9239|  25.5k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|  25.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.5k|    }                                                                  \
  |  | 9205|  25.5k|    else {                                                             \
  |  | 9206|  25.5k|        return vis(monostate_val);                                     \
  |  | 9207|  25.5k|    }
  ------------------
 9240|  25.5k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 25.5k]
  ------------------
 9241|  25.5k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|  25.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.5k|    }                                                                  \
  |  | 9205|  25.5k|    else {                                                             \
  |  | 9206|  25.5k|        return vis(monostate_val);                                     \
  |  | 9207|  25.5k|    }
  ------------------
 9242|  25.5k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 25.5k]
  ------------------
 9243|  25.5k|            SCN_VISIT(float);
  ------------------
  |  | 9202|  25.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.5k|    }                                                                  \
  |  | 9205|  25.5k|    else {                                                             \
  |  | 9206|  25.5k|        return vis(monostate_val);                                     \
  |  | 9207|  25.5k|    }
  ------------------
 9244|  25.5k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 25.5k]
  ------------------
 9245|  25.5k|            SCN_VISIT(double);
  ------------------
  |  | 9202|  25.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.5k|    }                                                                  \
  |  | 9205|  25.5k|    else {                                                             \
  |  | 9206|  25.5k|        return vis(monostate_val);                                     \
  |  | 9207|  25.5k|    }
  ------------------
 9246|  25.5k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 25.5k]
  ------------------
 9247|  25.5k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|  25.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.5k|    }                                                                  \
  |  | 9205|  25.5k|    else {                                                             \
  |  | 9206|  25.5k|        return vis(monostate_val);                                     \
  |  | 9207|  25.5k|    }
  ------------------
 9248|  25.5k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 25.5k]
  ------------------
 9249|  25.5k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|  25.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.5k|    }                                                                  \
  |  | 9205|  25.5k|    else {                                                             \
  |  | 9206|  25.5k|        return vis(monostate_val);                                     \
  |  | 9207|  25.5k|    }
  ------------------
 9250|  25.5k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 25.5k]
  ------------------
 9251|  25.5k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|  25.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.5k|    }                                                                  \
  |  | 9205|  25.5k|    else {                                                             \
  |  | 9206|  25.5k|        return vis(monostate_val);                                     \
  |  | 9207|  25.5k|    }
  ------------------
 9252|  25.5k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 25.5k]
  ------------------
 9253|  25.5k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|  25.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.5k|    }                                                                  \
  |  | 9205|  25.5k|    else {                                                             \
  |  | 9206|  25.5k|        return vis(monostate_val);                                     \
  |  | 9207|  25.5k|    }
  ------------------
 9254|  25.5k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 25.5k]
  ------------------
 9255|  25.5k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|  25.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.5k|    }                                                                  \
  |  | 9205|  25.5k|    else {                                                             \
  |  | 9206|  25.5k|        return vis(monostate_val);                                     \
  |  | 9207|  25.5k|    }
  ------------------
 9256|  25.5k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 25.5k]
  ------------------
 9257|  25.5k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|  25.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.5k|    }                                                                  \
  |  | 9205|  25.5k|    else {                                                             \
  |  | 9206|  25.5k|        return vis(monostate_val);                                     \
  |  | 9207|  25.5k|    }
  ------------------
 9258|  25.5k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 25.5k]
  ------------------
 9259|  25.5k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|  25.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.5k|    }                                                                  \
  |  | 9205|  25.5k|    else {                                                             \
  |  | 9206|  25.5k|        return vis(monostate_val);                                     \
  |  | 9207|  25.5k|    }
  ------------------
 9260|       |
 9261|  25.5k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 25.5k]
  ------------------
 9262|  25.5k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  25.5k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  25.5k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 25.5k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 25.5k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  25.5k|            SCN_CLANG_POP
 9279|  25.5k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6005|   910k|{
 6006|   910k|    return arg.m_type;
 6007|   910k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6017|   271k|{
 6018|   271k|    return arg.m_value;
 6019|   271k|}
_ZN3scn2v424basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 6256|   319k|        : m_format{format}, m_next_arg_id{next_arg_id}
 6257|   319k|    {
 6258|   319k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8932|   159k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|   159k|    static_cast<    \
  |  |  935|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   159k|    {
 8934|   159k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|   159k|    {
 3075|   159k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   159k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|   159k|    {
 3041|   159k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   159k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|   159k|{
 7793|   159k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|   159k|    handler.check_args_exhausted();
 7795|   159k|    return handler.get_error();
 7796|   159k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|   159k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|   159k|    auto begin = format.data();
 7761|   159k|    auto it = begin;
 7762|   159k|    const auto end = format.data() + format.size();
 7763|       |
 7764|   170k|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 159k, False: 10.7k]
  ------------------
 7765|   159k|        const auto ch = *it++;
 7766|   159k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 159k, False: 0]
  ------------------
 7767|   159k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|   159k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|   159k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 149k, False: 10.7k]
  ------------------
 7771|   149k|                return;
 7772|   149k|            }
 7773|   159k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|   159k|    }
 7784|       |
 7785|  10.7k|    handler.on_literal_text(begin, end);
 7786|  10.7k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7689|   159k|{
 7690|   159k|    struct id_adapter {
 7691|   159k|        constexpr void operator()()
 7692|   159k|        {
 7693|   159k|            arg_id = handler.on_arg_id();
 7694|   159k|        }
 7695|   159k|        constexpr void operator()(std::size_t id)
 7696|   159k|        {
 7697|   159k|            arg_id = handler.on_arg_id(id);
 7698|   159k|        }
 7699|       |
 7700|   159k|        constexpr void on_error(const char* msg)
 7701|   159k|        {
 7702|   159k|            SCN_UNLIKELY_ATTR
 7703|   159k|            handler.on_error(msg);
 7704|   159k|        }
 7705|       |
 7706|   159k|        Handler& handler;
 7707|   159k|        std::size_t arg_id;
 7708|   159k|    };
 7709|       |
 7710|   159k|    ++begin;
 7711|   159k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 159k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|   159k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 159k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|   159k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 159k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|   159k|    else {
 7723|   159k|        auto adapter = id_adapter{handler, 0};
 7724|   159k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|   159k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 159k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|   159k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 159k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|   159k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 159k, False: 0]
  ------------------
 7735|   159k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 159k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|   159k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|   159k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 49.6k, False: 110k]
  |  |  |  Branch (865:45): [True: 0, False: 159k]
  |  |  |  Branch (865:45): [True: 49.6k, False: 110k]
  |  |  ------------------
  ------------------
 7741|  49.6k|                handler.on_error("Unknown format specifier");
 7742|  49.6k|                return begin;
 7743|  49.6k|            }
 7744|   159k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|   159k|    }
 7751|   110k|    return begin + 1;
 7752|   159k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8831|   319k|    {
 8832|   319k|        return m_args.get(id);
 8833|   319k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6285|   319k|    {
 6286|   319k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 319k]
  |  |  ------------------
  ------------------
 6287|      0|            on_error(
 6288|      0|                "Cannot switch from manual to automatic argument indexing");
 6289|      0|            return 0;
 6290|      0|        }
 6291|       |
 6292|   319k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6293|   319k|        do_check_arg_id(id);
 6294|   319k|        return id;
 6295|   319k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6805|   319k|{
 6806|   319k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6806:9): [Folded - Ignored]
  ------------------
 6807|   319k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6807:10): [Folded - Ignored]
  |  Branch (6807:22): [Folded - Ignored]
  ------------------
 6808|       |        // The cast below will cause an error on gcc pre-12
 6809|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6810|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6810:13): [True: 0, False: 0]
  ------------------
 6811|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6812|      0|            SCN_UNLIKELY_ATTR
 6813|      0|            on_error("Argument not found");
 6814|      0|        }
 6815|      0|    }
 6816|   319k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|   159k|{
 7191|   159k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   159k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   159k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|   159k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 159k, False: 0]
  |  Branch (7192:26): [True: 0, False: 159k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|   159k|    handler();
 7197|   159k|    return begin;
 7198|   159k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|   159k|        {
 7693|   159k|            arg_id = handler.on_arg_id();
 7694|   159k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6280|   220k|    {
 6281|   220k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6282|   220k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4690|   185k|{
 4691|   185k|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 0, False: 185k]
  ------------------
 4692|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|      0|                                ranges::default_sentinel};
 4694|      0|    }
 4695|   185k|    return ranges::subrange{forward_iterator{this, 0},
 4696|   185k|                            ranges::default_sentinel};
 4697|   185k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4453|   185k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|   185k|    {
 4455|   185k|        SCN_EXPECT(parent);
  ------------------
  |  |  930|   185k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   185k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|   185k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|   185k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   185k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|   185k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6269|   539k|    {
 6270|   539k|        return m_format.data();
 6271|   539k|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7869|   159k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7870|   159k|    {
 7871|   159k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   159k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   159k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7872|   159k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7605|   159k|{
 7606|   159k|    auto do_presentation = [&]() -> const CharT* {
 7607|   159k|        if (*begin == CharT{'['}) {
 7608|   159k|            auto set = parse_presentation_set(begin, end, handler);
 7609|   159k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7610|       |                // clang-format off
 7611|   159k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|   159k|                return begin;
 7614|   159k|            }
 7615|   159k|            handler.on_character_set_string(set);
 7616|   159k|            return begin;
 7617|   159k|        }
 7618|   159k|        if (*begin == CharT{'/'}) {
 7619|   159k|            return parse_presentation_regex(begin, end, handler);
 7620|   159k|        }
 7621|   159k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   159k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7623|   159k|            handler.on_error("Invalid type specifier in format string");
 7624|   159k|            return begin;
 7625|   159k|        }
 7626|   159k|        handler.on_type(type);
 7627|   159k|        return begin;
 7628|   159k|    };
 7629|       |
 7630|   159k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7630:9): [True: 159k, False: 0]
  |  Branch (7630:28): [True: 126k, False: 33.1k]
  ------------------
 7631|   159k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7631:9): [True: 110k, False: 16.5k]
  |  Branch (7631:36): [True: 84.7k, False: 25.3k]
  ------------------
 7632|  84.7k|        return do_presentation();
 7633|  84.7k|    }
 7634|       |
 7635|  75.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  75.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 75.0k]
  |  |  ------------------
  ------------------
 7636|      0|        handler.on_error("Unexpected end of format string");
 7637|      0|        return begin;
 7638|      0|    }
 7639|       |
 7640|  75.0k|    begin = parse_align(begin, end, handler);
 7641|  75.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  75.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 75.0k]
  |  |  ------------------
  ------------------
 7642|      0|        handler.on_error("Unexpected end of format string");
 7643|      0|        return begin;
 7644|      0|    }
 7645|       |
 7646|  75.0k|    begin = parse_width(begin, end, handler);
 7647|  75.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  75.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 75.0k]
  |  |  ------------------
  ------------------
 7648|      0|        handler.on_error("Unexpected end of format string");
 7649|      0|        return begin;
 7650|      0|    }
 7651|       |
 7652|  75.0k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7652:9): [True: 0, False: 75.0k]
  ------------------
 7653|      0|        ++begin;
 7654|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7655|      0|            handler.on_error("Unexpected end of format string");
 7656|      0|            return begin;
 7657|      0|        }
 7658|      0|        begin = parse_precision(begin, end, handler);
 7659|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7660|      0|            handler.on_error("Unexpected end of format string");
 7661|      0|            return begin;
 7662|      0|        }
 7663|      0|    }
 7664|       |
 7665|  75.0k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7665:9): [True: 25.3k, False: 49.6k]
  ------------------
 7666|  25.3k|        handler.on_localized();
 7667|  25.3k|        ++begin;
 7668|  25.3k|    }
 7669|  75.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  75.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 75.0k]
  |  |  ------------------
  ------------------
 7670|      0|        handler.on_error("Unexpected end of format string");
 7671|      0|        return begin;
 7672|      0|    }
 7673|       |
 7674|  75.0k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7674:9): [True: 75.0k, False: 0]
  |  Branch (7674:25): [True: 49.6k, False: 25.3k]
  ------------------
 7675|  49.6k|        do_presentation();
 7676|  49.6k|    }
 7677|  75.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  75.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 75.0k]
  |  |  ------------------
  ------------------
 7678|      0|        handler.on_error("Unexpected end of format string");
 7679|      0|        return begin;
 7680|      0|    }
 7681|       |
 7682|  75.0k|    return begin;
 7683|  75.0k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 7254|   253k|{
 7255|   253k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7255:13): [True: 169k, False: 83.7k]
  |  Branch (7255:33): [True: 169k, False: 0]
  ------------------
 7256|   253k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7256:13): [True: 50.6k, False: 33.1k]
  |  Branch (7256:33): [True: 50.6k, False: 0]
  ------------------
 7257|   253k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7606|   134k|    auto do_presentation = [&]() -> const CharT* {
 7607|   134k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7607:13): [True: 0, False: 134k]
  ------------------
 7608|      0|            auto set = parse_presentation_set(begin, end, handler);
 7609|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7610|       |                // clang-format off
 7611|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|      0|                return begin;
 7614|      0|            }
 7615|      0|            handler.on_character_set_string(set);
 7616|      0|            return begin;
 7617|      0|        }
 7618|   134k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7618:13): [True: 0, False: 134k]
  ------------------
 7619|      0|            return parse_presentation_regex(begin, end, handler);
 7620|      0|        }
 7621|   134k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   134k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 33.1k, False: 101k]
  |  |  ------------------
  ------------------
 7623|  33.1k|            handler.on_error("Invalid type specifier in format string");
 7624|  33.1k|            return begin;
 7625|  33.1k|        }
 7626|   101k|        handler.on_type(type);
 7627|   101k|        return begin;
 7628|   134k|    };
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 7202|   268k|{
 7203|   268k|    switch (type) {
 7204|  33.5k|        case 'b':
  ------------------
  |  Branch (7204:9): [True: 33.5k, False: 235k]
  ------------------
 7205|  66.6k|        case 'B':
  ------------------
  |  Branch (7205:9): [True: 33.1k, False: 235k]
  ------------------
 7206|  66.6k|            return presentation_type::int_binary;
 7207|  34.0k|        case 'd':
  ------------------
  |  Branch (7207:9): [True: 34.0k, False: 234k]
  ------------------
 7208|  34.0k|            return presentation_type::int_decimal;
 7209|  34.0k|        case 'i':
  ------------------
  |  Branch (7209:9): [True: 34.0k, False: 234k]
  ------------------
 7210|  34.0k|            return presentation_type::int_generic;
 7211|      0|        case 'u':
  ------------------
  |  Branch (7211:9): [True: 0, False: 268k]
  ------------------
 7212|      0|            return presentation_type::int_unsigned_decimal;
 7213|  33.6k|        case 'o':
  ------------------
  |  Branch (7213:9): [True: 33.6k, False: 235k]
  ------------------
 7214|  33.6k|            return presentation_type::int_octal;
 7215|  34.1k|        case 'x':
  ------------------
  |  Branch (7215:9): [True: 34.1k, False: 234k]
  ------------------
 7216|  34.1k|        case 'X':
  ------------------
  |  Branch (7216:9): [True: 0, False: 268k]
  ------------------
 7217|  34.1k|            return presentation_type::int_hex;
 7218|      0|        case 'r':
  ------------------
  |  Branch (7218:9): [True: 0, False: 268k]
  ------------------
 7219|      0|        case 'R':
  ------------------
  |  Branch (7219:9): [True: 0, False: 268k]
  ------------------
 7220|      0|            return presentation_type::int_arbitrary_base;
 7221|      0|        case 'a':
  ------------------
  |  Branch (7221:9): [True: 0, False: 268k]
  ------------------
 7222|      0|        case 'A':
  ------------------
  |  Branch (7222:9): [True: 0, False: 268k]
  ------------------
 7223|      0|            return presentation_type::float_hex;
 7224|      0|        case 'e':
  ------------------
  |  Branch (7224:9): [True: 0, False: 268k]
  ------------------
 7225|      0|        case 'E':
  ------------------
  |  Branch (7225:9): [True: 0, False: 268k]
  ------------------
 7226|      0|            return presentation_type::float_scientific;
 7227|      0|        case 'f':
  ------------------
  |  Branch (7227:9): [True: 0, False: 268k]
  ------------------
 7228|      0|        case 'F':
  ------------------
  |  Branch (7228:9): [True: 0, False: 268k]
  ------------------
 7229|      0|            return presentation_type::float_fixed;
 7230|      0|        case 'g':
  ------------------
  |  Branch (7230:9): [True: 0, False: 268k]
  ------------------
 7231|      0|        case 'G':
  ------------------
  |  Branch (7231:9): [True: 0, False: 268k]
  ------------------
 7232|      0|            return presentation_type::float_general;
 7233|      0|        case 's':
  ------------------
  |  Branch (7233:9): [True: 0, False: 268k]
  ------------------
 7234|      0|            return presentation_type::string;
 7235|      0|        case 'c':
  ------------------
  |  Branch (7235:9): [True: 0, False: 268k]
  ------------------
 7236|      0|            return presentation_type::character;
 7237|      0|        case '?':
  ------------------
  |  Branch (7237:9): [True: 0, False: 268k]
  ------------------
 7238|      0|            return presentation_type::escaped_character;
 7239|      0|        case 'p':
  ------------------
  |  Branch (7239:9): [True: 0, False: 268k]
  ------------------
 7240|      0|            return presentation_type::pointer;
 7241|      0|        case '[':
  ------------------
  |  Branch (7241:9): [True: 0, False: 268k]
  ------------------
 7242|      0|        case '/':
  ------------------
  |  Branch (7242:9): [True: 0, False: 268k]
  ------------------
 7243|       |            // Should be handled by parse_presentation_set and
 7244|       |            // parse_presentation_regex
 7245|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7246|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7247|  66.2k|        default:
  ------------------
  |  Branch (7247:9): [True: 66.2k, False: 202k]
  ------------------
 7248|  66.2k|            return presentation_type::none;
 7249|   268k|    }
 7250|   268k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7279|  75.0k|{
 7280|  75.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  75.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  75.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7281|       |
 7282|  75.0k|    auto check_align = [](wchar_t ch) {
 7283|  75.0k|        switch (ch) {
 7284|  75.0k|            case L'<':
 7285|  75.0k|                return align_type::left;
 7286|  75.0k|            case L'>':
 7287|  75.0k|                return align_type::right;
 7288|  75.0k|            case L'^':
 7289|  75.0k|                return align_type::center;
 7290|  75.0k|            default:
 7291|  75.0k|                return align_type::none;
 7292|  75.0k|        }
 7293|  75.0k|    };
 7294|       |
 7295|  75.0k|    auto potential_fill_len = code_point_length(begin, end);
 7296|  75.0k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 75.0k]
  |  |  |  Branch (865:45): [True: 0, False: 75.0k]
  |  |  |  Branch (865:45): [True: 0, False: 75.0k]
  |  |  ------------------
  ------------------
 7297|  75.0k|                     std::distance(begin, end) < potential_fill_len)) {
 7298|      0|        handler.on_error("Invalid encoding in fill character");
 7299|      0|        return begin;
 7300|      0|    }
 7301|       |
 7302|  75.0k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7303|       |
 7304|  75.0k|    auto potential_fill = std::basic_string_view<CharT>{
 7305|  75.0k|        begin, static_cast<size_t>(potential_fill_len)};
 7306|  75.0k|    const auto begin_before_fill = begin;
 7307|  75.0k|    begin += potential_fill_len;
 7308|       |
 7309|  75.0k|    if (begin == end) {
  ------------------
  |  Branch (7309:9): [True: 0, False: 75.0k]
  ------------------
 7310|      0|        return begin_before_fill;
 7311|      0|    }
 7312|       |
 7313|  75.0k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7314|  75.0k|    const auto begin_after_fill = begin;
 7315|  75.0k|    ++begin;
 7316|       |
 7317|  75.0k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7317:9): [True: 75.0k, False: 0]
  ------------------
 7318|  75.0k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  75.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 75.0k]
  |  |  ------------------
  ------------------
 7319|      0|            handler.on_error("Invalid fill character '{' in format string");
 7320|      0|            return begin;
 7321|      0|        }
 7322|  75.0k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7322:13): [True: 0, False: 75.0k]
  ------------------
 7323|      0|            return begin_before_fill;
 7324|      0|        }
 7325|  75.0k|    }
 7326|       |
 7327|  75.0k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7327:9): [True: 75.0k, False: 0]
  ------------------
 7328|  75.0k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7328:13): [True: 0, False: 75.0k]
  ------------------
 7329|      0|            handler.on_align(potential_align_on_fill);
 7330|      0|            return begin_after_fill;
 7331|      0|        }
 7332|  75.0k|        return begin_before_fill;
 7333|  75.0k|    }
 7334|       |
 7335|      0|    handler.on_fill(potential_fill);
 7336|      0|    handler.on_align(potential_align_after_fill);
 7337|      0|    return begin;
 7338|  75.0k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 7261|   150k|{
 7262|   150k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   150k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   150k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7263|   150k|    if constexpr (sizeof(CharT) != 1) {
 7264|   150k|        return 1;
 7265|       |    }
 7266|       |    else {
 7267|       |        const auto lengths =
 7268|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7269|       |            "\3\4";
 7270|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7271|       |        return len;
 7272|       |    }
 7273|   150k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7282|   150k|    auto check_align = [](wchar_t ch) {
 7283|   150k|        switch (ch) {
 7284|      0|            case L'<':
  ------------------
  |  Branch (7284:13): [True: 0, False: 150k]
  ------------------
 7285|      0|                return align_type::left;
 7286|      0|            case L'>':
  ------------------
  |  Branch (7286:13): [True: 0, False: 150k]
  ------------------
 7287|      0|                return align_type::right;
 7288|      0|            case L'^':
  ------------------
  |  Branch (7288:13): [True: 0, False: 150k]
  ------------------
 7289|      0|                return align_type::center;
 7290|   150k|            default:
  ------------------
  |  Branch (7290:13): [True: 150k, False: 0]
  ------------------
 7291|   150k|                return align_type::none;
 7292|   150k|        }
 7293|   150k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7344|  75.0k|{
 7345|  75.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  75.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  75.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7346|       |
 7347|  75.0k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7347:9): [True: 41.8k, False: 33.1k]
  |  Branch (7347:33): [True: 0, False: 41.8k]
  ------------------
 7348|      0|        int width = parse_simple_int(begin, end);
 7349|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7350|      0|            handler.on_width(width);
 7351|      0|        }
 7352|      0|        else {
 7353|      0|            handler.on_error("Invalid field width");
 7354|      0|            return begin;
 7355|      0|        }
 7356|      0|    }
 7357|  75.0k|    return begin;
 7358|  75.0k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 7875|  25.3k|    {
 7876|  25.3k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7877|  25.3k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7877:13): [True: 12.6k, False: 12.6k]
  ------------------
 7878|  25.3k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7878:13): [True: 0, False: 12.6k]
  ------------------
 7879|  25.3k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7879:13): [True: 0, False: 0]
  ------------------
 7880|  25.3k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7880:13): [True: 0, False: 0]
  ------------------
 7881|      0|            SCN_UNLIKELY_ATTR
 7882|       |            // clang-format off
 7883|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7884|       |            // clang-format on
 7885|      0|        }
 7886|       |
 7887|  25.3k|        Handler::on_localized();
 7888|  25.3k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9299|   110k|{
 9300|   110k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   110k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   110k|{
 9201|   110k|#define SCN_VISIT(Type)                                                \
 9202|   110k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   110k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   110k|    }                                                                  \
 9205|   110k|    else {                                                             \
 9206|   110k|        return vis(monostate_val);                                     \
 9207|   110k|    }
 9208|       |
 9209|   110k|    monostate monostate_val{};
 9210|       |
 9211|   110k|    switch (get_arg_type(arg)) {
 9212|  18.3k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 18.3k, False: 91.7k]
  ------------------
 9213|  18.3k|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|  18.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  18.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  18.3k|    }                                                                  \
  |  | 9205|  18.3k|    else {                                                             \
  |  | 9206|  18.3k|        return vis(monostate_val);                                     \
  |  | 9207|  18.3k|    }
  ------------------
 9214|  18.3k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 110k]
  ------------------
 9215|  18.3k|            SCN_VISIT(short);
  ------------------
  |  | 9202|  18.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  18.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  18.3k|    }                                                                  \
  |  | 9205|  18.3k|    else {                                                             \
  |  | 9206|  18.3k|        return vis(monostate_val);                                     \
  |  | 9207|  18.3k|    }
  ------------------
 9216|  36.6k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 18.3k, False: 91.6k]
  ------------------
 9217|  36.6k|            SCN_VISIT(int);
  ------------------
  |  | 9202|  36.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  36.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  36.6k|    }                                                                  \
  |  | 9205|  36.6k|    else {                                                             \
  |  | 9206|  36.6k|        return vis(monostate_val);                                     \
  |  | 9207|  36.6k|    }
  ------------------
 9218|  36.6k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 110k]
  ------------------
 9219|  36.6k|            SCN_VISIT(long);
  ------------------
  |  | 9202|  36.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  36.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  36.6k|    }                                                                  \
  |  | 9205|  36.6k|    else {                                                             \
  |  | 9206|  36.6k|        return vis(monostate_val);                                     \
  |  | 9207|  36.6k|    }
  ------------------
 9220|  55.1k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 18.4k, False: 91.6k]
  ------------------
 9221|  55.1k|            SCN_VISIT(long long);
  ------------------
  |  | 9202|  55.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  55.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  55.1k|    }                                                                  \
  |  | 9205|  55.1k|    else {                                                             \
  |  | 9206|  55.1k|        return vis(monostate_val);                                     \
  |  | 9207|  55.1k|    }
  ------------------
 9222|  73.4k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 18.2k, False: 91.8k]
  ------------------
 9223|  73.4k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|  73.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  73.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  73.4k|    }                                                                  \
  |  | 9205|  73.4k|    else {                                                             \
  |  | 9206|  73.4k|        return vis(monostate_val);                                     \
  |  | 9207|  73.4k|    }
  ------------------
 9224|  73.4k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 110k]
  ------------------
 9225|  73.4k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|  73.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  73.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  73.4k|    }                                                                  \
  |  | 9205|  73.4k|    else {                                                             \
  |  | 9206|  73.4k|        return vis(monostate_val);                                     \
  |  | 9207|  73.4k|    }
  ------------------
 9226|  91.7k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 18.2k, False: 91.7k]
  ------------------
 9227|  91.7k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|  91.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  91.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  91.7k|    }                                                                  \
  |  | 9205|  91.7k|    else {                                                             \
  |  | 9206|  91.7k|        return vis(monostate_val);                                     \
  |  | 9207|  91.7k|    }
  ------------------
 9228|  91.7k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 110k]
  ------------------
 9229|  91.7k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|  91.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  91.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  91.7k|    }                                                                  \
  |  | 9205|  91.7k|    else {                                                             \
  |  | 9206|  91.7k|        return vis(monostate_val);                                     \
  |  | 9207|  91.7k|    }
  ------------------
 9230|   110k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 18.3k, False: 91.7k]
  ------------------
 9231|   110k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|   110k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   110k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   110k|    }                                                                  \
  |  | 9205|   110k|    else {                                                             \
  |  | 9206|   110k|        return vis(monostate_val);                                     \
  |  | 9207|   110k|    }
  ------------------
 9232|   110k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 110k]
  ------------------
 9233|   110k|            SCN_VISIT(void*);
  ------------------
  |  | 9202|   110k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   110k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   110k|    }                                                                  \
  |  | 9205|   110k|    else {                                                             \
  |  | 9206|   110k|        return vis(monostate_val);                                     \
  |  | 9207|   110k|    }
  ------------------
 9234|   110k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 110k]
  ------------------
 9235|   110k|            SCN_VISIT(bool);
  ------------------
  |  | 9202|   110k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   110k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   110k|    }                                                                  \
  |  | 9205|   110k|    else {                                                             \
  |  | 9206|   110k|        return vis(monostate_val);                                     \
  |  | 9207|   110k|    }
  ------------------
 9236|   110k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 110k]
  ------------------
 9237|   110k|            SCN_VISIT(char);
  ------------------
  |  | 9202|   110k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   110k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   110k|    }                                                                  \
  |  | 9205|   110k|    else {                                                             \
  |  | 9206|   110k|        return vis(monostate_val);                                     \
  |  | 9207|   110k|    }
  ------------------
 9238|   110k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 110k]
  ------------------
 9239|   110k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|   110k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   110k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   110k|    }                                                                  \
  |  | 9205|   110k|    else {                                                             \
  |  | 9206|   110k|        return vis(monostate_val);                                     \
  |  | 9207|   110k|    }
  ------------------
 9240|   110k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 110k]
  ------------------
 9241|   110k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|   110k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   110k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   110k|    }                                                                  \
  |  | 9205|   110k|    else {                                                             \
  |  | 9206|   110k|        return vis(monostate_val);                                     \
  |  | 9207|   110k|    }
  ------------------
 9242|   110k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 110k]
  ------------------
 9243|   110k|            SCN_VISIT(float);
  ------------------
  |  | 9202|   110k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   110k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   110k|    }                                                                  \
  |  | 9205|   110k|    else {                                                             \
  |  | 9206|   110k|        return vis(monostate_val);                                     \
  |  | 9207|   110k|    }
  ------------------
 9244|   110k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 110k]
  ------------------
 9245|   110k|            SCN_VISIT(double);
  ------------------
  |  | 9202|   110k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   110k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   110k|    }                                                                  \
  |  | 9205|   110k|    else {                                                             \
  |  | 9206|   110k|        return vis(monostate_val);                                     \
  |  | 9207|   110k|    }
  ------------------
 9246|   110k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 110k]
  ------------------
 9247|   110k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|   110k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   110k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   110k|    }                                                                  \
  |  | 9205|   110k|    else {                                                             \
  |  | 9206|   110k|        return vis(monostate_val);                                     \
  |  | 9207|   110k|    }
  ------------------
 9248|   110k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 110k]
  ------------------
 9249|   110k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|   110k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   110k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   110k|    }                                                                  \
  |  | 9205|   110k|    else {                                                             \
  |  | 9206|   110k|        return vis(monostate_val);                                     \
  |  | 9207|   110k|    }
  ------------------
 9250|   110k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 110k]
  ------------------
 9251|   110k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|   110k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   110k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   110k|    }                                                                  \
  |  | 9205|   110k|    else {                                                             \
  |  | 9206|   110k|        return vis(monostate_val);                                     \
  |  | 9207|   110k|    }
  ------------------
 9252|   110k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 110k]
  ------------------
 9253|   110k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|   110k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   110k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   110k|    }                                                                  \
  |  | 9205|   110k|    else {                                                             \
  |  | 9206|   110k|        return vis(monostate_val);                                     \
  |  | 9207|   110k|    }
  ------------------
 9254|   110k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 110k]
  ------------------
 9255|   110k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|   110k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   110k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   110k|    }                                                                  \
  |  | 9205|   110k|    else {                                                             \
  |  | 9206|   110k|        return vis(monostate_val);                                     \
  |  | 9207|   110k|    }
  ------------------
 9256|   110k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 110k]
  ------------------
 9257|   110k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|   110k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   110k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   110k|    }                                                                  \
  |  | 9205|   110k|    else {                                                             \
  |  | 9206|   110k|        return vis(monostate_val);                                     \
  |  | 9207|   110k|    }
  ------------------
 9258|   110k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 110k]
  ------------------
 9259|   110k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|   110k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   110k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   110k|    }                                                                  \
  |  | 9205|   110k|    else {                                                             \
  |  | 9206|   110k|        return vis(monostate_val);                                     \
  |  | 9207|   110k|    }
  ------------------
 9260|       |
 9261|   110k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 110k]
  ------------------
 9262|   110k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   110k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   110k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 110k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 110k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   110k|            SCN_CLANG_POP
 9279|   110k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9299|  25.5k|{
 9300|  25.5k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  25.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  25.5k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  25.5k|{
 9201|  25.5k|#define SCN_VISIT(Type)                                                \
 9202|  25.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  25.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  25.5k|    }                                                                  \
 9205|  25.5k|    else {                                                             \
 9206|  25.5k|        return vis(monostate_val);                                     \
 9207|  25.5k|    }
 9208|       |
 9209|  25.5k|    monostate monostate_val{};
 9210|       |
 9211|  25.5k|    switch (get_arg_type(arg)) {
 9212|  4.24k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 4.24k, False: 21.3k]
  ------------------
 9213|  4.24k|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|  4.24k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.24k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.24k|    }                                                                  \
  |  | 9205|  4.24k|    else {                                                             \
  |  | 9206|  4.24k|        return vis(monostate_val);                                     \
  |  | 9207|  4.24k|    }
  ------------------
 9214|  4.24k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 25.5k]
  ------------------
 9215|  4.24k|            SCN_VISIT(short);
  ------------------
  |  | 9202|  4.24k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.24k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.24k|    }                                                                  \
  |  | 9205|  4.24k|    else {                                                             \
  |  | 9206|  4.24k|        return vis(monostate_val);                                     \
  |  | 9207|  4.24k|    }
  ------------------
 9216|  8.51k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 4.27k, False: 21.2k]
  ------------------
 9217|  8.51k|            SCN_VISIT(int);
  ------------------
  |  | 9202|  8.51k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  8.51k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  8.51k|    }                                                                  \
  |  | 9205|  8.51k|    else {                                                             \
  |  | 9206|  8.51k|        return vis(monostate_val);                                     \
  |  | 9207|  8.51k|    }
  ------------------
 9218|  8.51k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 25.5k]
  ------------------
 9219|  8.51k|            SCN_VISIT(long);
  ------------------
  |  | 9202|  8.51k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  8.51k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  8.51k|    }                                                                  \
  |  | 9205|  8.51k|    else {                                                             \
  |  | 9206|  8.51k|        return vis(monostate_val);                                     \
  |  | 9207|  8.51k|    }
  ------------------
 9220|  12.8k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 4.30k, False: 21.2k]
  ------------------
 9221|  12.8k|            SCN_VISIT(long long);
  ------------------
  |  | 9202|  12.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  12.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  12.8k|    }                                                                  \
  |  | 9205|  12.8k|    else {                                                             \
  |  | 9206|  12.8k|        return vis(monostate_val);                                     \
  |  | 9207|  12.8k|    }
  ------------------
 9222|  17.0k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 4.22k, False: 21.3k]
  ------------------
 9223|  17.0k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|  17.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  17.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  17.0k|    }                                                                  \
  |  | 9205|  17.0k|    else {                                                             \
  |  | 9206|  17.0k|        return vis(monostate_val);                                     \
  |  | 9207|  17.0k|    }
  ------------------
 9224|  17.0k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 25.5k]
  ------------------
 9225|  17.0k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|  17.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  17.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  17.0k|    }                                                                  \
  |  | 9205|  17.0k|    else {                                                             \
  |  | 9206|  17.0k|        return vis(monostate_val);                                     \
  |  | 9207|  17.0k|    }
  ------------------
 9226|  21.2k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 4.23k, False: 21.3k]
  ------------------
 9227|  21.2k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|  21.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  21.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  21.2k|    }                                                                  \
  |  | 9205|  21.2k|    else {                                                             \
  |  | 9206|  21.2k|        return vis(monostate_val);                                     \
  |  | 9207|  21.2k|    }
  ------------------
 9228|  21.2k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 25.5k]
  ------------------
 9229|  21.2k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|  21.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  21.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  21.2k|    }                                                                  \
  |  | 9205|  21.2k|    else {                                                             \
  |  | 9206|  21.2k|        return vis(monostate_val);                                     \
  |  | 9207|  21.2k|    }
  ------------------
 9230|  25.5k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 4.26k, False: 21.2k]
  ------------------
 9231|  25.5k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|  25.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.5k|    }                                                                  \
  |  | 9205|  25.5k|    else {                                                             \
  |  | 9206|  25.5k|        return vis(monostate_val);                                     \
  |  | 9207|  25.5k|    }
  ------------------
 9232|  25.5k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 25.5k]
  ------------------
 9233|  25.5k|            SCN_VISIT(void*);
  ------------------
  |  | 9202|  25.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.5k|    }                                                                  \
  |  | 9205|  25.5k|    else {                                                             \
  |  | 9206|  25.5k|        return vis(monostate_val);                                     \
  |  | 9207|  25.5k|    }
  ------------------
 9234|  25.5k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 25.5k]
  ------------------
 9235|  25.5k|            SCN_VISIT(bool);
  ------------------
  |  | 9202|  25.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.5k|    }                                                                  \
  |  | 9205|  25.5k|    else {                                                             \
  |  | 9206|  25.5k|        return vis(monostate_val);                                     \
  |  | 9207|  25.5k|    }
  ------------------
 9236|  25.5k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 25.5k]
  ------------------
 9237|  25.5k|            SCN_VISIT(char);
  ------------------
  |  | 9202|  25.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.5k|    }                                                                  \
  |  | 9205|  25.5k|    else {                                                             \
  |  | 9206|  25.5k|        return vis(monostate_val);                                     \
  |  | 9207|  25.5k|    }
  ------------------
 9238|  25.5k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 25.5k]
  ------------------
 9239|  25.5k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|  25.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.5k|    }                                                                  \
  |  | 9205|  25.5k|    else {                                                             \
  |  | 9206|  25.5k|        return vis(monostate_val);                                     \
  |  | 9207|  25.5k|    }
  ------------------
 9240|  25.5k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 25.5k]
  ------------------
 9241|  25.5k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|  25.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.5k|    }                                                                  \
  |  | 9205|  25.5k|    else {                                                             \
  |  | 9206|  25.5k|        return vis(monostate_val);                                     \
  |  | 9207|  25.5k|    }
  ------------------
 9242|  25.5k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 25.5k]
  ------------------
 9243|  25.5k|            SCN_VISIT(float);
  ------------------
  |  | 9202|  25.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.5k|    }                                                                  \
  |  | 9205|  25.5k|    else {                                                             \
  |  | 9206|  25.5k|        return vis(monostate_val);                                     \
  |  | 9207|  25.5k|    }
  ------------------
 9244|  25.5k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 25.5k]
  ------------------
 9245|  25.5k|            SCN_VISIT(double);
  ------------------
  |  | 9202|  25.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.5k|    }                                                                  \
  |  | 9205|  25.5k|    else {                                                             \
  |  | 9206|  25.5k|        return vis(monostate_val);                                     \
  |  | 9207|  25.5k|    }
  ------------------
 9246|  25.5k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 25.5k]
  ------------------
 9247|  25.5k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|  25.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.5k|    }                                                                  \
  |  | 9205|  25.5k|    else {                                                             \
  |  | 9206|  25.5k|        return vis(monostate_val);                                     \
  |  | 9207|  25.5k|    }
  ------------------
 9248|  25.5k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 25.5k]
  ------------------
 9249|  25.5k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|  25.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.5k|    }                                                                  \
  |  | 9205|  25.5k|    else {                                                             \
  |  | 9206|  25.5k|        return vis(monostate_val);                                     \
  |  | 9207|  25.5k|    }
  ------------------
 9250|  25.5k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 25.5k]
  ------------------
 9251|  25.5k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|  25.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.5k|    }                                                                  \
  |  | 9205|  25.5k|    else {                                                             \
  |  | 9206|  25.5k|        return vis(monostate_val);                                     \
  |  | 9207|  25.5k|    }
  ------------------
 9252|  25.5k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 25.5k]
  ------------------
 9253|  25.5k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|  25.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.5k|    }                                                                  \
  |  | 9205|  25.5k|    else {                                                             \
  |  | 9206|  25.5k|        return vis(monostate_val);                                     \
  |  | 9207|  25.5k|    }
  ------------------
 9254|  25.5k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 25.5k]
  ------------------
 9255|  25.5k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|  25.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.5k|    }                                                                  \
  |  | 9205|  25.5k|    else {                                                             \
  |  | 9206|  25.5k|        return vis(monostate_val);                                     \
  |  | 9207|  25.5k|    }
  ------------------
 9256|  25.5k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 25.5k]
  ------------------
 9257|  25.5k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|  25.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.5k|    }                                                                  \
  |  | 9205|  25.5k|    else {                                                             \
  |  | 9206|  25.5k|        return vis(monostate_val);                                     \
  |  | 9207|  25.5k|    }
  ------------------
 9258|  25.5k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 25.5k]
  ------------------
 9259|  25.5k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|  25.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.5k|    }                                                                  \
  |  | 9205|  25.5k|    else {                                                             \
  |  | 9206|  25.5k|        return vis(monostate_val);                                     \
  |  | 9207|  25.5k|    }
  ------------------
 9260|       |
 9261|  25.5k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 25.5k]
  ------------------
 9262|  25.5k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  25.5k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  25.5k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 25.5k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 25.5k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  25.5k|            SCN_CLANG_POP
 9279|  25.5k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|   159k|{
 7793|   159k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|   159k|    handler.check_args_exhausted();
 7795|   159k|    return handler.get_error();
 7796|   159k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|   159k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|   159k|    auto begin = format.data();
 7761|   159k|    auto it = begin;
 7762|   159k|    const auto end = format.data() + format.size();
 7763|       |
 7764|   170k|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 159k, False: 10.7k]
  ------------------
 7765|   159k|        const auto ch = *it++;
 7766|   159k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 159k, False: 0]
  ------------------
 7767|   159k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|   159k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|   159k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 149k, False: 10.7k]
  ------------------
 7771|   149k|                return;
 7772|   149k|            }
 7773|   159k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|   159k|    }
 7784|       |
 7785|  10.7k|    handler.on_literal_text(begin, end);
 7786|  10.7k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 8970|  10.7k|    {
 8971|  10.7k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  10.7k|    static_cast<    \
  |  |  935|  10.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8972|  10.7k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7689|   159k|{
 7690|   159k|    struct id_adapter {
 7691|   159k|        constexpr void operator()()
 7692|   159k|        {
 7693|   159k|            arg_id = handler.on_arg_id();
 7694|   159k|        }
 7695|   159k|        constexpr void operator()(std::size_t id)
 7696|   159k|        {
 7697|   159k|            arg_id = handler.on_arg_id(id);
 7698|   159k|        }
 7699|       |
 7700|   159k|        constexpr void on_error(const char* msg)
 7701|   159k|        {
 7702|   159k|            SCN_UNLIKELY_ATTR
 7703|   159k|            handler.on_error(msg);
 7704|   159k|        }
 7705|       |
 7706|   159k|        Handler& handler;
 7707|   159k|        std::size_t arg_id;
 7708|   159k|    };
 7709|       |
 7710|   159k|    ++begin;
 7711|   159k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 159k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|   159k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 159k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|   159k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 159k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|   159k|    else {
 7723|   159k|        auto adapter = id_adapter{handler, 0};
 7724|   159k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|   159k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 159k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|   159k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 159k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|   159k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 159k, False: 0]
  ------------------
 7735|   159k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 159k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|   159k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|   159k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 49.6k, False: 110k]
  |  |  |  Branch (865:45): [True: 0, False: 159k]
  |  |  |  Branch (865:45): [True: 49.6k, False: 110k]
  |  |  ------------------
  ------------------
 7741|  49.6k|                handler.on_error("Unknown format specifier");
 7742|  49.6k|                return begin;
 7743|  49.6k|            }
 7744|   159k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|   159k|    }
 7751|   110k|    return begin + 1;
 7752|   159k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|   159k|{
 7191|   159k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   159k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   159k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|   159k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 159k, False: 0]
  |  Branch (7192:26): [True: 0, False: 159k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|   159k|    handler();
 7197|   159k|    return begin;
 7198|   159k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|   159k|        {
 7693|   159k|            arg_id = handler.on_arg_id();
 7694|   159k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7869|   159k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7870|   159k|    {
 7871|   159k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   159k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   159k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7872|   159k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7605|   159k|{
 7606|   159k|    auto do_presentation = [&]() -> const CharT* {
 7607|   159k|        if (*begin == CharT{'['}) {
 7608|   159k|            auto set = parse_presentation_set(begin, end, handler);
 7609|   159k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7610|       |                // clang-format off
 7611|   159k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|   159k|                return begin;
 7614|   159k|            }
 7615|   159k|            handler.on_character_set_string(set);
 7616|   159k|            return begin;
 7617|   159k|        }
 7618|   159k|        if (*begin == CharT{'/'}) {
 7619|   159k|            return parse_presentation_regex(begin, end, handler);
 7620|   159k|        }
 7621|   159k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   159k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7623|   159k|            handler.on_error("Invalid type specifier in format string");
 7624|   159k|            return begin;
 7625|   159k|        }
 7626|   159k|        handler.on_type(type);
 7627|   159k|        return begin;
 7628|   159k|    };
 7629|       |
 7630|   159k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7630:9): [True: 159k, False: 0]
  |  Branch (7630:28): [True: 126k, False: 33.1k]
  ------------------
 7631|   159k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7631:9): [True: 110k, False: 16.5k]
  |  Branch (7631:36): [True: 84.7k, False: 25.3k]
  ------------------
 7632|  84.7k|        return do_presentation();
 7633|  84.7k|    }
 7634|       |
 7635|  75.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  75.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 75.0k]
  |  |  ------------------
  ------------------
 7636|      0|        handler.on_error("Unexpected end of format string");
 7637|      0|        return begin;
 7638|      0|    }
 7639|       |
 7640|  75.0k|    begin = parse_align(begin, end, handler);
 7641|  75.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  75.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 75.0k]
  |  |  ------------------
  ------------------
 7642|      0|        handler.on_error("Unexpected end of format string");
 7643|      0|        return begin;
 7644|      0|    }
 7645|       |
 7646|  75.0k|    begin = parse_width(begin, end, handler);
 7647|  75.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  75.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 75.0k]
  |  |  ------------------
  ------------------
 7648|      0|        handler.on_error("Unexpected end of format string");
 7649|      0|        return begin;
 7650|      0|    }
 7651|       |
 7652|  75.0k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7652:9): [True: 0, False: 75.0k]
  ------------------
 7653|      0|        ++begin;
 7654|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7655|      0|            handler.on_error("Unexpected end of format string");
 7656|      0|            return begin;
 7657|      0|        }
 7658|      0|        begin = parse_precision(begin, end, handler);
 7659|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7660|      0|            handler.on_error("Unexpected end of format string");
 7661|      0|            return begin;
 7662|      0|        }
 7663|      0|    }
 7664|       |
 7665|  75.0k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7665:9): [True: 25.3k, False: 49.6k]
  ------------------
 7666|  25.3k|        handler.on_localized();
 7667|  25.3k|        ++begin;
 7668|  25.3k|    }
 7669|  75.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  75.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 75.0k]
  |  |  ------------------
  ------------------
 7670|      0|        handler.on_error("Unexpected end of format string");
 7671|      0|        return begin;
 7672|      0|    }
 7673|       |
 7674|  75.0k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7674:9): [True: 75.0k, False: 0]
  |  Branch (7674:25): [True: 49.6k, False: 25.3k]
  ------------------
 7675|  49.6k|        do_presentation();
 7676|  49.6k|    }
 7677|  75.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  75.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 75.0k]
  |  |  ------------------
  ------------------
 7678|      0|        handler.on_error("Unexpected end of format string");
 7679|      0|        return begin;
 7680|      0|    }
 7681|       |
 7682|  75.0k|    return begin;
 7683|  75.0k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7606|   134k|    auto do_presentation = [&]() -> const CharT* {
 7607|   134k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7607:13): [True: 0, False: 134k]
  ------------------
 7608|      0|            auto set = parse_presentation_set(begin, end, handler);
 7609|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7610|       |                // clang-format off
 7611|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|      0|                return begin;
 7614|      0|            }
 7615|      0|            handler.on_character_set_string(set);
 7616|      0|            return begin;
 7617|      0|        }
 7618|   134k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7618:13): [True: 0, False: 134k]
  ------------------
 7619|      0|            return parse_presentation_regex(begin, end, handler);
 7620|      0|        }
 7621|   134k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   134k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 33.1k, False: 101k]
  |  |  ------------------
  ------------------
 7623|  33.1k|            handler.on_error("Invalid type specifier in format string");
 7624|  33.1k|            return begin;
 7625|  33.1k|        }
 7626|   101k|        handler.on_type(type);
 7627|   101k|        return begin;
 7628|   134k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7279|  75.0k|{
 7280|  75.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  75.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  75.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7281|       |
 7282|  75.0k|    auto check_align = [](wchar_t ch) {
 7283|  75.0k|        switch (ch) {
 7284|  75.0k|            case L'<':
 7285|  75.0k|                return align_type::left;
 7286|  75.0k|            case L'>':
 7287|  75.0k|                return align_type::right;
 7288|  75.0k|            case L'^':
 7289|  75.0k|                return align_type::center;
 7290|  75.0k|            default:
 7291|  75.0k|                return align_type::none;
 7292|  75.0k|        }
 7293|  75.0k|    };
 7294|       |
 7295|  75.0k|    auto potential_fill_len = code_point_length(begin, end);
 7296|  75.0k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 75.0k]
  |  |  |  Branch (865:45): [True: 0, False: 75.0k]
  |  |  |  Branch (865:45): [True: 0, False: 75.0k]
  |  |  ------------------
  ------------------
 7297|  75.0k|                     std::distance(begin, end) < potential_fill_len)) {
 7298|      0|        handler.on_error("Invalid encoding in fill character");
 7299|      0|        return begin;
 7300|      0|    }
 7301|       |
 7302|  75.0k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7303|       |
 7304|  75.0k|    auto potential_fill = std::basic_string_view<CharT>{
 7305|  75.0k|        begin, static_cast<size_t>(potential_fill_len)};
 7306|  75.0k|    const auto begin_before_fill = begin;
 7307|  75.0k|    begin += potential_fill_len;
 7308|       |
 7309|  75.0k|    if (begin == end) {
  ------------------
  |  Branch (7309:9): [True: 0, False: 75.0k]
  ------------------
 7310|      0|        return begin_before_fill;
 7311|      0|    }
 7312|       |
 7313|  75.0k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7314|  75.0k|    const auto begin_after_fill = begin;
 7315|  75.0k|    ++begin;
 7316|       |
 7317|  75.0k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7317:9): [True: 75.0k, False: 0]
  ------------------
 7318|  75.0k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  75.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 75.0k]
  |  |  ------------------
  ------------------
 7319|      0|            handler.on_error("Invalid fill character '{' in format string");
 7320|      0|            return begin;
 7321|      0|        }
 7322|  75.0k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7322:13): [True: 0, False: 75.0k]
  ------------------
 7323|      0|            return begin_before_fill;
 7324|      0|        }
 7325|  75.0k|    }
 7326|       |
 7327|  75.0k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7327:9): [True: 75.0k, False: 0]
  ------------------
 7328|  75.0k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7328:13): [True: 0, False: 75.0k]
  ------------------
 7329|      0|            handler.on_align(potential_align_on_fill);
 7330|      0|            return begin_after_fill;
 7331|      0|        }
 7332|  75.0k|        return begin_before_fill;
 7333|  75.0k|    }
 7334|       |
 7335|      0|    handler.on_fill(potential_fill);
 7336|      0|    handler.on_align(potential_align_after_fill);
 7337|      0|    return begin;
 7338|  75.0k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7282|   150k|    auto check_align = [](wchar_t ch) {
 7283|   150k|        switch (ch) {
 7284|      0|            case L'<':
  ------------------
  |  Branch (7284:13): [True: 0, False: 150k]
  ------------------
 7285|      0|                return align_type::left;
 7286|      0|            case L'>':
  ------------------
  |  Branch (7286:13): [True: 0, False: 150k]
  ------------------
 7287|      0|                return align_type::right;
 7288|      0|            case L'^':
  ------------------
  |  Branch (7288:13): [True: 0, False: 150k]
  ------------------
 7289|      0|                return align_type::center;
 7290|   150k|            default:
  ------------------
  |  Branch (7290:13): [True: 150k, False: 0]
  ------------------
 7291|   150k|                return align_type::none;
 7292|   150k|        }
 7293|   150k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7344|  75.0k|{
 7345|  75.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  75.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  75.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7346|       |
 7347|  75.0k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7347:9): [True: 41.8k, False: 33.1k]
  |  Branch (7347:33): [True: 0, False: 41.8k]
  ------------------
 7348|      0|        int width = parse_simple_int(begin, end);
 7349|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7350|      0|            handler.on_width(width);
 7351|      0|        }
 7352|      0|        else {
 7353|      0|            handler.on_error("Invalid field width");
 7354|      0|            return begin;
 7355|      0|        }
 7356|      0|    }
 7357|  75.0k|    return begin;
 7358|  75.0k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE12on_localizedEv:
 7875|  25.3k|    {
 7876|  25.3k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7877|  25.3k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7877:13): [True: 12.6k, False: 12.6k]
  ------------------
 7878|  25.3k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7878:13): [True: 0, False: 12.6k]
  ------------------
 7879|  25.3k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7879:13): [True: 0, False: 0]
  ------------------
 7880|  25.3k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7880:13): [True: 0, False: 0]
  ------------------
 7881|      0|            SCN_UNLIKELY_ATTR
 7882|       |            // clang-format off
 7883|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7884|       |            // clang-format on
 7885|      0|        }
 7886|       |
 7887|  25.3k|        Handler::on_localized();
 7888|  25.3k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9299|   110k|{
 9300|   110k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   110k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   110k|{
 9201|   110k|#define SCN_VISIT(Type)                                                \
 9202|   110k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   110k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   110k|    }                                                                  \
 9205|   110k|    else {                                                             \
 9206|   110k|        return vis(monostate_val);                                     \
 9207|   110k|    }
 9208|       |
 9209|   110k|    monostate monostate_val{};
 9210|       |
 9211|   110k|    switch (get_arg_type(arg)) {
 9212|  18.3k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 18.3k, False: 91.7k]
  ------------------
 9213|  18.3k|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|  18.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  18.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  18.3k|    }                                                                  \
  |  | 9205|  18.3k|    else {                                                             \
  |  | 9206|  18.3k|        return vis(monostate_val);                                     \
  |  | 9207|  18.3k|    }
  ------------------
 9214|  18.3k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 110k]
  ------------------
 9215|  18.3k|            SCN_VISIT(short);
  ------------------
  |  | 9202|  18.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  18.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  18.3k|    }                                                                  \
  |  | 9205|  18.3k|    else {                                                             \
  |  | 9206|  18.3k|        return vis(monostate_val);                                     \
  |  | 9207|  18.3k|    }
  ------------------
 9216|  36.6k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 18.3k, False: 91.6k]
  ------------------
 9217|  36.6k|            SCN_VISIT(int);
  ------------------
  |  | 9202|  36.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  36.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  36.6k|    }                                                                  \
  |  | 9205|  36.6k|    else {                                                             \
  |  | 9206|  36.6k|        return vis(monostate_val);                                     \
  |  | 9207|  36.6k|    }
  ------------------
 9218|  36.6k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 110k]
  ------------------
 9219|  36.6k|            SCN_VISIT(long);
  ------------------
  |  | 9202|  36.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  36.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  36.6k|    }                                                                  \
  |  | 9205|  36.6k|    else {                                                             \
  |  | 9206|  36.6k|        return vis(monostate_val);                                     \
  |  | 9207|  36.6k|    }
  ------------------
 9220|  55.1k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 18.4k, False: 91.6k]
  ------------------
 9221|  55.1k|            SCN_VISIT(long long);
  ------------------
  |  | 9202|  55.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  55.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  55.1k|    }                                                                  \
  |  | 9205|  55.1k|    else {                                                             \
  |  | 9206|  55.1k|        return vis(monostate_val);                                     \
  |  | 9207|  55.1k|    }
  ------------------
 9222|  73.4k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 18.2k, False: 91.8k]
  ------------------
 9223|  73.4k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|  73.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  73.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  73.4k|    }                                                                  \
  |  | 9205|  73.4k|    else {                                                             \
  |  | 9206|  73.4k|        return vis(monostate_val);                                     \
  |  | 9207|  73.4k|    }
  ------------------
 9224|  73.4k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 110k]
  ------------------
 9225|  73.4k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|  73.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  73.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  73.4k|    }                                                                  \
  |  | 9205|  73.4k|    else {                                                             \
  |  | 9206|  73.4k|        return vis(monostate_val);                                     \
  |  | 9207|  73.4k|    }
  ------------------
 9226|  91.7k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 18.2k, False: 91.7k]
  ------------------
 9227|  91.7k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|  91.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  91.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  91.7k|    }                                                                  \
  |  | 9205|  91.7k|    else {                                                             \
  |  | 9206|  91.7k|        return vis(monostate_val);                                     \
  |  | 9207|  91.7k|    }
  ------------------
 9228|  91.7k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 110k]
  ------------------
 9229|  91.7k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|  91.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  91.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  91.7k|    }                                                                  \
  |  | 9205|  91.7k|    else {                                                             \
  |  | 9206|  91.7k|        return vis(monostate_val);                                     \
  |  | 9207|  91.7k|    }
  ------------------
 9230|   110k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 18.3k, False: 91.7k]
  ------------------
 9231|   110k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|   110k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   110k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   110k|    }                                                                  \
  |  | 9205|   110k|    else {                                                             \
  |  | 9206|   110k|        return vis(monostate_val);                                     \
  |  | 9207|   110k|    }
  ------------------
 9232|   110k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 110k]
  ------------------
 9233|   110k|            SCN_VISIT(void*);
  ------------------
  |  | 9202|   110k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   110k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   110k|    }                                                                  \
  |  | 9205|   110k|    else {                                                             \
  |  | 9206|   110k|        return vis(monostate_val);                                     \
  |  | 9207|   110k|    }
  ------------------
 9234|   110k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 110k]
  ------------------
 9235|   110k|            SCN_VISIT(bool);
  ------------------
  |  | 9202|   110k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   110k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   110k|    }                                                                  \
  |  | 9205|   110k|    else {                                                             \
  |  | 9206|   110k|        return vis(monostate_val);                                     \
  |  | 9207|   110k|    }
  ------------------
 9236|   110k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 110k]
  ------------------
 9237|   110k|            SCN_VISIT(char);
  ------------------
  |  | 9202|   110k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   110k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   110k|    }                                                                  \
  |  | 9205|   110k|    else {                                                             \
  |  | 9206|   110k|        return vis(monostate_val);                                     \
  |  | 9207|   110k|    }
  ------------------
 9238|   110k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 110k]
  ------------------
 9239|   110k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|   110k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   110k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   110k|    }                                                                  \
  |  | 9205|   110k|    else {                                                             \
  |  | 9206|   110k|        return vis(monostate_val);                                     \
  |  | 9207|   110k|    }
  ------------------
 9240|   110k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 110k]
  ------------------
 9241|   110k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|   110k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   110k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   110k|    }                                                                  \
  |  | 9205|   110k|    else {                                                             \
  |  | 9206|   110k|        return vis(monostate_val);                                     \
  |  | 9207|   110k|    }
  ------------------
 9242|   110k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 110k]
  ------------------
 9243|   110k|            SCN_VISIT(float);
  ------------------
  |  | 9202|   110k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   110k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   110k|    }                                                                  \
  |  | 9205|   110k|    else {                                                             \
  |  | 9206|   110k|        return vis(monostate_val);                                     \
  |  | 9207|   110k|    }
  ------------------
 9244|   110k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 110k]
  ------------------
 9245|   110k|            SCN_VISIT(double);
  ------------------
  |  | 9202|   110k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   110k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   110k|    }                                                                  \
  |  | 9205|   110k|    else {                                                             \
  |  | 9206|   110k|        return vis(monostate_val);                                     \
  |  | 9207|   110k|    }
  ------------------
 9246|   110k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 110k]
  ------------------
 9247|   110k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|   110k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   110k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   110k|    }                                                                  \
  |  | 9205|   110k|    else {                                                             \
  |  | 9206|   110k|        return vis(monostate_val);                                     \
  |  | 9207|   110k|    }
  ------------------
 9248|   110k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 110k]
  ------------------
 9249|   110k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|   110k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   110k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   110k|    }                                                                  \
  |  | 9205|   110k|    else {                                                             \
  |  | 9206|   110k|        return vis(monostate_val);                                     \
  |  | 9207|   110k|    }
  ------------------
 9250|   110k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 110k]
  ------------------
 9251|   110k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|   110k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   110k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   110k|    }                                                                  \
  |  | 9205|   110k|    else {                                                             \
  |  | 9206|   110k|        return vis(monostate_val);                                     \
  |  | 9207|   110k|    }
  ------------------
 9252|   110k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 110k]
  ------------------
 9253|   110k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|   110k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   110k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   110k|    }                                                                  \
  |  | 9205|   110k|    else {                                                             \
  |  | 9206|   110k|        return vis(monostate_val);                                     \
  |  | 9207|   110k|    }
  ------------------
 9254|   110k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 110k]
  ------------------
 9255|   110k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|   110k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   110k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   110k|    }                                                                  \
  |  | 9205|   110k|    else {                                                             \
  |  | 9206|   110k|        return vis(monostate_val);                                     \
  |  | 9207|   110k|    }
  ------------------
 9256|   110k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 110k]
  ------------------
 9257|   110k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|   110k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   110k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   110k|    }                                                                  \
  |  | 9205|   110k|    else {                                                             \
  |  | 9206|   110k|        return vis(monostate_val);                                     \
  |  | 9207|   110k|    }
  ------------------
 9258|   110k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 110k]
  ------------------
 9259|   110k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|   110k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   110k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   110k|    }                                                                  \
  |  | 9205|   110k|    else {                                                             \
  |  | 9206|   110k|        return vis(monostate_val);                                     \
  |  | 9207|   110k|    }
  ------------------
 9260|       |
 9261|   110k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 110k]
  ------------------
 9262|   110k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   110k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   110k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 110k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 110k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   110k|            SCN_CLANG_POP
 9279|   110k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4351|   173k|    {
 4352|   173k|        return sync(0);
 4353|   173k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6130|  63.7k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6130|  17.0k|    constexpr basic_scan_args() = default;

_ZN3scn2v44scanIJaENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.7k|{
   89|  14.7k|    auto result = make_scan_result<Source, Args...>();
   90|  14.7k|    fill_scan_result(result,
   91|  14.7k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.7k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.7k|    return result;
   94|  14.7k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|  88.3k|{
   44|  88.3k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|  88.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  88.3k|}
_ZN3scn2v44scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  14.7k|{
  131|  14.7k|    auto result = make_scan_result<Source, Args...>();
  132|  14.7k|    fill_scan_result(result,
  133|  14.7k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.7k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.7k|    return result;
  136|  14.7k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|  88.3k|{
   60|  88.3k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|  88.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  88.3k|}
_ZN3scn2v410scan_valueIaNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.41k|{
  171|  1.41k|    auto result = make_scan_result<Source, T>();
  172|  1.41k|    fill_scan_result(
  173|  1.41k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.41k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.41k|    return result;
  176|  1.41k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|  8.51k|{
   72|  8.51k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|  8.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  8.51k|}
_ZN3scn2v44scanIJhENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.6k|{
   89|  14.6k|    auto result = make_scan_result<Source, Args...>();
   90|  14.6k|    fill_scan_result(result,
   91|  14.6k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.6k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.6k|    return result;
   94|  14.6k|}
_ZN3scn2v44scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  14.6k|{
  131|  14.6k|    auto result = make_scan_result<Source, Args...>();
  132|  14.6k|    fill_scan_result(result,
  133|  14.6k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.6k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.6k|    return result;
  136|  14.6k|}
_ZN3scn2v410scan_valueIhNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.40k|{
  171|  1.40k|    auto result = make_scan_result<Source, T>();
  172|  1.40k|    fill_scan_result(
  173|  1.40k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.40k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.40k|    return result;
  176|  1.40k|}
_ZN3scn2v44scanIJiENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.7k|{
   89|  14.7k|    auto result = make_scan_result<Source, Args...>();
   90|  14.7k|    fill_scan_result(result,
   91|  14.7k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.7k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.7k|    return result;
   94|  14.7k|}
_ZN3scn2v44scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  14.7k|{
  131|  14.7k|    auto result = make_scan_result<Source, Args...>();
  132|  14.7k|    fill_scan_result(result,
  133|  14.7k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.7k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.7k|    return result;
  136|  14.7k|}
_ZN3scn2v410scan_valueIiNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.42k|{
  171|  1.42k|    auto result = make_scan_result<Source, T>();
  172|  1.42k|    fill_scan_result(
  173|  1.42k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.42k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.42k|    return result;
  176|  1.42k|}
_ZN3scn2v44scanIJjENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.7k|{
   89|  14.7k|    auto result = make_scan_result<Source, Args...>();
   90|  14.7k|    fill_scan_result(result,
   91|  14.7k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.7k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.7k|    return result;
   94|  14.7k|}
_ZN3scn2v44scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  14.7k|{
  131|  14.7k|    auto result = make_scan_result<Source, Args...>();
  132|  14.7k|    fill_scan_result(result,
  133|  14.7k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.7k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.7k|    return result;
  136|  14.7k|}
_ZN3scn2v410scan_valueIjNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.41k|{
  171|  1.41k|    auto result = make_scan_result<Source, T>();
  172|  1.41k|    fill_scan_result(
  173|  1.41k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.41k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.41k|    return result;
  176|  1.41k|}
_ZN3scn2v44scanIJxENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.8k|{
   89|  14.8k|    auto result = make_scan_result<Source, Args...>();
   90|  14.8k|    fill_scan_result(result,
   91|  14.8k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.8k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.8k|    return result;
   94|  14.8k|}
_ZN3scn2v44scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  14.8k|{
  131|  14.8k|    auto result = make_scan_result<Source, Args...>();
  132|  14.8k|    fill_scan_result(result,
  133|  14.8k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.8k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.8k|    return result;
  136|  14.8k|}
_ZN3scn2v410scan_valueIxNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.43k|{
  171|  1.43k|    auto result = make_scan_result<Source, T>();
  172|  1.43k|    fill_scan_result(
  173|  1.43k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.43k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.43k|    return result;
  176|  1.43k|}
_ZN3scn2v44scanIJyENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.7k|{
   89|  14.7k|    auto result = make_scan_result<Source, Args...>();
   90|  14.7k|    fill_scan_result(result,
   91|  14.7k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.7k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.7k|    return result;
   94|  14.7k|}
_ZN3scn2v44scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  14.7k|{
  131|  14.7k|    auto result = make_scan_result<Source, Args...>();
  132|  14.7k|    fill_scan_result(result,
  133|  14.7k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.7k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.7k|    return result;
  136|  14.7k|}
_ZN3scn2v410scan_valueIyNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.42k|{
  171|  1.42k|    auto result = make_scan_result<Source, T>();
  172|  1.42k|    fill_scan_result(
  173|  1.42k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.42k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.42k|    return result;
  176|  1.42k|}
_ZN3scn2v44scanIJaENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.7k|{
   89|  14.7k|    auto result = make_scan_result<Source, Args...>();
   90|  14.7k|    fill_scan_result(result,
   91|  14.7k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.7k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.7k|    return result;
   94|  14.7k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|  88.3k|{
   44|  88.3k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|  88.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  88.3k|}
_ZN3scn2v44scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  14.7k|{
  131|  14.7k|    auto result = make_scan_result<Source, Args...>();
  132|  14.7k|    fill_scan_result(result,
  133|  14.7k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.7k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.7k|    return result;
  136|  14.7k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|  88.3k|{
   60|  88.3k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|  88.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  88.3k|}
_ZN3scn2v410scan_valueIaNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.41k|{
  171|  1.41k|    auto result = make_scan_result<Source, T>();
  172|  1.41k|    fill_scan_result(
  173|  1.41k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.41k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.41k|    return result;
  176|  1.41k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|  8.51k|{
   72|  8.51k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|  8.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  8.51k|}
_ZN3scn2v44scanIJhENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.6k|{
   89|  14.6k|    auto result = make_scan_result<Source, Args...>();
   90|  14.6k|    fill_scan_result(result,
   91|  14.6k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.6k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.6k|    return result;
   94|  14.6k|}
_ZN3scn2v44scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  14.6k|{
  131|  14.6k|    auto result = make_scan_result<Source, Args...>();
  132|  14.6k|    fill_scan_result(result,
  133|  14.6k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.6k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.6k|    return result;
  136|  14.6k|}
_ZN3scn2v410scan_valueIhNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.40k|{
  171|  1.40k|    auto result = make_scan_result<Source, T>();
  172|  1.40k|    fill_scan_result(
  173|  1.40k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.40k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.40k|    return result;
  176|  1.40k|}
_ZN3scn2v44scanIJiENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.7k|{
   89|  14.7k|    auto result = make_scan_result<Source, Args...>();
   90|  14.7k|    fill_scan_result(result,
   91|  14.7k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.7k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.7k|    return result;
   94|  14.7k|}
_ZN3scn2v44scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  14.7k|{
  131|  14.7k|    auto result = make_scan_result<Source, Args...>();
  132|  14.7k|    fill_scan_result(result,
  133|  14.7k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.7k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.7k|    return result;
  136|  14.7k|}
_ZN3scn2v410scan_valueIiNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.42k|{
  171|  1.42k|    auto result = make_scan_result<Source, T>();
  172|  1.42k|    fill_scan_result(
  173|  1.42k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.42k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.42k|    return result;
  176|  1.42k|}
_ZN3scn2v44scanIJjENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.7k|{
   89|  14.7k|    auto result = make_scan_result<Source, Args...>();
   90|  14.7k|    fill_scan_result(result,
   91|  14.7k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.7k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.7k|    return result;
   94|  14.7k|}
_ZN3scn2v44scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  14.7k|{
  131|  14.7k|    auto result = make_scan_result<Source, Args...>();
  132|  14.7k|    fill_scan_result(result,
  133|  14.7k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.7k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.7k|    return result;
  136|  14.7k|}
_ZN3scn2v410scan_valueIjNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.41k|{
  171|  1.41k|    auto result = make_scan_result<Source, T>();
  172|  1.41k|    fill_scan_result(
  173|  1.41k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.41k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.41k|    return result;
  176|  1.41k|}
_ZN3scn2v44scanIJxENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.8k|{
   89|  14.8k|    auto result = make_scan_result<Source, Args...>();
   90|  14.8k|    fill_scan_result(result,
   91|  14.8k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.8k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.8k|    return result;
   94|  14.8k|}
_ZN3scn2v44scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  14.8k|{
  131|  14.8k|    auto result = make_scan_result<Source, Args...>();
  132|  14.8k|    fill_scan_result(result,
  133|  14.8k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.8k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.8k|    return result;
  136|  14.8k|}
_ZN3scn2v410scan_valueIxNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.43k|{
  171|  1.43k|    auto result = make_scan_result<Source, T>();
  172|  1.43k|    fill_scan_result(
  173|  1.43k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.43k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.43k|    return result;
  176|  1.43k|}
_ZN3scn2v44scanIJyENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.7k|{
   89|  14.7k|    auto result = make_scan_result<Source, Args...>();
   90|  14.7k|    fill_scan_result(result,
   91|  14.7k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.7k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.7k|    return result;
   94|  14.7k|}
_ZN3scn2v44scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  14.7k|{
  131|  14.7k|    auto result = make_scan_result<Source, Args...>();
  132|  14.7k|    fill_scan_result(result,
  133|  14.7k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.7k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.7k|    return result;
  136|  14.7k|}
_ZN3scn2v410scan_valueIyNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.42k|{
  171|  1.42k|    auto result = make_scan_result<Source, T>();
  172|  1.42k|    fill_scan_result(
  173|  1.42k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.42k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.42k|    return result;
  176|  1.42k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|   598k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|   598k|{
  309|   598k|    static_assert(std::is_same_v<Locale, std::locale>);
  310|   598k|}
_ZNK3scn2v46detail10locale_ref3getINSt3__16localeEEET_v:
  314|   172k|{
  315|   172k|    static_assert(std::is_same_v<Locale, std::locale>);
  316|   172k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (316:12): [True: 86.1k, False: 86.1k]
  ------------------
  317|   172k|                    : std::locale{};
  318|   172k|}
_ZN3scn2v44impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|   118k|{
 1153|   118k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|   118k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   118k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|   118k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|   118k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   118k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|   118k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|   118k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   118k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|   118k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|   118k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   118k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|   118k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 5.10k, False: 113k]
  ------------------
 1159|  5.10k|        SCN_UNLIKELY_ATTR
 1160|  5.10k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  5.10k|                                             "Invalid integer value");
 1162|  5.10k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|   113k|    auto start = source.data();
 1166|   113k|    const auto end = source.data() + source.size();
 1167|   113k|    {
 1168|   303k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 285k, False: 18.4k]
  ------------------
 1169|   285k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 95.1k, False: 190k]
  ------------------
 1170|  95.1k|                break;
 1171|  95.1k|            }
 1172|   285k|        }
 1173|   113k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|   208k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 30.5k, False: 83.0k]
  |  |  |  Branch (865:45): [True: 18.4k, False: 95.1k]
  |  |  |  Branch (865:45): [True: 12.1k, False: 83.0k]
  |  |  ------------------
  ------------------
 1174|  30.5k|            value = 0;
 1175|  30.5k|            return ranges::next(source.begin(),
 1176|  30.5k|                                ranges::distance(source.data(), start));
 1177|  30.5k|        }
 1178|   113k|    }
 1179|       |
 1180|  83.0k|    if constexpr (std::is_same_v<CharT, char>) {
 1181|  83.0k|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 62.1k, False: 20.9k]
  ------------------
 1182|  62.1k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|  62.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  62.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  62.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  62.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.44k, False: 58.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.44k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.44k|    }                                                  \
  |  |  |  | 3939|  62.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  58.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|  58.6k|                             detail::make_string_view_from_pointers(start, end),
 1184|  58.6k|                             value, sign == sign_type::minus_sign));
 1185|  58.6k|            return ranges::next(source.begin(),
 1186|  58.6k|                                ranges::distance(source.data(), ptr));
 1187|  62.1k|        }
 1188|  83.0k|    }
 1189|       |
 1190|  81.1k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|  83.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  83.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  83.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.94k, False: 81.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.94k|    }                                                  \
  |  |  |  | 3939|  83.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  81.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|  81.1k|                     detail::make_string_view_from_pointers(start, end), value,
 1192|  81.1k|                     base, sign == sign_type::minus_sign));
 1193|  81.1k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|  83.0k|}
_ZN3scn2v44impl19parse_integer_valueIwaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|  21.4k|{
 1153|  21.4k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|  21.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|  21.4k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|  21.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|  21.4k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|  21.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|  21.4k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|  21.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|  21.4k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 17.5k, False: 3.94k]
  ------------------
 1159|  17.5k|        SCN_UNLIKELY_ATTR
 1160|  17.5k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  17.5k|                                             "Invalid integer value");
 1162|  17.5k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|  3.94k|    auto start = source.data();
 1166|  3.94k|    const auto end = source.data() + source.size();
 1167|  3.94k|    {
 1168|  4.34k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 4.15k, False: 190]
  ------------------
 1169|  4.15k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 3.75k, False: 398]
  ------------------
 1170|  3.75k|                break;
 1171|  3.75k|            }
 1172|  4.15k|        }
 1173|  3.94k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|  7.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 310, False: 3.63k]
  |  |  |  Branch (865:45): [True: 190, False: 3.75k]
  |  |  |  Branch (865:45): [True: 120, False: 3.63k]
  |  |  ------------------
  ------------------
 1174|    310|            value = 0;
 1175|    310|            return ranges::next(source.begin(),
 1176|    310|                                ranges::distance(source.data(), start));
 1177|    310|        }
 1178|  3.94k|    }
 1179|       |
 1180|       |    if constexpr (std::is_same_v<CharT, char>) {
 1181|       |        if (base == 10) {
 1182|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1183|       |                             detail::make_string_view_from_pointers(start, end),
 1184|       |                             value, sign == sign_type::minus_sign));
 1185|       |            return ranges::next(source.begin(),
 1186|       |                                ranges::distance(source.data(), ptr));
 1187|       |        }
 1188|       |    }
 1189|       |
 1190|  3.63k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|  3.63k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  3.63k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  3.63k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  3.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 332, False: 3.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    332|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    332|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    332|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    332|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    332|    }                                                  \
  |  |  |  | 3939|  3.63k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  3.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|  3.30k|                     detail::make_string_view_from_pointers(start, end), value,
 1192|  3.30k|                     base, sign == sign_type::minus_sign));
 1193|  3.30k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|  3.63k|}
_ZN3scn2v44impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|   140k|{
 1153|   140k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|   140k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   140k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|   140k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|   140k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   140k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|   140k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|   140k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   140k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|   140k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|   140k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   140k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|   140k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 5.73k, False: 134k]
  ------------------
 1159|  5.73k|        SCN_UNLIKELY_ATTR
 1160|  5.73k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  5.73k|                                             "Invalid integer value");
 1162|  5.73k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|   134k|    auto start = source.data();
 1166|   134k|    const auto end = source.data() + source.size();
 1167|   134k|    {
 1168|   338k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 318k, False: 20.5k]
  ------------------
 1169|   318k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 114k, False: 204k]
  ------------------
 1170|   114k|                break;
 1171|   114k|            }
 1172|   318k|        }
 1173|   134k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34.1k, False: 100k]
  |  |  |  Branch (865:45): [True: 20.5k, False: 114k]
  |  |  |  Branch (865:45): [True: 13.6k, False: 100k]
  |  |  ------------------
  ------------------
 1174|  34.1k|            value = 0;
 1175|  34.1k|            return ranges::next(source.begin(),
 1176|  34.1k|                                ranges::distance(source.data(), start));
 1177|  34.1k|        }
 1178|   134k|    }
 1179|       |
 1180|   100k|    if constexpr (std::is_same_v<CharT, char>) {
 1181|   100k|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 72.1k, False: 28.2k]
  ------------------
 1182|  72.1k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|  72.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  72.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  72.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  72.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.69k, False: 70.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.69k|    }                                                  \
  |  |  |  | 3939|  72.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  70.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|  70.4k|                             detail::make_string_view_from_pointers(start, end),
 1184|  70.4k|                             value, sign == sign_type::minus_sign));
 1185|  70.4k|            return ranges::next(source.begin(),
 1186|  70.4k|                                ranges::distance(source.data(), ptr));
 1187|  72.1k|        }
 1188|   100k|    }
 1189|       |
 1190|  99.5k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 898, False: 99.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    898|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    898|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    898|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    898|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    898|    }                                                  \
  |  |  |  | 3939|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  99.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|  99.5k|                     detail::make_string_view_from_pointers(start, end), value,
 1192|  99.5k|                     base, sign == sign_type::minus_sign));
 1193|  99.5k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|   100k|}
_ZN3scn2v44impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|  21.5k|{
 1153|  21.5k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|  21.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|  21.5k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|  21.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|  21.5k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|  21.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|  21.5k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|  21.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|  21.5k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 17.5k, False: 3.99k]
  ------------------
 1159|  17.5k|        SCN_UNLIKELY_ATTR
 1160|  17.5k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  17.5k|                                             "Invalid integer value");
 1162|  17.5k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|  3.99k|    auto start = source.data();
 1166|  3.99k|    const auto end = source.data() + source.size();
 1167|  3.99k|    {
 1168|  4.40k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 4.20k, False: 201]
  ------------------
 1169|  4.20k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 3.79k, False: 416]
  ------------------
 1170|  3.79k|                break;
 1171|  3.79k|            }
 1172|  4.20k|        }
 1173|  3.99k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|  7.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 328, False: 3.66k]
  |  |  |  Branch (865:45): [True: 201, False: 3.79k]
  |  |  |  Branch (865:45): [True: 127, False: 3.66k]
  |  |  ------------------
  ------------------
 1174|    328|            value = 0;
 1175|    328|            return ranges::next(source.begin(),
 1176|    328|                                ranges::distance(source.data(), start));
 1177|    328|        }
 1178|  3.99k|    }
 1179|       |
 1180|       |    if constexpr (std::is_same_v<CharT, char>) {
 1181|       |        if (base == 10) {
 1182|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1183|       |                             detail::make_string_view_from_pointers(start, end),
 1184|       |                             value, sign == sign_type::minus_sign));
 1185|       |            return ranges::next(source.begin(),
 1186|       |                                ranges::distance(source.data(), ptr));
 1187|       |        }
 1188|       |    }
 1189|       |
 1190|  3.66k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|  3.66k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  3.66k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  3.66k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  3.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 148, False: 3.51k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    148|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    148|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    148|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    148|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    148|    }                                                  \
  |  |  |  | 3939|  3.66k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  3.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|  3.51k|                     detail::make_string_view_from_pointers(start, end), value,
 1192|  3.51k|                     base, sign == sign_type::minus_sign));
 1193|  3.51k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|  3.66k|}
_ZN3scn2v44impl19parse_integer_valueIcxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|   142k|{
 1153|   142k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|   142k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|   142k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|   142k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|   142k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 6.00k, False: 136k]
  ------------------
 1159|  6.00k|        SCN_UNLIKELY_ATTR
 1160|  6.00k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  6.00k|                                             "Invalid integer value");
 1162|  6.00k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|   136k|    auto start = source.data();
 1166|   136k|    const auto end = source.data() + source.size();
 1167|   136k|    {
 1168|   341k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 320k, False: 20.7k]
  ------------------
 1169|   320k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 115k, False: 204k]
  ------------------
 1170|   115k|                break;
 1171|   115k|            }
 1172|   320k|        }
 1173|   136k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|   251k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34.4k, False: 101k]
  |  |  |  Branch (865:45): [True: 20.7k, False: 115k]
  |  |  |  Branch (865:45): [True: 13.7k, False: 101k]
  |  |  ------------------
  ------------------
 1174|  34.4k|            value = 0;
 1175|  34.4k|            return ranges::next(source.begin(),
 1176|  34.4k|                                ranges::distance(source.data(), start));
 1177|  34.4k|        }
 1178|   136k|    }
 1179|       |
 1180|   101k|    if constexpr (std::is_same_v<CharT, char>) {
 1181|   101k|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 73.1k, False: 28.6k]
  ------------------
 1182|  73.1k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|  73.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  73.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  73.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  73.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 916, False: 72.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    916|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    916|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    916|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    916|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    916|    }                                                  \
  |  |  |  | 3939|  73.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  72.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|  72.2k|                             detail::make_string_view_from_pointers(start, end),
 1184|  72.2k|                             value, sign == sign_type::minus_sign));
 1185|  72.2k|            return ranges::next(source.begin(),
 1186|  72.2k|                                ranges::distance(source.data(), ptr));
 1187|  73.1k|        }
 1188|   101k|    }
 1189|       |
 1190|   101k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|   101k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   101k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   101k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 462, False: 101k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    462|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    462|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    462|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    462|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    462|    }                                                  \
  |  |  |  | 3939|   101k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|   101k|                     detail::make_string_view_from_pointers(start, end), value,
 1192|   101k|                     base, sign == sign_type::minus_sign));
 1193|   101k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|   101k|}
_ZN3scn2v44impl19parse_integer_valueIwxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|  21.7k|{
 1153|  21.7k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|  21.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|  21.7k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|  21.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|  21.7k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|  21.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|  21.7k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|  21.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|  21.7k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 17.6k, False: 4.08k]
  ------------------
 1159|  17.6k|        SCN_UNLIKELY_ATTR
 1160|  17.6k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  17.6k|                                             "Invalid integer value");
 1162|  17.6k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|  4.08k|    auto start = source.data();
 1166|  4.08k|    const auto end = source.data() + source.size();
 1167|  4.08k|    {
 1168|  4.55k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 4.32k, False: 234]
  ------------------
 1169|  4.32k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 3.85k, False: 470]
  ------------------
 1170|  3.85k|                break;
 1171|  3.85k|            }
 1172|  4.32k|        }
 1173|  4.08k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|  7.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 382, False: 3.70k]
  |  |  |  Branch (865:45): [True: 234, False: 3.85k]
  |  |  |  Branch (865:45): [True: 148, False: 3.70k]
  |  |  ------------------
  ------------------
 1174|    382|            value = 0;
 1175|    382|            return ranges::next(source.begin(),
 1176|    382|                                ranges::distance(source.data(), start));
 1177|    382|        }
 1178|  4.08k|    }
 1179|       |
 1180|       |    if constexpr (std::is_same_v<CharT, char>) {
 1181|       |        if (base == 10) {
 1182|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1183|       |                             detail::make_string_view_from_pointers(start, end),
 1184|       |                             value, sign == sign_type::minus_sign));
 1185|       |            return ranges::next(source.begin(),
 1186|       |                                ranges::distance(source.data(), ptr));
 1187|       |        }
 1188|       |    }
 1189|       |
 1190|  3.70k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|  3.70k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  3.70k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  3.70k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  3.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20, False: 3.68k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     20|    }                                                  \
  |  |  |  | 3939|  3.70k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  3.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|  3.68k|                     detail::make_string_view_from_pointers(start, end), value,
 1192|  3.68k|                     base, sign == sign_type::minus_sign));
 1193|  3.68k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|  3.70k|}
_ZN3scn2v44impl19parse_integer_valueIchEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|  97.2k|{
 1153|  97.2k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|  97.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  97.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|  97.2k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|  97.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  97.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|  97.2k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|  97.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  97.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|  97.2k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|  97.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  97.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|  97.2k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 3.54k, False: 93.7k]
  ------------------
 1159|  3.54k|        SCN_UNLIKELY_ATTR
 1160|  3.54k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  3.54k|                                             "Invalid integer value");
 1162|  3.54k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|  93.7k|    auto start = source.data();
 1166|  93.7k|    const auto end = source.data() + source.size();
 1167|  93.7k|    {
 1168|   275k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 257k, False: 17.3k]
  ------------------
 1169|   257k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 76.3k, False: 181k]
  ------------------
 1170|  76.3k|                break;
 1171|  76.3k|            }
 1172|   257k|        }
 1173|  93.7k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|   170k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28.9k, False: 64.7k]
  |  |  |  Branch (865:45): [True: 17.3k, False: 76.3k]
  |  |  |  Branch (865:45): [True: 11.5k, False: 64.7k]
  |  |  ------------------
  ------------------
 1174|  28.9k|            value = 0;
 1175|  28.9k|            return ranges::next(source.begin(),
 1176|  28.9k|                                ranges::distance(source.data(), start));
 1177|  28.9k|        }
 1178|  93.7k|    }
 1179|       |
 1180|  64.7k|    if constexpr (std::is_same_v<CharT, char>) {
 1181|  64.7k|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 47.0k, False: 17.7k]
  ------------------
 1182|  47.0k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|  47.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  47.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  47.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  47.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.72k, False: 45.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.72k|    }                                                  \
  |  |  |  | 3939|  47.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  45.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|  45.3k|                             detail::make_string_view_from_pointers(start, end),
 1184|  45.3k|                             value, sign == sign_type::minus_sign));
 1185|  45.3k|            return ranges::next(source.begin(),
 1186|  45.3k|                                ranges::distance(source.data(), ptr));
 1187|  47.0k|        }
 1188|  64.7k|    }
 1189|       |
 1190|  63.7k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|  64.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  64.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  64.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  64.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.01k, False: 63.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.01k|    }                                                  \
  |  |  |  | 3939|  64.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  63.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|  63.7k|                     detail::make_string_view_from_pointers(start, end), value,
 1192|  63.7k|                     base, sign == sign_type::minus_sign));
 1193|  63.7k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|  64.7k|}
_ZN3scn2v44impl19parse_integer_valueIwhEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|  21.0k|{
 1153|  21.0k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|  21.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|  21.0k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|  21.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|  21.0k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|  21.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|  21.0k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|  21.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|  21.0k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 17.3k, False: 3.72k]
  ------------------
 1159|  17.3k|        SCN_UNLIKELY_ATTR
 1160|  17.3k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  17.3k|                                             "Invalid integer value");
 1162|  17.3k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|  3.72k|    auto start = source.data();
 1166|  3.72k|    const auto end = source.data() + source.size();
 1167|  3.72k|    {
 1168|  4.10k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 3.92k, False: 179]
  ------------------
 1169|  3.92k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 3.54k, False: 380]
  ------------------
 1170|  3.54k|                break;
 1171|  3.54k|            }
 1172|  3.92k|        }
 1173|  3.72k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|  7.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 292, False: 3.42k]
  |  |  |  Branch (865:45): [True: 179, False: 3.54k]
  |  |  |  Branch (865:45): [True: 113, False: 3.42k]
  |  |  ------------------
  ------------------
 1174|    292|            value = 0;
 1175|    292|            return ranges::next(source.begin(),
 1176|    292|                                ranges::distance(source.data(), start));
 1177|    292|        }
 1178|  3.72k|    }
 1179|       |
 1180|       |    if constexpr (std::is_same_v<CharT, char>) {
 1181|       |        if (base == 10) {
 1182|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1183|       |                             detail::make_string_view_from_pointers(start, end),
 1184|       |                             value, sign == sign_type::minus_sign));
 1185|       |            return ranges::next(source.begin(),
 1186|       |                                ranges::distance(source.data(), ptr));
 1187|       |        }
 1188|       |    }
 1189|       |
 1190|  3.42k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|  3.42k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  3.42k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  3.42k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  3.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 250, False: 3.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    250|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    250|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    250|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    250|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    250|    }                                                  \
  |  |  |  | 3939|  3.42k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  3.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|  3.17k|                     detail::make_string_view_from_pointers(start, end), value,
 1192|  3.17k|                     base, sign == sign_type::minus_sign));
 1193|  3.17k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|  3.42k|}
_ZN3scn2v44impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|   106k|{
 1153|   106k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|   106k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|   106k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|   106k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|   106k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 3.77k, False: 102k]
  ------------------
 1159|  3.77k|        SCN_UNLIKELY_ATTR
 1160|  3.77k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  3.77k|                                             "Invalid integer value");
 1162|  3.77k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|   102k|    auto start = source.data();
 1166|   102k|    const auto end = source.data() + source.size();
 1167|   102k|    {
 1168|   290k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 271k, False: 18.5k]
  ------------------
 1169|   271k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 84.4k, False: 187k]
  ------------------
 1170|  84.4k|                break;
 1171|  84.4k|            }
 1172|   271k|        }
 1173|   102k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 30.9k, False: 71.9k]
  |  |  |  Branch (865:45): [True: 18.5k, False: 84.4k]
  |  |  |  Branch (865:45): [True: 12.4k, False: 71.9k]
  |  |  ------------------
  ------------------
 1174|  30.9k|            value = 0;
 1175|  30.9k|            return ranges::next(source.begin(),
 1176|  30.9k|                                ranges::distance(source.data(), start));
 1177|  30.9k|        }
 1178|   102k|    }
 1179|       |
 1180|  71.9k|    if constexpr (std::is_same_v<CharT, char>) {
 1181|  71.9k|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 52.2k, False: 19.7k]
  ------------------
 1182|  52.2k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|  52.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  52.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  52.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  52.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 906, False: 51.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    906|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    906|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    906|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    906|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    906|    }                                                  \
  |  |  |  | 3939|  52.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  51.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|  51.3k|                             detail::make_string_view_from_pointers(start, end),
 1184|  51.3k|                             value, sign == sign_type::minus_sign));
 1185|  51.3k|            return ranges::next(source.begin(),
 1186|  51.3k|                                ranges::distance(source.data(), ptr));
 1187|  52.2k|        }
 1188|  71.9k|    }
 1189|       |
 1190|  71.4k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|  71.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  71.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  71.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  71.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 478, False: 71.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    478|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    478|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    478|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    478|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    478|    }                                                  \
  |  |  |  | 3939|  71.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  71.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|  71.4k|                     detail::make_string_view_from_pointers(start, end), value,
 1192|  71.4k|                     base, sign == sign_type::minus_sign));
 1193|  71.4k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|  71.9k|}
_ZN3scn2v44impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|  21.1k|{
 1153|  21.1k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|  21.1k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|  21.1k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|  21.1k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|  21.1k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 17.4k, False: 3.74k]
  ------------------
 1159|  17.4k|        SCN_UNLIKELY_ATTR
 1160|  17.4k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  17.4k|                                             "Invalid integer value");
 1162|  17.4k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|  3.74k|    auto start = source.data();
 1166|  3.74k|    const auto end = source.data() + source.size();
 1167|  3.74k|    {
 1168|  4.12k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 3.94k, False: 179]
  ------------------
 1169|  3.94k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 3.56k, False: 380]
  ------------------
 1170|  3.56k|                break;
 1171|  3.56k|            }
 1172|  3.94k|        }
 1173|  3.74k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|  7.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 292, False: 3.45k]
  |  |  |  Branch (865:45): [True: 179, False: 3.56k]
  |  |  |  Branch (865:45): [True: 113, False: 3.45k]
  |  |  ------------------
  ------------------
 1174|    292|            value = 0;
 1175|    292|            return ranges::next(source.begin(),
 1176|    292|                                ranges::distance(source.data(), start));
 1177|    292|        }
 1178|  3.74k|    }
 1179|       |
 1180|       |    if constexpr (std::is_same_v<CharT, char>) {
 1181|       |        if (base == 10) {
 1182|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1183|       |                             detail::make_string_view_from_pointers(start, end),
 1184|       |                             value, sign == sign_type::minus_sign));
 1185|       |            return ranges::next(source.begin(),
 1186|       |                                ranges::distance(source.data(), ptr));
 1187|       |        }
 1188|       |    }
 1189|       |
 1190|  3.45k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|  3.45k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  3.45k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  3.45k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  3.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 144, False: 3.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    144|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    144|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    144|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    144|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    144|    }                                                  \
  |  |  |  | 3939|  3.45k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  3.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|  3.30k|                     detail::make_string_view_from_pointers(start, end), value,
 1192|  3.30k|                     base, sign == sign_type::minus_sign));
 1193|  3.30k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|  3.45k|}
_ZN3scn2v44impl19parse_integer_valueIcyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|   107k|{
 1153|   107k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|   107k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   107k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|   107k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|   107k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   107k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|   107k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|   107k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   107k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|   107k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|   107k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   107k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|   107k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 3.84k, False: 103k]
  ------------------
 1159|  3.84k|        SCN_UNLIKELY_ATTR
 1160|  3.84k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  3.84k|                                             "Invalid integer value");
 1162|  3.84k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|   103k|    auto start = source.data();
 1166|   103k|    const auto end = source.data() + source.size();
 1167|   103k|    {
 1168|   291k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 272k, False: 18.5k]
  ------------------
 1169|   272k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 85.2k, False: 187k]
  ------------------
 1170|  85.2k|                break;
 1171|  85.2k|            }
 1172|   272k|        }
 1173|   103k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 31.0k, False: 72.7k]
  |  |  |  Branch (865:45): [True: 18.5k, False: 85.2k]
  |  |  |  Branch (865:45): [True: 12.4k, False: 72.7k]
  |  |  ------------------
  ------------------
 1174|  31.0k|            value = 0;
 1175|  31.0k|            return ranges::next(source.begin(),
 1176|  31.0k|                                ranges::distance(source.data(), start));
 1177|  31.0k|        }
 1178|   103k|    }
 1179|       |
 1180|  72.7k|    if constexpr (std::is_same_v<CharT, char>) {
 1181|  72.7k|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 52.8k, False: 19.9k]
  ------------------
 1182|  52.8k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|  52.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  52.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  52.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  52.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 456, False: 52.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    456|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    456|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    456|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    456|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    456|    }                                                  \
  |  |  |  | 3939|  52.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  52.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|  52.3k|                             detail::make_string_view_from_pointers(start, end),
 1184|  52.3k|                             value, sign == sign_type::minus_sign));
 1185|  52.3k|            return ranges::next(source.begin(),
 1186|  52.3k|                                ranges::distance(source.data(), ptr));
 1187|  52.8k|        }
 1188|  72.7k|    }
 1189|       |
 1190|  72.5k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|  72.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  72.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  72.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  72.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 258, False: 72.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    258|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    258|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    258|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    258|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    258|    }                                                  \
  |  |  |  | 3939|  72.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  72.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|  72.5k|                     detail::make_string_view_from_pointers(start, end), value,
 1192|  72.5k|                     base, sign == sign_type::minus_sign));
 1193|  72.5k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|  72.7k|}
_ZN3scn2v44impl19parse_integer_valueIwyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|  21.2k|{
 1153|  21.2k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|  21.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|  21.2k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|  21.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|  21.2k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|  21.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|  21.2k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|  21.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|  21.2k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 17.4k, False: 3.78k]
  ------------------
 1159|  17.4k|        SCN_UNLIKELY_ATTR
 1160|  17.4k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  17.4k|                                             "Invalid integer value");
 1162|  17.4k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|  3.78k|    auto start = source.data();
 1166|  3.78k|    const auto end = source.data() + source.size();
 1167|  3.78k|    {
 1168|  4.16k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 3.98k, False: 179]
  ------------------
 1169|  3.98k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 3.60k, False: 380]
  ------------------
 1170|  3.60k|                break;
 1171|  3.60k|            }
 1172|  3.98k|        }
 1173|  3.78k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|  7.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 292, False: 3.49k]
  |  |  |  Branch (865:45): [True: 179, False: 3.60k]
  |  |  |  Branch (865:45): [True: 113, False: 3.49k]
  |  |  ------------------
  ------------------
 1174|    292|            value = 0;
 1175|    292|            return ranges::next(source.begin(),
 1176|    292|                                ranges::distance(source.data(), start));
 1177|    292|        }
 1178|  3.78k|    }
 1179|       |
 1180|       |    if constexpr (std::is_same_v<CharT, char>) {
 1181|       |        if (base == 10) {
 1182|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1183|       |                             detail::make_string_view_from_pointers(start, end),
 1184|       |                             value, sign == sign_type::minus_sign));
 1185|       |            return ranges::next(source.begin(),
 1186|       |                                ranges::distance(source.data(), ptr));
 1187|       |        }
 1188|       |    }
 1189|       |
 1190|  3.49k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|  3.49k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  3.49k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  3.49k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  3.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 8, False: 3.48k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      8|    }                                                  \
  |  |  |  | 3939|  3.49k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  3.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|  3.48k|                     detail::make_string_view_from_pointers(start, end), value,
 1192|  3.48k|                     base, sign == sign_type::minus_sign));
 1193|  3.48k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|  3.49k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1902|   210k|{
 1903|   210k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1904|   210k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1910|   210k|{
 1911|   210k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 1912|   210k|    return sync_after_vscan(source, n);
 1913|   210k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1920|  88.3k|{
 1921|  88.3k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1922|  88.3k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1928|  88.3k|{
 1929|  88.3k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 1930|  88.3k|    return sync_after_vscan(source, n);
 1931|  88.3k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|   853k|{
  215|   853k|    return find_classic_impl(
  216|   853k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|   853k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|   853k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1871|   210k|{
 1872|   210k|    return vscan_internal(source, format, args);
 1873|   210k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1877|   210k|{
 1878|   210k|    auto n = vscan_internal(source, format, args);
 1879|   210k|    return sync_after_vscan(source, n);
 1880|   210k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1885|  88.3k|{
 1886|  88.3k|    return vscan_internal(source, format, args);
 1887|  88.3k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1891|  88.3k|{
 1892|  88.3k|    auto n = vscan_internal(source, format, args);
 1893|  88.3k|    return sync_after_vscan(source, n);
 1894|  88.3k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1957|  32.0k|{
 1958|  32.0k|    return vscan_value_internal(source, arg);
 1959|  32.0k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1962|  31.6k|{
 1963|  31.6k|    auto n = vscan_value_internal(source, arg);
 1964|  31.6k|    return sync_after_vscan(source, n);
 1965|  31.6k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1970|  8.51k|{
 1971|  8.51k|    return vscan_value_internal(source, arg);
 1972|  8.51k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1976|  8.51k|{
 1977|  8.51k|    auto n = vscan_value_internal(source, arg);
 1978|  8.51k|    return sync_after_vscan(source, n);
 1979|  8.51k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIaEEbmmib:
 1056|  86.7k|{
 1057|  86.7k|    auto max_digits = maxdigits_u64(base);
 1058|  86.7k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1058:9): [True: 954, False: 85.7k]
  ------------------
 1059|    954|        return true;
 1060|    954|    }
 1061|  85.7k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1061:9): [True: 318, False: 85.4k]
  |  Branch (1061:39): [True: 106, False: 212]
  ------------------
 1062|    106|        return true;
 1063|    106|    }
 1064|  85.6k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1065|  85.6k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1065:13): [True: 4.66k, False: 80.9k]
  ------------------
 1066|  85.6k|                      static_cast<uint64_t>(is_negative)) {
 1067|  4.66k|            SCN_UNLIKELY_ATTR
 1068|  4.66k|            return true;
 1069|  4.66k|        }
 1070|  85.6k|    }
 1071|       |
 1072|  80.9k|    return false;
 1073|  85.7k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113maxdigits_u64Ei:
 1002|   516k|{
 1003|   516k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  930|   516k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   516k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1004|   516k|    return maxdigits_u64_table[static_cast<size_t>(base)];
 1005|   516k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112min_safe_u64Ei:
 1046|  1.79k|{
 1047|  1.79k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  930|  1.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1048|  1.79k|    return min_safe_u64_table[static_cast<size_t>(base)];
 1049|  1.79k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIaEET_mb:
 1077|  80.9k|{
 1078|  80.9k|    if (is_negative) {
  ------------------
  |  Branch (1078:9): [True: 15.0k, False: 65.9k]
  ------------------
 1079|  15.0k|        SCN_MSVC_PUSH
 1080|  15.0k|        SCN_MSVC_IGNORE(4146)
 1081|  15.0k|        return static_cast<T>(
 1082|  15.0k|            -std::numeric_limits<T>::max() -
 1083|  15.0k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1084|  15.0k|        SCN_MSVC_POP
 1085|  15.0k|    }
 1086|       |
 1087|  65.9k|    return static_cast<T>(u64val);
 1088|  80.9k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIiEEbmmib:
 1056|   104k|{
 1057|   104k|    auto max_digits = maxdigits_u64(base);
 1058|   104k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1058:9): [True: 1.02k, False: 103k]
  ------------------
 1059|  1.02k|        return true;
 1060|  1.02k|    }
 1061|   103k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1061:9): [True: 326, False: 102k]
  |  Branch (1061:39): [True: 106, False: 220]
  ------------------
 1062|    106|        return true;
 1063|    106|    }
 1064|   103k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1065|   103k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1065:13): [True: 1.61k, False: 101k]
  ------------------
 1066|   103k|                      static_cast<uint64_t>(is_negative)) {
 1067|  1.61k|            SCN_UNLIKELY_ATTR
 1068|  1.61k|            return true;
 1069|  1.61k|        }
 1070|   103k|    }
 1071|       |
 1072|   101k|    return false;
 1073|   103k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIiEET_mb:
 1077|   101k|{
 1078|   101k|    if (is_negative) {
  ------------------
  |  Branch (1078:9): [True: 16.4k, False: 84.9k]
  ------------------
 1079|  16.4k|        SCN_MSVC_PUSH
 1080|  16.4k|        SCN_MSVC_IGNORE(4146)
 1081|  16.4k|        return static_cast<T>(
 1082|  16.4k|            -std::numeric_limits<T>::max() -
 1083|  16.4k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1084|  16.4k|        SCN_MSVC_POP
 1085|  16.4k|    }
 1086|       |
 1087|  84.9k|    return static_cast<T>(u64val);
 1088|   101k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIxEEbmmib:
 1056|   105k|{
 1057|   105k|    auto max_digits = maxdigits_u64(base);
 1058|   105k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1058:9): [True: 1.10k, False: 104k]
  ------------------
 1059|  1.10k|        return true;
 1060|  1.10k|    }
 1061|   104k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1061:9): [True: 362, False: 104k]
  |  Branch (1061:39): [True: 106, False: 256]
  ------------------
 1062|    106|        return true;
 1063|    106|    }
 1064|   104k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1065|   104k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1065:13): [True: 184, False: 104k]
  ------------------
 1066|   104k|                      static_cast<uint64_t>(is_negative)) {
 1067|    184|            SCN_UNLIKELY_ATTR
 1068|    184|            return true;
 1069|    184|        }
 1070|   104k|    }
 1071|       |
 1072|   104k|    return false;
 1073|   104k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIxEET_mb:
 1077|   104k|{
 1078|   104k|    if (is_negative) {
  ------------------
  |  Branch (1078:9): [True: 17.2k, False: 86.9k]
  ------------------
 1079|  17.2k|        SCN_MSVC_PUSH
 1080|  17.2k|        SCN_MSVC_IGNORE(4146)
 1081|  17.2k|        return static_cast<T>(
 1082|  17.2k|            -std::numeric_limits<T>::max() -
 1083|  17.2k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1084|  17.2k|        SCN_MSVC_POP
 1085|  17.2k|    }
 1086|       |
 1087|  86.9k|    return static_cast<T>(u64val);
 1088|   104k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIhEEbmmib:
 1056|  68.2k|{
 1057|  68.2k|    auto max_digits = maxdigits_u64(base);
 1058|  68.2k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1058:9): [True: 650, False: 67.5k]
  ------------------
 1059|    650|        return true;
 1060|    650|    }
 1061|  67.5k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1061:9): [True: 224, False: 67.3k]
  |  Branch (1061:39): [True: 58, False: 166]
  ------------------
 1062|     58|        return true;
 1063|     58|    }
 1064|  67.5k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1065|  67.5k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1065:13): [True: 2.28k, False: 65.2k]
  ------------------
 1066|  67.5k|                      static_cast<uint64_t>(is_negative)) {
 1067|  2.28k|            SCN_UNLIKELY_ATTR
 1068|  2.28k|            return true;
 1069|  2.28k|        }
 1070|  67.5k|    }
 1071|       |
 1072|  65.2k|    return false;
 1073|  67.5k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIhEET_mb:
 1077|  65.2k|{
 1078|  65.2k|    if (is_negative) {
  ------------------
  |  Branch (1078:9): [True: 0, False: 65.2k]
  ------------------
 1079|      0|        SCN_MSVC_PUSH
 1080|      0|        SCN_MSVC_IGNORE(4146)
 1081|      0|        return static_cast<T>(
 1082|      0|            -std::numeric_limits<T>::max() -
 1083|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1084|      0|        SCN_MSVC_POP
 1085|      0|    }
 1086|       |
 1087|  65.2k|    return static_cast<T>(u64val);
 1088|  65.2k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIjEEbmmib:
 1056|  75.4k|{
 1057|  75.4k|    auto max_digits = maxdigits_u64(base);
 1058|  75.4k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1058:9): [True: 650, False: 74.7k]
  ------------------
 1059|    650|        return true;
 1060|    650|    }
 1061|  74.7k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1061:9): [True: 228, False: 74.5k]
  |  Branch (1061:39): [True: 58, False: 170]
  ------------------
 1062|     58|        return true;
 1063|     58|    }
 1064|  74.7k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1065|  74.7k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1065:13): [True: 820, False: 73.8k]
  ------------------
 1066|  74.7k|                      static_cast<uint64_t>(is_negative)) {
 1067|    820|            SCN_UNLIKELY_ATTR
 1068|    820|            return true;
 1069|    820|        }
 1070|  74.7k|    }
 1071|       |
 1072|  73.8k|    return false;
 1073|  74.7k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIjEET_mb:
 1077|  73.8k|{
 1078|  73.8k|    if (is_negative) {
  ------------------
  |  Branch (1078:9): [True: 0, False: 73.8k]
  ------------------
 1079|      0|        SCN_MSVC_PUSH
 1080|      0|        SCN_MSVC_IGNORE(4146)
 1081|      0|        return static_cast<T>(
 1082|      0|            -std::numeric_limits<T>::max() -
 1083|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1084|      0|        SCN_MSVC_POP
 1085|      0|    }
 1086|       |
 1087|  73.8k|    return static_cast<T>(u64val);
 1088|  73.8k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIyEEbmmib:
 1056|  76.2k|{
 1057|  76.2k|    auto max_digits = maxdigits_u64(base);
 1058|  76.2k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1058:9): [True: 664, False: 75.5k]
  ------------------
 1059|    664|        return true;
 1060|    664|    }
 1061|  75.5k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1061:9): [True: 336, False: 75.2k]
  |  Branch (1061:39): [True: 58, False: 278]
  ------------------
 1062|     58|        return true;
 1063|     58|    }
 1064|  75.5k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1065|  75.5k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1065:13): [True: 0, False: 75.5k]
  ------------------
 1066|  75.5k|                      static_cast<uint64_t>(is_negative)) {
 1067|      0|            SCN_UNLIKELY_ATTR
 1068|      0|            return true;
 1069|      0|        }
 1070|  75.5k|    }
 1071|       |
 1072|  75.5k|    return false;
 1073|  75.5k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIyEET_mb:
 1077|  75.5k|{
 1078|  75.5k|    if (is_negative) {
  ------------------
  |  Branch (1078:9): [True: 0, False: 75.5k]
  ------------------
 1079|      0|        SCN_MSVC_PUSH
 1080|      0|        SCN_MSVC_IGNORE(4146)
 1081|      0|        return static_cast<T>(
 1082|      0|            -std::numeric_limits<T>::max() -
 1083|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1084|      0|        SCN_MSVC_POP
 1085|      0|    }
 1086|       |
 1087|  75.5k|    return static_cast<T>(u64val);
 1088|  75.5k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121get_eight_digits_wordEPKc:
  940|   189k|{
  941|   189k|    uint64_t val{};
  942|   189k|    std::memcpy(&val, input, sizeof(uint64_t));
  943|       |    if constexpr (SCN_IS_BIG_ENDIAN) {
  944|       |        val = byteswap(val);
  945|       |    }
  946|   189k|    return val;
  947|   189k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_140parse_eight_decimal_digits_unrolled_fastEm:
  950|  33.7k|{
  951|  33.7k|    constexpr uint64_t mask = 0x000000FF000000FF;
  952|  33.7k|    constexpr uint64_t mul1 = 0x000F424000000064;  // 100 + (1000000ULL << 32)
  953|  33.7k|    constexpr uint64_t mul2 = 0x0000271000000001;  // 1 + (10000ULL << 32)
  954|  33.7k|    word -= 0x3030303030303030;
  955|  33.7k|    word = (word * 10) + (word >> 8);  // val = (val * 2561) >> 8;
  956|  33.7k|    word = (((word & mask) * mul1) + (((word >> 16) & mask) * mul2)) >> 32;
  957|  33.7k|    return static_cast<uint32_t>(word);
  958|  33.7k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_141is_word_made_of_eight_decimal_digits_fastEm:
  961|   155k|{
  962|   155k|    return !((((word + 0x4646464646464646) | (word - 0x3030303030303030)) &
  963|   155k|              0x8080808080808080));
  964|   155k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|   520k|{
  118|   520k|    static_assert(sizeof(*source.data()) == 1);
  119|   520k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  930|   520k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   520k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|   520k|    uint64_t word{};
  121|   520k|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|   520k|    return has_byte_greater(word, 127) != 0;
  124|   520k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   853k|{
  131|   853k|    auto it = source.begin();
  132|       |
  133|   932k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 520k, False: 412k]
  ------------------
  134|   520k|        auto sv =
  135|   520k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|   520k|                .substr(0, 8);
  137|       |
  138|   520k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 496k, False: 24.1k]
  ------------------
  139|   496k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|   496k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|   496k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 419k, False: 77.5k]
  ------------------
  142|   419k|                break;
  143|   419k|            }
  144|  77.5k|            continue;
  145|   496k|        }
  146|       |
  147|  33.3k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 31.3k, False: 2.05k]
  ------------------
  148|  31.3k|            auto tmp =
  149|  31.3k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|  31.3k|            auto res = get_next_code_point(tmp);
  151|  31.3k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 22.0k, False: 9.25k]
  ------------------
  152|  22.0k|                return it;
  153|  22.0k|            }
  154|  9.25k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  9.25k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  9.25k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|  9.25k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  9.25k|        }
  158|  24.1k|    }
  159|       |
  160|   831k|    return detail::make_string_view_iterator(source, it);
  161|   853k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|   867k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|  31.3k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIaEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1094|  62.1k|{
 1095|  62.1k|    uint64_t u64val{};
 1096|  62.1k|    auto ptr = parse_decimal_integer_fast_impl(
 1097|  62.1k|        input.data(), input.data() + input.size(), u64val);
 1098|       |
 1099|  62.1k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1100|  62.1k|    if (SCN_UNLIKELY(
  ------------------
  |  |  865|  62.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.44k, False: 58.6k]
  |  |  ------------------
  ------------------
 1101|  62.1k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1102|  3.44k|        return detail::unexpected_scan_error(
 1103|  3.44k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1103:13): [True: 1.07k, False: 2.37k]
  ------------------
 1104|  3.44k|                        : scan_error::value_positive_overflow,
 1105|  3.44k|            "Integer overflow");
 1106|  3.44k|    }
 1107|       |
 1108|  58.6k|    val = store_result<T>(u64val, is_negative);
 1109|  58.6k|    return ptr;
 1110|  62.1k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_131parse_decimal_integer_fast_implEPKcS4_Rm:
  982|   359k|{
  983|   359k|    loop_parse_if_eight_decimal_digits(begin, end, val);
  984|       |
  985|   808k|    while (begin != end) {
  ------------------
  |  Branch (985:12): [True: 584k, False: 223k]
  ------------------
  986|   584k|        const auto digit = char_to_int(*begin);
  987|   584k|        if (digit >= 10) {
  ------------------
  |  Branch (987:13): [True: 135k, False: 448k]
  ------------------
  988|   135k|            break;
  989|   135k|        }
  990|   448k|        val = 10ull * val + static_cast<uint64_t>(digit);
  991|   448k|        ++begin;
  992|   448k|    }
  993|       |
  994|   359k|    return begin;
  995|   359k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_134loop_parse_if_eight_decimal_digitsERPKcS4_Rm:
  969|   359k|{
  970|   359k|    while (
  971|   393k|        std::distance(p, end) >= 8 &&
  ------------------
  |  Branch (971:9): [True: 155k, False: 237k]
  ------------------
  972|   393k|        is_word_made_of_eight_decimal_digits_fast(get_eight_digits_word(p))) {
  ------------------
  |  Branch (972:9): [True: 33.7k, False: 121k]
  ------------------
  973|  33.7k|        val = val * 100'000'000 + parse_eight_decimal_digits_unrolled_fast(
  974|  33.7k|                                      get_eight_digits_word(p));
  975|  33.7k|        p += 8;
  976|  33.7k|    }
  977|   359k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIcaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|  20.9k|{
 1118|  20.9k|    uint64_t u64val{};
 1119|  20.9k|    const CharT* begin = input.data();
 1120|  20.9k|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  73.6k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 62.7k, False: 10.9k]
  ------------------
 1123|  62.7k|        const auto digit = char_to_int(*begin);
 1124|  62.7k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 10.0k, False: 52.7k]
  ------------------
 1125|  10.0k|            break;
 1126|  10.0k|        }
 1127|  52.7k|        u64val =
 1128|  52.7k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  52.7k|        ++begin;
 1130|  52.7k|    }
 1131|       |
 1132|  20.9k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|  20.9k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  20.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.94k, False: 18.9k]
  |  |  ------------------
  ------------------
 1134|  20.9k|                                               is_negative))) {
 1135|  1.94k|        return detail::unexpected_scan_error(
 1136|  1.94k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 608, False: 1.33k]
  ------------------
 1137|  1.94k|                        : scan_error::value_positive_overflow,
 1138|  1.94k|            "Integer overflow");
 1139|  1.94k|    }
 1140|       |
 1141|  18.9k|    val = store_result<T>(u64val, is_negative);
 1142|  18.9k|    return begin;
 1143|  20.9k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|  3.63k|{
 1118|  3.63k|    uint64_t u64val{};
 1119|  3.63k|    const CharT* begin = input.data();
 1120|  3.63k|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  12.8k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 9.49k, False: 3.36k]
  ------------------
 1123|  9.49k|        const auto digit = char_to_int(*begin);
 1124|  9.49k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 275, False: 9.22k]
  ------------------
 1125|    275|            break;
 1126|    275|        }
 1127|  9.22k|        u64val =
 1128|  9.22k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  9.22k|        ++begin;
 1130|  9.22k|    }
 1131|       |
 1132|  3.63k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|  3.63k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  3.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 332, False: 3.30k]
  |  |  ------------------
  ------------------
 1134|  3.63k|                                               is_negative))) {
 1135|    332|        return detail::unexpected_scan_error(
 1136|    332|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 56, False: 276]
  ------------------
 1137|    332|                        : scan_error::value_positive_overflow,
 1138|    332|            "Integer overflow");
 1139|    332|    }
 1140|       |
 1141|  3.30k|    val = store_result<T>(u64val, is_negative);
 1142|  3.30k|    return begin;
 1143|  3.63k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIiEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1094|  72.1k|{
 1095|  72.1k|    uint64_t u64val{};
 1096|  72.1k|    auto ptr = parse_decimal_integer_fast_impl(
 1097|  72.1k|        input.data(), input.data() + input.size(), u64val);
 1098|       |
 1099|  72.1k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1100|  72.1k|    if (SCN_UNLIKELY(
  ------------------
  |  |  865|  72.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.69k, False: 70.4k]
  |  |  ------------------
  ------------------
 1101|  72.1k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1102|  1.69k|        return detail::unexpected_scan_error(
 1103|  1.69k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1103:13): [True: 624, False: 1.07k]
  ------------------
 1104|  1.69k|                        : scan_error::value_positive_overflow,
 1105|  1.69k|            "Integer overflow");
 1106|  1.69k|    }
 1107|       |
 1108|  70.4k|    val = store_result<T>(u64val, is_negative);
 1109|  70.4k|    return ptr;
 1110|  72.1k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIciEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|  28.2k|{
 1118|  28.2k|    uint64_t u64val{};
 1119|  28.2k|    const CharT* begin = input.data();
 1120|  28.2k|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  92.3k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 77.6k, False: 14.6k]
  ------------------
 1123|  77.6k|        const auto digit = char_to_int(*begin);
 1124|  77.6k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 13.6k, False: 64.0k]
  ------------------
 1125|  13.6k|            break;
 1126|  13.6k|        }
 1127|  64.0k|        u64val =
 1128|  64.0k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  64.0k|        ++begin;
 1130|  64.0k|    }
 1131|       |
 1132|  28.2k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|  28.2k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  28.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 898, False: 27.3k]
  |  |  ------------------
  ------------------
 1134|  28.2k|                                               is_negative))) {
 1135|    898|        return detail::unexpected_scan_error(
 1136|    898|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 336, False: 562]
  ------------------
 1137|    898|                        : scan_error::value_positive_overflow,
 1138|    898|            "Integer overflow");
 1139|    898|    }
 1140|       |
 1141|  27.3k|    val = store_result<T>(u64val, is_negative);
 1142|  27.3k|    return begin;
 1143|  28.2k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwiEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|  3.66k|{
 1118|  3.66k|    uint64_t u64val{};
 1119|  3.66k|    const CharT* begin = input.data();
 1120|  3.66k|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  12.9k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 9.53k, False: 3.37k]
  ------------------
 1123|  9.53k|        const auto digit = char_to_int(*begin);
 1124|  9.53k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 286, False: 9.24k]
  ------------------
 1125|    286|            break;
 1126|    286|        }
 1127|  9.24k|        u64val =
 1128|  9.24k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  9.24k|        ++begin;
 1130|  9.24k|    }
 1131|       |
 1132|  3.66k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|  3.66k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  3.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 148, False: 3.51k]
  |  |  ------------------
  ------------------
 1134|  3.66k|                                               is_negative))) {
 1135|    148|        return detail::unexpected_scan_error(
 1136|    148|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 0, False: 148]
  ------------------
 1137|    148|                        : scan_error::value_positive_overflow,
 1138|    148|            "Integer overflow");
 1139|    148|    }
 1140|       |
 1141|  3.51k|    val = store_result<T>(u64val, is_negative);
 1142|  3.51k|    return begin;
 1143|  3.66k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIxEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1094|  73.1k|{
 1095|  73.1k|    uint64_t u64val{};
 1096|  73.1k|    auto ptr = parse_decimal_integer_fast_impl(
 1097|  73.1k|        input.data(), input.data() + input.size(), u64val);
 1098|       |
 1099|  73.1k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1100|  73.1k|    if (SCN_UNLIKELY(
  ------------------
  |  |  865|  73.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 916, False: 72.2k]
  |  |  ------------------
  ------------------
 1101|  73.1k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1102|    916|        return detail::unexpected_scan_error(
 1103|    916|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1103:13): [True: 284, False: 632]
  ------------------
 1104|    916|                        : scan_error::value_positive_overflow,
 1105|    916|            "Integer overflow");
 1106|    916|    }
 1107|       |
 1108|  72.2k|    val = store_result<T>(u64val, is_negative);
 1109|  72.2k|    return ptr;
 1110|  73.1k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIcxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|  28.6k|{
 1118|  28.6k|    uint64_t u64val{};
 1119|  28.6k|    const CharT* begin = input.data();
 1120|  28.6k|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  94.9k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 80.1k, False: 14.8k]
  ------------------
 1123|  80.1k|        const auto digit = char_to_int(*begin);
 1124|  80.1k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 13.7k, False: 66.3k]
  ------------------
 1125|  13.7k|            break;
 1126|  13.7k|        }
 1127|  66.3k|        u64val =
 1128|  66.3k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  66.3k|        ++begin;
 1130|  66.3k|    }
 1131|       |
 1132|  28.6k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|  28.6k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  28.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 462, False: 28.1k]
  |  |  ------------------
  ------------------
 1134|  28.6k|                                               is_negative))) {
 1135|    462|        return detail::unexpected_scan_error(
 1136|    462|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 96, False: 366]
  ------------------
 1137|    462|                        : scan_error::value_positive_overflow,
 1138|    462|            "Integer overflow");
 1139|    462|    }
 1140|       |
 1141|  28.1k|    val = store_result<T>(u64val, is_negative);
 1142|  28.1k|    return begin;
 1143|  28.6k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|  3.70k|{
 1118|  3.70k|    uint64_t u64val{};
 1119|  3.70k|    const CharT* begin = input.data();
 1120|  3.70k|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  12.9k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 9.59k, False: 3.40k]
  ------------------
 1123|  9.59k|        const auto digit = char_to_int(*begin);
 1124|  9.59k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 302, False: 9.28k]
  ------------------
 1125|    302|            break;
 1126|    302|        }
 1127|  9.28k|        u64val =
 1128|  9.28k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  9.28k|        ++begin;
 1130|  9.28k|    }
 1131|       |
 1132|  3.70k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|  3.70k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  3.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 20, False: 3.68k]
  |  |  ------------------
  ------------------
 1134|  3.70k|                                               is_negative))) {
 1135|     20|        return detail::unexpected_scan_error(
 1136|     20|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 0, False: 20]
  ------------------
 1137|     20|                        : scan_error::value_positive_overflow,
 1138|     20|            "Integer overflow");
 1139|     20|    }
 1140|       |
 1141|  3.68k|    val = store_result<T>(u64val, is_negative);
 1142|  3.68k|    return begin;
 1143|  3.70k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIhEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1094|  47.0k|{
 1095|  47.0k|    uint64_t u64val{};
 1096|  47.0k|    auto ptr = parse_decimal_integer_fast_impl(
 1097|  47.0k|        input.data(), input.data() + input.size(), u64val);
 1098|       |
 1099|  47.0k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1100|  47.0k|    if (SCN_UNLIKELY(
  ------------------
  |  |  865|  47.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.72k, False: 45.3k]
  |  |  ------------------
  ------------------
 1101|  47.0k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1102|  1.72k|        return detail::unexpected_scan_error(
 1103|  1.72k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1103:13): [True: 0, False: 1.72k]
  ------------------
 1104|  1.72k|                        : scan_error::value_positive_overflow,
 1105|  1.72k|            "Integer overflow");
 1106|  1.72k|    }
 1107|       |
 1108|  45.3k|    val = store_result<T>(u64val, is_negative);
 1109|  45.3k|    return ptr;
 1110|  47.0k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIchEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|  17.7k|{
 1118|  17.7k|    uint64_t u64val{};
 1119|  17.7k|    const CharT* begin = input.data();
 1120|  17.7k|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  56.8k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 47.5k, False: 9.21k]
  ------------------
 1123|  47.5k|        const auto digit = char_to_int(*begin);
 1124|  47.5k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 8.53k, False: 39.0k]
  ------------------
 1125|  8.53k|            break;
 1126|  8.53k|        }
 1127|  39.0k|        u64val =
 1128|  39.0k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  39.0k|        ++begin;
 1130|  39.0k|    }
 1131|       |
 1132|  17.7k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|  17.7k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.01k, False: 16.7k]
  |  |  ------------------
  ------------------
 1134|  17.7k|                                               is_negative))) {
 1135|  1.01k|        return detail::unexpected_scan_error(
 1136|  1.01k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 0, False: 1.01k]
  ------------------
 1137|  1.01k|                        : scan_error::value_positive_overflow,
 1138|  1.01k|            "Integer overflow");
 1139|  1.01k|    }
 1140|       |
 1141|  16.7k|    val = store_result<T>(u64val, is_negative);
 1142|  16.7k|    return begin;
 1143|  17.7k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwhEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|  3.42k|{
 1118|  3.42k|    uint64_t u64val{};
 1119|  3.42k|    const CharT* begin = input.data();
 1120|  3.42k|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  12.2k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 9.08k, False: 3.19k]
  ------------------
 1123|  9.08k|        const auto digit = char_to_int(*begin);
 1124|  9.08k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 230, False: 8.85k]
  ------------------
 1125|    230|            break;
 1126|    230|        }
 1127|  8.85k|        u64val =
 1128|  8.85k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  8.85k|        ++begin;
 1130|  8.85k|    }
 1131|       |
 1132|  3.42k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|  3.42k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  3.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 250, False: 3.17k]
  |  |  ------------------
  ------------------
 1134|  3.42k|                                               is_negative))) {
 1135|    250|        return detail::unexpected_scan_error(
 1136|    250|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 0, False: 250]
  ------------------
 1137|    250|                        : scan_error::value_positive_overflow,
 1138|    250|            "Integer overflow");
 1139|    250|    }
 1140|       |
 1141|  3.17k|    val = store_result<T>(u64val, is_negative);
 1142|  3.17k|    return begin;
 1143|  3.42k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIjEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1094|  52.2k|{
 1095|  52.2k|    uint64_t u64val{};
 1096|  52.2k|    auto ptr = parse_decimal_integer_fast_impl(
 1097|  52.2k|        input.data(), input.data() + input.size(), u64val);
 1098|       |
 1099|  52.2k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1100|  52.2k|    if (SCN_UNLIKELY(
  ------------------
  |  |  865|  52.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 906, False: 51.3k]
  |  |  ------------------
  ------------------
 1101|  52.2k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1102|    906|        return detail::unexpected_scan_error(
 1103|    906|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1103:13): [True: 0, False: 906]
  ------------------
 1104|    906|                        : scan_error::value_positive_overflow,
 1105|    906|            "Integer overflow");
 1106|    906|    }
 1107|       |
 1108|  51.3k|    val = store_result<T>(u64val, is_negative);
 1109|  51.3k|    return ptr;
 1110|  52.2k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIcjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|  19.7k|{
 1118|  19.7k|    uint64_t u64val{};
 1119|  19.7k|    const CharT* begin = input.data();
 1120|  19.7k|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  62.0k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 51.7k, False: 10.2k]
  ------------------
 1123|  51.7k|        const auto digit = char_to_int(*begin);
 1124|  51.7k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 9.51k, False: 42.2k]
  ------------------
 1125|  9.51k|            break;
 1126|  9.51k|        }
 1127|  42.2k|        u64val =
 1128|  42.2k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  42.2k|        ++begin;
 1130|  42.2k|    }
 1131|       |
 1132|  19.7k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|  19.7k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  19.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 478, False: 19.2k]
  |  |  ------------------
  ------------------
 1134|  19.7k|                                               is_negative))) {
 1135|    478|        return detail::unexpected_scan_error(
 1136|    478|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 0, False: 478]
  ------------------
 1137|    478|                        : scan_error::value_positive_overflow,
 1138|    478|            "Integer overflow");
 1139|    478|    }
 1140|       |
 1141|  19.2k|    val = store_result<T>(u64val, is_negative);
 1142|  19.2k|    return begin;
 1143|  19.7k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|  3.45k|{
 1118|  3.45k|    uint64_t u64val{};
 1119|  3.45k|    const CharT* begin = input.data();
 1120|  3.45k|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  12.3k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 9.11k, False: 3.21k]
  ------------------
 1123|  9.11k|        const auto digit = char_to_int(*begin);
 1124|  9.11k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 239, False: 8.87k]
  ------------------
 1125|    239|            break;
 1126|    239|        }
 1127|  8.87k|        u64val =
 1128|  8.87k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  8.87k|        ++begin;
 1130|  8.87k|    }
 1131|       |
 1132|  3.45k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|  3.45k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  3.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 144, False: 3.30k]
  |  |  ------------------
  ------------------
 1134|  3.45k|                                               is_negative))) {
 1135|    144|        return detail::unexpected_scan_error(
 1136|    144|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 0, False: 144]
  ------------------
 1137|    144|                        : scan_error::value_positive_overflow,
 1138|    144|            "Integer overflow");
 1139|    144|    }
 1140|       |
 1141|  3.30k|    val = store_result<T>(u64val, is_negative);
 1142|  3.30k|    return begin;
 1143|  3.45k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIyEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1094|  52.8k|{
 1095|  52.8k|    uint64_t u64val{};
 1096|  52.8k|    auto ptr = parse_decimal_integer_fast_impl(
 1097|  52.8k|        input.data(), input.data() + input.size(), u64val);
 1098|       |
 1099|  52.8k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1100|  52.8k|    if (SCN_UNLIKELY(
  ------------------
  |  |  865|  52.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 456, False: 52.3k]
  |  |  ------------------
  ------------------
 1101|  52.8k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1102|    456|        return detail::unexpected_scan_error(
 1103|    456|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1103:13): [True: 0, False: 456]
  ------------------
 1104|    456|                        : scan_error::value_positive_overflow,
 1105|    456|            "Integer overflow");
 1106|    456|    }
 1107|       |
 1108|  52.3k|    val = store_result<T>(u64val, is_negative);
 1109|  52.3k|    return ptr;
 1110|  52.8k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIcyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|  19.9k|{
 1118|  19.9k|    uint64_t u64val{};
 1119|  19.9k|    const CharT* begin = input.data();
 1120|  19.9k|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  63.4k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 53.1k, False: 10.3k]
  ------------------
 1123|  53.1k|        const auto digit = char_to_int(*begin);
 1124|  53.1k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 9.58k, False: 43.5k]
  ------------------
 1125|  9.58k|            break;
 1126|  9.58k|        }
 1127|  43.5k|        u64val =
 1128|  43.5k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  43.5k|        ++begin;
 1130|  43.5k|    }
 1131|       |
 1132|  19.9k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|  19.9k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  19.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 258, False: 19.6k]
  |  |  ------------------
  ------------------
 1134|  19.9k|                                               is_negative))) {
 1135|    258|        return detail::unexpected_scan_error(
 1136|    258|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 0, False: 258]
  ------------------
 1137|    258|                        : scan_error::value_positive_overflow,
 1138|    258|            "Integer overflow");
 1139|    258|    }
 1140|       |
 1141|  19.6k|    val = store_result<T>(u64val, is_negative);
 1142|  19.6k|    return begin;
 1143|  19.9k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|  3.49k|{
 1118|  3.49k|    uint64_t u64val{};
 1119|  3.49k|    const CharT* begin = input.data();
 1120|  3.49k|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  12.4k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 9.17k, False: 3.23k]
  ------------------
 1123|  9.17k|        const auto digit = char_to_int(*begin);
 1124|  9.17k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 257, False: 8.91k]
  ------------------
 1125|    257|            break;
 1126|    257|        }
 1127|  8.91k|        u64val =
 1128|  8.91k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  8.91k|        ++begin;
 1130|  8.91k|    }
 1131|       |
 1132|  3.49k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|  3.49k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  3.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8, False: 3.48k]
  |  |  ------------------
  ------------------
 1134|  3.49k|                                               is_negative))) {
 1135|      8|        return detail::unexpected_scan_error(
 1136|      8|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 0, False: 8]
  ------------------
 1137|      8|                        : scan_error::value_positive_overflow,
 1138|      8|            "Integer overflow");
 1139|      8|    }
 1140|       |
 1141|  3.48k|    val = store_result<T>(u64val, is_negative);
 1142|  3.48k|    return begin;
 1143|  3.49k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1768|   421k|{
 1769|   421k|    const auto argcount = args.size();
 1770|   421k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1770:9): [True: 63.2k, False: 358k]
  |  Branch (1770:60): [True: 63.2k, False: 0]
  ------------------
 1771|  63.2k|        auto arg = args.get(0);
 1772|  63.2k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|  63.2k|    static_cast<    \
  |  |  935|  63.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1773|  63.2k|    }
 1774|       |
 1775|   358k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 358k]
  ------------------
 1776|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1777|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1778|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1779|      0|        return vscan_parse_format_string(format, handler);
 1780|      0|    }
 1781|       |
 1782|   358k|    SCN_UNLIKELY_ATTR
 1783|   358k|    {
 1784|   358k|        auto handler = format_handler<false, CharT>{
 1785|   358k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   358k|    static_cast<    \
  |  |  935|   358k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   358k|    static_cast<    \
  |  |  935|   358k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1786|   358k|        return vscan_parse_format_string(format, handler);
 1787|   358k|    }
 1788|   358k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|   843k|{
 1317|   843k|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 715k, False: 127k]
  ------------------
 1318|   715k|        return false;
 1319|   715k|    }
 1320|   127k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 127k, False: 0]
  |  Branch (1320:39): [True: 127k, False: 0]
  ------------------
 1321|   843k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1349|  94.9k|{
 1350|  94.9k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  94.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 94.9k]
  |  |  ------------------
  ------------------
 1351|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1352|      0|                                             "Argument #0 not found");
 1353|      0|    }
 1354|       |
 1355|  94.9k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|  94.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 94.9k]
  |  |  ------------------
  ------------------
 1356|      0|        auto reader = impl::default_arg_reader<
 1357|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1358|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1359|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1360|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1361|      0|    }
 1362|       |
 1363|  94.9k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1364|  94.9k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|  94.9k|    static_cast<    \
  |  |  935|  94.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1365|  94.9k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  94.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  94.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  94.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  94.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12.4k, False: 82.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  12.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  12.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  12.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  12.4k|    }                                                  \
  |  |  |  | 3939|  94.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  82.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1366|  82.4k|    return it.position();
 1367|  94.9k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 1592|   357k|        : format_handler_base{argcount},
 1593|   357k|          parse_ctx{format},
 1594|   357k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   357k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   357k|    static_cast<    \
  |  |  935|   357k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   357k|    static_cast<    \
  |  |  935|   357k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   357k|    {
 1596|   357k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 1410|  1.03M|    format_handler_base(size_t argcount) : args_count(argcount)
 1411|  1.03M|    {
 1412|  1.03M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  865|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.03M]
  |  |  ------------------
  ------------------
 1413|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1414|      0|        }
 1415|  1.03M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 1543|   357k|        : contiguous_ctx(source, args, loc)
 1544|   357k|    {
 1545|   357k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   357k|{
 1734|   357k|    const auto beg = handler.get_ctx().begin();
 1735|   357k|    detail::parse_format_string<false>(format, handler);
 1736|   357k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   357k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 74.5k, False: 283k]
  |  |  ------------------
  ------------------
 1737|  74.5k|        return unexpected(err.error());
 1738|  74.5k|    }
 1739|   283k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   357k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 1717|  2.30M|    {
 1718|  2.30M|        return ctx.get();
 1719|  2.30M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1548|  2.30M|    {
 1549|  2.30M|        return contiguous_ctx;
 1550|  2.30M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1599|   640k|    {
 1600|   640k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 640k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   640k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1459|   397k|    {
 1460|   397k|        error = unexpected(err);
 1461|   397k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 1371|   357k|{
 1372|   357k|    auto arg = ctx.arg(id);
 1373|   357k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   357k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 357k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   357k|    return arg;
 1377|   357k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1485|  1.03M|    {
 1486|  1.03M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.03M]
  |  |  ------------------
  ------------------
 1487|      0|            on_error({scan_error::invalid_format_string,
 1488|      0|                      "Argument ID out-of-range"});
 1489|      0|            return;
 1490|      0|        }
 1491|       |
 1492|  1.03M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  865|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.03M]
  |  |  ------------------
  ------------------
 1493|      0|            on_error({scan_error::invalid_format_string,
 1494|      0|                      "Argument with this ID has already been scanned"});
 1495|      0|        }
 1496|       |
 1497|  1.03M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|  1.03M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.03M, False: 0]
  |  |  ------------------
  ------------------
 1498|  1.03M|            visited_args_lower64 |= (1ull << id);
 1499|  1.03M|            return;
 1500|  1.03M|        }
 1501|       |
 1502|      0|        id -= 64;
 1503|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1504|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1469|  1.03M|    {
 1470|  1.03M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.03M]
  |  |  ------------------
  ------------------
 1471|      0|            on_error({scan_error::invalid_format_string,
 1472|      0|                      "Argument ID out-of-range"});
 1473|      0|            return false;
 1474|      0|        }
 1475|       |
 1476|  1.03M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|  1.03M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.03M, False: 0]
  |  |  ------------------
  ------------------
 1477|  1.03M|            return (visited_args_lower64 >> id) & 1ull;
 1478|  1.03M|        }
 1479|       |
 1480|      0|        id -= 64;
 1481|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1482|  1.03M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1639|   357k|    {
 1640|   357k|        return parse_ctx.next_arg_id();
 1641|   357k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1679|   357k|    {
 1680|   357k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   357k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   357k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 357k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   357k|        auto specs = detail::format_specs{};
 1693|   357k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   357k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   357k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   357k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   357k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 357k]
  |  Branch (1698:29): [True: 16.5k, False: 341k]
  ------------------
 1699|  16.5k|            SCN_UNLIKELY_ATTR
 1700|  16.5k|            on_error({scan_error::invalid_format_string,
 1701|  16.5k|                      "Missing '}' in format string"});
 1702|  16.5k|            return parse_ctx.begin();
 1703|  16.5k|        }
 1704|   341k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   341k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.28k, False: 332k]
  |  |  ------------------
  ------------------
 1705|  8.28k|            return parse_ctx.begin();
 1706|  8.28k|        }
 1707|   332k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   332k|        on_visit_scan_arg(
 1710|   332k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   332k|                                           get_ctx().locale()},
 1712|   332k|            arg);
 1713|   332k|        return parse_ctx.begin();
 1714|   341k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 1389|   357k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   357k|    {
 1391|   357k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 1650|   332k|    {
 1651|   332k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 332k]
  |  Branch (1651:13): [True: 0, False: 332k]
  |  Branch (1651:29): [True: 0, False: 332k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   332k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   332k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   332k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   332k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 49.6k, False: 283k]
  |  |  ------------------
  ------------------
 1658|  49.6k|            on_error(r.error());
 1659|  49.6k|        }
 1660|   283k|        else {
 1661|   283k|            get_ctx().advance_to(*r);
 1662|   283k|        }
 1663|   332k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1453|   149k|    {
 1454|   149k|        SCN_UNLIKELY_ATTR
 1455|   149k|        error = detail::unexpected_scan_error(scan_error::invalid_format_string,
 1456|   149k|                                              msg);
 1457|   149k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1418|  1.03M|    {
 1419|  1.03M|        {
 1420|  1.03M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1420:45): [True: 0, False: 1.03M]
  ------------------
 1421|  1.03M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1421:35): [True: 0, False: 1.03M]
  ------------------
 1422|  1.03M|                                      ? std::numeric_limits<uint64_t>::max()
 1423|  1.03M|                                      : (1ull << args_count_lower64) - 1;
 1424|       |
 1425|  1.03M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1425:17): [True: 0, False: 1.03M]
  ------------------
 1426|      0|                return on_error({scan_error::invalid_format_string,
 1427|      0|                                 "Argument list not exhausted"});
 1428|      0|            }
 1429|  1.03M|        }
 1430|       |
 1431|  1.03M|        if (args_count < 64) {
  ------------------
  |  Branch (1431:13): [True: 1.03M, False: 0]
  ------------------
 1432|  1.03M|            return;
 1433|  1.03M|        }
 1434|       |
 1435|      0|        auto last_args_count = args_count - 64;
 1436|      0|        for (auto it = visited_args_upper.begin();
 1437|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1437:14): [True: 0, False: 0]
  ------------------
 1438|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1438:17): [True: 0, False: 0]
  ------------------
 1439|      0|                return on_error({scan_error::invalid_format_string,
 1440|      0|                                 "Argument list not exhausted"});
 1441|      0|            }
 1442|      0|            last_args_count -= 8;
 1443|      0|        }
 1444|       |
 1445|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1446|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1446:13): [True: 0, False: 0]
  ------------------
 1447|      0|            return on_error({scan_error::invalid_format_string,
 1448|      0|                             "Argument list not exhausted"});
 1449|      0|        }
 1450|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 1464|  3.99M|    {
 1465|  3.99M|        return error;
 1466|  3.99M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 1592|   358k|        : format_handler_base{argcount},
 1593|   358k|          parse_ctx{format},
 1594|   358k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   358k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   358k|    static_cast<    \
  |  |  935|   358k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   358k|    static_cast<    \
  |  |  935|   358k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   358k|    {
 1596|   358k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 1519|   358k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|   358k|    static_cast<    \
  |  |  935|   358k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1520|   358k|    {
 1521|   358k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   358k|{
 1734|   358k|    const auto beg = handler.get_ctx().begin();
 1735|   358k|    detail::parse_format_string<false>(format, handler);
 1736|   358k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   358k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 74.5k, False: 283k]
  |  |  ------------------
  ------------------
 1737|  74.5k|        return unexpected(err.error());
 1738|  74.5k|    }
 1739|   283k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   358k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 1717|  2.30M|    {
 1718|  2.30M|        return ctx.get();
 1719|  2.30M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1524|  2.30M|    {
 1525|  2.30M|        return ctx;
 1526|  2.30M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1599|   641k|    {
 1600|   641k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 641k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   641k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 1371|   358k|{
 1372|   358k|    auto arg = ctx.arg(id);
 1373|   358k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   358k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 358k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   358k|    return arg;
 1377|   358k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1639|   358k|    {
 1640|   358k|        return parse_ctx.next_arg_id();
 1641|   358k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1679|   358k|    {
 1680|   358k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   358k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   358k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 358k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   358k|        auto specs = detail::format_specs{};
 1693|   358k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   358k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   358k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   358k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   358k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 358k]
  |  Branch (1698:29): [True: 16.5k, False: 341k]
  ------------------
 1699|  16.5k|            SCN_UNLIKELY_ATTR
 1700|  16.5k|            on_error({scan_error::invalid_format_string,
 1701|  16.5k|                      "Missing '}' in format string"});
 1702|  16.5k|            return parse_ctx.begin();
 1703|  16.5k|        }
 1704|   341k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   341k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.28k, False: 333k]
  |  |  ------------------
  ------------------
 1705|  8.28k|            return parse_ctx.begin();
 1706|  8.28k|        }
 1707|   333k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   333k|        on_visit_scan_arg(
 1710|   333k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   333k|                                           get_ctx().locale()},
 1712|   333k|            arg);
 1713|   333k|        return parse_ctx.begin();
 1714|   341k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIcEERS6_:
 1389|   358k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   358k|    {
 1391|   358k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|   333k|    {
 1651|   333k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 333k]
  |  Branch (1651:13): [True: 0, False: 333k]
  |  Branch (1651:29): [True: 0, False: 333k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   333k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   333k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   333k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 49.6k, False: 283k]
  |  |  ------------------
  ------------------
 1658|  49.6k|            on_error(r.error());
 1659|  49.6k|        }
 1660|   283k|        else {
 1661|   283k|            get_ctx().advance_to(*r);
 1662|   283k|        }
 1663|   333k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|   421k|{
 1749|   421k|    const auto argcount = args.size();
 1750|   421k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 64.1k, False: 357k]
  |  Branch (1750:60): [True: 64.1k, False: 0]
  ------------------
 1751|  64.1k|        auto arg = args.get(0);
 1752|  64.1k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|  64.1k|    static_cast<    \
  |  |  935|  64.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|  64.1k|    }
 1754|       |
 1755|   357k|    auto handler = format_handler<true, CharT>{
 1756|   357k|        ranges::subrange<const CharT*>{source.data(),
 1757|   357k|                                       source.data() + source.size()},
 1758|   357k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   357k|    static_cast<    \
  |  |  935|   357k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   357k|    static_cast<    \
  |  |  935|   357k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|   357k|    return vscan_parse_format_string(format, handler);
 1760|   421k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|  96.2k|{
 1330|  96.2k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  96.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 96.2k]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|  96.2k|    auto reader =
 1336|  96.2k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|  96.2k|            ranges::subrange<const CharT*>{source.data(),
 1338|  96.2k|                                           source.data() + source.size()},
 1339|  96.2k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|  96.2k|    static_cast<    \
  |  |  935|  96.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|  96.2k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  96.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  96.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  96.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  96.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12.4k, False: 83.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  12.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  12.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  12.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  12.4k|    }                                                  \
  |  |  |  | 3939|  96.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  83.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|  83.8k|    return ranges::distance(source.data(), it);
 1342|  96.2k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 1848|   452k|{
 1849|   452k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  864|   452k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 366k, False: 86.9k]
  |  |  ------------------
  ------------------
 1850|   366k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  865|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 366k]
  |  |  ------------------
  ------------------
 1851|      0|            return detail::unexpected_scan_error(
 1852|      0|                scan_error::invalid_source_state,
 1853|      0|                "Failed to sync with underlying source");
 1854|      0|        }
 1855|   366k|    }
 1856|  86.9k|    else {
 1857|  86.9k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  865|  86.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 86.9k]
  |  |  ------------------
  ------------------
 1858|      0|            return detail::unexpected_scan_error(
 1859|      0|                scan_error::invalid_source_state,
 1860|      0|                "Failed to sync with underlying source");
 1861|      0|        }
 1862|  86.9k|    }
 1863|   452k|    return result;
 1864|   452k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|   176k|{
 1749|   176k|    const auto argcount = args.size();
 1750|   176k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 17.0k, False: 159k]
  |  Branch (1750:60): [True: 17.0k, False: 0]
  ------------------
 1751|  17.0k|        auto arg = args.get(0);
 1752|  17.0k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|  17.0k|    static_cast<    \
  |  |  935|  17.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|  17.0k|    }
 1754|       |
 1755|   159k|    auto handler = format_handler<true, CharT>{
 1756|   159k|        ranges::subrange<const CharT*>{source.data(),
 1757|   159k|                                       source.data() + source.size()},
 1758|   159k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   159k|    static_cast<    \
  |  |  935|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   159k|    static_cast<    \
  |  |  935|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|   159k|    return vscan_parse_format_string(format, handler);
 1760|   176k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|   353k|{
 1317|   353k|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 319k, False: 34.0k]
  ------------------
 1318|   319k|        return false;
 1319|   319k|    }
 1320|  34.0k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 34.0k, False: 0]
  |  Branch (1320:39): [True: 34.0k, False: 0]
  ------------------
 1321|   353k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|  25.5k|{
 1330|  25.5k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  25.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 25.5k]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|  25.5k|    auto reader =
 1336|  25.5k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|  25.5k|            ranges::subrange<const CharT*>{source.data(),
 1338|  25.5k|                                           source.data() + source.size()},
 1339|  25.5k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|  25.5k|    static_cast<    \
  |  |  935|  25.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|  25.5k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  25.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  25.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  25.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  25.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 24.8k, False: 702]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  24.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  24.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  24.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  24.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  24.8k|    }                                                  \
  |  |  |  | 3939|  25.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    702|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|    702|    return ranges::distance(source.data(), it);
 1342|  25.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 1592|   159k|        : format_handler_base{argcount},
 1593|   159k|          parse_ctx{format},
 1594|   159k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   159k|    static_cast<    \
  |  |  935|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   159k|    static_cast<    \
  |  |  935|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   159k|    {
 1596|   159k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 1543|   159k|        : contiguous_ctx(source, args, loc)
 1544|   159k|    {
 1545|   159k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   159k|{
 1734|   159k|    const auto beg = handler.get_ctx().begin();
 1735|   159k|    detail::parse_format_string<false>(format, handler);
 1736|   159k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 149k, False: 10.7k]
  |  |  ------------------
  ------------------
 1737|   149k|        return unexpected(err.error());
 1738|   149k|    }
 1739|  10.7k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   159k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 1717|   720k|    {
 1718|   720k|        return ctx.get();
 1719|   720k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1548|   720k|    {
 1549|   720k|        return contiguous_ctx;
 1550|   720k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1599|   170k|    {
 1600|   170k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 170k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   170k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 1371|   159k|{
 1372|   159k|    auto arg = ctx.arg(id);
 1373|   159k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 159k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   159k|    return arg;
 1377|   159k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1639|   159k|    {
 1640|   159k|        return parse_ctx.next_arg_id();
 1641|   159k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1679|   159k|    {
 1680|   159k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   159k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   159k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 159k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   159k|        auto specs = detail::format_specs{};
 1693|   159k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   159k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   159k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   159k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   159k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 159k]
  |  Branch (1698:29): [True: 33.1k, False: 126k]
  ------------------
 1699|  33.1k|            SCN_UNLIKELY_ATTR
 1700|  33.1k|            on_error({scan_error::invalid_format_string,
 1701|  33.1k|                      "Missing '}' in format string"});
 1702|  33.1k|            return parse_ctx.begin();
 1703|  33.1k|        }
 1704|   126k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16.5k, False: 110k]
  |  |  ------------------
  ------------------
 1705|  16.5k|            return parse_ctx.begin();
 1706|  16.5k|        }
 1707|   110k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   110k|        on_visit_scan_arg(
 1710|   110k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   110k|                                           get_ctx().locale()},
 1712|   110k|            arg);
 1713|   110k|        return parse_ctx.begin();
 1714|   126k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 1389|   159k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   159k|    {
 1391|   159k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 1650|   110k|    {
 1651|   110k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 110k]
  |  Branch (1651:13): [True: 0, False: 110k]
  |  Branch (1651:29): [True: 0, False: 110k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   110k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   110k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 99.3k, False: 10.7k]
  |  |  ------------------
  ------------------
 1658|  99.3k|            on_error(r.error());
 1659|  99.3k|        }
 1660|  10.7k|        else {
 1661|  10.7k|            get_ctx().advance_to(*r);
 1662|  10.7k|        }
 1663|   110k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1768|   176k|{
 1769|   176k|    const auto argcount = args.size();
 1770|   176k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1770:9): [True: 17.0k, False: 159k]
  |  Branch (1770:60): [True: 17.0k, False: 0]
  ------------------
 1771|  17.0k|        auto arg = args.get(0);
 1772|  17.0k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|  17.0k|    static_cast<    \
  |  |  935|  17.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1773|  17.0k|    }
 1774|       |
 1775|   159k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 159k]
  ------------------
 1776|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1777|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1778|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1779|      0|        return vscan_parse_format_string(format, handler);
 1780|      0|    }
 1781|       |
 1782|   159k|    SCN_UNLIKELY_ATTR
 1783|   159k|    {
 1784|   159k|        auto handler = format_handler<false, CharT>{
 1785|   159k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   159k|    static_cast<    \
  |  |  935|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   159k|    static_cast<    \
  |  |  935|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1786|   159k|        return vscan_parse_format_string(format, handler);
 1787|   159k|    }
 1788|   159k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1349|  25.5k|{
 1350|  25.5k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  25.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 25.5k]
  |  |  ------------------
  ------------------
 1351|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1352|      0|                                             "Argument #0 not found");
 1353|      0|    }
 1354|       |
 1355|  25.5k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|  25.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 25.5k]
  |  |  ------------------
  ------------------
 1356|      0|        auto reader = impl::default_arg_reader<
 1357|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1358|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1359|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1360|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1361|      0|    }
 1362|       |
 1363|  25.5k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1364|  25.5k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|  25.5k|    static_cast<    \
  |  |  935|  25.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1365|  25.5k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  25.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  25.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  25.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  25.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 24.8k, False: 702]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  24.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  24.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  24.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  24.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  24.8k|    }                                                  \
  |  |  |  | 3939|  25.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    702|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1366|    702|    return it.position();
 1367|  25.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 1592|   159k|        : format_handler_base{argcount},
 1593|   159k|          parse_ctx{format},
 1594|   159k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   159k|    static_cast<    \
  |  |  935|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   159k|    static_cast<    \
  |  |  935|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   159k|    {
 1596|   159k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 1519|   159k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|   159k|    static_cast<    \
  |  |  935|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1520|   159k|    {
 1521|   159k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   159k|{
 1734|   159k|    const auto beg = handler.get_ctx().begin();
 1735|   159k|    detail::parse_format_string<false>(format, handler);
 1736|   159k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 149k, False: 10.7k]
  |  |  ------------------
  ------------------
 1737|   149k|        return unexpected(err.error());
 1738|   149k|    }
 1739|  10.7k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   159k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 1717|   720k|    {
 1718|   720k|        return ctx.get();
 1719|   720k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1524|   720k|    {
 1525|   720k|        return ctx;
 1526|   720k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1599|   170k|    {
 1600|   170k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 170k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   170k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 1371|   159k|{
 1372|   159k|    auto arg = ctx.arg(id);
 1373|   159k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 159k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   159k|    return arg;
 1377|   159k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1639|   159k|    {
 1640|   159k|        return parse_ctx.next_arg_id();
 1641|   159k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1679|   159k|    {
 1680|   159k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   159k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   159k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 159k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   159k|        auto specs = detail::format_specs{};
 1693|   159k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   159k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   159k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   159k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   159k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 159k]
  |  Branch (1698:29): [True: 33.1k, False: 126k]
  ------------------
 1699|  33.1k|            SCN_UNLIKELY_ATTR
 1700|  33.1k|            on_error({scan_error::invalid_format_string,
 1701|  33.1k|                      "Missing '}' in format string"});
 1702|  33.1k|            return parse_ctx.begin();
 1703|  33.1k|        }
 1704|   126k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16.5k, False: 110k]
  |  |  ------------------
  ------------------
 1705|  16.5k|            return parse_ctx.begin();
 1706|  16.5k|        }
 1707|   110k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   110k|        on_visit_scan_arg(
 1710|   110k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   110k|                                           get_ctx().locale()},
 1712|   110k|            arg);
 1713|   110k|        return parse_ctx.begin();
 1714|   126k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIwEERS6_:
 1389|   159k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   159k|    {
 1391|   159k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|   110k|    {
 1651|   110k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 110k]
  |  Branch (1651:13): [True: 0, False: 110k]
  |  Branch (1651:29): [True: 0, False: 110k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   110k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   110k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 99.3k, False: 10.7k]
  |  |  ------------------
  ------------------
 1658|  99.3k|            on_error(r.error());
 1659|  99.3k|        }
 1660|  10.7k|        else {
 1661|  10.7k|            get_ctx().advance_to(*r);
 1662|  10.7k|        }
 1663|   110k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 1848|   185k|{
 1849|   185k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  864|   185k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 11.4k, False: 173k]
  |  |  ------------------
  ------------------
 1850|  11.4k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  865|  11.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 11.4k]
  |  |  ------------------
  ------------------
 1851|      0|            return detail::unexpected_scan_error(
 1852|      0|                scan_error::invalid_source_state,
 1853|      0|                "Failed to sync with underlying source");
 1854|      0|        }
 1855|  11.4k|    }
 1856|   173k|    else {
 1857|   173k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  865|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 173k]
  |  |  ------------------
  ------------------
 1858|      0|            return detail::unexpected_scan_error(
 1859|      0|                scan_error::invalid_source_state,
 1860|      0|                "Failed to sync with underlying source");
 1861|      0|        }
 1862|   173k|    }
 1863|   185k|    return result;
 1864|   185k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1794|  32.0k|{
 1795|  32.0k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  32.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  32.0k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1794|  31.6k|{
 1795|  31.6k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  31.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  31.6k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1794|  8.51k|{
 1795|  8.51k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  8.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  8.51k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1794|  8.51k|{
 1795|  8.51k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  8.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  8.51k|}

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|    690|{
 1462|    690|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|    690|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|    690|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|    690|            return transcode_to_string_impl_to32(src, dest);
 1473|    690|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|    690|    SCN_EXPECT(false);
  ------------------
  |  |  930|    690|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    690|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|    690|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|    690|{
 1355|    690|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|    690|    auto it = src.begin();
 1358|  46.3k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 45.6k, False: 690]
  ------------------
 1359|  45.6k|        auto res = get_next_code_point(
 1360|  45.6k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|  45.6k|                                                                 src.end()));
 1362|  45.6k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  865|  45.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 487, False: 45.1k]
  |  |  ------------------
  ------------------
 1363|    487|            dest.push_back(DestCharT{0xfffd});
 1364|    487|        }
 1365|  45.1k|        else {
 1366|  45.1k|            dest.push_back(res.value);
 1367|  45.1k|        }
 1368|  45.6k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|  45.6k|    }
 1370|    690|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|  76.9k|{
 1279|  76.9k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|  76.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  76.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|  76.9k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|  76.9k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  76.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.50k, False: 74.4k]
  |  |  ------------------
  ------------------
 1283|  2.50k|        return {get_start_for_next_code_point(input),
 1284|  2.50k|                detail::invalid_code_point};
 1285|  2.50k|    }
 1286|  74.4k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  865|  74.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.06k, False: 72.4k]
  |  |  ------------------
  ------------------
 1287|  2.06k|        return {input.end(), detail::invalid_code_point};
 1288|  2.06k|    }
 1289|       |
 1290|  72.4k|    return {input.begin() + len,
 1291|  72.4k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|  74.4k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  2.50k|{
 1265|  2.50k|    auto it = input.begin();
 1266|  10.2k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 9.05k, False: 1.23k]
  ------------------
 1267|  9.05k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 1.27k, False: 7.78k]
  ------------------
 1268|  1.27k|            break;
 1269|  1.27k|        }
 1270|  9.05k|    }
 1271|  2.50k|    return it;
 1272|  2.50k|}
_ZN3scn2v44impl11parse_errorC2ENS2_4codeE:
  807|  3.75M|    constexpr parse_error(code c) : m_code(c)
  808|  3.75M|    {
  809|  3.75M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|  3.75M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  3.75M|    }
_ZN3scn2v44impleqENS1_11parse_errorES2_:
  822|  1.37M|    {
  823|  1.37M|        return a.m_code == b.m_code;
  824|  1.37M|    }
_ZN3scn2v44implneENS1_11parse_errorES2_:
  826|   133k|    {
  827|   133k|        return !(a == b);
  828|   133k|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 3050|   886k|    {
 3051|   886k|        return m_msg == nullptr;
 3052|   886k|    }
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|   867k|{
  458|   867k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|   867k|        static_cast<unsigned char>(ch))];
  460|   867k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|   520k|{
  539|   520k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|   520k|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|  3.17M|{
  784|  3.17M|    return e != eof_error::good;
  785|  3.17M|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  26.8k|{
  798|  26.8k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|  26.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  26.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  26.8k|    return scan_error{scan_error::end_of_input, "EOF"};
  800|  26.8k|}
_ZN3scn2v44impl20make_eof_parse_errorENS1_9eof_errorE:
  844|  61.8k|{
  845|  61.8k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|  61.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  61.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|  61.8k|    return parse_error::eof;
  847|  61.8k|}
_ZN3scn2v44impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|   133k|{
  854|   133k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 133k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|   133k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 0, False: 133k]
  ------------------
  859|      0|        return detail::unexpected_scan_error(scan_error::end_of_input, "EOF");
  860|      0|    }
  861|       |
  862|   133k|    return detail::unexpected_scan_error(code, msg);
  863|   133k|}
_ZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|   420k|{
  868|   420k|    return [code, msg](parse_error err) {
  869|   420k|        assert(err != parse_error::good);
  870|   420k|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|   420k|    };
  872|   420k|}
_ZN3scn2v44impl17fast_streq_nocaseEPKcS3_m:
 2319|   328k|{
 2320|   328k|    unsigned char running_diff{0};
 2321|   984k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2321:24): [True: 656k, False: 328k]
  ------------------
 2322|   656k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2323|   656k|    }
 2324|   328k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2324:12): [True: 2.13k, False: 326k]
  |  Branch (2324:33): [True: 462, False: 325k]
  ------------------
 2325|   328k|}
_ZN3scn2v44impl11char_to_intEc:
 3239|  5.23M|{
 3240|  5.23M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3241|  5.23M|}
_ZN3scn2v44impl11char_to_intEw:
 3243|   676k|{
 3244|   676k|#if WCHAR_MIN < 0
 3245|   676k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3245:9): [True: 651k, False: 25.1k]
  |  Branch (3245:20): [True: 414k, False: 237k]
  ------------------
 3246|       |#else
 3247|       |    if (ch <= 255) {
 3248|       |#endif
 3249|   414k|        return char_to_int(static_cast<char>(ch));
 3250|   414k|    }
 3251|   262k|    return 255;
 3252|   676k|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6045|   588k|{
 6046|   588k|    if (specs.width != 0) {
  ------------------
  |  Branch (6046:9): [True: 0, False: 588k]
  ------------------
 6047|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 0]
  ------------------
 6048|      0|            return detail::unexpected_scan_error(
 6049|      0|                scan_error::length_too_short,
 6050|      0|                "Scanned value too narrow, width did not exceed what "
 6051|      0|                "was specified in the format string");
 6052|      0|        }
 6053|      0|    }
 6054|   588k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6054:9): [True: 0, False: 588k]
  ------------------
 6055|       |        // Ensured by take_width_view
 6056|      0|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6057|      0|                   specs.precision);
 6058|      0|    }
 6059|   588k|    return {};
 6060|   588k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  1.43M|    {
  304|  1.43M|        ranges::advance(x, n);
  305|  1.43M|        return x;
  306|  1.43M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  1.43M|    {
  268|  1.43M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.43M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  1.43M|    {
  151|  1.43M|        i += n;
  152|  1.43M|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  2.19M|    {
  108|  2.19M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  2.19M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  2.19M|    {
   87|  2.19M|        return s - i;
   88|  2.19M|    }
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   115k|    {
  304|   115k|        ranges::advance(x, n);
  305|   115k|        return x;
  306|   115k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   115k|    {
  268|   115k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   115k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   115k|    {
  151|   115k|        i += n;
  152|   115k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  33.9M|    {
  108|  33.9M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  33.9M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  33.9M|    {
   87|  33.9M|        return s - i;
   88|  33.9M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 2992|   973k|    {
 2993|   973k|        return m_current;
 2994|   973k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 2992|   280k|    {
 2993|   280k|        return m_current;
 2994|   280k|    }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   428k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   428k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   428k|        auto beg = r.begin();
  991|   428k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 428k, False: 0]
  ------------------
  992|   428k|            return false;
  993|   428k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   428k|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1955|   339k|{
 1956|   339k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|   339k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   339k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|   339k|    else {
 1967|   339k|        auto it = range.begin();
 1968|   339k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 303k, False: 35.9k]
  ------------------
 1969|   303k|            return ranges::next(it, count);
 1970|   303k|        }
 1971|       |
 1972|  95.2k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 70.7k, False: 24.5k]
  ------------------
 1973|  70.7k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 11.4k, False: 59.3k]
  ------------------
 1974|  11.4k|                return unexpected(eof_error::eof);
 1975|  11.4k|            }
 1976|  70.7k|        }
 1977|       |
 1978|  24.5k|        return it;
 1979|  35.9k|    }
 1980|   339k|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1095|   339k|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|   339k|                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|   339k|        else {
 1107|   339k|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1107:17): [True: 339k, False: 0]
  ------------------
 1108|   339k|                return static_cast<size_t>(
 1109|   339k|                    r.begin().parent()->chars_available() -
 1110|   339k|                    r.begin().position());
 1111|   339k|            }
 1112|      0|            return r.begin().contiguous_segment().size();
 1113|   339k|        }
 1114|       |    }
 1115|       |    else {
 1116|       |        return 0;
 1117|       |    }
 1118|   339k|}
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  762|  2.31M|    {
  763|  2.31M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  2.31M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.31M|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   312k|        : m_fptr([](storage fn,
  743|   312k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   312k|              cvref<T> obj = *get<T>(fn);
  745|   312k|              if constexpr (std::is_void_v<R>) {
  746|   312k|                  obj(static_cast<decltype(args)>(args)...);
  747|   312k|              }
  748|   312k|              else {
  749|   312k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   312k|              }
  751|   312k|          }),
  752|   312k|          m_storage(std::addressof(f))
  753|   312k|    {
  754|   312k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  1.15M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.15M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.15M|              else {
  749|  1.15M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.15M|              }
  751|  1.15M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  1.15M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.15M|        else if constexpr (std::is_object_v<T>) {
  688|  1.15M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.15M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   312k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   312k|        {
  662|   312k|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  2.10M|    {
  763|  2.10M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  2.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.10M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   673k|        : m_fptr([](storage fn,
  743|   673k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   673k|              cvref<T> obj = *get<T>(fn);
  745|   673k|              if constexpr (std::is_void_v<R>) {
  746|   673k|                  obj(static_cast<decltype(args)>(args)...);
  747|   673k|              }
  748|   673k|              else {
  749|   673k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   673k|              }
  751|   673k|          }),
  752|   673k|          m_storage(std::addressof(f))
  753|   673k|    {
  754|   673k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  1.05M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.05M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.05M|              else {
  749|  1.05M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.05M|              }
  751|  1.05M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  1.05M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.05M|        else if constexpr (std::is_object_v<T>) {
  688|  1.05M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.05M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   673k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   673k|        {
  662|   673k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6073|   333k|    {
 6074|   333k|        const bool need_skipped_width =
 6075|   333k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6075:13): [True: 0, False: 333k]
  |  Branch (6075:33): [True: 0, False: 333k]
  ------------------
 6076|   333k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6077|       |
 6078|       |        // Read prefix
 6079|   333k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6079:13): [True: 0, False: 333k]
  ------------------
 6080|   333k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6080:13): [True: 0, False: 333k]
  ------------------
 6081|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6082|      0|                             need_skipped_width);
 6083|      0|        }
 6084|   333k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6084:13): [True: 333k, False: 0]
  |  Branch (6084:56): [True: 333k, False: 0]
  ------------------
 6085|       |            // Default alignment:
 6086|       |            // Skip preceding whitespace, if required by the reader
 6087|   333k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6087:17): [True: 0, False: 333k]
  ------------------
 6088|      0|                auto max_width_view = take_width(rng, specs.precision);
 6089|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6090|      0|                                  .transform_error(make_eof_scan_error));
 6091|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6092|      0|            }
 6093|   656k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   333k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   333k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   333k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 9.73k, False: 323k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  9.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  9.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  9.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  9.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  9.73k|    }                                                  \
  |  |  |  | 3939|   333k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   323k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6094|   656k|                            make_eof_scan_error));
 6095|       |
 6096|   656k|            if (need_skipped_width) {
  ------------------
  |  Branch (6096:17): [True: 0, False: 323k]
  ------------------
 6097|      0|                return result_type{
 6098|      0|                    it,
 6099|      0|                    calculate_text_width(make_contiguous_buffer(
 6100|      0|                                             ranges::subrange{rng.begin(), it})
 6101|      0|                                             .view())};
 6102|      0|            }
 6103|   323k|            return result_type{it, 0};
 6104|   656k|        }
 6105|       |
 6106|      0|        return result_type{rng.begin(), 0};
 6107|   333k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|   312k|{
 2075|   312k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|   312k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|   312k|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|   312k|    else {
 2060|   312k|        auto first = range.begin();
 2061|  1.16M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 1.15M, False: 9.08k]
  ------------------
 2062|  1.15M|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 303k, False: 855k]
  ------------------
 2063|   303k|                return first;
 2064|   303k|            }
 2065|  1.15M|        }
 2066|  9.08k|        return first;
 2067|   312k|    }
 2068|   312k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   315k|    {
  108|   315k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   315k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   315k|    {
   94|   315k|        iter_difference_t<I> counter{0};
   95|  4.04M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 3.73M, False: 315k]
  ------------------
   96|  3.73M|            ++i;
   97|  3.73M|            ++counter;
   98|  3.73M|        }
   99|   315k|        return counter;
  100|   315k|    }
_ZZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|   133k|    return [code, msg](parse_error err) {
  869|   133k|        assert(err != parse_error::good);
  870|   133k|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|   133k|    };
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1878|   122k|    {
 1879|   122k|        auto stdloc = loc.get<std::locale>();
 1880|   122k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|   122k|        grouping = numpunct.grouping();
 1882|   122k|        thousands_sep =
 1883|   122k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 122k]
  ------------------
 1884|   122k|        decimal_point = numpunct.decimal_point();
 1885|   122k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1815|   122k|{
 1816|   122k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 122k, False: 0]
  ------------------
 1817|   122k|        return std::use_facet<Facet>(stdloc);
 1818|   122k|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|   122k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1944|   524k|{
 1945|   524k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   524k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 360, False: 524k]
  |  |  ------------------
  ------------------
 1946|    360|        return unexpected(e);
 1947|    360|    }
 1948|       |
 1949|   524k|    return ranges::next(range.begin());
 1950|   524k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  1.04M|{
  951|  1.04M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.4k, False: 1.03M]
  |  |  ------------------
  ------------------
  952|  12.4k|        return eof_error::eof;
  953|  12.4k|    }
  954|  1.03M|    return eof_error::good;
  955|  1.04M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  1.82M|{
  945|  1.82M|    return is_range_eof(r.begin(), r.end());
  946|  1.82M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  1.82M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  1.82M|    {
  938|  1.82M|        return begin == end;
  939|  1.82M|    }
  940|  1.82M|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   524k|    {
  296|   524k|        ++x;
  297|   524k|        return x;
  298|   524k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3589|  52.1k|    {
 3590|  52.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  52.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  52.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  52.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  52.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 52.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  52.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  52.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  52.1k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  52.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 7.68k, False: 44.4k]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|  7.68k|            else {
 3601|  7.68k|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 7.68k]
  ------------------
 3602|  7.68k|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|  7.68k|            }
 3608|  7.68k|        }
 3609|       |
 3610|  52.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 5.21k, False: 46.9k]
  ------------------
 3611|  5.21k|            value = T{0};
 3612|  5.21k|            return std::next(prefix_result.iterator);
 3613|  5.21k|        }
 3614|       |
 3615|  46.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  46.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 36.5k, False: 10.4k]
  |  |  ------------------
  ------------------
 3616|  36.5k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  36.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  36.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  36.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  36.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.06k, False: 32.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.06k|    }                                                  \
  |  |  |  | 3939|  36.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  32.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  32.4k|                    parse_integer_digits_without_thsep(
 3618|  32.4k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  32.4k|                        prefix_result.parsed_base));
 3620|       |
 3621|  32.4k|            auto buf = make_contiguous_buffer(
 3622|  32.4k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  32.4k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  32.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  32.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  32.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  32.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.68k, False: 30.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.68k|    }                                                  \
  |  |  |  | 3939|  32.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  30.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|  30.7k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|  30.7k|                                        prefix_result.parsed_base));
 3626|       |
 3627|  30.7k|            return ranges::next(
 3628|  30.7k|                prefix_result.iterator,
 3629|  30.7k|                ranges::distance(buf.view().begin(), result_it));
 3630|  32.4k|        }
 3631|       |
 3632|  10.4k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  10.4k|            localized_number_formatting_options<CharT>{loc};
 3637|  10.4k|#endif
 3638|       |
 3639|  10.4k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  10.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  10.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  10.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  10.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 588, False: 9.85k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    588|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    588|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    588|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    588|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    588|    }                                                  \
  |  |  |  | 3939|  10.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  9.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  9.85k|                parse_integer_digits_with_thsep(
 3641|  9.85k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  9.85k|                    prefix_result.parsed_base, locale_options));
 3643|  9.85k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  9.85k|            parse_digits_result;
 3645|       |
 3646|  9.85k|        auto nothsep_source_view =
 3647|  9.85k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  9.85k|        SCN_TRY(
  ------------------
  |  | 3940|  9.85k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  9.85k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  9.85k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  9.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 436, False: 9.42k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    436|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    436|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    436|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    436|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    436|    }                                                  \
  |  |  |  | 3939|  9.85k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  9.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  9.42k|            nothsep_source_it,
 3650|  9.42k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  9.42k|                                prefix_result.parsed_base));
 3652|       |
 3653|  9.42k|        return ranges::next(
 3654|  9.42k|            prefix_result.iterator,
 3655|  9.42k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  9.42k|                ranges::ssize(thsep_indices));
 3657|  9.85k|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESH_i:
 3376|   416k|{
 3377|   416k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|   416k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   416k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   416k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   416k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 416k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   416k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   416k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3378|   416k|    auto [base_prefix_begin_it, sign] = sign_result;
 3379|       |
 3380|   416k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3381|   416k|        parse_integer_base_prefix(
 3382|   416k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3383|       |
 3384|   416k|    if (parsed_zero) {
  ------------------
  |  Branch (3384:9): [True: 41.8k, False: 374k]
  ------------------
 3385|  41.8k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3385:13): [True: 478, False: 41.3k]
  ------------------
 3386|  41.8k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3386:13): [True: 30.7k, False: 10.6k]
  ------------------
 3387|  31.2k|            digits_begin_it = base_prefix_begin_it;
 3388|  31.2k|        }
 3389|  10.6k|        else {
 3390|  10.6k|            parsed_zero = false;
 3391|  10.6k|        }
 3392|  41.8k|    }
 3393|   374k|    else {
 3394|   374k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3394:13): [True: 2.15k, False: 372k]
  ------------------
 3395|   374k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3395:13): [True: 33.9k, False: 338k]
  ------------------
 3396|  36.0k|            digits_begin_it = base_prefix_begin_it;
 3397|  36.0k|        }
 3398|   374k|    }
 3399|       |
 3400|   416k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3400:9): [True: 361k, False: 54.7k]
  ------------------
 3401|   361k|        sign = sign_type::plus_sign;
 3402|   361k|    }
 3403|   416k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3404|   416k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3405|   416k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3257|   416k|{
 3258|   416k|    auto r = read_one_of_code_unit(range, "+-");
 3259|   416k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 361k, False: 54.7k]
  ------------------
 3260|   361k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 361k, False: 0]
  ------------------
 3261|   361k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|   361k|        }
 3263|      0|        return unexpected(eof_error::eof);
 3264|   361k|    }
 3265|       |
 3266|  54.7k|    auto& it = *r;
 3267|  54.7k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 42.3k, False: 12.4k]
  ------------------
 3268|  42.3k|        return std::pair{it, sign_type::minus_sign};
 3269|  42.3k|    }
 3270|  12.4k|    return std::pair{it, sign_type::plus_sign};
 3271|  54.7k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2371|   416k|{
 2372|   416k|    auto it = read_code_unit(range);
 2373|   416k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   416k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 416k]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|   819k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 819k, False: 361k]
  ------------------
 2378|   819k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 54.7k, False: 764k]
  ------------------
 2379|  54.7k|            return *it;
 2380|  54.7k|        }
 2381|   819k|    }
 2382|       |
 2383|   361k|    return unexpected(parse_error::error);
 2384|   416k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_i:
 3343|   416k|{
 3344|   416k|    switch (base) {
 3345|  21.8k|        case 2:
  ------------------
  |  Branch (3345:9): [True: 21.8k, False: 394k]
  ------------------
 3346|       |            // allow 0b/0B
 3347|  21.8k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3348|  21.8k|                    false};
 3349|       |
 3350|  39.2k|        case 8: {
  ------------------
  |  Branch (3350:9): [True: 39.2k, False: 376k]
  ------------------
 3351|       |            // allow 0o/0O/0
 3352|  39.2k|            bool zero_parsed = false;
 3353|  39.2k|            auto it = apply_opt(
 3354|  39.2k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3355|  39.2k|            return {it, 8, zero_parsed};
 3356|      0|        }
 3357|       |
 3358|  65.8k|        case 16:
  ------------------
  |  Branch (3358:9): [True: 65.8k, False: 350k]
  ------------------
 3359|       |            // allow 0x/0X
 3360|  65.8k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3361|  65.8k|                    false};
 3362|       |
 3363|  71.3k|        case 0:
  ------------------
  |  Branch (3363:9): [True: 71.3k, False: 344k]
  ------------------
 3364|       |            // detect base
 3365|  71.3k|            return parse_integer_base_prefix_for_detection(range);
 3366|       |
 3367|   217k|        default:
  ------------------
  |  Branch (3367:9): [True: 217k, False: 198k]
  ------------------
 3368|       |            // no base prefix allowed
 3369|   217k|            return {range.begin(), base, false};
 3370|   416k|    }
 3371|   416k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEE4typeEOSI_SK_:
 2390|   126k|{
 2391|   126k|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 109k, False: 17.4k]
  ------------------
 2392|   109k|        return range.begin();
 2393|   109k|    }
 2394|  17.4k|    return *result;
 2395|   126k|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3294|  92.6k|{
 3295|  92.6k|    return read_matching_string_classic_nocase(range, "0b");
 3296|  92.6k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2330|   339k|{
 2331|   339k|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|   339k|    else {
 2344|   339k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|   339k|            if (ch < 'A' || ch > 'Z') {
 2346|   339k|                return ch;
 2347|   339k|            }
 2348|   339k|            return static_cast<char_type>(ch +
 2349|   339k|                                          static_cast<char_type>('a' - 'A'));
 2350|   339k|        };
 2351|       |
 2352|   339k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|   339k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   339k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   339k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   339k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 11.4k, False: 328k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  11.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  11.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  11.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  11.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  11.4k|    }                                                  \
  |  |  |  | 3939|   339k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   328k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|   328k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|   328k|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|   328k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|   328k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 325k, False: 2.59k]
  |  |  ------------------
  ------------------
 2357|   328k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|   328k|                    return ascii_tolower(a) ==
 2359|   328k|                           static_cast<detail::char_t<Range>>(b);
 2360|   328k|                }))) {
 2361|   325k|            return unexpected(parse_error::error);
 2362|   325k|        }
 2363|       |
 2364|  2.59k|        return it;
 2365|   328k|    }
 2366|   339k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2344|   463k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|   463k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 450k, False: 13.6k]
  |  Branch (2345:29): [True: 7.59k, False: 6.10k]
  ------------------
 2346|   457k|                return ch;
 2347|   457k|            }
 2348|  6.10k|            return static_cast<char_type>(ch +
 2349|  6.10k|                                          static_cast<char_type>('a' - 'A'));
 2350|   463k|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 3308|   109k|{
 3309|   109k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3309:14): [True: 952, False: 108k]
  ------------------
 3310|    952|        return *r;
 3311|    952|    }
 3312|       |
 3313|   108k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3313:14): [True: 41.8k, False: 66.9k]
  ------------------
 3314|  41.8k|        zero_parsed = true;
 3315|  41.8k|        return *r;
 3316|  41.8k|    }
 3317|       |
 3318|  66.9k|    return unexpected(parse_error::error);
 3319|   108k|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2245|   108k|{
 2246|   108k|    auto it = read_code_unit(range);
 2247|   108k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 360, False: 108k]
  |  |  ------------------
  ------------------
 2248|    360|        return unexpected(make_eof_parse_error(it.error()));
 2249|    360|    }
 2250|       |
 2251|   108k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 66.5k, False: 41.8k]
  |  |  ------------------
  ------------------
 2252|   108k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|  66.5k|        return unexpected(parse_error::error);
 2254|  66.5k|    }
 2255|       |
 2256|  41.8k|    return *it;
 2257|   108k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3301|   137k|{
 3302|   137k|    return read_matching_string_classic_nocase(range, "0x");
 3303|   137k|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_:
 3324|  71.3k|{
 3325|  71.3k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3325:14): [True: 532, False: 70.8k]
  ------------------
 3326|    532|        return {*r, 16, false};
 3327|    532|    }
 3328|  70.8k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3328:14): [True: 318, False: 70.5k]
  ------------------
 3329|    318|        return {*r, 2, false};
 3330|    318|    }
 3331|  70.5k|    {
 3332|  70.5k|        bool zero_parsed{false};
 3333|  70.5k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3333:18): [True: 26.2k, False: 44.3k]
  ------------------
 3334|  26.2k|            return {*r, 8, zero_parsed};
 3335|  26.2k|        }
 3336|  70.5k|    }
 3337|  44.3k|    return {range.begin(), 10, false};
 3338|  70.5k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_i:
 3410|   312k|{
 3411|   312k|    using char_type = detail::char_t<Range>;
 3412|       |
 3413|       |    if constexpr (ranges::contiguous_range<Range>) {
 3414|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3415|       |            return detail::unexpected_scan_error(
 3416|       |                scan_error::invalid_scanned_value,
 3417|       |                "Failed to parse integer: No digits found");
 3418|       |        }
 3419|       |        return range.end();
 3420|       |    }
 3421|   312k|    else {
 3422|   312k|        return read_while1_code_unit(range,
 3423|   312k|                                     [&](char_type ch) noexcept {
 3424|   312k|                                         return char_to_int(ch) < base;
 3425|   312k|                                     })
 3426|   312k|            .transform_error(map_parse_error_to_scan_error(
 3427|   312k|                scan_error::invalid_scanned_value,
 3428|   312k|                "Failed to parse integer: No digits found"));
 3429|   312k|    }
 3430|   312k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 2094|   312k|{
 2095|   312k|    auto it = read_while_code_unit(range, pred);
 2096|   312k|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 28.2k, False: 284k]
  ------------------
 2097|  28.2k|        return unexpected(parse_error::error);
 2098|  28.2k|    }
 2099|   284k|    return it;
 2100|   312k|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_:
  742|   312k|        : m_fptr([](storage fn,
  743|   312k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   312k|              cvref<T> obj = *get<T>(fn);
  745|   312k|              if constexpr (std::is_void_v<R>) {
  746|   312k|                  obj(static_cast<decltype(args)>(args)...);
  747|   312k|              }
  748|   312k|              else {
  749|   312k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   312k|              }
  751|   312k|          }),
  752|   312k|          m_storage(std::addressof(f))
  753|   312k|    {
  754|   312k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEcE_clES11_c:
  743|  1.15M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.15M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.15M|              else {
  749|  1.15M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.15M|              }
  751|  1.15M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_iEUlcE_EEDaNS3_7storageE:
  683|  1.15M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.15M|        else if constexpr (std::is_object_v<T>) {
  688|  1.15M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.15M|    }
_ZZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_iENKUlcE_clEc:
 3423|  1.15M|                                     [&](char_type ch) noexcept {
 3424|  1.15M|                                         return char_to_int(ch) < base;
 3425|  1.15M|                                     })
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_TnPNSI_9enable_ifIXsr3stdE11is_object_vISK_EEvE4typeELPv0EEEPSK_:
  660|   312k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   312k|        {
  662|   312k|        }
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENSE_12basic_stringIT0_NSE_11char_traitsISN_EENSE_9allocatorISN_EEEENSM_IcNSO_IcEENSQ_IcEEEEEEEEESH_iRKNS1_35localized_number_formatting_optionsISN_EE:
 3440|  61.1k|{
 3441|  61.1k|    std::basic_string<CharT> output;
 3442|  61.1k|    std::string thsep_indices;
 3443|  61.1k|    auto it = range.begin();
 3444|  61.1k|    bool digit_matched = false;
 3445|   327k|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3445:12): [True: 325k, False: 2.21k]
  ------------------
 3446|   325k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3446:13): [True: 31.6k, False: 293k]
  ------------------
 3447|  31.6k|            thsep_indices.push_back(
 3448|  31.6k|                static_cast<char>(ranges::distance(range.begin(), it)));
 3449|  31.6k|        }
 3450|   293k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3450:18): [True: 58.9k, False: 234k]
  ------------------
 3451|  58.9k|            break;
 3452|  58.9k|        }
 3453|   234k|        else {
 3454|   234k|            output.push_back(*it);
 3455|   234k|            digit_matched = true;
 3456|   234k|        }
 3457|   325k|    }
 3458|  61.1k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  865|  61.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.26k, False: 57.9k]
  |  |  ------------------
  ------------------
 3459|  3.26k|        return detail::unexpected_scan_error(
 3460|  3.26k|            scan_error::invalid_scanned_value,
 3461|  3.26k|            "Failed to parse integer: No digits found");
 3462|  3.26k|    }
 3463|  57.9k|    return std::tuple{it, output, thsep_indices};
 3464|  61.1k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1781|   284k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|   284k|    else {
 1788|   284k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  936|   284k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|   284k|    }
 1790|   284k|}
_ZN3scn2v44impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1635|   284k|    {
 1636|   284k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   284k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|   284k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1719|   284k|    {
 1720|   284k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   284k|                           ranges::common_range<Range>) {
 1737|   284k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   284k|            auto end_seg = range.end().contiguous_segment();
 1739|   284k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  865|   284k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 179k, False: 105k]
  |  |  ------------------
  ------------------
 1740|   284k|                             detail::to_address(end_seg.end()))) {
 1741|   179k|                auto& str = m_storage.emplace();
 1742|   179k|                str.reserve(range.end().position() - range.begin().position());
 1743|   179k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|   179k|                m_view = string_view_type{str};
 1745|   179k|                return;
 1746|   179k|            }
 1747|       |
 1748|   105k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   105k|                                                            end_seg.data());
 1750|   105k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   284k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1680|   562k|    {
 1681|   562k|        return m_view;
 1682|   562k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1670|   284k|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6115|   276k|    {
 6116|   276k|        const bool need_skipped_width =
 6117|   276k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6117:13): [True: 0, False: 276k]
  |  Branch (6117:33): [True: 0, False: 276k]
  ------------------
 6118|   276k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6119|       |
 6120|   276k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6120:13): [True: 0, False: 276k]
  ------------------
 6121|   276k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6121:13): [True: 0, False: 276k]
  ------------------
 6122|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6122:17): [True: 0, False: 0]
  ------------------
 6123|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                return result_type{rng.begin(), 0};
 6125|      0|            }
 6126|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6127|      0|                             specs.fill, need_skipped_width);
 6128|      0|        }
 6129|   276k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6129:13): [True: 276k, False: 0]
  ------------------
 6130|   276k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6130:13): [True: 0, False: 276k]
  ------------------
 6131|   276k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6131:15): [True: 0, False: 0]
  |  Branch (6131:35): [True: 0, False: 0]
  ------------------
 6132|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6132:15): [True: 0, False: 0]
  ------------------
 6133|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6133:15): [True: 0, False: 0]
  ------------------
 6134|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6134:17): [True: 0, False: 0]
  ------------------
 6135|      0|                const auto initial_width =
 6136|      0|                    specs.precision - prefix_width - value_width;
 6137|      0|                auto max_width_view = take_width(rng, initial_width);
 6138|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|      0|                                  .transform_error(make_eof_scan_error));
 6140|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6141|      0|            }
 6142|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|                            make_eof_scan_error));
 6144|       |
 6145|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6145:17): [True: 0, False: 0]
  ------------------
 6146|      0|                return result_type{
 6147|      0|                    it,
 6148|      0|                    calculate_text_width(make_contiguous_buffer(
 6149|      0|                                             ranges::subrange{rng.begin(), it})
 6150|      0|                                             .view())};
 6151|      0|            }
 6152|      0|            return result_type{it, 0};
 6153|      0|        }
 6154|   276k|        return result_type{rng.begin(), 0};
 6155|   276k|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|   526k|{
 1945|   526k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   526k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 360, False: 526k]
  |  |  ------------------
  ------------------
 1946|    360|        return unexpected(e);
 1947|    360|    }
 1948|       |
 1949|   526k|    return ranges::next(range.begin());
 1950|   526k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|  1.36M|{
  951|  1.36M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  1.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.4k, False: 1.35M]
  |  |  ------------------
  ------------------
  952|  12.4k|        return eof_error::eof;
  953|  12.4k|    }
  954|  1.35M|    return eof_error::good;
  955|  1.36M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|  1.36M|{
  945|  1.36M|    return is_range_eof(r.begin(), r.end());
  946|  1.36M|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|  1.36M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  1.36M|    {
  938|  1.36M|        return begin == end;
  939|  1.36M|    }
  940|  1.36M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   526k|    {
  296|   526k|        ++x;
  297|   526k|        return x;
  298|   526k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|  52.2k|    {
 3590|  52.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  52.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  52.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  52.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  52.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 52.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  52.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  52.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  52.2k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  52.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 7.68k, False: 44.6k]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|  7.68k|            else {
 3601|  7.68k|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 7.68k]
  ------------------
 3602|  7.68k|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|  7.68k|            }
 3608|  7.68k|        }
 3609|       |
 3610|  52.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 5.21k, False: 47.0k]
  ------------------
 3611|  5.21k|            value = T{0};
 3612|  5.21k|            return std::next(prefix_result.iterator);
 3613|  5.21k|        }
 3614|       |
 3615|  47.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  47.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 36.6k, False: 10.4k]
  |  |  ------------------
  ------------------
 3616|  36.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  36.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  36.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  36.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  36.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 128, False: 36.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    128|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    128|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    128|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    128|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    128|    }                                                  \
  |  |  |  | 3939|  36.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  36.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  36.4k|                    parse_integer_digits_without_thsep(
 3618|  36.4k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  36.4k|                        prefix_result.parsed_base));
 3620|       |
 3621|  36.4k|            auto buf = make_contiguous_buffer(
 3622|  36.4k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  36.4k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  36.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  36.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  36.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  36.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 5.73k, False: 30.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  5.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  5.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  5.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  5.73k|    }                                                  \
  |  |  |  | 3939|  36.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  30.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|  30.7k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|  30.7k|                                        prefix_result.parsed_base));
 3626|       |
 3627|  30.7k|            return ranges::next(
 3628|  30.7k|                prefix_result.iterator,
 3629|  30.7k|                ranges::distance(buf.view().begin(), result_it));
 3630|  36.4k|        }
 3631|       |
 3632|  10.4k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  10.4k|            localized_number_formatting_options<CharT>{loc};
 3637|  10.4k|#endif
 3638|       |
 3639|  10.4k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  10.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  10.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  10.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  10.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 624, False: 9.84k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    624|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    624|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    624|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    624|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    624|    }                                                  \
  |  |  |  | 3939|  10.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  9.84k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  9.84k|                parse_integer_digits_with_thsep(
 3641|  9.84k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  9.84k|                    prefix_result.parsed_base, locale_options));
 3643|  9.84k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  9.84k|            parse_digits_result;
 3645|       |
 3646|  9.84k|        auto nothsep_source_view =
 3647|  9.84k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  9.84k|        SCN_TRY(
  ------------------
  |  | 3940|  9.84k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  9.84k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  9.84k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  9.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 432, False: 9.41k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    432|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    432|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    432|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    432|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    432|    }                                                  \
  |  |  |  | 3939|  9.84k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  9.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  9.41k|            nothsep_source_it,
 3650|  9.41k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  9.41k|                                prefix_result.parsed_base));
 3652|       |
 3653|  9.41k|        return ranges::next(
 3654|  9.41k|            prefix_result.iterator,
 3655|  9.41k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  9.41k|                ranges::ssize(thsep_indices));
 3657|  9.84k|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3376|   417k|{
 3377|   417k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|   417k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   417k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   417k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   417k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 417k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   417k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   417k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3378|   417k|    auto [base_prefix_begin_it, sign] = sign_result;
 3379|       |
 3380|   417k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3381|   417k|        parse_integer_base_prefix(
 3382|   417k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3383|       |
 3384|   417k|    if (parsed_zero) {
  ------------------
  |  Branch (3384:9): [True: 41.8k, False: 375k]
  ------------------
 3385|  41.8k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3385:13): [True: 478, False: 41.3k]
  ------------------
 3386|  41.8k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3386:13): [True: 30.7k, False: 10.6k]
  ------------------
 3387|  31.2k|            digits_begin_it = base_prefix_begin_it;
 3388|  31.2k|        }
 3389|  10.6k|        else {
 3390|  10.6k|            parsed_zero = false;
 3391|  10.6k|        }
 3392|  41.8k|    }
 3393|   375k|    else {
 3394|   375k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3394:13): [True: 2.15k, False: 373k]
  ------------------
 3395|   375k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3395:13): [True: 34.7k, False: 338k]
  ------------------
 3396|  36.9k|            digits_begin_it = base_prefix_begin_it;
 3397|  36.9k|        }
 3398|   375k|    }
 3399|       |
 3400|   417k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3400:9): [True: 362k, False: 54.7k]
  ------------------
 3401|   362k|        sign = sign_type::plus_sign;
 3402|   362k|    }
 3403|   417k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3404|   417k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3405|   417k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3257|   417k|{
 3258|   417k|    auto r = read_one_of_code_unit(range, "+-");
 3259|   417k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 362k, False: 54.7k]
  ------------------
 3260|   362k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 362k, False: 0]
  ------------------
 3261|   362k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|   362k|        }
 3263|      0|        return unexpected(eof_error::eof);
 3264|   362k|    }
 3265|       |
 3266|  54.7k|    auto& it = *r;
 3267|  54.7k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 42.3k, False: 12.4k]
  ------------------
 3268|  42.3k|        return std::pair{it, sign_type::minus_sign};
 3269|  42.3k|    }
 3270|  12.4k|    return std::pair{it, sign_type::plus_sign};
 3271|  54.7k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2371|   417k|{
 2372|   417k|    auto it = read_code_unit(range);
 2373|   417k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   417k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 417k]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|   823k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 823k, False: 362k]
  ------------------
 2378|   823k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 54.7k, False: 768k]
  ------------------
 2379|  54.7k|            return *it;
 2380|  54.7k|        }
 2381|   823k|    }
 2382|       |
 2383|   362k|    return unexpected(parse_error::error);
 2384|   417k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3343|   417k|{
 3344|   417k|    switch (base) {
 3345|  21.8k|        case 2:
  ------------------
  |  Branch (3345:9): [True: 21.8k, False: 395k]
  ------------------
 3346|       |            // allow 0b/0B
 3347|  21.8k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3348|  21.8k|                    false};
 3349|       |
 3350|  39.3k|        case 8: {
  ------------------
  |  Branch (3350:9): [True: 39.3k, False: 378k]
  ------------------
 3351|       |            // allow 0o/0O/0
 3352|  39.3k|            bool zero_parsed = false;
 3353|  39.3k|            auto it = apply_opt(
 3354|  39.3k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3355|  39.3k|            return {it, 8, zero_parsed};
 3356|      0|        }
 3357|       |
 3358|  65.8k|        case 16:
  ------------------
  |  Branch (3358:9): [True: 65.8k, False: 351k]
  ------------------
 3359|       |            // allow 0x/0X
 3360|  65.8k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3361|  65.8k|                    false};
 3362|       |
 3363|  71.4k|        case 0:
  ------------------
  |  Branch (3363:9): [True: 71.4k, False: 346k]
  ------------------
 3364|       |            // detect base
 3365|  71.4k|            return parse_integer_base_prefix_for_detection(range);
 3366|       |
 3367|   219k|        default:
  ------------------
  |  Branch (3367:9): [True: 219k, False: 198k]
  ------------------
 3368|       |            // no base prefix allowed
 3369|   219k|            return {range.begin(), base, false};
 3370|   417k|    }
 3371|   417k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2390|   127k|{
 2391|   127k|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 109k, False: 17.4k]
  ------------------
 2392|   109k|        return range.begin();
 2393|   109k|    }
 2394|  17.4k|    return *result;
 2395|   127k|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3294|  92.7k|{
 3295|  92.7k|    return read_matching_string_classic_nocase(range, "0b");
 3296|  92.7k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2330|   339k|{
 2331|   339k|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|   339k|                  std::is_same_v<char_type, char>) {
 2335|   339k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2335:13): [True: 11.6k, False: 328k]
  ------------------
 2336|  11.6k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|  11.6k|        }
 2338|   328k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2338:13): [True: 325k, False: 2.59k]
  ------------------
 2339|   325k|            return unexpected(parse_error::error);
 2340|   325k|        }
 2341|  2.59k|        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|       |    else {
 2344|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|       |            if (ch < 'A' || ch > 'Z') {
 2346|       |                return ch;
 2347|       |            }
 2348|       |            return static_cast<char_type>(ch +
 2349|       |                                          static_cast<char_type>('a' - 'A'));
 2350|       |        };
 2351|       |
 2352|       |        SCN_TRY(it, read_exactly_n_code_units(
 2353|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|       |                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|       |        if (SCN_UNLIKELY(!std::equal(
 2357|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|       |                    return ascii_tolower(a) ==
 2359|       |                           static_cast<detail::char_t<Range>>(b);
 2360|       |                }))) {
 2361|       |            return unexpected(parse_error::error);
 2362|       |        }
 2363|       |
 2364|       |        return it;
 2365|       |    }
 2366|   339k|}
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3308|   109k|{
 3309|   109k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3309:14): [True: 952, False: 108k]
  ------------------
 3310|    952|        return *r;
 3311|    952|    }
 3312|       |
 3313|   108k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3313:14): [True: 41.8k, False: 67.1k]
  ------------------
 3314|  41.8k|        zero_parsed = true;
 3315|  41.8k|        return *r;
 3316|  41.8k|    }
 3317|       |
 3318|  67.1k|    return unexpected(parse_error::error);
 3319|   108k|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2245|   108k|{
 2246|   108k|    auto it = read_code_unit(range);
 2247|   108k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 360, False: 108k]
  |  |  ------------------
  ------------------
 2248|    360|        return unexpected(make_eof_parse_error(it.error()));
 2249|    360|    }
 2250|       |
 2251|   108k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 66.7k, False: 41.8k]
  |  |  ------------------
  ------------------
 2252|   108k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|  66.7k|        return unexpected(parse_error::error);
 2254|  66.7k|    }
 2255|       |
 2256|  41.8k|    return *it;
 2257|   108k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3301|   137k|{
 3302|   137k|    return read_matching_string_classic_nocase(range, "0x");
 3303|   137k|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3324|  71.4k|{
 3325|  71.4k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3325:14): [True: 532, False: 70.9k]
  ------------------
 3326|    532|        return {*r, 16, false};
 3327|    532|    }
 3328|  70.9k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3328:14): [True: 318, False: 70.5k]
  ------------------
 3329|    318|        return {*r, 2, false};
 3330|    318|    }
 3331|  70.5k|    {
 3332|  70.5k|        bool zero_parsed{false};
 3333|  70.5k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3333:18): [True: 26.1k, False: 44.4k]
  ------------------
 3334|  26.1k|            return {*r, 8, zero_parsed};
 3335|  26.1k|        }
 3336|  70.5k|    }
 3337|  44.4k|    return {range.begin(), 10, false};
 3338|  70.5k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3410|   314k|{
 3411|   314k|    using char_type = detail::char_t<Range>;
 3412|       |
 3413|   314k|    if constexpr (ranges::contiguous_range<Range>) {
 3414|   314k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 891, False: 313k]
  |  |  ------------------
  ------------------
 3415|    891|            return detail::unexpected_scan_error(
 3416|    891|                scan_error::invalid_scanned_value,
 3417|    891|                "Failed to parse integer: No digits found");
 3418|    891|        }
 3419|   313k|        return range.end();
 3420|       |    }
 3421|       |    else {
 3422|       |        return read_while1_code_unit(range,
 3423|       |                                     [&](char_type ch) noexcept {
 3424|       |                                         return char_to_int(ch) < base;
 3425|       |                                     })
 3426|       |            .transform_error(map_parse_error_to_scan_error(
 3427|       |                scan_error::invalid_scanned_value,
 3428|       |                "Failed to parse integer: No digits found"));
 3429|       |    }
 3430|   314k|}
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3440|  61.3k|{
 3441|  61.3k|    std::basic_string<CharT> output;
 3442|  61.3k|    std::string thsep_indices;
 3443|  61.3k|    auto it = range.begin();
 3444|  61.3k|    bool digit_matched = false;
 3445|   327k|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3445:12): [True: 325k, False: 2.17k]
  ------------------
 3446|   325k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3446:13): [True: 31.5k, False: 293k]
  ------------------
 3447|  31.5k|            thsep_indices.push_back(
 3448|  31.5k|                static_cast<char>(ranges::distance(range.begin(), it)));
 3449|  31.5k|        }
 3450|   293k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3450:18): [True: 59.1k, False: 234k]
  ------------------
 3451|  59.1k|            break;
 3452|  59.1k|        }
 3453|   234k|        else {
 3454|   234k|            output.push_back(*it);
 3455|   234k|            digit_matched = true;
 3456|   234k|        }
 3457|   325k|    }
 3458|  61.3k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  865|  61.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.50k, False: 57.8k]
  |  |  ------------------
  ------------------
 3459|  3.50k|        return detail::unexpected_scan_error(
 3460|  3.50k|            scan_error::invalid_scanned_value,
 3461|  3.50k|            "Failed to parse integer: No digits found");
 3462|  3.50k|    }
 3463|  57.8k|    return std::tuple{it, output, thsep_indices};
 3464|  61.3k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|   313k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   313k|                  ranges::sized_range<Range>) {
 1785|   313k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|   313k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   313k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|   313k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   313k|    {
 1589|   313k|    }
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|  1.44M|    {
 1602|  1.44M|        return sv;
 1603|  1.44M|    }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|   427k|{
 3066|   427k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 427k, False: 0]
  ------------------
 3067|   427k|        auto it = read_while_classic_space(range);
 3068|   427k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   427k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   427k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 9.35k, False: 417k]
  |  |  ------------------
  ------------------
 3070|  9.35k|            return unexpected(e);
 3071|  9.35k|        }
 3072|       |
 3073|   417k|        return it;
 3074|   427k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   427k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|   427k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|   427k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|   427k|        auto buf = make_contiguous_buffer(range);
 2220|   427k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|   427k|        return ranges::next(range.begin(),
 2222|   427k|                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|       |    else {
 2225|       |        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|       |            return detail::is_cp_space(cp);
 2238|       |        });
 2239|       |    }
 2240|   427k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|   427k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   427k|                  ranges::sized_range<Range>) {
 1785|   427k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|   427k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   427k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|   427k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   427k|    {
 1589|   427k|    }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|   661k|    {
  304|   661k|        ranges::advance(x, n);
  305|   661k|        return x;
  306|   661k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  1.06M|    {
  268|  1.06M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.06M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  1.06M|    {
  181|  2.61M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 1.55M, False: 1.06M]
  ------------------
  182|  1.55M|            ++i;
  183|  1.55M|        }
  184|  1.06M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIaEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6225|  53.6k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|       |                          basic_contiguous_scan_context<char_type>>) {
 6230|       |            auto rd = make_reader<T, char_type>();
 6231|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6232|       |            return impl(rd, range, value);
 6233|       |        }
 6234|  53.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6235|  53.6k|            auto rd = make_reader<T, char_type>();
 6236|  53.6k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  53.6k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  53.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 53.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6237|       |
 6238|  53.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6238:17): [True: 53.6k, False: 0]
  |  Branch (6238:50): [True: 0, False: 0]
  ------------------
 6239|  53.6k|                specs.width != 0) {
  ------------------
  |  Branch (6239:17): [True: 0, False: 0]
  ------------------
 6240|  53.6k|                return impl(rd, range, value);
 6241|  53.6k|            }
 6242|       |
 6243|      0|            auto crange = get_as_contiguous(range);
 6244|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6245|      0|            return ranges::next(range.begin(),
 6246|      0|                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  53.6k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3155|   665k|    {
 3156|   665k|        reader_error_handler eh{};
 3157|   665k|        get_derived().check_specs_impl(specs, eh);
 3158|   665k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|   665k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 665k]
  |  |  ------------------
  ------------------
 3159|      0|            return detail::unexpected_scan_error(
 3160|      0|                scan_error::invalid_format_string, eh.m_msg);
 3161|      0|        }
 3162|   665k|        return {};
 3163|   665k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3167|   665k|    {
 3168|   665k|        return static_cast<Derived&>(*this);
 3169|   665k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3535|   665k|    {
 3536|   665k|        detail::check_int_type_specs(specs, eh);
 3537|   665k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6160|  53.6k|    {
 6161|  53.6k|        const bool need_skipped_width =
 6162|  53.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 53.6k]
  |  Branch (6162:33): [True: 0, False: 53.6k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|  53.6k|        auto it = rng.begin();
 6166|  53.6k|        std::ptrdiff_t prefix_width = 0;
 6167|  53.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 53.6k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|  53.6k|        else {
 6175|  53.6k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  53.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  53.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  53.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  53.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.50k, False: 52.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.50k|    }                                                  \
  |  |  |  | 3939|  53.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  52.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|  52.1k|            std::tie(it, prefix_width) = prefix_result;
 6177|  52.1k|        }
 6178|  52.1k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|  52.1k|        std::ptrdiff_t value_width = 0;
 6182|  52.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 52.1k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|  52.1k|        else {
 6198|  52.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  52.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  52.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  52.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.77k, False: 45.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.77k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.77k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.77k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.77k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.77k|    }                                                  \
  |  | 3939|  52.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  52.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|  45.4k|                                             specs, value, loc));
 6200|       |
 6201|  45.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 45.4k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|  45.4k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|  45.4k|        std::ptrdiff_t postfix_width = 0;
 6210|  45.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 44.3k, False: 1.02k]
  ------------------
 6211|  44.3k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  44.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  44.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  44.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  44.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 44.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  44.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  44.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|  44.3k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|  44.3k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|  44.3k|                                 value_width));
 6215|  44.3k|            std::tie(it, postfix_width) = postfix_result;
 6216|  44.3k|        }
 6217|       |
 6218|  45.4k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  45.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  45.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 45.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|  45.4k|            specs, prefix_width, value_width, postfix_width));
 6220|  45.4k|        return it;
 6221|  45.4k|    }
_ZNK3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3150|  1.41M|    {
 3151|  1.41M|        return true;
 3152|  1.41M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIiEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6225|  63.7k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|       |                          basic_contiguous_scan_context<char_type>>) {
 6230|       |            auto rd = make_reader<T, char_type>();
 6231|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6232|       |            return impl(rd, range, value);
 6233|       |        }
 6234|  63.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 6235|  63.7k|            auto rd = make_reader<T, char_type>();
 6236|  63.7k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  63.7k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  63.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 63.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6237|       |
 6238|  63.7k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6238:17): [True: 63.7k, False: 0]
  |  Branch (6238:50): [True: 0, False: 0]
  ------------------
 6239|  63.7k|                specs.width != 0) {
  ------------------
  |  Branch (6239:17): [True: 0, False: 0]
  ------------------
 6240|  63.7k|                return impl(rd, range, value);
 6241|  63.7k|            }
 6242|       |
 6243|      0|            auto crange = get_as_contiguous(range);
 6244|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6245|      0|            return ranges::next(range.begin(),
 6246|      0|                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  63.7k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6160|  63.7k|    {
 6161|  63.7k|        const bool need_skipped_width =
 6162|  63.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 63.7k]
  |  Branch (6162:33): [True: 0, False: 63.7k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|  63.7k|        auto it = rng.begin();
 6166|  63.7k|        std::ptrdiff_t prefix_width = 0;
 6167|  63.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 63.7k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|  63.7k|        else {
 6175|  63.7k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  63.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  63.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  63.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  63.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.98k, False: 61.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.98k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.98k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.98k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.98k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.98k|    }                                                  \
  |  |  |  | 3939|  63.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  61.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|  61.7k|            std::tie(it, prefix_width) = prefix_result;
 6177|  61.7k|        }
 6178|  61.7k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|  61.7k|        std::ptrdiff_t value_width = 0;
 6182|  61.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 61.7k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|  61.7k|        else {
 6198|  61.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  61.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  61.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  61.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.29k, False: 55.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.29k|    }                                                  \
  |  | 3939|  61.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  61.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|  55.4k|                                             specs, value, loc));
 6200|       |
 6201|  55.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 55.4k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|  55.4k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|  55.4k|        std::ptrdiff_t postfix_width = 0;
 6210|  55.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 54.0k, False: 1.37k]
  ------------------
 6211|  54.0k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  54.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  54.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  54.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  54.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 54.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  54.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  54.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|  54.0k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|  54.0k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|  54.0k|                                 value_width));
 6215|  54.0k|            std::tie(it, postfix_width) = postfix_result;
 6216|  54.0k|        }
 6217|       |
 6218|  55.4k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  55.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  55.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 55.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|  55.4k|            specs, prefix_width, value_width, postfix_width));
 6220|  55.4k|        return it;
 6221|  55.4k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3589|  61.7k|    {
 3590|  61.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  61.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  61.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  61.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  61.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 61.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  61.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  61.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  61.7k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  61.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 8.04k, False: 53.6k]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|  8.04k|            else {
 3601|  8.04k|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 8.04k]
  ------------------
 3602|  8.04k|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|  8.04k|            }
 3608|  8.04k|        }
 3609|       |
 3610|  61.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 5.49k, False: 56.2k]
  ------------------
 3611|  5.49k|            value = T{0};
 3612|  5.49k|            return std::next(prefix_result.iterator);
 3613|  5.49k|        }
 3614|       |
 3615|  56.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  56.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 44.1k, False: 12.0k]
  |  |  ------------------
  ------------------
 3616|  44.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  44.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  44.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  44.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  44.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.58k, False: 39.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.58k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.58k|    }                                                  \
  |  |  |  | 3939|  44.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  39.6k|                    parse_integer_digits_without_thsep(
 3618|  39.6k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  39.6k|                        prefix_result.parsed_base));
 3620|       |
 3621|  39.6k|            auto buf = make_contiguous_buffer(
 3622|  39.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  39.6k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  39.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  39.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  39.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  39.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 790, False: 38.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    790|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    790|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    790|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    790|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    790|    }                                                  \
  |  |  |  | 3939|  39.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  38.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|  38.8k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|  38.8k|                                        prefix_result.parsed_base));
 3626|       |
 3627|  38.8k|            return ranges::next(
 3628|  38.8k|                prefix_result.iterator,
 3629|  38.8k|                ranges::distance(buf.view().begin(), result_it));
 3630|  39.6k|        }
 3631|       |
 3632|  12.0k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  12.0k|            localized_number_formatting_options<CharT>{loc};
 3637|  12.0k|#endif
 3638|       |
 3639|  12.0k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  12.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 706, False: 11.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    706|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    706|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    706|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    706|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    706|    }                                                  \
  |  |  |  | 3939|  12.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  11.3k|                parse_integer_digits_with_thsep(
 3641|  11.3k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  11.3k|                    prefix_result.parsed_base, locale_options));
 3643|  11.3k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  11.3k|            parse_digits_result;
 3645|       |
 3646|  11.3k|        auto nothsep_source_view =
 3647|  11.3k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  11.3k|        SCN_TRY(
  ------------------
  |  | 3940|  11.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 218, False: 11.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    218|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    218|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    218|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    218|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    218|    }                                                  \
  |  |  |  | 3939|  11.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  11.1k|            nothsep_source_it,
 3650|  11.1k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  11.1k|                                prefix_result.parsed_base));
 3652|       |
 3653|  11.1k|        return ranges::next(
 3654|  11.1k|            prefix_result.iterator,
 3655|  11.1k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  11.1k|                ranges::ssize(thsep_indices));
 3657|  11.3k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|  61.8k|    {
 3590|  61.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  61.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  61.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  61.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  61.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 61.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  61.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  61.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  61.8k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  61.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 8.03k, False: 53.7k]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|  8.03k|            else {
 3601|  8.03k|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 8.03k]
  ------------------
 3602|  8.03k|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|  8.03k|            }
 3608|  8.03k|        }
 3609|       |
 3610|  61.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 5.49k, False: 56.3k]
  ------------------
 3611|  5.49k|            value = T{0};
 3612|  5.49k|            return std::next(prefix_result.iterator);
 3613|  5.49k|        }
 3614|       |
 3615|  56.3k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  56.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 44.2k, False: 12.0k]
  |  |  ------------------
  ------------------
 3616|  44.2k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  44.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  44.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  44.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  44.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 192, False: 44.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    192|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    192|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    192|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    192|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    192|    }                                                  \
  |  |  |  | 3939|  44.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  44.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  44.0k|                    parse_integer_digits_without_thsep(
 3618|  44.0k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  44.0k|                        prefix_result.parsed_base));
 3620|       |
 3621|  44.0k|            auto buf = make_contiguous_buffer(
 3622|  44.0k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  44.0k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  44.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  44.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  44.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  44.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 5.32k, False: 38.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  5.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  5.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  5.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  5.32k|    }                                                  \
  |  |  |  | 3939|  44.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  38.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|  38.7k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|  38.7k|                                        prefix_result.parsed_base));
 3626|       |
 3627|  38.7k|            return ranges::next(
 3628|  38.7k|                prefix_result.iterator,
 3629|  38.7k|                ranges::distance(buf.view().begin(), result_it));
 3630|  44.0k|        }
 3631|       |
 3632|  12.0k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  12.0k|            localized_number_formatting_options<CharT>{loc};
 3637|  12.0k|#endif
 3638|       |
 3639|  12.0k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  12.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 750, False: 11.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    750|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    750|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    750|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    750|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    750|    }                                                  \
  |  |  |  | 3939|  12.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  11.3k|                parse_integer_digits_with_thsep(
 3641|  11.3k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  11.3k|                    prefix_result.parsed_base, locale_options));
 3643|  11.3k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  11.3k|            parse_digits_result;
 3645|       |
 3646|  11.3k|        auto nothsep_source_view =
 3647|  11.3k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  11.3k|        SCN_TRY(
  ------------------
  |  | 3940|  11.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 216, False: 11.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    216|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    216|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    216|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    216|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    216|    }                                                  \
  |  |  |  | 3939|  11.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  11.1k|            nothsep_source_it,
 3650|  11.1k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  11.1k|                                prefix_result.parsed_base));
 3652|       |
 3653|  11.1k|        return ranges::next(
 3654|  11.1k|            prefix_result.iterator,
 3655|  11.1k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  11.1k|                ranges::ssize(thsep_indices));
 3657|  11.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIxEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6225|  64.8k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|       |                          basic_contiguous_scan_context<char_type>>) {
 6230|       |            auto rd = make_reader<T, char_type>();
 6231|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6232|       |            return impl(rd, range, value);
 6233|       |        }
 6234|  64.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 6235|  64.8k|            auto rd = make_reader<T, char_type>();
 6236|  64.8k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  64.8k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  64.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 64.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6237|       |
 6238|  64.8k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6238:17): [True: 64.8k, False: 0]
  |  Branch (6238:50): [True: 0, False: 0]
  ------------------
 6239|  64.8k|                specs.width != 0) {
  ------------------
  |  Branch (6239:17): [True: 0, False: 0]
  ------------------
 6240|  64.8k|                return impl(rd, range, value);
 6241|  64.8k|            }
 6242|       |
 6243|      0|            auto crange = get_as_contiguous(range);
 6244|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6245|      0|            return ranges::next(range.begin(),
 6246|      0|                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  64.8k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6160|  64.8k|    {
 6161|  64.8k|        const bool need_skipped_width =
 6162|  64.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 64.8k]
  |  Branch (6162:33): [True: 0, False: 64.8k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|  64.8k|        auto it = rng.begin();
 6166|  64.8k|        std::ptrdiff_t prefix_width = 0;
 6167|  64.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 64.8k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|  64.8k|        else {
 6175|  64.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  64.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  64.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  64.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  64.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.19k, False: 62.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.19k|    }                                                  \
  |  |  |  | 3939|  64.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  62.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|  62.6k|            std::tie(it, prefix_width) = prefix_result;
 6177|  62.6k|        }
 6178|  62.6k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|  62.6k|        std::ptrdiff_t value_width = 0;
 6182|  62.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 62.6k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|  62.6k|        else {
 6198|  62.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  62.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  62.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  62.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.09k, False: 56.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.09k|    }                                                  \
  |  | 3939|  62.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  62.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|  56.5k|                                             specs, value, loc));
 6200|       |
 6201|  56.5k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 56.5k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|  56.5k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|  56.5k|        std::ptrdiff_t postfix_width = 0;
 6210|  56.5k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 55.0k, False: 1.53k]
  ------------------
 6211|  55.0k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  55.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  55.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  55.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  55.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 55.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  55.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  55.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|  55.0k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|  55.0k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|  55.0k|                                 value_width));
 6215|  55.0k|            std::tie(it, postfix_width) = postfix_result;
 6216|  55.0k|        }
 6217|       |
 6218|  56.5k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  56.5k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  56.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 56.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|  56.5k|            specs, prefix_width, value_width, postfix_width));
 6220|  56.5k|        return it;
 6221|  56.5k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3589|  62.6k|    {
 3590|  62.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  62.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  62.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  62.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  62.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 62.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  62.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  62.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  62.6k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  62.6k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 8.23k, False: 54.4k]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|  8.23k|            else {
 3601|  8.23k|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 8.23k]
  ------------------
 3602|  8.23k|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|  8.23k|            }
 3608|  8.23k|        }
 3609|       |
 3610|  62.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 5.53k, False: 57.1k]
  ------------------
 3611|  5.53k|            value = T{0};
 3612|  5.53k|            return std::next(prefix_result.iterator);
 3613|  5.53k|        }
 3614|       |
 3615|  57.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  57.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 44.9k, False: 12.2k]
  |  |  ------------------
  ------------------
 3616|  44.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  44.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  44.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  44.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  44.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.80k, False: 40.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.80k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.80k|    }                                                  \
  |  |  |  | 3939|  44.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  40.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  40.0k|                    parse_integer_digits_without_thsep(
 3618|  40.0k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  40.0k|                        prefix_result.parsed_base));
 3620|       |
 3621|  40.0k|            auto buf = make_contiguous_buffer(
 3622|  40.0k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  40.0k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  40.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  40.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  40.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  40.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 406, False: 39.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    406|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    406|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    406|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    406|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    406|    }                                                  \
  |  |  |  | 3939|  40.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|  39.6k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|  39.6k|                                        prefix_result.parsed_base));
 3626|       |
 3627|  39.6k|            return ranges::next(
 3628|  39.6k|                prefix_result.iterator,
 3629|  39.6k|                ranges::distance(buf.view().begin(), result_it));
 3630|  40.0k|        }
 3631|       |
 3632|  12.2k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  12.2k|            localized_number_formatting_options<CharT>{loc};
 3637|  12.2k|#endif
 3638|       |
 3639|  12.2k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  12.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 762, False: 11.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    762|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    762|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    762|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    762|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    762|    }                                                  \
  |  |  |  | 3939|  12.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  11.4k|                parse_integer_digits_with_thsep(
 3641|  11.4k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  11.4k|                    prefix_result.parsed_base, locale_options));
 3643|  11.4k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  11.4k|            parse_digits_result;
 3645|       |
 3646|  11.4k|        auto nothsep_source_view =
 3647|  11.4k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  11.4k|        SCN_TRY(
  ------------------
  |  | 3940|  11.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 116, False: 11.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    116|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    116|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    116|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    116|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    116|    }                                                  \
  |  |  |  | 3939|  11.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  11.3k|            nothsep_source_it,
 3650|  11.3k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  11.3k|                                prefix_result.parsed_base));
 3652|       |
 3653|  11.3k|        return ranges::next(
 3654|  11.3k|            prefix_result.iterator,
 3655|  11.3k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  11.3k|                ranges::ssize(thsep_indices));
 3657|  11.4k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|  62.7k|    {
 3590|  62.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  62.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  62.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  62.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  62.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 62.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  62.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  62.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  62.7k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  62.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 8.22k, False: 54.5k]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|  8.22k|            else {
 3601|  8.22k|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 8.22k]
  ------------------
 3602|  8.22k|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|  8.22k|            }
 3608|  8.22k|        }
 3609|       |
 3610|  62.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 5.53k, False: 57.2k]
  ------------------
 3611|  5.53k|            value = T{0};
 3612|  5.53k|            return std::next(prefix_result.iterator);
 3613|  5.53k|        }
 3614|       |
 3615|  57.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  57.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 44.9k, False: 12.2k]
  |  |  ------------------
  ------------------
 3616|  44.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  44.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  44.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  44.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  44.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 222, False: 44.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    222|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    222|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    222|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    222|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    222|    }                                                  \
  |  |  |  | 3939|  44.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  44.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  44.7k|                    parse_integer_digits_without_thsep(
 3618|  44.7k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  44.7k|                        prefix_result.parsed_base));
 3620|       |
 3621|  44.7k|            auto buf = make_contiguous_buffer(
 3622|  44.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  44.7k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  44.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  44.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  44.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  44.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 5.14k, False: 39.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  5.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  5.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  5.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  5.14k|    }                                                  \
  |  |  |  | 3939|  44.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|  39.6k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|  39.6k|                                        prefix_result.parsed_base));
 3626|       |
 3627|  39.6k|            return ranges::next(
 3628|  39.6k|                prefix_result.iterator,
 3629|  39.6k|                ranges::distance(buf.view().begin(), result_it));
 3630|  44.7k|        }
 3631|       |
 3632|  12.2k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  12.2k|            localized_number_formatting_options<CharT>{loc};
 3637|  12.2k|#endif
 3638|       |
 3639|  12.2k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  12.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 808, False: 11.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    808|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    808|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    808|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    808|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    808|    }                                                  \
  |  |  |  | 3939|  12.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  11.4k|                parse_integer_digits_with_thsep(
 3641|  11.4k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  11.4k|                    prefix_result.parsed_base, locale_options));
 3643|  11.4k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  11.4k|            parse_digits_result;
 3645|       |
 3646|  11.4k|        auto nothsep_source_view =
 3647|  11.4k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  11.4k|        SCN_TRY(
  ------------------
  |  | 3940|  11.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 114, False: 11.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    114|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    114|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    114|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    114|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    114|    }                                                  \
  |  |  |  | 3939|  11.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  11.3k|            nothsep_source_it,
 3650|  11.3k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  11.3k|                                prefix_result.parsed_base));
 3652|       |
 3653|  11.3k|        return ranges::next(
 3654|  11.3k|            prefix_result.iterator,
 3655|  11.3k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  11.3k|                ranges::ssize(thsep_indices));
 3657|  11.4k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIhEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6225|  47.3k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|       |                          basic_contiguous_scan_context<char_type>>) {
 6230|       |            auto rd = make_reader<T, char_type>();
 6231|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6232|       |            return impl(rd, range, value);
 6233|       |        }
 6234|  47.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6235|  47.3k|            auto rd = make_reader<T, char_type>();
 6236|  47.3k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  47.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  47.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 47.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6237|       |
 6238|  47.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6238:17): [True: 47.3k, False: 0]
  |  Branch (6238:50): [True: 0, False: 0]
  ------------------
 6239|  47.3k|                specs.width != 0) {
  ------------------
  |  Branch (6239:17): [True: 0, False: 0]
  ------------------
 6240|  47.3k|                return impl(rd, range, value);
 6241|  47.3k|            }
 6242|       |
 6243|      0|            auto crange = get_as_contiguous(range);
 6244|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6245|      0|            return ranges::next(range.begin(),
 6246|      0|                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  47.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6160|  47.3k|    {
 6161|  47.3k|        const bool need_skipped_width =
 6162|  47.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 47.3k]
  |  Branch (6162:33): [True: 0, False: 47.3k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|  47.3k|        auto it = rng.begin();
 6166|  47.3k|        std::ptrdiff_t prefix_width = 0;
 6167|  47.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 47.3k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|  47.3k|        else {
 6175|  47.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  47.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  47.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  47.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  47.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.14k, False: 46.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.14k|    }                                                  \
  |  |  |  | 3939|  47.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  46.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|  46.1k|            std::tie(it, prefix_width) = prefix_result;
 6177|  46.1k|        }
 6178|  46.1k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|  46.1k|        std::ptrdiff_t value_width = 0;
 6182|  46.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 46.1k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|  46.1k|        else {
 6198|  46.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  46.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  46.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  46.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 7.13k, False: 39.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  7.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  7.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  7.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  7.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  7.13k|    }                                                  \
  |  | 3939|  46.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  46.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|  39.0k|                                             specs, value, loc));
 6200|       |
 6201|  39.0k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 39.0k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|  39.0k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|  39.0k|        std::ptrdiff_t postfix_width = 0;
 6210|  39.0k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 38.2k, False: 772]
  ------------------
 6211|  38.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  38.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  38.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  38.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  38.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 38.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  38.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  38.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|  38.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|  38.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|  38.2k|                                 value_width));
 6215|  38.2k|            std::tie(it, postfix_width) = postfix_result;
 6216|  38.2k|        }
 6217|       |
 6218|  39.0k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  39.0k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  39.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 39.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|  39.0k|            specs, prefix_width, value_width, postfix_width));
 6220|  39.0k|        return it;
 6221|  39.0k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3589|  46.1k|    {
 3590|  46.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  46.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  46.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  46.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  46.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 46.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  46.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  46.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  46.1k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  46.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 2.92k, False: 43.2k]
  ------------------
 3594|  2.92k|            if constexpr (!std::is_signed_v<T>) {
 3595|  2.92k|                return detail::unexpected_scan_error(
 3596|  2.92k|                    scan_error::invalid_scanned_value,
 3597|  2.92k|                    "Unexpected '-' sign when parsing an "
 3598|  2.92k|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|  2.92k|        }
 3609|       |
 3610|  46.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 4.80k, False: 41.3k]
  ------------------
 3611|  4.80k|            value = T{0};
 3612|  4.80k|            return std::next(prefix_result.iterator);
 3613|  4.80k|        }
 3614|       |
 3615|  41.3k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  41.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 30.2k, False: 11.1k]
  |  |  ------------------
  ------------------
 3616|  30.2k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  30.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  30.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  30.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  30.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.74k, False: 27.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.74k|    }                                                  \
  |  |  |  | 3939|  30.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  27.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  27.4k|                    parse_integer_digits_without_thsep(
 3618|  27.4k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  27.4k|                        prefix_result.parsed_base));
 3620|       |
 3621|  27.4k|            auto buf = make_contiguous_buffer(
 3622|  27.4k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  27.4k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  27.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  27.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  27.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  27.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 860, False: 26.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    860|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    860|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    860|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    860|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    860|    }                                                  \
  |  |  |  | 3939|  27.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  26.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|  26.5k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|  26.5k|                                        prefix_result.parsed_base));
 3626|       |
 3627|  26.5k|            return ranges::next(
 3628|  26.5k|                prefix_result.iterator,
 3629|  26.5k|                ranges::distance(buf.view().begin(), result_it));
 3630|  27.4k|        }
 3631|       |
 3632|  11.1k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  11.1k|            localized_number_formatting_options<CharT>{loc};
 3637|  11.1k|#endif
 3638|       |
 3639|  11.1k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  11.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 374, False: 10.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    374|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    374|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    374|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    374|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    374|    }                                                  \
  |  |  |  | 3939|  11.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  10.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  10.7k|                parse_integer_digits_with_thsep(
 3641|  10.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  10.7k|                    prefix_result.parsed_base, locale_options));
 3643|  10.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  10.7k|            parse_digits_result;
 3645|       |
 3646|  10.7k|        auto nothsep_source_view =
 3647|  10.7k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  10.7k|        SCN_TRY(
  ------------------
  |  | 3940|  10.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  10.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  10.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  10.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 232, False: 10.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    232|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    232|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    232|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    232|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    232|    }                                                  \
  |  |  |  | 3939|  10.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  10.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  10.5k|            nothsep_source_it,
 3650|  10.5k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  10.5k|                                prefix_result.parsed_base));
 3652|       |
 3653|  10.5k|        return ranges::next(
 3654|  10.5k|            prefix_result.iterator,
 3655|  10.5k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  10.5k|                ranges::ssize(thsep_indices));
 3657|  10.7k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|  46.2k|    {
 3590|  46.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  46.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  46.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  46.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  46.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 46.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  46.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  46.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  46.2k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  46.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 2.91k, False: 43.3k]
  ------------------
 3594|  2.91k|            if constexpr (!std::is_signed_v<T>) {
 3595|  2.91k|                return detail::unexpected_scan_error(
 3596|  2.91k|                    scan_error::invalid_scanned_value,
 3597|  2.91k|                    "Unexpected '-' sign when parsing an "
 3598|  2.91k|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|  2.91k|        }
 3609|       |
 3610|  46.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 4.80k, False: 41.4k]
  ------------------
 3611|  4.80k|            value = T{0};
 3612|  4.80k|            return std::next(prefix_result.iterator);
 3613|  4.80k|        }
 3614|       |
 3615|  41.4k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  41.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 30.2k, False: 11.1k]
  |  |  ------------------
  ------------------
 3616|  30.2k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  30.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  30.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  30.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  30.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 38, False: 30.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     38|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     38|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     38|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     38|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     38|    }                                                  \
  |  |  |  | 3939|  30.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  30.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  30.2k|                    parse_integer_digits_without_thsep(
 3618|  30.2k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  30.2k|                        prefix_result.parsed_base));
 3620|       |
 3621|  30.2k|            auto buf = make_contiguous_buffer(
 3622|  30.2k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  30.2k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  30.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  30.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  30.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  30.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.67k, False: 26.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.67k|    }                                                  \
  |  |  |  | 3939|  30.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  26.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|  26.5k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|  26.5k|                                        prefix_result.parsed_base));
 3626|       |
 3627|  26.5k|            return ranges::next(
 3628|  26.5k|                prefix_result.iterator,
 3629|  26.5k|                ranges::distance(buf.view().begin(), result_it));
 3630|  30.2k|        }
 3631|       |
 3632|  11.1k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  11.1k|            localized_number_formatting_options<CharT>{loc};
 3637|  11.1k|#endif
 3638|       |
 3639|  11.1k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  11.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 408, False: 10.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    408|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    408|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    408|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    408|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    408|    }                                                  \
  |  |  |  | 3939|  11.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  10.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  10.7k|                parse_integer_digits_with_thsep(
 3641|  10.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  10.7k|                    prefix_result.parsed_base, locale_options));
 3643|  10.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  10.7k|            parse_digits_result;
 3645|       |
 3646|  10.7k|        auto nothsep_source_view =
 3647|  10.7k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  10.7k|        SCN_TRY(
  ------------------
  |  | 3940|  10.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  10.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  10.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  10.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 228, False: 10.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    228|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    228|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    228|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    228|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    228|    }                                                  \
  |  |  |  | 3939|  10.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  10.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  10.5k|            nothsep_source_it,
 3650|  10.5k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  10.5k|                                prefix_result.parsed_base));
 3652|       |
 3653|  10.5k|        return ranges::next(
 3654|  10.5k|            prefix_result.iterator,
 3655|  10.5k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  10.5k|                ranges::ssize(thsep_indices));
 3657|  10.7k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIjEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6225|  51.5k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|       |                          basic_contiguous_scan_context<char_type>>) {
 6230|       |            auto rd = make_reader<T, char_type>();
 6231|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6232|       |            return impl(rd, range, value);
 6233|       |        }
 6234|  51.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 6235|  51.5k|            auto rd = make_reader<T, char_type>();
 6236|  51.5k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  51.5k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  51.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 51.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6237|       |
 6238|  51.5k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6238:17): [True: 51.5k, False: 0]
  |  Branch (6238:50): [True: 0, False: 0]
  ------------------
 6239|  51.5k|                specs.width != 0) {
  ------------------
  |  Branch (6239:17): [True: 0, False: 0]
  ------------------
 6240|  51.5k|                return impl(rd, range, value);
 6241|  51.5k|            }
 6242|       |
 6243|      0|            auto crange = get_as_contiguous(range);
 6244|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6245|      0|            return ranges::next(range.begin(),
 6246|      0|                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  51.5k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6160|  51.5k|    {
 6161|  51.5k|        const bool need_skipped_width =
 6162|  51.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 51.5k]
  |  Branch (6162:33): [True: 0, False: 51.5k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|  51.5k|        auto it = rng.begin();
 6166|  51.5k|        std::ptrdiff_t prefix_width = 0;
 6167|  51.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 51.5k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|  51.5k|        else {
 6175|  51.5k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  51.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  51.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  51.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  51.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.39k, False: 50.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.39k|    }                                                  \
  |  |  |  | 3939|  51.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|  50.1k|            std::tie(it, prefix_width) = prefix_result;
 6177|  50.1k|        }
 6178|  50.1k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|  50.1k|        std::ptrdiff_t value_width = 0;
 6182|  50.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 50.1k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|  50.1k|        else {
 6198|  50.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  50.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  50.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.88k, False: 43.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.88k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.88k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.88k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.88k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.88k|    }                                                  \
  |  | 3939|  50.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|  43.2k|                                             specs, value, loc));
 6200|       |
 6201|  43.2k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 43.2k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|  43.2k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|  43.2k|        std::ptrdiff_t postfix_width = 0;
 6210|  43.2k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 42.2k, False: 946]
  ------------------
 6211|  42.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  42.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  42.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  42.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  42.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 42.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  42.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  42.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|  42.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|  42.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|  42.2k|                                 value_width));
 6215|  42.2k|            std::tie(it, postfix_width) = postfix_result;
 6216|  42.2k|        }
 6217|       |
 6218|  43.2k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  43.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  43.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 43.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|  43.2k|            specs, prefix_width, value_width, postfix_width));
 6220|  43.2k|        return it;
 6221|  43.2k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3589|  50.1k|    {
 3590|  50.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  50.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  50.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  50.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 50.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  50.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  50.1k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  50.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 3.01k, False: 47.1k]
  ------------------
 3594|  3.01k|            if constexpr (!std::is_signed_v<T>) {
 3595|  3.01k|                return detail::unexpected_scan_error(
 3596|  3.01k|                    scan_error::invalid_scanned_value,
 3597|  3.01k|                    "Unexpected '-' sign when parsing an "
 3598|  3.01k|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|  3.01k|        }
 3609|       |
 3610|  50.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 4.98k, False: 45.1k]
  ------------------
 3611|  4.98k|            value = T{0};
 3612|  4.98k|            return std::next(prefix_result.iterator);
 3613|  4.98k|        }
 3614|       |
 3615|  45.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  45.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 33.0k, False: 12.0k]
  |  |  ------------------
  ------------------
 3616|  33.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  33.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  33.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  33.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  33.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.92k, False: 30.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.92k|    }                                                  \
  |  |  |  | 3939|  33.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  30.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  30.1k|                    parse_integer_digits_without_thsep(
 3618|  30.1k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  30.1k|                        prefix_result.parsed_base));
 3620|       |
 3621|  30.1k|            auto buf = make_contiguous_buffer(
 3622|  30.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  30.1k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  30.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  30.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  30.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  30.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 416, False: 29.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    416|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    416|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    416|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    416|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    416|    }                                                  \
  |  |  |  | 3939|  30.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  29.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|  29.7k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|  29.7k|                                        prefix_result.parsed_base));
 3626|       |
 3627|  29.7k|            return ranges::next(
 3628|  29.7k|                prefix_result.iterator,
 3629|  29.7k|                ranges::distance(buf.view().begin(), result_it));
 3630|  30.1k|        }
 3631|       |
 3632|  12.0k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  12.0k|            localized_number_formatting_options<CharT>{loc};
 3637|  12.0k|#endif
 3638|       |
 3639|  12.0k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  12.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 406, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    406|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    406|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    406|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    406|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    406|    }                                                  \
  |  |  |  | 3939|  12.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  11.6k|                parse_integer_digits_with_thsep(
 3641|  11.6k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  11.6k|                    prefix_result.parsed_base, locale_options));
 3643|  11.6k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  11.6k|            parse_digits_result;
 3645|       |
 3646|  11.6k|        auto nothsep_source_view =
 3647|  11.6k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  11.6k|        SCN_TRY(
  ------------------
  |  | 3940|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 124, False: 11.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    124|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    124|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    124|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    124|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    124|    }                                                  \
  |  |  |  | 3939|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  11.5k|            nothsep_source_it,
 3650|  11.5k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  11.5k|                                prefix_result.parsed_base));
 3652|       |
 3653|  11.5k|        return ranges::next(
 3654|  11.5k|            prefix_result.iterator,
 3655|  11.5k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  11.5k|                ranges::ssize(thsep_indices));
 3657|  11.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|  50.1k|    {
 3590|  50.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  50.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  50.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  50.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 50.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  50.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  50.1k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  50.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 3.00k, False: 47.1k]
  ------------------
 3594|  3.00k|            if constexpr (!std::is_signed_v<T>) {
 3595|  3.00k|                return detail::unexpected_scan_error(
 3596|  3.00k|                    scan_error::invalid_scanned_value,
 3597|  3.00k|                    "Unexpected '-' sign when parsing an "
 3598|  3.00k|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|  3.00k|        }
 3609|       |
 3610|  50.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 4.98k, False: 45.1k]
  ------------------
 3611|  4.98k|            value = T{0};
 3612|  4.98k|            return std::next(prefix_result.iterator);
 3613|  4.98k|        }
 3614|       |
 3615|  45.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  45.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 33.1k, False: 12.0k]
  |  |  ------------------
  ------------------
 3616|  33.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  33.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  33.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  33.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  33.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 40, False: 33.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     40|    }                                                  \
  |  |  |  | 3939|  33.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  33.0k|                    parse_integer_digits_without_thsep(
 3618|  33.0k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  33.0k|                        prefix_result.parsed_base));
 3620|       |
 3621|  33.0k|            auto buf = make_contiguous_buffer(
 3622|  33.0k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  33.0k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  33.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  33.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  33.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  33.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.42k, False: 29.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.42k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.42k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.42k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.42k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.42k|    }                                                  \
  |  |  |  | 3939|  33.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  29.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|  29.6k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|  29.6k|                                        prefix_result.parsed_base));
 3626|       |
 3627|  29.6k|            return ranges::next(
 3628|  29.6k|                prefix_result.iterator,
 3629|  29.6k|                ranges::distance(buf.view().begin(), result_it));
 3630|  33.0k|        }
 3631|       |
 3632|  12.0k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  12.0k|            localized_number_formatting_options<CharT>{loc};
 3637|  12.0k|#endif
 3638|       |
 3639|  12.0k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  12.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 444, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    444|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    444|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    444|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    444|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    444|    }                                                  \
  |  |  |  | 3939|  12.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  11.6k|                parse_integer_digits_with_thsep(
 3641|  11.6k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  11.6k|                    prefix_result.parsed_base, locale_options));
 3643|  11.6k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  11.6k|            parse_digits_result;
 3645|       |
 3646|  11.6k|        auto nothsep_source_view =
 3647|  11.6k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  11.6k|        SCN_TRY(
  ------------------
  |  | 3940|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 122, False: 11.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    122|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    122|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    122|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    122|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    122|    }                                                  \
  |  |  |  | 3939|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  11.5k|            nothsep_source_it,
 3650|  11.5k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  11.5k|                                prefix_result.parsed_base));
 3652|       |
 3653|  11.5k|        return ranges::next(
 3654|  11.5k|            prefix_result.iterator,
 3655|  11.5k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  11.5k|                ranges::ssize(thsep_indices));
 3657|  11.6k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIyEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6225|  52.0k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|       |                          basic_contiguous_scan_context<char_type>>) {
 6230|       |            auto rd = make_reader<T, char_type>();
 6231|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6232|       |            return impl(rd, range, value);
 6233|       |        }
 6234|  52.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 6235|  52.0k|            auto rd = make_reader<T, char_type>();
 6236|  52.0k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  52.0k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  52.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 52.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6237|       |
 6238|  52.0k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6238:17): [True: 52.0k, False: 0]
  |  Branch (6238:50): [True: 0, False: 0]
  ------------------
 6239|  52.0k|                specs.width != 0) {
  ------------------
  |  Branch (6239:17): [True: 0, False: 0]
  ------------------
 6240|  52.0k|                return impl(rd, range, value);
 6241|  52.0k|            }
 6242|       |
 6243|      0|            auto crange = get_as_contiguous(range);
 6244|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6245|      0|            return ranges::next(range.begin(),
 6246|      0|                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  52.0k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6160|  52.0k|    {
 6161|  52.0k|        const bool need_skipped_width =
 6162|  52.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 52.0k]
  |  Branch (6162:33): [True: 0, False: 52.0k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|  52.0k|        auto it = rng.begin();
 6166|  52.0k|        std::ptrdiff_t prefix_width = 0;
 6167|  52.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 52.0k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|  52.0k|        else {
 6175|  52.0k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  52.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  52.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  52.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  52.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.50k, False: 50.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.50k|    }                                                  \
  |  |  |  | 3939|  52.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|  50.5k|            std::tie(it, prefix_width) = prefix_result;
 6177|  50.5k|        }
 6178|  50.5k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|  50.5k|        std::ptrdiff_t value_width = 0;
 6182|  50.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 50.5k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|  50.5k|        else {
 6198|  50.5k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  50.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  50.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  50.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.77k, False: 43.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.77k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.77k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.77k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.77k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.77k|    }                                                  \
  |  | 3939|  50.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  50.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|  43.8k|                                             specs, value, loc));
 6200|       |
 6201|  43.8k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 43.8k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|  43.8k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|  43.8k|        std::ptrdiff_t postfix_width = 0;
 6210|  43.8k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 42.7k, False: 1.05k]
  ------------------
 6211|  42.7k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  42.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  42.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  42.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  42.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 42.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  42.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  42.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|  42.7k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|  42.7k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|  42.7k|                                 value_width));
 6215|  42.7k|            std::tie(it, postfix_width) = postfix_result;
 6216|  42.7k|        }
 6217|       |
 6218|  43.8k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  43.8k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  43.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 43.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|  43.8k|            specs, prefix_width, value_width, postfix_width));
 6220|  43.8k|        return it;
 6221|  43.8k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3589|  50.5k|    {
 3590|  50.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  50.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  50.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  50.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  50.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 50.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  50.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  50.5k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  50.5k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 3.10k, False: 47.4k]
  ------------------
 3594|  3.10k|            if constexpr (!std::is_signed_v<T>) {
 3595|  3.10k|                return detail::unexpected_scan_error(
 3596|  3.10k|                    scan_error::invalid_scanned_value,
 3597|  3.10k|                    "Unexpected '-' sign when parsing an "
 3598|  3.10k|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|  3.10k|        }
 3609|       |
 3610|  50.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 4.99k, False: 45.5k]
  ------------------
 3611|  4.99k|            value = T{0};
 3612|  4.99k|            return std::next(prefix_result.iterator);
 3613|  4.99k|        }
 3614|       |
 3615|  45.5k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  45.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 33.3k, False: 12.2k]
  |  |  ------------------
  ------------------
 3616|  33.3k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  33.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  33.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  33.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  33.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.97k, False: 30.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.97k|    }                                                  \
  |  |  |  | 3939|  33.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  30.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  30.3k|                    parse_integer_digits_without_thsep(
 3618|  30.3k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  30.3k|                        prefix_result.parsed_base));
 3620|       |
 3621|  30.3k|            auto buf = make_contiguous_buffer(
 3622|  30.3k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  30.3k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  30.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  30.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  30.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  30.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 214, False: 30.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    214|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    214|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    214|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    214|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    214|    }                                                  \
  |  |  |  | 3939|  30.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  30.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|  30.1k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|  30.1k|                                        prefix_result.parsed_base));
 3626|       |
 3627|  30.1k|            return ranges::next(
 3628|  30.1k|                prefix_result.iterator,
 3629|  30.1k|                ranges::distance(buf.view().begin(), result_it));
 3630|  30.3k|        }
 3631|       |
 3632|  12.2k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  12.2k|            localized_number_formatting_options<CharT>{loc};
 3637|  12.2k|#endif
 3638|       |
 3639|  12.2k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  12.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 426, False: 11.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    426|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    426|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    426|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    426|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    426|    }                                                  \
  |  |  |  | 3939|  12.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  11.8k|                parse_integer_digits_with_thsep(
 3641|  11.8k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  11.8k|                    prefix_result.parsed_base, locale_options));
 3643|  11.8k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  11.8k|            parse_digits_result;
 3645|       |
 3646|  11.8k|        auto nothsep_source_view =
 3647|  11.8k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  11.8k|        SCN_TRY(
  ------------------
  |  | 3940|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 60, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     60|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     60|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     60|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     60|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     60|    }                                                  \
  |  |  |  | 3939|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  11.7k|            nothsep_source_it,
 3650|  11.7k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  11.7k|                                prefix_result.parsed_base));
 3652|       |
 3653|  11.7k|        return ranges::next(
 3654|  11.7k|            prefix_result.iterator,
 3655|  11.7k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  11.7k|                ranges::ssize(thsep_indices));
 3657|  11.8k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|  50.6k|    {
 3590|  50.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  50.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  50.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  50.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  50.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 50.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  50.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  50.6k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  50.6k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 3.09k, False: 47.5k]
  ------------------
 3594|  3.09k|            if constexpr (!std::is_signed_v<T>) {
 3595|  3.09k|                return detail::unexpected_scan_error(
 3596|  3.09k|                    scan_error::invalid_scanned_value,
 3597|  3.09k|                    "Unexpected '-' sign when parsing an "
 3598|  3.09k|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|  3.09k|        }
 3609|       |
 3610|  50.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 4.99k, False: 45.6k]
  ------------------
 3611|  4.99k|            value = T{0};
 3612|  4.99k|            return std::next(prefix_result.iterator);
 3613|  4.99k|        }
 3614|       |
 3615|  45.6k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  45.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 33.3k, False: 12.2k]
  |  |  ------------------
  ------------------
 3616|  33.3k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  33.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  33.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  33.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  33.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 40, False: 33.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     40|    }                                                  \
  |  |  |  | 3939|  33.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  33.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  33.3k|                    parse_integer_digits_without_thsep(
 3618|  33.3k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  33.3k|                        prefix_result.parsed_base));
 3620|       |
 3621|  33.3k|            auto buf = make_contiguous_buffer(
 3622|  33.3k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  33.3k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  33.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  33.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  33.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  33.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.27k, False: 30.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.27k|    }                                                  \
  |  |  |  | 3939|  33.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  30.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|  30.0k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|  30.0k|                                        prefix_result.parsed_base));
 3626|       |
 3627|  30.0k|            return ranges::next(
 3628|  30.0k|                prefix_result.iterator,
 3629|  30.0k|                ranges::distance(buf.view().begin(), result_it));
 3630|  33.3k|        }
 3631|       |
 3632|  12.2k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  12.2k|            localized_number_formatting_options<CharT>{loc};
 3637|  12.2k|#endif
 3638|       |
 3639|  12.2k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  12.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 466, False: 11.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    466|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    466|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    466|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    466|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    466|    }                                                  \
  |  |  |  | 3939|  12.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  11.8k|                parse_integer_digits_with_thsep(
 3641|  11.8k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  11.8k|                    prefix_result.parsed_base, locale_options));
 3643|  11.8k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  11.8k|            parse_digits_result;
 3645|       |
 3646|  11.8k|        auto nothsep_source_view =
 3647|  11.8k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  11.8k|        SCN_TRY(
  ------------------
  |  | 3940|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 58, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     58|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     58|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     58|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     58|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     58|    }                                                  \
  |  |  |  | 3939|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  11.7k|            nothsep_source_it,
 3650|  11.7k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  11.7k|                                prefix_result.parsed_base));
 3652|       |
 3653|  11.7k|        return ranges::next(
 3654|  11.7k|            prefix_result.iterator,
 3655|  11.7k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  11.7k|                ranges::ssize(thsep_indices));
 3657|  11.8k|    }
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1039|   426k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|   426k|                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|   426k|        else {
 1055|   426k|            return r.begin().contiguous_segment();
 1056|   426k|        }
 1057|       |    }
 1058|       |    else {
 1059|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1060|       |    }
 1061|   426k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|   402k|{
 2160|   402k|    auto it = range.begin();
 2161|   791k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 780k, False: 10.1k]
  ------------------
 2162|   780k|        const auto val =
 2163|   780k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   780k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   780k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 779k, False: 1.70k]
  |  |  ------------------
  ------------------
 2165|   779k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   779k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   779k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 392k, False: 386k]
  ------------------
 2168|   392k|                return it;
 2169|   392k|            }
 2170|   779k|        }
 2171|   388k|        it = val.iterator;
 2172|   388k|    }
 2173|       |
 2174|  10.1k|    return it;
 2175|   402k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|   780k|{
 1998|   780k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   780k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   780k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   780k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   780k|    auto it = range.begin();
 2002|   780k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   780k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   780k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.70k, False: 779k]
  |  |  ------------------
  ------------------
 2005|  1.70k|        ++it;
 2006|  1.70k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  1.70k|        return {it, {}};
 2008|  1.70k|    }
 2009|       |
 2010|   779k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 774k, False: 4.89k]
  ------------------
 2011|   774k|        ++it;
 2012|   774k|        return {it, string_type(1, *range.begin())};
 2013|   774k|    }
 2014|       |
 2015|  4.89k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  4.89k|    return {it, string_type{range.begin(), it}};
 2017|   779k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1264|  1.70k|{
 1265|  1.70k|    auto it = input.begin();
 1266|  2.86k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 2.03k, False: 825]
  ------------------
 1267|  2.03k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 882, False: 1.15k]
  ------------------
 1268|    882|            break;
 1269|    882|        }
 1270|  2.03k|    }
 1271|  1.70k|    return it;
 1272|  1.70k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  4.89k|    {
  283|  4.89k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  4.89k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  4.89k|    {
  252|  4.89k|        constexpr iter_difference_t<I> zero{0};
  253|  4.89k|        iter_difference_t<I> counter{0};
  254|       |
  255|  16.4k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 12.6k, False: 3.77k]
  |  Branch (255:30): [True: 11.5k, False: 1.11k]
  ------------------
  256|  11.5k|            ++i;
  257|  11.5k|            ++counter;
  258|  11.5k|        }
  259|       |
  260|  4.89k|        return counter;
  261|  4.89k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1988|   780k|    {
 1989|   780k|        return !codepoint.empty();
 1990|   780k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|   402k|{
 2181|   402k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   402k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|   426k|{
 3066|   426k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 426k, False: 0]
  ------------------
 3067|   426k|        auto it = read_while_classic_space(range);
 3068|   426k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   426k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   426k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.1k, False: 416k]
  |  |  ------------------
  ------------------
 3070|  10.1k|            return unexpected(e);
 3071|  10.1k|        }
 3072|       |
 3073|   416k|        return it;
 3074|   426k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   426k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|   426k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   426k|    else {
 2225|   426k|        auto it = range.begin();
 2226|       |
 2227|   426k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|   426k|            auto seg = get_contiguous_beginning(range);
 2229|   426k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|   426k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2230:17): [True: 23.3k, False: 402k]
  ------------------
 2231|  23.3k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|  23.3k|            }
 2233|   402k|            ranges::advance(it, seg.size());
 2234|   402k|        }
 2235|       |
 2236|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   426k|            return detail::is_cp_space(cp);
 2238|   426k|        });
 2239|   426k|    }
 2240|   426k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   402k|        : m_fptr([](storage fn,
  743|   402k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   402k|              cvref<T> obj = *get<T>(fn);
  745|   402k|              if constexpr (std::is_void_v<R>) {
  746|   402k|                  obj(static_cast<decltype(args)>(args)...);
  747|   402k|              }
  748|   402k|              else {
  749|   402k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   402k|              }
  751|   402k|          }),
  752|   402k|          m_storage(std::addressof(f))
  753|   402k|    {
  754|   402k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   779k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   779k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   779k|              else {
  749|   779k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   779k|              }
  751|   779k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   779k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   779k|        else if constexpr (std::is_object_v<T>) {
  688|   779k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   779k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|   779k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   779k|            return detail::is_cp_space(cp);
 2238|   779k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   402k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   402k|        {
  662|   402k|        }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   135k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   135k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   135k|        auto beg = r.begin();
  991|   135k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 135k, False: 0]
  ------------------
  992|   135k|            return false;
  993|   135k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   135k|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1955|   100k|{
 1956|   100k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|   100k|    else {
 1967|   100k|        auto it = range.begin();
 1968|   100k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 80.8k, False: 19.5k]
  ------------------
 1969|  80.8k|            return ranges::next(it, count);
 1970|  80.8k|        }
 1971|       |
 1972|  39.6k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 38.9k, False: 708]
  ------------------
 1973|  38.9k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 18.8k, False: 20.0k]
  ------------------
 1974|  18.8k|                return unexpected(eof_error::eof);
 1975|  18.8k|            }
 1976|  38.9k|        }
 1977|       |
 1978|    708|        return it;
 1979|  19.5k|    }
 1980|   100k|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1095|   100k|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|   100k|                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|   100k|        else {
 1107|   100k|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1107:17): [True: 100k, False: 0]
  ------------------
 1108|   100k|                return static_cast<size_t>(
 1109|   100k|                    r.begin().parent()->chars_available() -
 1110|   100k|                    r.begin().position());
 1111|   100k|            }
 1112|      0|            return r.begin().contiguous_segment().size();
 1113|   100k|        }
 1114|       |    }
 1115|       |    else {
 1116|       |        return 0;
 1117|       |    }
 1118|   100k|}
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  762|   234k|    {
  763|   234k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|   234k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   234k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   107k|        : m_fptr([](storage fn,
  743|   107k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   107k|              cvref<T> obj = *get<T>(fn);
  745|   107k|              if constexpr (std::is_void_v<R>) {
  746|   107k|                  obj(static_cast<decltype(args)>(args)...);
  747|   107k|              }
  748|   107k|              else {
  749|   107k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   107k|              }
  751|   107k|          }),
  752|   107k|          m_storage(std::addressof(f))
  753|   107k|    {
  754|   107k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|   117k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   117k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   117k|              else {
  749|   117k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   117k|              }
  751|   117k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|   117k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   117k|        else if constexpr (std::is_object_v<T>) {
  688|   117k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   117k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   107k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   107k|        {
  662|   107k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6073|   110k|    {
 6074|   110k|        const bool need_skipped_width =
 6075|   110k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6075:13): [True: 0, False: 110k]
  |  Branch (6075:33): [True: 0, False: 110k]
  ------------------
 6076|   110k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6077|       |
 6078|       |        // Read prefix
 6079|   110k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6079:13): [True: 0, False: 110k]
  ------------------
 6080|   110k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6080:13): [True: 0, False: 110k]
  ------------------
 6081|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6082|      0|                             need_skipped_width);
 6083|      0|        }
 6084|   110k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6084:13): [True: 110k, False: 0]
  |  Branch (6084:56): [True: 110k, False: 0]
  ------------------
 6085|       |            // Default alignment:
 6086|       |            // Skip preceding whitespace, if required by the reader
 6087|   110k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6087:17): [True: 0, False: 110k]
  ------------------
 6088|      0|                auto max_width_view = take_width(rng, specs.precision);
 6089|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6090|      0|                                  .transform_error(make_eof_scan_error));
 6091|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6092|      0|            }
 6093|   218k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   110k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   110k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   110k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.43k, False: 108k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.43k|    }                                                  \
  |  |  |  | 3939|   110k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6094|   218k|                            make_eof_scan_error));
 6095|       |
 6096|   218k|            if (need_skipped_width) {
  ------------------
  |  Branch (6096:17): [True: 0, False: 108k]
  ------------------
 6097|      0|                return result_type{
 6098|      0|                    it,
 6099|      0|                    calculate_text_width(make_contiguous_buffer(
 6100|      0|                                             ranges::subrange{rng.begin(), it})
 6101|      0|                                             .view())};
 6102|      0|            }
 6103|   108k|            return result_type{it, 0};
 6104|   218k|        }
 6105|       |
 6106|      0|        return result_type{rng.begin(), 0};
 6107|   110k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|   107k|{
 2075|   107k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|   107k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|   107k|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|   107k|    else {
 2060|   107k|        auto first = range.begin();
 2061|   117k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 117k, False: 630]
  ------------------
 2062|   117k|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 107k, False: 9.78k]
  ------------------
 2063|   107k|                return first;
 2064|   107k|            }
 2065|   117k|        }
 2066|    630|        return first;
 2067|   107k|    }
 2068|   107k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  33.9M|    {
  108|  33.9M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  33.9M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  33.9M|    {
   94|  33.9M|        iter_difference_t<I> counter{0};
   95|  69.5G|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 69.4G, False: 33.9M]
  ------------------
   96|  69.4G|            ++i;
   97|  69.4G|            ++counter;
   98|  69.4G|        }
   99|  33.9M|        return counter;
  100|  33.9M|    }
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1878|  49.7k|    {
 1879|  49.7k|        auto stdloc = loc.get<std::locale>();
 1880|  49.7k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|  49.7k|        grouping = numpunct.grouping();
 1882|  49.7k|        thousands_sep =
 1883|  49.7k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 49.7k]
  ------------------
 1884|  49.7k|        decimal_point = numpunct.decimal_point();
 1885|  49.7k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1815|  49.7k|{
 1816|  49.7k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 49.7k, False: 0]
  ------------------
 1817|  49.7k|        return std::use_facet<Facet>(stdloc);
 1818|  49.7k|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|  49.7k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1944|   167k|{
 1945|   167k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   167k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 72, False: 167k]
  |  |  ------------------
  ------------------
 1946|     72|        return unexpected(e);
 1947|     72|    }
 1948|       |
 1949|   167k|    return ranges::next(range.begin());
 1950|   167k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|   328k|{
  951|   328k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|   328k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.84k, False: 326k]
  |  |  ------------------
  ------------------
  952|  1.84k|        return eof_error::eof;
  953|  1.84k|    }
  954|   326k|    return eof_error::good;
  955|   328k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|   464k|{
  945|   464k|    return is_range_eof(r.begin(), r.end());
  946|   464k|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|   464k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   464k|    {
  938|   464k|        return begin == end;
  939|   464k|    }
  940|   464k|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   167k|    {
  296|   167k|        ++x;
  297|   167k|        return x;
  298|   167k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3589|  18.1k|    {
 3590|  18.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  18.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  18.1k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  18.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 228, False: 17.9k]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|    228|            else {
 3601|    228|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 228]
  ------------------
 3602|    228|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|    228|            }
 3608|    228|        }
 3609|       |
 3610|  18.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 40, False: 18.0k]
  ------------------
 3611|     40|            value = T{0};
 3612|     40|            return std::next(prefix_result.iterator);
 3613|     40|        }
 3614|       |
 3615|  18.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  18.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 13.9k, False: 4.17k]
  |  |  ------------------
  ------------------
 3616|  13.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  13.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.5k, False: 362]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.5k|    }                                                  \
  |  |  |  | 3939|  13.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    362|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    362|                    parse_integer_digits_without_thsep(
 3618|    362|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    362|                        prefix_result.parsed_base));
 3620|       |
 3621|    362|            auto buf = make_contiguous_buffer(
 3622|    362|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    362|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    362|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    362|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    362|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    362|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 44, False: 318]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     44|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     44|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     44|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     44|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     44|    }                                                  \
  |  |  |  | 3939|    362|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    318|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|    318|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|    318|                                        prefix_result.parsed_base));
 3626|       |
 3627|    318|            return ranges::next(
 3628|    318|                prefix_result.iterator,
 3629|    318|                ranges::distance(buf.view().begin(), result_it));
 3630|    362|        }
 3631|       |
 3632|  4.17k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  4.17k|            localized_number_formatting_options<CharT>{loc};
 3637|  4.17k|#endif
 3638|       |
 3639|  4.17k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.68k, False: 1.48k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.68k|    }                                                  \
  |  |  |  | 3939|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  1.48k|                parse_integer_digits_with_thsep(
 3641|  1.48k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  1.48k|                    prefix_result.parsed_base, locale_options));
 3643|  1.48k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  1.48k|            parse_digits_result;
 3645|       |
 3646|  1.48k|        auto nothsep_source_view =
 3647|  1.48k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  1.48k|        SCN_TRY(
  ------------------
  |  | 3940|  1.48k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.48k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.48k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 1.47k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|  1.48k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  1.47k|            nothsep_source_it,
 3650|  1.47k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  1.47k|                                prefix_result.parsed_base));
 3652|       |
 3653|  1.47k|        return ranges::next(
 3654|  1.47k|            prefix_result.iterator,
 3655|  1.47k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  1.47k|                ranges::ssize(thsep_indices));
 3657|  1.48k|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESH_i:
 3376|   133k|{
 3377|   133k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|   133k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   133k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   133k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 133k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   133k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3378|   133k|    auto [base_prefix_begin_it, sign] = sign_result;
 3379|       |
 3380|   133k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3381|   133k|        parse_integer_base_prefix(
 3382|   133k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3383|       |
 3384|   133k|    if (parsed_zero) {
  ------------------
  |  Branch (3384:9): [True: 332, False: 133k]
  ------------------
 3385|    332|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3385:13): [True: 24, False: 308]
  ------------------
 3386|    332|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3386:13): [True: 212, False: 96]
  ------------------
 3387|    236|            digits_begin_it = base_prefix_begin_it;
 3388|    236|        }
 3389|     96|        else {
 3390|     96|            parsed_zero = false;
 3391|     96|        }
 3392|    332|    }
 3393|   133k|    else {
 3394|   133k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3394:13): [True: 282, False: 133k]
  ------------------
 3395|   133k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3395:13): [True: 129k, False: 3.57k]
  ------------------
 3396|   129k|            digits_begin_it = base_prefix_begin_it;
 3397|   129k|        }
 3398|   133k|    }
 3399|       |
 3400|   133k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3400:9): [True: 123k, False: 10.1k]
  ------------------
 3401|   123k|        sign = sign_type::plus_sign;
 3402|   123k|    }
 3403|   133k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3404|   133k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3405|   133k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3257|   133k|{
 3258|   133k|    auto r = read_one_of_code_unit(range, "+-");
 3259|   133k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 123k, False: 10.1k]
  ------------------
 3260|   123k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 123k, False: 0]
  ------------------
 3261|   123k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|   123k|        }
 3263|      0|        return unexpected(eof_error::eof);
 3264|   123k|    }
 3265|       |
 3266|  10.1k|    auto& it = *r;
 3267|  10.1k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 1.69k, False: 8.43k]
  ------------------
 3268|  1.69k|        return std::pair{it, sign_type::minus_sign};
 3269|  1.69k|    }
 3270|  8.43k|    return std::pair{it, sign_type::plus_sign};
 3271|  10.1k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2371|   133k|{
 2372|   133k|    auto it = read_code_unit(range);
 2373|   133k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 133k]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|   259k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 259k, False: 123k]
  ------------------
 2378|   259k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 10.1k, False: 249k]
  ------------------
 2379|  10.1k|            return *it;
 2380|  10.1k|        }
 2381|   259k|    }
 2382|       |
 2383|   123k|    return unexpected(parse_error::error);
 2384|   133k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_i:
 3343|   133k|{
 3344|   133k|    switch (base) {
 3345|  16.6k|        case 2:
  ------------------
  |  Branch (3345:9): [True: 16.6k, False: 117k]
  ------------------
 3346|       |            // allow 0b/0B
 3347|  16.6k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3348|  16.6k|                    false};
 3349|       |
 3350|  16.6k|        case 8: {
  ------------------
  |  Branch (3350:9): [True: 16.6k, False: 117k]
  ------------------
 3351|       |            // allow 0o/0O/0
 3352|  16.6k|            bool zero_parsed = false;
 3353|  16.6k|            auto it = apply_opt(
 3354|  16.6k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3355|  16.6k|            return {it, 8, zero_parsed};
 3356|      0|        }
 3357|       |
 3358|  16.7k|        case 16:
  ------------------
  |  Branch (3358:9): [True: 16.7k, False: 117k]
  ------------------
 3359|       |            // allow 0x/0X
 3360|  16.7k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3361|  16.7k|                    false};
 3362|       |
 3363|  16.8k|        case 0:
  ------------------
  |  Branch (3363:9): [True: 16.8k, False: 117k]
  ------------------
 3364|       |            // detect base
 3365|  16.8k|            return parse_integer_base_prefix_for_detection(range);
 3366|       |
 3367|  67.0k|        default:
  ------------------
  |  Branch (3367:9): [True: 67.0k, False: 66.8k]
  ------------------
 3368|       |            // no base prefix allowed
 3369|  67.0k|            return {range.begin(), base, false};
 3370|   133k|    }
 3371|   133k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEE4typeEOSI_SK_:
 2390|  50.0k|{
 2391|  50.0k|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 49.8k, False: 156]
  ------------------
 2392|  49.8k|        return range.begin();
 2393|  49.8k|    }
 2394|    156|    return *result;
 2395|  50.0k|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3294|  33.4k|{
 3295|  33.4k|    return read_matching_string_classic_nocase(range, "0b");
 3296|  33.4k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2330|   100k|{
 2331|   100k|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|   100k|    else {
 2344|   100k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|   100k|            if (ch < 'A' || ch > 'Z') {
 2346|   100k|                return ch;
 2347|   100k|            }
 2348|   100k|            return static_cast<char_type>(ch +
 2349|   100k|                                          static_cast<char_type>('a' - 'A'));
 2350|   100k|        };
 2351|       |
 2352|   100k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 18.8k, False: 81.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  18.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  18.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  18.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  18.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  18.8k|    }                                                  \
  |  |  |  | 3939|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  81.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|  81.5k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|  81.5k|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|  81.5k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|  81.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 81.5k, False: 0]
  |  |  ------------------
  ------------------
 2357|  81.5k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|  81.5k|                    return ascii_tolower(a) ==
 2359|  81.5k|                           static_cast<detail::char_t<Range>>(b);
 2360|  81.5k|                }))) {
 2361|  81.5k|            return unexpected(parse_error::error);
 2362|  81.5k|        }
 2363|       |
 2364|      0|        return it;
 2365|  81.5k|    }
 2366|   100k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2344|  82.5k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  82.5k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 55.0k, False: 27.5k]
  |  Branch (2345:29): [True: 27.2k, False: 288]
  ------------------
 2346|  82.2k|                return ch;
 2347|  82.2k|            }
 2348|    288|            return static_cast<char_type>(ch +
 2349|    288|                                          static_cast<char_type>('a' - 'A'));
 2350|  82.5k|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 3308|  33.4k|{
 3309|  33.4k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3309:14): [True: 0, False: 33.4k]
  ------------------
 3310|      0|        return *r;
 3311|      0|    }
 3312|       |
 3313|  33.4k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3313:14): [True: 332, False: 33.1k]
  ------------------
 3314|    332|        zero_parsed = true;
 3315|    332|        return *r;
 3316|    332|    }
 3317|       |
 3318|  33.1k|    return unexpected(parse_error::error);
 3319|  33.4k|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2245|  33.4k|{
 2246|  33.4k|    auto it = read_code_unit(range);
 2247|  33.4k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  33.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 72, False: 33.3k]
  |  |  ------------------
  ------------------
 2248|     72|        return unexpected(make_eof_parse_error(it.error()));
 2249|     72|    }
 2250|       |
 2251|  33.3k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|  33.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 33.0k, False: 332]
  |  |  ------------------
  ------------------
 2252|  33.3k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|  33.0k|        return unexpected(parse_error::error);
 2254|  33.0k|    }
 2255|       |
 2256|    332|    return *it;
 2257|  33.3k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3301|  33.6k|{
 3302|  33.6k|    return read_matching_string_classic_nocase(range, "0x");
 3303|  33.6k|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_:
 3324|  16.8k|{
 3325|  16.8k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3325:14): [True: 0, False: 16.8k]
  ------------------
 3326|      0|        return {*r, 16, false};
 3327|      0|    }
 3328|  16.8k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3328:14): [True: 0, False: 16.8k]
  ------------------
 3329|      0|        return {*r, 2, false};
 3330|      0|    }
 3331|  16.8k|    {
 3332|  16.8k|        bool zero_parsed{false};
 3333|  16.8k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3333:18): [True: 176, False: 16.6k]
  ------------------
 3334|    176|            return {*r, 8, zero_parsed};
 3335|    176|        }
 3336|  16.8k|    }
 3337|  16.6k|    return {range.begin(), 10, false};
 3338|  16.8k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_i:
 3410|   107k|{
 3411|   107k|    using char_type = detail::char_t<Range>;
 3412|       |
 3413|       |    if constexpr (ranges::contiguous_range<Range>) {
 3414|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3415|       |            return detail::unexpected_scan_error(
 3416|       |                scan_error::invalid_scanned_value,
 3417|       |                "Failed to parse integer: No digits found");
 3418|       |        }
 3419|       |        return range.end();
 3420|       |    }
 3421|   107k|    else {
 3422|   107k|        return read_while1_code_unit(range,
 3423|   107k|                                     [&](char_type ch) noexcept {
 3424|   107k|                                         return char_to_int(ch) < base;
 3425|   107k|                                     })
 3426|   107k|            .transform_error(map_parse_error_to_scan_error(
 3427|   107k|                scan_error::invalid_scanned_value,
 3428|   107k|                "Failed to parse integer: No digits found"));
 3429|   107k|    }
 3430|   107k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 2094|   107k|{
 2095|   107k|    auto it = read_while_code_unit(range, pred);
 2096|   107k|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 105k, False: 2.79k]
  ------------------
 2097|   105k|        return unexpected(parse_error::error);
 2098|   105k|    }
 2099|  2.79k|    return it;
 2100|   107k|}
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_:
  742|   107k|        : m_fptr([](storage fn,
  743|   107k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   107k|              cvref<T> obj = *get<T>(fn);
  745|   107k|              if constexpr (std::is_void_v<R>) {
  746|   107k|                  obj(static_cast<decltype(args)>(args)...);
  747|   107k|              }
  748|   107k|              else {
  749|   107k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   107k|              }
  751|   107k|          }),
  752|   107k|          m_storage(std::addressof(f))
  753|   107k|    {
  754|   107k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEwE_clES11_w:
  743|   117k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   117k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   117k|              else {
  749|   117k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   117k|              }
  751|   117k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_iEUlwE_EEDaNS3_7storageE:
  683|   117k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   117k|        else if constexpr (std::is_object_v<T>) {
  688|   117k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   117k|    }
_ZZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_iENKUlwE_clEw:
 3423|   117k|                                     [&](char_type ch) noexcept {
 3424|   117k|                                         return char_to_int(ch) < base;
 3425|   117k|                                     })
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_TnPNSI_9enable_ifIXsr3stdE11is_object_vISK_EEvE4typeELPv0EEEPSK_:
  660|   107k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   107k|        {
  662|   107k|        }
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENSE_12basic_stringIT0_NSE_11char_traitsISN_EENSE_9allocatorISN_EEEENSM_IcNSO_IcEENSQ_IcEEEEEEEEESH_iRKNS1_35localized_number_formatting_optionsISN_EE:
 3440|  24.8k|{
 3441|  24.8k|    std::basic_string<CharT> output;
 3442|  24.8k|    std::string thsep_indices;
 3443|  24.8k|    auto it = range.begin();
 3444|  24.8k|    bool digit_matched = false;
 3445|  33.9M|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3445:12): [True: 33.9M, False: 324]
  ------------------
 3446|  33.9M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3446:13): [True: 33.9M, False: 43.1k]
  ------------------
 3447|  33.9M|            thsep_indices.push_back(
 3448|  33.9M|                static_cast<char>(ranges::distance(range.begin(), it)));
 3449|  33.9M|        }
 3450|  43.1k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3450:18): [True: 24.5k, False: 18.6k]
  ------------------
 3451|  24.5k|            break;
 3452|  24.5k|        }
 3453|  18.6k|        else {
 3454|  18.6k|            output.push_back(*it);
 3455|  18.6k|            digit_matched = true;
 3456|  18.6k|        }
 3457|  33.9M|    }
 3458|  24.8k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  865|  24.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16.0k, False: 8.84k]
  |  |  ------------------
  ------------------
 3459|  16.0k|        return detail::unexpected_scan_error(
 3460|  16.0k|            scan_error::invalid_scanned_value,
 3461|  16.0k|            "Failed to parse integer: No digits found");
 3462|  16.0k|    }
 3463|  8.84k|    return std::tuple{it, output, thsep_indices};
 3464|  24.8k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1781|  2.79k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|  2.79k|    else {
 1788|  2.79k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  936|  2.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|  2.79k|    }
 1790|  2.79k|}
_ZN3scn2v44impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1635|  2.79k|    {
 1636|  2.79k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|  2.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|  2.79k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1719|  2.79k|    {
 1720|  2.79k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|  2.79k|                           ranges::common_range<Range>) {
 1737|  2.79k|            auto beg_seg = range.begin().contiguous_segment();
 1738|  2.79k|            auto end_seg = range.end().contiguous_segment();
 1739|  2.79k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  865|  2.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.07k, False: 719]
  |  |  ------------------
  ------------------
 1740|  2.79k|                             detail::to_address(end_seg.end()))) {
 1741|  2.07k|                auto& str = m_storage.emplace();
 1742|  2.07k|                str.reserve(range.end().position() - range.begin().position());
 1743|  2.07k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|  2.07k|                m_view = string_view_type{str};
 1745|  2.07k|                return;
 1746|  2.07k|            }
 1747|       |
 1748|    719|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|    719|                                                            end_seg.data());
 1750|    719|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|  2.79k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1680|  5.21k|    {
 1681|  5.21k|        return m_view;
 1682|  5.21k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1670|  2.79k|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6115|  10.1k|    {
 6116|  10.1k|        const bool need_skipped_width =
 6117|  10.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6117:13): [True: 0, False: 10.1k]
  |  Branch (6117:33): [True: 0, False: 10.1k]
  ------------------
 6118|  10.1k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6119|       |
 6120|  10.1k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6120:13): [True: 0, False: 10.1k]
  ------------------
 6121|  10.1k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6121:13): [True: 0, False: 10.1k]
  ------------------
 6122|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6122:17): [True: 0, False: 0]
  ------------------
 6123|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                return result_type{rng.begin(), 0};
 6125|      0|            }
 6126|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6127|      0|                             specs.fill, need_skipped_width);
 6128|      0|        }
 6129|  10.1k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6129:13): [True: 10.1k, False: 0]
  ------------------
 6130|  10.1k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6130:13): [True: 0, False: 10.1k]
  ------------------
 6131|  10.1k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6131:15): [True: 0, False: 0]
  |  Branch (6131:35): [True: 0, False: 0]
  ------------------
 6132|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6132:15): [True: 0, False: 0]
  ------------------
 6133|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6133:15): [True: 0, False: 0]
  ------------------
 6134|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6134:17): [True: 0, False: 0]
  ------------------
 6135|      0|                const auto initial_width =
 6136|      0|                    specs.precision - prefix_width - value_width;
 6137|      0|                auto max_width_view = take_width(rng, initial_width);
 6138|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|      0|                                  .transform_error(make_eof_scan_error));
 6140|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6141|      0|            }
 6142|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|                            make_eof_scan_error));
 6144|       |
 6145|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6145:17): [True: 0, False: 0]
  ------------------
 6146|      0|                return result_type{
 6147|      0|                    it,
 6148|      0|                    calculate_text_width(make_contiguous_buffer(
 6149|      0|                                             ranges::subrange{rng.begin(), it})
 6150|      0|                                             .view())};
 6151|      0|            }
 6152|      0|            return result_type{it, 0};
 6153|      0|        }
 6154|  10.1k|        return result_type{rng.begin(), 0};
 6155|  10.1k|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1955|   100k|{
 1956|   100k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|   100k|    if constexpr (ranges::sized_range<Range>) {
 1959|   100k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|   100k|        if (sz < count) {
  ------------------
  |  Branch (1960:13): [True: 18.8k, False: 81.5k]
  ------------------
 1961|  18.8k|            return unexpected(eof_error::eof);
 1962|  18.8k|        }
 1963|       |
 1964|  81.5k|        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|       |    else {
 1967|       |        auto it = range.begin();
 1968|       |        if (guaranteed_minimum_size(range) >= count) {
 1969|       |            return ranges::next(it, count);
 1970|       |        }
 1971|       |
 1972|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1973|       |            if (it == range.end()) {
 1974|       |                return unexpected(eof_error::eof);
 1975|       |            }
 1976|       |        }
 1977|       |
 1978|       |        return it;
 1979|       |    }
 1980|   100k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|   136k|{
 1998|   136k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   136k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   136k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   136k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   136k|    auto it = range.begin();
 2002|   136k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   136k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 136k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|   136k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 136k, False: 0]
  ------------------
 2011|   136k|        ++it;
 2012|   136k|        return {it, string_type(1, *range.begin())};
 2013|   136k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|   136k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|   572k|{
  945|   572k|    return is_range_eof(r.begin(), r.end());
  946|   572k|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|   572k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   572k|    {
  938|   572k|        return begin == end;
  939|   572k|    }
  940|   572k|}
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|   136k|    {
 1989|   136k|        return !codepoint.empty();
 1990|   136k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|   436k|{
  951|   436k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|   436k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.00k, False: 434k]
  |  |  ------------------
  ------------------
  952|  2.00k|        return eof_error::eof;
  953|  2.00k|    }
  954|   434k|    return eof_error::good;
  955|   436k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|   167k|{
 1945|   167k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   167k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 72, False: 167k]
  |  |  ------------------
  ------------------
 1946|     72|        return unexpected(e);
 1947|     72|    }
 1948|       |
 1949|   167k|    return ranges::next(range.begin());
 1950|   167k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   167k|    {
  296|   167k|        ++x;
  297|   167k|        return x;
  298|   167k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|  18.1k|    {
 3590|  18.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  18.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  18.1k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  18.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 228, False: 17.9k]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|    228|            else {
 3601|    228|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 228]
  ------------------
 3602|    228|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|    228|            }
 3608|    228|        }
 3609|       |
 3610|  18.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 40, False: 18.0k]
  ------------------
 3611|     40|            value = T{0};
 3612|     40|            return std::next(prefix_result.iterator);
 3613|     40|        }
 3614|       |
 3615|  18.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  18.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 13.9k, False: 4.17k]
  |  |  ------------------
  ------------------
 3616|  13.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  13.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 30, False: 13.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     30|    }                                                  \
  |  |  |  | 3939|  13.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  13.8k|                    parse_integer_digits_without_thsep(
 3618|  13.8k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  13.8k|                        prefix_result.parsed_base));
 3620|       |
 3621|  13.8k|            auto buf = make_contiguous_buffer(
 3622|  13.8k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  13.8k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.5k, False: 318]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.5k|    }                                                  \
  |  |  |  | 3939|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    318|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|    318|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|    318|                                        prefix_result.parsed_base));
 3626|       |
 3627|    318|            return ranges::next(
 3628|    318|                prefix_result.iterator,
 3629|    318|                ranges::distance(buf.view().begin(), result_it));
 3630|  13.8k|        }
 3631|       |
 3632|  4.17k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  4.17k|            localized_number_formatting_options<CharT>{loc};
 3637|  4.17k|#endif
 3638|       |
 3639|  4.17k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.68k, False: 1.48k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.68k|    }                                                  \
  |  |  |  | 3939|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  1.48k|                parse_integer_digits_with_thsep(
 3641|  1.48k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  1.48k|                    prefix_result.parsed_base, locale_options));
 3643|  1.48k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  1.48k|            parse_digits_result;
 3645|       |
 3646|  1.48k|        auto nothsep_source_view =
 3647|  1.48k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  1.48k|        SCN_TRY(
  ------------------
  |  | 3940|  1.48k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.48k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.48k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 1.47k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|  1.48k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  1.47k|            nothsep_source_it,
 3650|  1.47k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  1.47k|                                prefix_result.parsed_base));
 3652|       |
 3653|  1.47k|        return ranges::next(
 3654|  1.47k|            prefix_result.iterator,
 3655|  1.47k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  1.47k|                ranges::ssize(thsep_indices));
 3657|  1.48k|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3376|   133k|{
 3377|   133k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|   133k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   133k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   133k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 133k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   133k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3378|   133k|    auto [base_prefix_begin_it, sign] = sign_result;
 3379|       |
 3380|   133k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3381|   133k|        parse_integer_base_prefix(
 3382|   133k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3383|       |
 3384|   133k|    if (parsed_zero) {
  ------------------
  |  Branch (3384:9): [True: 332, False: 133k]
  ------------------
 3385|    332|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3385:13): [True: 24, False: 308]
  ------------------
 3386|    332|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3386:13): [True: 212, False: 96]
  ------------------
 3387|    236|            digits_begin_it = base_prefix_begin_it;
 3388|    236|        }
 3389|     96|        else {
 3390|     96|            parsed_zero = false;
 3391|     96|        }
 3392|    332|    }
 3393|   133k|    else {
 3394|   133k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3394:13): [True: 282, False: 133k]
  ------------------
 3395|   133k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3395:13): [True: 129k, False: 3.57k]
  ------------------
 3396|   129k|            digits_begin_it = base_prefix_begin_it;
 3397|   129k|        }
 3398|   133k|    }
 3399|       |
 3400|   133k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3400:9): [True: 123k, False: 10.1k]
  ------------------
 3401|   123k|        sign = sign_type::plus_sign;
 3402|   123k|    }
 3403|   133k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3404|   133k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3405|   133k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3257|   133k|{
 3258|   133k|    auto r = read_one_of_code_unit(range, "+-");
 3259|   133k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 123k, False: 10.1k]
  ------------------
 3260|   123k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 123k, False: 0]
  ------------------
 3261|   123k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|   123k|        }
 3263|      0|        return unexpected(eof_error::eof);
 3264|   123k|    }
 3265|       |
 3266|  10.1k|    auto& it = *r;
 3267|  10.1k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 1.69k, False: 8.43k]
  ------------------
 3268|  1.69k|        return std::pair{it, sign_type::minus_sign};
 3269|  1.69k|    }
 3270|  8.43k|    return std::pair{it, sign_type::plus_sign};
 3271|  10.1k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2371|   133k|{
 2372|   133k|    auto it = read_code_unit(range);
 2373|   133k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 133k]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|   259k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 259k, False: 123k]
  ------------------
 2378|   259k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 10.1k, False: 249k]
  ------------------
 2379|  10.1k|            return *it;
 2380|  10.1k|        }
 2381|   259k|    }
 2382|       |
 2383|   123k|    return unexpected(parse_error::error);
 2384|   133k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3343|   133k|{
 3344|   133k|    switch (base) {
 3345|  16.6k|        case 2:
  ------------------
  |  Branch (3345:9): [True: 16.6k, False: 117k]
  ------------------
 3346|       |            // allow 0b/0B
 3347|  16.6k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3348|  16.6k|                    false};
 3349|       |
 3350|  16.6k|        case 8: {
  ------------------
  |  Branch (3350:9): [True: 16.6k, False: 117k]
  ------------------
 3351|       |            // allow 0o/0O/0
 3352|  16.6k|            bool zero_parsed = false;
 3353|  16.6k|            auto it = apply_opt(
 3354|  16.6k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3355|  16.6k|            return {it, 8, zero_parsed};
 3356|      0|        }
 3357|       |
 3358|  16.7k|        case 16:
  ------------------
  |  Branch (3358:9): [True: 16.7k, False: 117k]
  ------------------
 3359|       |            // allow 0x/0X
 3360|  16.7k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3361|  16.7k|                    false};
 3362|       |
 3363|  16.8k|        case 0:
  ------------------
  |  Branch (3363:9): [True: 16.8k, False: 117k]
  ------------------
 3364|       |            // detect base
 3365|  16.8k|            return parse_integer_base_prefix_for_detection(range);
 3366|       |
 3367|  67.0k|        default:
  ------------------
  |  Branch (3367:9): [True: 67.0k, False: 66.8k]
  ------------------
 3368|       |            // no base prefix allowed
 3369|  67.0k|            return {range.begin(), base, false};
 3370|   133k|    }
 3371|   133k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2390|  50.0k|{
 2391|  50.0k|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 49.8k, False: 156]
  ------------------
 2392|  49.8k|        return range.begin();
 2393|  49.8k|    }
 2394|    156|    return *result;
 2395|  50.0k|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3294|  33.4k|{
 3295|  33.4k|    return read_matching_string_classic_nocase(range, "0b");
 3296|  33.4k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2330|   100k|{
 2331|   100k|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|   100k|    else {
 2344|   100k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|   100k|            if (ch < 'A' || ch > 'Z') {
 2346|   100k|                return ch;
 2347|   100k|            }
 2348|   100k|            return static_cast<char_type>(ch +
 2349|   100k|                                          static_cast<char_type>('a' - 'A'));
 2350|   100k|        };
 2351|       |
 2352|   100k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 18.8k, False: 81.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  18.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  18.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  18.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  18.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  18.8k|    }                                                  \
  |  |  |  | 3939|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  81.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|  81.5k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|  81.5k|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|  81.5k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|  81.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 81.5k, False: 0]
  |  |  ------------------
  ------------------
 2357|  81.5k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|  81.5k|                    return ascii_tolower(a) ==
 2359|  81.5k|                           static_cast<detail::char_t<Range>>(b);
 2360|  81.5k|                }))) {
 2361|  81.5k|            return unexpected(parse_error::error);
 2362|  81.5k|        }
 2363|       |
 2364|      0|        return it;
 2365|  81.5k|    }
 2366|   100k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2344|  82.5k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  82.5k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 55.0k, False: 27.5k]
  |  Branch (2345:29): [True: 27.2k, False: 288]
  ------------------
 2346|  82.2k|                return ch;
 2347|  82.2k|            }
 2348|    288|            return static_cast<char_type>(ch +
 2349|    288|                                          static_cast<char_type>('a' - 'A'));
 2350|  82.5k|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3308|  33.4k|{
 3309|  33.4k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3309:14): [True: 0, False: 33.4k]
  ------------------
 3310|      0|        return *r;
 3311|      0|    }
 3312|       |
 3313|  33.4k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3313:14): [True: 332, False: 33.1k]
  ------------------
 3314|    332|        zero_parsed = true;
 3315|    332|        return *r;
 3316|    332|    }
 3317|       |
 3318|  33.1k|    return unexpected(parse_error::error);
 3319|  33.4k|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2245|  33.4k|{
 2246|  33.4k|    auto it = read_code_unit(range);
 2247|  33.4k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  33.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 72, False: 33.3k]
  |  |  ------------------
  ------------------
 2248|     72|        return unexpected(make_eof_parse_error(it.error()));
 2249|     72|    }
 2250|       |
 2251|  33.3k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|  33.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 33.0k, False: 332]
  |  |  ------------------
  ------------------
 2252|  33.3k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|  33.0k|        return unexpected(parse_error::error);
 2254|  33.0k|    }
 2255|       |
 2256|    332|    return *it;
 2257|  33.3k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3301|  33.6k|{
 3302|  33.6k|    return read_matching_string_classic_nocase(range, "0x");
 3303|  33.6k|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3324|  16.8k|{
 3325|  16.8k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3325:14): [True: 0, False: 16.8k]
  ------------------
 3326|      0|        return {*r, 16, false};
 3327|      0|    }
 3328|  16.8k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3328:14): [True: 0, False: 16.8k]
  ------------------
 3329|      0|        return {*r, 2, false};
 3330|      0|    }
 3331|  16.8k|    {
 3332|  16.8k|        bool zero_parsed{false};
 3333|  16.8k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3333:18): [True: 176, False: 16.6k]
  ------------------
 3334|    176|            return {*r, 8, zero_parsed};
 3335|    176|        }
 3336|  16.8k|    }
 3337|  16.6k|    return {range.begin(), 10, false};
 3338|  16.8k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3410|   107k|{
 3411|   107k|    using char_type = detail::char_t<Range>;
 3412|       |
 3413|   107k|    if constexpr (ranges::contiguous_range<Range>) {
 3414|   107k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 156, False: 107k]
  |  |  ------------------
  ------------------
 3415|    156|            return detail::unexpected_scan_error(
 3416|    156|                scan_error::invalid_scanned_value,
 3417|    156|                "Failed to parse integer: No digits found");
 3418|    156|        }
 3419|   107k|        return range.end();
 3420|       |    }
 3421|       |    else {
 3422|       |        return read_while1_code_unit(range,
 3423|       |                                     [&](char_type ch) noexcept {
 3424|       |                                         return char_to_int(ch) < base;
 3425|       |                                     })
 3426|       |            .transform_error(map_parse_error_to_scan_error(
 3427|       |                scan_error::invalid_scanned_value,
 3428|       |                "Failed to parse integer: No digits found"));
 3429|       |    }
 3430|   107k|}
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3440|  24.8k|{
 3441|  24.8k|    std::basic_string<CharT> output;
 3442|  24.8k|    std::string thsep_indices;
 3443|  24.8k|    auto it = range.begin();
 3444|  24.8k|    bool digit_matched = false;
 3445|  33.9M|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3445:12): [True: 33.9M, False: 324]
  ------------------
 3446|  33.9M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3446:13): [True: 33.9M, False: 43.1k]
  ------------------
 3447|  33.9M|            thsep_indices.push_back(
 3448|  33.9M|                static_cast<char>(ranges::distance(range.begin(), it)));
 3449|  33.9M|        }
 3450|  43.1k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3450:18): [True: 24.5k, False: 18.6k]
  ------------------
 3451|  24.5k|            break;
 3452|  24.5k|        }
 3453|  18.6k|        else {
 3454|  18.6k|            output.push_back(*it);
 3455|  18.6k|            digit_matched = true;
 3456|  18.6k|        }
 3457|  33.9M|    }
 3458|  24.8k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  865|  24.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16.0k, False: 8.84k]
  |  |  ------------------
  ------------------
 3459|  16.0k|        return detail::unexpected_scan_error(
 3460|  16.0k|            scan_error::invalid_scanned_value,
 3461|  16.0k|            "Failed to parse integer: No digits found");
 3462|  16.0k|    }
 3463|  8.84k|    return std::tuple{it, output, thsep_indices};
 3464|  24.8k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1781|   107k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   107k|                  ranges::sized_range<Range>) {
 1785|   107k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   107k|}
_ZN3scn2v44impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|   107k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   107k|    {
 1589|   107k|    }
_ZNK3scn2v44impl19string_view_wrapperIwE4viewEv:
 1601|   110k|    {
 1602|   110k|        return sv;
 1603|   110k|    }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|   135k|{
 3066|   135k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 135k, False: 0]
  ------------------
 3067|   135k|        auto it = read_while_classic_space(range);
 3068|   135k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   135k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.65k, False: 133k]
  |  |  ------------------
  ------------------
 3070|  1.65k|            return unexpected(e);
 3071|  1.65k|        }
 3072|       |
 3073|   133k|        return it;
 3074|   135k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   135k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|   135k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   135k|    else {
 2225|   135k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|   135k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   135k|            return detail::is_cp_space(cp);
 2238|   135k|        });
 2239|   135k|    }
 2240|   135k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2180|   135k|{
 2181|   135k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   135k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2159|   135k|{
 2160|   135k|    auto it = range.begin();
 2161|   137k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 136k, False: 1.65k]
  ------------------
 2162|   136k|        const auto val =
 2163|   136k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   136k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   136k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 136k, False: 0]
  |  |  ------------------
  ------------------
 2165|   136k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   136k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   136k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 133k, False: 2.37k]
  ------------------
 2168|   133k|                return it;
 2169|   133k|            }
 2170|   136k|        }
 2171|  2.37k|        it = val.iterator;
 2172|  2.37k|    }
 2173|       |
 2174|  1.65k|    return it;
 2175|   135k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|   135k|        : m_fptr([](storage fn,
  743|   135k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   135k|              cvref<T> obj = *get<T>(fn);
  745|   135k|              if constexpr (std::is_void_v<R>) {
  746|   135k|                  obj(static_cast<decltype(args)>(args)...);
  747|   135k|              }
  748|   135k|              else {
  749|   135k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   135k|              }
  751|   135k|          }),
  752|   135k|          m_storage(std::addressof(f))
  753|   135k|    {
  754|   135k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|   136k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   136k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   136k|              else {
  749|   136k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   136k|              }
  751|   136k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   136k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   136k|        else if constexpr (std::is_object_v<T>) {
  688|   136k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   136k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2236|   136k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   136k|            return detail::is_cp_space(cp);
 2238|   136k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|   135k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   135k|        {
  662|   135k|        }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  92.0k|    {
  304|  92.0k|        ranges::advance(x, n);
  305|  92.0k|        return x;
  306|  92.0k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  92.0k|    {
  268|  92.0k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  92.0k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  92.0k|    {
  181|  34.1M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 34.1M, False: 92.0k]
  ------------------
  182|  34.1M|            ++i;
  183|  34.1M|        }
  184|  92.0k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIaEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6225|  18.3k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|       |                          basic_contiguous_scan_context<char_type>>) {
 6230|       |            auto rd = make_reader<T, char_type>();
 6231|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6232|       |            return impl(rd, range, value);
 6233|       |        }
 6234|  18.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6235|  18.3k|            auto rd = make_reader<T, char_type>();
 6236|  18.3k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  18.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6237|       |
 6238|  18.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6238:17): [True: 18.3k, False: 0]
  |  Branch (6238:50): [True: 0, False: 0]
  ------------------
 6239|  18.3k|                specs.width != 0) {
  ------------------
  |  Branch (6239:17): [True: 0, False: 0]
  ------------------
 6240|  18.3k|                return impl(rd, range, value);
 6241|  18.3k|            }
 6242|       |
 6243|      0|            auto crange = get_as_contiguous(range);
 6244|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6245|      0|            return ranges::next(range.begin(),
 6246|      0|                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  18.3k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3155|   220k|    {
 3156|   220k|        reader_error_handler eh{};
 3157|   220k|        get_derived().check_specs_impl(specs, eh);
 3158|   220k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 220k]
  |  |  ------------------
  ------------------
 3159|      0|            return detail::unexpected_scan_error(
 3160|      0|                scan_error::invalid_format_string, eh.m_msg);
 3161|      0|        }
 3162|   220k|        return {};
 3163|   220k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3167|   220k|    {
 3168|   220k|        return static_cast<Derived&>(*this);
 3169|   220k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3535|   220k|    {
 3536|   220k|        detail::check_int_type_specs(specs, eh);
 3537|   220k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6160|  18.3k|    {
 6161|  18.3k|        const bool need_skipped_width =
 6162|  18.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 18.3k]
  |  Branch (6162:33): [True: 0, False: 18.3k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|  18.3k|        auto it = rng.begin();
 6166|  18.3k|        std::ptrdiff_t prefix_width = 0;
 6167|  18.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 18.3k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|  18.3k|        else {
 6175|  18.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  18.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 248, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    248|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    248|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    248|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    248|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    248|    }                                                  \
  |  |  |  | 3939|  18.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|  18.0k|            std::tie(it, prefix_width) = prefix_result;
 6177|  18.0k|        }
 6178|  18.0k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|  18.0k|        std::ptrdiff_t value_width = 0;
 6182|  18.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 18.0k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|  18.0k|        else {
 6198|  18.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.3k, False: 1.74k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.3k|    }                                                  \
  |  | 3939|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|  1.74k|                                             specs, value, loc));
 6200|       |
 6201|  1.74k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 1.74k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|  1.74k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|  1.74k|        std::ptrdiff_t postfix_width = 0;
 6210|  1.74k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 1.64k, False: 100]
  ------------------
 6211|  1.64k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  1.64k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.64k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.64k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.64k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.64k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|  1.64k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|  1.64k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|  1.64k|                                 value_width));
 6215|  1.64k|            std::tie(it, postfix_width) = postfix_result;
 6216|  1.64k|        }
 6217|       |
 6218|  1.74k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  1.74k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.74k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|  1.74k|            specs, prefix_width, value_width, postfix_width));
 6220|  1.74k|        return it;
 6221|  1.74k|    }
_ZNK3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3150|   291k|    {
 3151|   291k|        return true;
 3152|   291k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3589|  18.0k|    {
 3590|  18.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  18.0k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  18.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 218, False: 17.8k]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|    218|            else {
 3601|    218|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 218]
  ------------------
 3602|    218|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|    218|            }
 3608|    218|        }
 3609|       |
 3610|  18.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 38, False: 18.0k]
  ------------------
 3611|     38|            value = T{0};
 3612|     38|            return std::next(prefix_result.iterator);
 3613|     38|        }
 3614|       |
 3615|  18.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  18.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 13.8k, False: 4.15k]
  |  |  ------------------
  ------------------
 3616|  13.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.5k, False: 350]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.5k|    }                                                  \
  |  |  |  | 3939|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    350|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    350|                    parse_integer_digits_without_thsep(
 3618|    350|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    350|                        prefix_result.parsed_base));
 3620|       |
 3621|    350|            auto buf = make_contiguous_buffer(
 3622|    350|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    350|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    350|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    350|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    350|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    350|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 96, False: 254]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     96|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     96|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     96|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     96|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     96|    }                                                  \
  |  |  |  | 3939|    350|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    254|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|    254|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|    254|                                        prefix_result.parsed_base));
 3626|       |
 3627|    254|            return ranges::next(
 3628|    254|                prefix_result.iterator,
 3629|    254|                ranges::distance(buf.view().begin(), result_it));
 3630|    350|        }
 3631|       |
 3632|  4.15k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  4.15k|            localized_number_formatting_options<CharT>{loc};
 3637|  4.15k|#endif
 3638|       |
 3639|  4.15k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  4.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.67k, False: 1.48k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.67k|    }                                                  \
  |  |  |  | 3939|  4.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  1.48k|                parse_integer_digits_with_thsep(
 3641|  1.48k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  1.48k|                    prefix_result.parsed_base, locale_options));
 3643|  1.48k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  1.48k|            parse_digits_result;
 3645|       |
 3646|  1.48k|        auto nothsep_source_view =
 3647|  1.48k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  1.48k|        SCN_TRY(
  ------------------
  |  | 3940|  1.48k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.48k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.48k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 28, False: 1.45k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     28|    }                                                  \
  |  |  |  | 3939|  1.48k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.45k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  1.45k|            nothsep_source_it,
 3650|  1.45k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  1.45k|                                prefix_result.parsed_base));
 3652|       |
 3653|  1.45k|        return ranges::next(
 3654|  1.45k|            prefix_result.iterator,
 3655|  1.45k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  1.45k|                ranges::ssize(thsep_indices));
 3657|  1.48k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|  18.0k|    {
 3590|  18.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  18.0k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  18.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 218, False: 17.8k]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|    218|            else {
 3601|    218|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 218]
  ------------------
 3602|    218|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|    218|            }
 3608|    218|        }
 3609|       |
 3610|  18.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 38, False: 18.0k]
  ------------------
 3611|     38|            value = T{0};
 3612|     38|            return std::next(prefix_result.iterator);
 3613|     38|        }
 3614|       |
 3615|  18.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  18.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 13.8k, False: 4.15k]
  |  |  ------------------
  ------------------
 3616|  13.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 30, False: 13.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     30|    }                                                  \
  |  |  |  | 3939|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  13.8k|                    parse_integer_digits_without_thsep(
 3618|  13.8k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  13.8k|                        prefix_result.parsed_base));
 3620|       |
 3621|  13.8k|            auto buf = make_contiguous_buffer(
 3622|  13.8k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  13.8k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.5k, False: 254]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.5k|    }                                                  \
  |  |  |  | 3939|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    254|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|    254|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|    254|                                        prefix_result.parsed_base));
 3626|       |
 3627|    254|            return ranges::next(
 3628|    254|                prefix_result.iterator,
 3629|    254|                ranges::distance(buf.view().begin(), result_it));
 3630|  13.8k|        }
 3631|       |
 3632|  4.15k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  4.15k|            localized_number_formatting_options<CharT>{loc};
 3637|  4.15k|#endif
 3638|       |
 3639|  4.15k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  4.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.67k, False: 1.48k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.67k|    }                                                  \
  |  |  |  | 3939|  4.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  1.48k|                parse_integer_digits_with_thsep(
 3641|  1.48k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  1.48k|                    prefix_result.parsed_base, locale_options));
 3643|  1.48k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  1.48k|            parse_digits_result;
 3645|       |
 3646|  1.48k|        auto nothsep_source_view =
 3647|  1.48k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  1.48k|        SCN_TRY(
  ------------------
  |  | 3940|  1.48k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.48k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.48k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 28, False: 1.45k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     28|    }                                                  \
  |  |  |  | 3939|  1.48k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.45k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  1.45k|            nothsep_source_it,
 3650|  1.45k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  1.45k|                                prefix_result.parsed_base));
 3652|       |
 3653|  1.45k|        return ranges::next(
 3654|  1.45k|            prefix_result.iterator,
 3655|  1.45k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  1.45k|                ranges::ssize(thsep_indices));
 3657|  1.48k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIiEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6225|  18.3k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|       |                          basic_contiguous_scan_context<char_type>>) {
 6230|       |            auto rd = make_reader<T, char_type>();
 6231|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6232|       |            return impl(rd, range, value);
 6233|       |        }
 6234|  18.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6235|  18.3k|            auto rd = make_reader<T, char_type>();
 6236|  18.3k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  18.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6237|       |
 6238|  18.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6238:17): [True: 18.3k, False: 0]
  |  Branch (6238:50): [True: 0, False: 0]
  ------------------
 6239|  18.3k|                specs.width != 0) {
  ------------------
  |  Branch (6239:17): [True: 0, False: 0]
  ------------------
 6240|  18.3k|                return impl(rd, range, value);
 6241|  18.3k|            }
 6242|       |
 6243|      0|            auto crange = get_as_contiguous(range);
 6244|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6245|      0|            return ranges::next(range.begin(),
 6246|      0|                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  18.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6160|  18.3k|    {
 6161|  18.3k|        const bool need_skipped_width =
 6162|  18.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 18.3k]
  |  Branch (6162:33): [True: 0, False: 18.3k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|  18.3k|        auto it = rng.begin();
 6166|  18.3k|        std::ptrdiff_t prefix_width = 0;
 6167|  18.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 18.3k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|  18.3k|        else {
 6175|  18.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  18.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 260, False: 18.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    260|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    260|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    260|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    260|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    260|    }                                                  \
  |  |  |  | 3939|  18.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|  18.1k|            std::tie(it, prefix_width) = prefix_result;
 6177|  18.1k|        }
 6178|  18.1k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|  18.1k|        std::ptrdiff_t value_width = 0;
 6182|  18.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 18.1k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|  18.1k|        else {
 6198|  18.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.3k, False: 1.83k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.3k|    }                                                  \
  |  | 3939|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|  1.83k|                                             specs, value, loc));
 6200|       |
 6201|  1.83k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 1.83k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|  1.83k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|  1.83k|        std::ptrdiff_t postfix_width = 0;
 6210|  1.83k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 1.71k, False: 112]
  ------------------
 6211|  1.71k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  1.71k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.71k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.71k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.71k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.71k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|  1.71k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|  1.71k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|  1.71k|                                 value_width));
 6215|  1.71k|            std::tie(it, postfix_width) = postfix_result;
 6216|  1.71k|        }
 6217|       |
 6218|  1.83k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  1.83k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.83k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|  1.83k|            specs, prefix_width, value_width, postfix_width));
 6220|  1.83k|        return it;
 6221|  1.83k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIxEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6225|  18.4k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|       |                          basic_contiguous_scan_context<char_type>>) {
 6230|       |            auto rd = make_reader<T, char_type>();
 6231|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6232|       |            return impl(rd, range, value);
 6233|       |        }
 6234|  18.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 6235|  18.4k|            auto rd = make_reader<T, char_type>();
 6236|  18.4k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  18.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  18.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6237|       |
 6238|  18.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6238:17): [True: 18.4k, False: 0]
  |  Branch (6238:50): [True: 0, False: 0]
  ------------------
 6239|  18.4k|                specs.width != 0) {
  ------------------
  |  Branch (6239:17): [True: 0, False: 0]
  ------------------
 6240|  18.4k|                return impl(rd, range, value);
 6241|  18.4k|            }
 6242|       |
 6243|      0|            auto crange = get_as_contiguous(range);
 6244|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6245|      0|            return ranges::next(range.begin(),
 6246|      0|                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  18.4k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6160|  18.4k|    {
 6161|  18.4k|        const bool need_skipped_width =
 6162|  18.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 18.4k]
  |  Branch (6162:33): [True: 0, False: 18.4k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|  18.4k|        auto it = rng.begin();
 6166|  18.4k|        std::ptrdiff_t prefix_width = 0;
 6167|  18.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 18.4k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|  18.4k|        else {
 6175|  18.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  18.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 260, False: 18.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    260|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    260|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    260|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    260|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    260|    }                                                  \
  |  |  |  | 3939|  18.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|  18.2k|            std::tie(it, prefix_width) = prefix_result;
 6177|  18.2k|        }
 6178|  18.2k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|  18.2k|        std::ptrdiff_t value_width = 0;
 6182|  18.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 18.2k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|  18.2k|        else {
 6198|  18.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  18.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  18.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.3k, False: 1.91k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.3k|    }                                                  \
  |  | 3939|  18.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  18.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|  1.91k|                                             specs, value, loc));
 6200|       |
 6201|  1.91k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 1.91k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|  1.91k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|  1.91k|        std::ptrdiff_t postfix_width = 0;
 6210|  1.91k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 1.80k, False: 112]
  ------------------
 6211|  1.80k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  1.80k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.80k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.80k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.80k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.80k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|  1.80k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|  1.80k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|  1.80k|                                 value_width));
 6215|  1.80k|            std::tie(it, postfix_width) = postfix_result;
 6216|  1.80k|        }
 6217|       |
 6218|  1.91k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  1.91k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.91k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|  1.91k|            specs, prefix_width, value_width, postfix_width));
 6220|  1.91k|        return it;
 6221|  1.91k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3589|  18.2k|    {
 3590|  18.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  18.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  18.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  18.2k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  18.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 244, False: 17.9k]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|    244|            else {
 3601|    244|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 244]
  ------------------
 3602|    244|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|    244|            }
 3608|    244|        }
 3609|       |
 3610|  18.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 46, False: 18.1k]
  ------------------
 3611|     46|            value = T{0};
 3612|     46|            return std::next(prefix_result.iterator);
 3613|     46|        }
 3614|       |
 3615|  18.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  18.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 13.9k, False: 4.19k]
  |  |  ------------------
  ------------------
 3616|  13.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  13.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.5k, False: 384]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.5k|    }                                                  \
  |  |  |  | 3939|  13.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    384|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    384|                    parse_integer_digits_without_thsep(
 3618|    384|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    384|                        prefix_result.parsed_base));
 3620|       |
 3621|    384|            auto buf = make_contiguous_buffer(
 3622|    384|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    384|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    384|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    384|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    384|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    384|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 374]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|    384|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    374|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|    374|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|    374|                                        prefix_result.parsed_base));
 3626|       |
 3627|    374|            return ranges::next(
 3628|    374|                prefix_result.iterator,
 3629|    374|                ranges::distance(buf.view().begin(), result_it));
 3630|    384|        }
 3631|       |
 3632|  4.19k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  4.19k|            localized_number_formatting_options<CharT>{loc};
 3637|  4.19k|#endif
 3638|       |
 3639|  4.19k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  4.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.70k, False: 1.49k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.70k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.70k|    }                                                  \
  |  |  |  | 3939|  4.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  1.49k|                parse_integer_digits_with_thsep(
 3641|  1.49k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  1.49k|                    prefix_result.parsed_base, locale_options));
 3643|  1.49k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  1.49k|            parse_digits_result;
 3645|       |
 3646|  1.49k|        auto nothsep_source_view =
 3647|  1.49k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  1.49k|        SCN_TRY(
  ------------------
  |  | 3940|  1.49k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.49k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.49k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.49k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.49k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  1.49k|            nothsep_source_it,
 3650|  1.49k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  1.49k|                                prefix_result.parsed_base));
 3652|       |
 3653|  1.49k|        return ranges::next(
 3654|  1.49k|            prefix_result.iterator,
 3655|  1.49k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  1.49k|                ranges::ssize(thsep_indices));
 3657|  1.49k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|  18.2k|    {
 3590|  18.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  18.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  18.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  18.2k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  18.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 244, False: 17.9k]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|    244|            else {
 3601|    244|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 244]
  ------------------
 3602|    244|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|    244|            }
 3608|    244|        }
 3609|       |
 3610|  18.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 46, False: 18.1k]
  ------------------
 3611|     46|            value = T{0};
 3612|     46|            return std::next(prefix_result.iterator);
 3613|     46|        }
 3614|       |
 3615|  18.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  18.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 13.9k, False: 4.19k]
  |  |  ------------------
  ------------------
 3616|  13.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  13.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 30, False: 13.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     30|    }                                                  \
  |  |  |  | 3939|  13.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  13.9k|                    parse_integer_digits_without_thsep(
 3618|  13.9k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  13.9k|                        prefix_result.parsed_base));
 3620|       |
 3621|  13.9k|            auto buf = make_contiguous_buffer(
 3622|  13.9k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  13.9k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  13.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.5k, False: 374]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.5k|    }                                                  \
  |  |  |  | 3939|  13.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    374|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|    374|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|    374|                                        prefix_result.parsed_base));
 3626|       |
 3627|    374|            return ranges::next(
 3628|    374|                prefix_result.iterator,
 3629|    374|                ranges::distance(buf.view().begin(), result_it));
 3630|  13.9k|        }
 3631|       |
 3632|  4.19k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  4.19k|            localized_number_formatting_options<CharT>{loc};
 3637|  4.19k|#endif
 3638|       |
 3639|  4.19k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  4.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.70k, False: 1.49k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.70k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.70k|    }                                                  \
  |  |  |  | 3939|  4.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  1.49k|                parse_integer_digits_with_thsep(
 3641|  1.49k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  1.49k|                    prefix_result.parsed_base, locale_options));
 3643|  1.49k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  1.49k|            parse_digits_result;
 3645|       |
 3646|  1.49k|        auto nothsep_source_view =
 3647|  1.49k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  1.49k|        SCN_TRY(
  ------------------
  |  | 3940|  1.49k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.49k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.49k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.49k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.49k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  1.49k|            nothsep_source_it,
 3650|  1.49k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  1.49k|                                prefix_result.parsed_base));
 3652|       |
 3653|  1.49k|        return ranges::next(
 3654|  1.49k|            prefix_result.iterator,
 3655|  1.49k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  1.49k|                ranges::ssize(thsep_indices));
 3657|  1.49k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIhEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6225|  18.2k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|       |                          basic_contiguous_scan_context<char_type>>) {
 6230|       |            auto rd = make_reader<T, char_type>();
 6231|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6232|       |            return impl(rd, range, value);
 6233|       |        }
 6234|  18.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 6235|  18.2k|            auto rd = make_reader<T, char_type>();
 6236|  18.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  18.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6237|       |
 6238|  18.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6238:17): [True: 18.2k, False: 0]
  |  Branch (6238:50): [True: 0, False: 0]
  ------------------
 6239|  18.2k|                specs.width != 0) {
  ------------------
  |  Branch (6239:17): [True: 0, False: 0]
  ------------------
 6240|  18.2k|                return impl(rd, range, value);
 6241|  18.2k|            }
 6242|       |
 6243|      0|            auto crange = get_as_contiguous(range);
 6244|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6245|      0|            return ranges::next(range.begin(),
 6246|      0|                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  18.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6160|  18.2k|    {
 6161|  18.2k|        const bool need_skipped_width =
 6162|  18.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 18.2k]
  |  Branch (6162:33): [True: 0, False: 18.2k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|  18.2k|        auto it = rng.begin();
 6166|  18.2k|        std::ptrdiff_t prefix_width = 0;
 6167|  18.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 18.2k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|  18.2k|        else {
 6175|  18.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  18.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 222, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    222|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    222|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    222|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    222|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    222|    }                                                  \
  |  |  |  | 3939|  18.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|  18.0k|            std::tie(it, prefix_width) = prefix_result;
 6177|  18.0k|        }
 6178|  18.0k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|  18.0k|        std::ptrdiff_t value_width = 0;
 6182|  18.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 18.0k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|  18.0k|        else {
 6198|  18.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.3k, False: 1.69k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.3k|    }                                                  \
  |  | 3939|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|  1.69k|                                             specs, value, loc));
 6200|       |
 6201|  1.69k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 1.69k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|  1.69k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|  1.69k|        std::ptrdiff_t postfix_width = 0;
 6210|  1.69k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 1.61k, False: 74]
  ------------------
 6211|  1.61k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  1.61k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.61k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.61k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.61k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.61k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|  1.61k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|  1.61k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|  1.61k|                                 value_width));
 6215|  1.61k|            std::tie(it, postfix_width) = postfix_result;
 6216|  1.61k|        }
 6217|       |
 6218|  1.69k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  1.69k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.69k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|  1.69k|            specs, prefix_width, value_width, postfix_width));
 6220|  1.69k|        return it;
 6221|  1.69k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3589|  18.0k|    {
 3590|  18.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  18.0k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  18.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 212, False: 17.8k]
  ------------------
 3594|    212|            if constexpr (!std::is_signed_v<T>) {
 3595|    212|                return detail::unexpected_scan_error(
 3596|    212|                    scan_error::invalid_scanned_value,
 3597|    212|                    "Unexpected '-' sign when parsing an "
 3598|    212|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|    212|        }
 3609|       |
 3610|  18.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 36, False: 17.9k]
  ------------------
 3611|     36|            value = T{0};
 3612|     36|            return std::next(prefix_result.iterator);
 3613|     36|        }
 3614|       |
 3615|  17.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  17.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 13.6k, False: 4.32k]
  |  |  ------------------
  ------------------
 3616|  13.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  13.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.3k, False: 288]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.3k|    }                                                  \
  |  |  |  | 3939|  13.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    288|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    288|                    parse_integer_digits_without_thsep(
 3618|    288|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    288|                        prefix_result.parsed_base));
 3620|       |
 3621|    288|            auto buf = make_contiguous_buffer(
 3622|    288|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    288|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    288|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    288|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    288|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    288|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 70, False: 218]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     70|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     70|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     70|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     70|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     70|    }                                                  \
  |  |  |  | 3939|    288|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    218|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|    218|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|    218|                                        prefix_result.parsed_base));
 3626|       |
 3627|    218|            return ranges::next(
 3628|    218|                prefix_result.iterator,
 3629|    218|                ranges::distance(buf.view().begin(), result_it));
 3630|    288|        }
 3631|       |
 3632|  4.32k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  4.32k|            localized_number_formatting_options<CharT>{loc};
 3637|  4.32k|#endif
 3638|       |
 3639|  4.32k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  4.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.65k, False: 1.67k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.65k|    }                                                  \
  |  |  |  | 3939|  4.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  1.67k|                parse_integer_digits_with_thsep(
 3641|  1.67k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  1.67k|                    prefix_result.parsed_base, locale_options));
 3643|  1.67k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  1.67k|            parse_digits_result;
 3645|       |
 3646|  1.67k|        auto nothsep_source_view =
 3647|  1.67k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  1.67k|        SCN_TRY(
  ------------------
  |  | 3940|  1.67k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.67k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.67k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 22, False: 1.64k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     22|    }                                                  \
  |  |  |  | 3939|  1.67k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  1.64k|            nothsep_source_it,
 3650|  1.64k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  1.64k|                                prefix_result.parsed_base));
 3652|       |
 3653|  1.64k|        return ranges::next(
 3654|  1.64k|            prefix_result.iterator,
 3655|  1.64k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  1.64k|                ranges::ssize(thsep_indices));
 3657|  1.67k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|  18.0k|    {
 3590|  18.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  18.0k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  18.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 212, False: 17.8k]
  ------------------
 3594|    212|            if constexpr (!std::is_signed_v<T>) {
 3595|    212|                return detail::unexpected_scan_error(
 3596|    212|                    scan_error::invalid_scanned_value,
 3597|    212|                    "Unexpected '-' sign when parsing an "
 3598|    212|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|    212|        }
 3609|       |
 3610|  18.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 36, False: 17.9k]
  ------------------
 3611|     36|            value = T{0};
 3612|     36|            return std::next(prefix_result.iterator);
 3613|     36|        }
 3614|       |
 3615|  17.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  17.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 13.6k, False: 4.32k]
  |  |  ------------------
  ------------------
 3616|  13.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  13.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 13.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|  13.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  13.6k|                    parse_integer_digits_without_thsep(
 3618|  13.6k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  13.6k|                        prefix_result.parsed_base));
 3620|       |
 3621|  13.6k|            auto buf = make_contiguous_buffer(
 3622|  13.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  13.6k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  13.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.4k, False: 218]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.4k|    }                                                  \
  |  |  |  | 3939|  13.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    218|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|    218|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|    218|                                        prefix_result.parsed_base));
 3626|       |
 3627|    218|            return ranges::next(
 3628|    218|                prefix_result.iterator,
 3629|    218|                ranges::distance(buf.view().begin(), result_it));
 3630|  13.6k|        }
 3631|       |
 3632|  4.32k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  4.32k|            localized_number_formatting_options<CharT>{loc};
 3637|  4.32k|#endif
 3638|       |
 3639|  4.32k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  4.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.65k, False: 1.67k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.65k|    }                                                  \
  |  |  |  | 3939|  4.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  1.67k|                parse_integer_digits_with_thsep(
 3641|  1.67k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  1.67k|                    prefix_result.parsed_base, locale_options));
 3643|  1.67k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  1.67k|            parse_digits_result;
 3645|       |
 3646|  1.67k|        auto nothsep_source_view =
 3647|  1.67k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  1.67k|        SCN_TRY(
  ------------------
  |  | 3940|  1.67k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.67k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.67k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 22, False: 1.64k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     22|    }                                                  \
  |  |  |  | 3939|  1.67k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  1.64k|            nothsep_source_it,
 3650|  1.64k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  1.64k|                                prefix_result.parsed_base));
 3652|       |
 3653|  1.64k|        return ranges::next(
 3654|  1.64k|            prefix_result.iterator,
 3655|  1.64k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  1.64k|                ranges::ssize(thsep_indices));
 3657|  1.67k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIjEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6225|  18.2k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|       |                          basic_contiguous_scan_context<char_type>>) {
 6230|       |            auto rd = make_reader<T, char_type>();
 6231|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6232|       |            return impl(rd, range, value);
 6233|       |        }
 6234|  18.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 6235|  18.2k|            auto rd = make_reader<T, char_type>();
 6236|  18.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  18.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6237|       |
 6238|  18.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6238:17): [True: 18.2k, False: 0]
  |  Branch (6238:50): [True: 0, False: 0]
  ------------------
 6239|  18.2k|                specs.width != 0) {
  ------------------
  |  Branch (6239:17): [True: 0, False: 0]
  ------------------
 6240|  18.2k|                return impl(rd, range, value);
 6241|  18.2k|            }
 6242|       |
 6243|      0|            auto crange = get_as_contiguous(range);
 6244|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6245|      0|            return ranges::next(range.begin(),
 6246|      0|                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  18.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6160|  18.2k|    {
 6161|  18.2k|        const bool need_skipped_width =
 6162|  18.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 18.2k]
  |  Branch (6162:33): [True: 0, False: 18.2k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|  18.2k|        auto it = rng.begin();
 6166|  18.2k|        std::ptrdiff_t prefix_width = 0;
 6167|  18.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 18.2k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|  18.2k|        else {
 6175|  18.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  18.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 222, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    222|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    222|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    222|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    222|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    222|    }                                                  \
  |  |  |  | 3939|  18.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|  18.0k|            std::tie(it, prefix_width) = prefix_result;
 6177|  18.0k|        }
 6178|  18.0k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|  18.0k|        std::ptrdiff_t value_width = 0;
 6182|  18.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 18.0k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|  18.0k|        else {
 6198|  18.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.3k, False: 1.73k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.3k|    }                                                  \
  |  | 3939|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|  1.73k|                                             specs, value, loc));
 6200|       |
 6201|  1.73k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 1.73k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|  1.73k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|  1.73k|        std::ptrdiff_t postfix_width = 0;
 6210|  1.73k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 1.66k, False: 74]
  ------------------
 6211|  1.66k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  1.66k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.66k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.66k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.66k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.66k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|  1.66k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|  1.66k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|  1.66k|                                 value_width));
 6215|  1.66k|            std::tie(it, postfix_width) = postfix_result;
 6216|  1.66k|        }
 6217|       |
 6218|  1.73k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  1.73k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.73k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|  1.73k|            specs, prefix_width, value_width, postfix_width));
 6220|  1.73k|        return it;
 6221|  1.73k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3589|  18.0k|    {
 3590|  18.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  18.0k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  18.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 212, False: 17.8k]
  ------------------
 3594|    212|            if constexpr (!std::is_signed_v<T>) {
 3595|    212|                return detail::unexpected_scan_error(
 3596|    212|                    scan_error::invalid_scanned_value,
 3597|    212|                    "Unexpected '-' sign when parsing an "
 3598|    212|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|    212|        }
 3609|       |
 3610|  18.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 36, False: 18.0k]
  ------------------
 3611|     36|            value = T{0};
 3612|     36|            return std::next(prefix_result.iterator);
 3613|     36|        }
 3614|       |
 3615|  18.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  18.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 13.7k, False: 4.33k]
  |  |  ------------------
  ------------------
 3616|  13.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.4k, False: 294]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.4k|    }                                                  \
  |  |  |  | 3939|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    294|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    294|                    parse_integer_digits_without_thsep(
 3618|    294|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    294|                        prefix_result.parsed_base));
 3620|       |
 3621|    294|            auto buf = make_contiguous_buffer(
 3622|    294|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    294|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    294|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    294|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    294|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    294|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 42, False: 252]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     42|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     42|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     42|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     42|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     42|    }                                                  \
  |  |  |  | 3939|    294|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    252|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|    252|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|    252|                                        prefix_result.parsed_base));
 3626|       |
 3627|    252|            return ranges::next(
 3628|    252|                prefix_result.iterator,
 3629|    252|                ranges::distance(buf.view().begin(), result_it));
 3630|    294|        }
 3631|       |
 3632|  4.33k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  4.33k|            localized_number_formatting_options<CharT>{loc};
 3637|  4.33k|#endif
 3638|       |
 3639|  4.33k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  4.33k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.66k, False: 1.67k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.66k|    }                                                  \
  |  |  |  | 3939|  4.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  1.67k|                parse_integer_digits_with_thsep(
 3641|  1.67k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  1.67k|                    prefix_result.parsed_base, locale_options));
 3643|  1.67k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  1.67k|            parse_digits_result;
 3645|       |
 3646|  1.67k|        auto nothsep_source_view =
 3647|  1.67k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  1.67k|        SCN_TRY(
  ------------------
  |  | 3940|  1.67k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.67k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.67k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 1.66k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|  1.67k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  1.66k|            nothsep_source_it,
 3650|  1.66k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  1.66k|                                prefix_result.parsed_base));
 3652|       |
 3653|  1.66k|        return ranges::next(
 3654|  1.66k|            prefix_result.iterator,
 3655|  1.66k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  1.66k|                ranges::ssize(thsep_indices));
 3657|  1.67k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|  18.0k|    {
 3590|  18.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  18.0k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  18.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 212, False: 17.8k]
  ------------------
 3594|    212|            if constexpr (!std::is_signed_v<T>) {
 3595|    212|                return detail::unexpected_scan_error(
 3596|    212|                    scan_error::invalid_scanned_value,
 3597|    212|                    "Unexpected '-' sign when parsing an "
 3598|    212|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|    212|        }
 3609|       |
 3610|  18.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 36, False: 18.0k]
  ------------------
 3611|     36|            value = T{0};
 3612|     36|            return std::next(prefix_result.iterator);
 3613|     36|        }
 3614|       |
 3615|  18.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  18.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 13.7k, False: 4.33k]
  |  |  ------------------
  ------------------
 3616|  13.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 13.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  13.6k|                    parse_integer_digits_without_thsep(
 3618|  13.6k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  13.6k|                        prefix_result.parsed_base));
 3620|       |
 3621|  13.6k|            auto buf = make_contiguous_buffer(
 3622|  13.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  13.6k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  13.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.4k, False: 252]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.4k|    }                                                  \
  |  |  |  | 3939|  13.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    252|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|    252|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|    252|                                        prefix_result.parsed_base));
 3626|       |
 3627|    252|            return ranges::next(
 3628|    252|                prefix_result.iterator,
 3629|    252|                ranges::distance(buf.view().begin(), result_it));
 3630|  13.6k|        }
 3631|       |
 3632|  4.33k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  4.33k|            localized_number_formatting_options<CharT>{loc};
 3637|  4.33k|#endif
 3638|       |
 3639|  4.33k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  4.33k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.66k, False: 1.67k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.66k|    }                                                  \
  |  |  |  | 3939|  4.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  1.67k|                parse_integer_digits_with_thsep(
 3641|  1.67k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  1.67k|                    prefix_result.parsed_base, locale_options));
 3643|  1.67k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  1.67k|            parse_digits_result;
 3645|       |
 3646|  1.67k|        auto nothsep_source_view =
 3647|  1.67k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  1.67k|        SCN_TRY(
  ------------------
  |  | 3940|  1.67k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.67k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.67k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 1.66k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|  1.67k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  1.66k|            nothsep_source_it,
 3650|  1.66k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  1.66k|                                prefix_result.parsed_base));
 3652|       |
 3653|  1.66k|        return ranges::next(
 3654|  1.66k|            prefix_result.iterator,
 3655|  1.66k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  1.66k|                ranges::ssize(thsep_indices));
 3657|  1.67k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIyEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6225|  18.3k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|       |                          basic_contiguous_scan_context<char_type>>) {
 6230|       |            auto rd = make_reader<T, char_type>();
 6231|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6232|       |            return impl(rd, range, value);
 6233|       |        }
 6234|  18.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6235|  18.3k|            auto rd = make_reader<T, char_type>();
 6236|  18.3k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  18.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6237|       |
 6238|  18.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6238:17): [True: 18.3k, False: 0]
  |  Branch (6238:50): [True: 0, False: 0]
  ------------------
 6239|  18.3k|                specs.width != 0) {
  ------------------
  |  Branch (6239:17): [True: 0, False: 0]
  ------------------
 6240|  18.3k|                return impl(rd, range, value);
 6241|  18.3k|            }
 6242|       |
 6243|      0|            auto crange = get_as_contiguous(range);
 6244|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6245|      0|            return ranges::next(range.begin(),
 6246|      0|                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  18.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6160|  18.3k|    {
 6161|  18.3k|        const bool need_skipped_width =
 6162|  18.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 18.3k]
  |  Branch (6162:33): [True: 0, False: 18.3k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|  18.3k|        auto it = rng.begin();
 6166|  18.3k|        std::ptrdiff_t prefix_width = 0;
 6167|  18.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 18.3k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|  18.3k|        else {
 6175|  18.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  18.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 222, False: 18.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    222|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    222|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    222|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    222|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    222|    }                                                  \
  |  |  |  | 3939|  18.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|  18.1k|            std::tie(it, prefix_width) = prefix_result;
 6177|  18.1k|        }
 6178|  18.1k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|  18.1k|        std::ptrdiff_t value_width = 0;
 6182|  18.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 18.1k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|  18.1k|        else {
 6198|  18.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.3k, False: 1.80k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.3k|    }                                                  \
  |  | 3939|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|  1.80k|                                             specs, value, loc));
 6200|       |
 6201|  1.80k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 1.80k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|  1.80k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|  1.80k|        std::ptrdiff_t postfix_width = 0;
 6210|  1.80k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 1.72k, False: 74]
  ------------------
 6211|  1.72k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  1.72k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.72k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.72k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.72k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.72k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.72k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|  1.72k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|  1.72k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|  1.72k|                                 value_width));
 6215|  1.72k|            std::tie(it, postfix_width) = postfix_result;
 6216|  1.72k|        }
 6217|       |
 6218|  1.80k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  1.80k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.80k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|  1.80k|            specs, prefix_width, value_width, postfix_width));
 6220|  1.80k|        return it;
 6221|  1.80k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3589|  18.1k|    {
 3590|  18.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  18.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  18.1k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  18.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 228, False: 17.9k]
  ------------------
 3594|    228|            if constexpr (!std::is_signed_v<T>) {
 3595|    228|                return detail::unexpected_scan_error(
 3596|    228|                    scan_error::invalid_scanned_value,
 3597|    228|                    "Unexpected '-' sign when parsing an "
 3598|    228|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|    228|        }
 3609|       |
 3610|  18.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 36, False: 18.1k]
  ------------------
 3611|     36|            value = T{0};
 3612|     36|            return std::next(prefix_result.iterator);
 3613|     36|        }
 3614|       |
 3615|  18.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  18.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 13.7k, False: 4.36k]
  |  |  ------------------
  ------------------
 3616|  13.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.4k, False: 306]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.4k|    }                                                  \
  |  |  |  | 3939|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    306|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    306|                    parse_integer_digits_without_thsep(
 3618|    306|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    306|                        prefix_result.parsed_base));
 3620|       |
 3621|    306|            auto buf = make_contiguous_buffer(
 3622|    306|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    306|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    306|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    306|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    306|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    306|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4, False: 302]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      4|    }                                                  \
  |  |  |  | 3939|    306|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|    302|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|    302|                                        prefix_result.parsed_base));
 3626|       |
 3627|    302|            return ranges::next(
 3628|    302|                prefix_result.iterator,
 3629|    302|                ranges::distance(buf.view().begin(), result_it));
 3630|    306|        }
 3631|       |
 3632|  4.36k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  4.36k|            localized_number_formatting_options<CharT>{loc};
 3637|  4.36k|#endif
 3638|       |
 3639|  4.36k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  4.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.67k, False: 1.69k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.67k|    }                                                  \
  |  |  |  | 3939|  4.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  1.69k|                parse_integer_digits_with_thsep(
 3641|  1.69k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  1.69k|                    prefix_result.parsed_base, locale_options));
 3643|  1.69k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  1.69k|            parse_digits_result;
 3645|       |
 3646|  1.69k|        auto nothsep_source_view =
 3647|  1.69k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  1.69k|        SCN_TRY(
  ------------------
  |  | 3940|  1.69k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.69k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.69k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.69k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.69k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  1.69k|            nothsep_source_it,
 3650|  1.69k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  1.69k|                                prefix_result.parsed_base));
 3652|       |
 3653|  1.69k|        return ranges::next(
 3654|  1.69k|            prefix_result.iterator,
 3655|  1.69k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  1.69k|                ranges::ssize(thsep_indices));
 3657|  1.69k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|  18.1k|    {
 3590|  18.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  18.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  18.1k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  18.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 228, False: 17.9k]
  ------------------
 3594|    228|            if constexpr (!std::is_signed_v<T>) {
 3595|    228|                return detail::unexpected_scan_error(
 3596|    228|                    scan_error::invalid_scanned_value,
 3597|    228|                    "Unexpected '-' sign when parsing an "
 3598|    228|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|    228|        }
 3609|       |
 3610|  18.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 36, False: 18.1k]
  ------------------
 3611|     36|            value = T{0};
 3612|     36|            return std::next(prefix_result.iterator);
 3613|     36|        }
 3614|       |
 3615|  18.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  18.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 13.7k, False: 4.36k]
  |  |  ------------------
  ------------------
 3616|  13.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  13.7k|                    parse_integer_digits_without_thsep(
 3618|  13.7k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  13.7k|                        prefix_result.parsed_base));
 3620|       |
 3621|  13.7k|            auto buf = make_contiguous_buffer(
 3622|  13.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  13.7k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.4k, False: 302]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.4k|    }                                                  \
  |  |  |  | 3939|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|    302|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|    302|                                        prefix_result.parsed_base));
 3626|       |
 3627|    302|            return ranges::next(
 3628|    302|                prefix_result.iterator,
 3629|    302|                ranges::distance(buf.view().begin(), result_it));
 3630|  13.7k|        }
 3631|       |
 3632|  4.36k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  4.36k|            localized_number_formatting_options<CharT>{loc};
 3637|  4.36k|#endif
 3638|       |
 3639|  4.36k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  4.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.67k, False: 1.69k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.67k|    }                                                  \
  |  |  |  | 3939|  4.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  1.69k|                parse_integer_digits_with_thsep(
 3641|  1.69k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  1.69k|                    prefix_result.parsed_base, locale_options));
 3643|  1.69k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  1.69k|            parse_digits_result;
 3645|       |
 3646|  1.69k|        auto nothsep_source_view =
 3647|  1.69k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  1.69k|        SCN_TRY(
  ------------------
  |  | 3940|  1.69k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.69k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.69k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.69k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.69k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  1.69k|            nothsep_source_it,
 3650|  1.69k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  1.69k|                                prefix_result.parsed_base));
 3652|       |
 3653|  1.69k|        return ranges::next(
 3654|  1.69k|            prefix_result.iterator,
 3655|  1.69k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  1.69k|                ranges::ssize(thsep_indices));
 3657|  1.69k|    }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|   135k|{
 2160|   135k|    auto it = range.begin();
 2161|   137k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 136k, False: 1.65k]
  ------------------
 2162|   136k|        const auto val =
 2163|   136k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   136k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   136k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 136k, False: 0]
  |  |  ------------------
  ------------------
 2165|   136k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   136k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   136k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 133k, False: 2.37k]
  ------------------
 2168|   133k|                return it;
 2169|   133k|            }
 2170|   136k|        }
 2171|  2.37k|        it = val.iterator;
 2172|  2.37k|    }
 2173|       |
 2174|  1.65k|    return it;
 2175|   135k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|   136k|{
 1998|   136k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   136k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   136k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   136k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   136k|    auto it = range.begin();
 2002|   136k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   136k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 136k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|   136k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 136k, False: 0]
  ------------------
 2011|   136k|        ++it;
 2012|   136k|        return {it, string_type(1, *range.begin())};
 2013|   136k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|   136k|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1988|   136k|    {
 1989|   136k|        return !codepoint.empty();
 1990|   136k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|   135k|{
 2181|   135k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   135k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|   135k|{
 3066|   135k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 135k, False: 0]
  ------------------
 3067|   135k|        auto it = read_while_classic_space(range);
 3068|   135k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   135k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.65k, False: 133k]
  |  |  ------------------
  ------------------
 3070|  1.65k|            return unexpected(e);
 3071|  1.65k|        }
 3072|       |
 3073|   133k|        return it;
 3074|   135k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   135k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|   135k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   135k|    else {
 2225|   135k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|   135k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   135k|            return detail::is_cp_space(cp);
 2238|   135k|        });
 2239|   135k|    }
 2240|   135k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   135k|        : m_fptr([](storage fn,
  743|   135k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   135k|              cvref<T> obj = *get<T>(fn);
  745|   135k|              if constexpr (std::is_void_v<R>) {
  746|   135k|                  obj(static_cast<decltype(args)>(args)...);
  747|   135k|              }
  748|   135k|              else {
  749|   135k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   135k|              }
  751|   135k|          }),
  752|   135k|          m_storage(std::addressof(f))
  753|   135k|    {
  754|   135k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   136k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   136k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   136k|              else {
  749|   136k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   136k|              }
  751|   136k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   136k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   136k|        else if constexpr (std::is_object_v<T>) {
  688|   136k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   136k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|   136k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   136k|            return detail::is_cp_space(cp);
 2238|   136k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   135k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   135k|        {
  662|   135k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIaEENS0_13scan_expectedIS9_EERT_:
 5910|  16.0k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  16.0k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  16.0k|            auto rd = make_reader<T, char_type>();
 5916|  16.0k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  16.0k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_aEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  16.0k|    {
 5903|  16.0k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  16.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  16.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  16.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  16.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 393, False: 15.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    393|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    393|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    393|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    393|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    393|    }                                                  \
  |  |  |  | 3939|  16.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  15.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  15.6k|                        .transform_error(make_eof_scan_error));
 5905|  15.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  16.0k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5834|  96.2k|{
 5835|  96.2k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  96.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.86k, False: 94.3k]
  |  |  ------------------
  ------------------
 5836|  1.86k|        return unexpected(e);
 5837|  1.86k|    }
 5838|       |
 5839|  94.3k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 94.3k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|  94.3k|    return skip_classic_whitespace(range);
 5844|  94.3k|}
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  15.6k|    {
 3579|  15.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  15.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  15.6k|        return read_default_with_base(range, value, 10);
 3581|  15.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIiEENS0_13scan_expectedIS9_EERT_:
 5910|  18.4k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  18.4k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  18.4k|            auto rd = make_reader<T, char_type>();
 5916|  18.4k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  18.4k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  18.4k|    {
 5903|  18.4k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  18.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 507, False: 17.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    507|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    507|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    507|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    507|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    507|    }                                                  \
  |  |  |  | 3939|  18.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  17.9k|                        .transform_error(make_eof_scan_error));
 5905|  17.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  18.4k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  17.9k|    {
 3579|  17.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  17.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  17.9k|        return read_default_with_base(range, value, 10);
 3581|  17.9k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIxEENS0_13scan_expectedIS9_EERT_:
 5910|  18.8k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  18.8k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  18.8k|            auto rd = make_reader<T, char_type>();
 5916|  18.8k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  18.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_xEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  18.8k|    {
 5903|  18.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  18.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 555, False: 18.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    555|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    555|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    555|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    555|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    555|    }                                                  \
  |  |  |  | 3939|  18.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  18.2k|                        .transform_error(make_eof_scan_error));
 5905|  18.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  18.8k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  18.2k|    {
 3579|  18.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  18.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  18.2k|        return read_default_with_base(range, value, 10);
 3581|  18.2k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIhEENS0_13scan_expectedIS9_EERT_:
 5910|  13.3k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  13.3k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  13.3k|            auto rd = make_reader<T, char_type>();
 5916|  13.3k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  13.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_hEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  13.3k|    {
 5903|  13.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  13.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 279, False: 13.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    279|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    279|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    279|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    279|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    279|    }                                                  \
  |  |  |  | 3939|  13.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  13.0k|                        .transform_error(make_eof_scan_error));
 5905|  13.0k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  13.3k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  13.0k|    {
 3579|  13.0k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  13.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  13.0k|        return read_default_with_base(range, value, 10);
 3581|  13.0k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIjEENS0_13scan_expectedIS9_EERT_:
 5910|  14.6k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  14.6k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  14.6k|            auto rd = make_reader<T, char_type>();
 5916|  14.6k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  14.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  14.6k|    {
 5903|  14.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  14.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 342, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    342|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    342|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    342|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    342|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    342|    }                                                  \
  |  |  |  | 3939|  14.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  14.3k|                        .transform_error(make_eof_scan_error));
 5905|  14.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  14.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  14.3k|    {
 3579|  14.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  14.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  14.3k|        return read_default_with_base(range, value, 10);
 3581|  14.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIyEENS0_13scan_expectedIS9_EERT_:
 5910|  14.8k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  14.8k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  14.8k|            auto rd = make_reader<T, char_type>();
 5916|  14.8k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  14.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_yEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  14.8k|    {
 5903|  14.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  14.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 369, False: 14.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    369|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    369|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    369|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    369|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    369|    }                                                  \
  |  |  |  | 3939|  14.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  14.4k|                        .transform_error(make_eof_scan_error));
 5905|  14.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  14.8k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  14.4k|    {
 3579|  14.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  14.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  14.4k|        return read_default_with_base(range, value, 10);
 3581|  14.4k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIaEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5910|  15.9k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  15.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  15.9k|            auto rd = make_reader<T, char_type>();
 5920|  15.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 15.9k, False: 0]
  ------------------
 5921|  15.9k|                return impl(rd, range, value);
 5922|  15.9k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  15.9k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  15.9k|    {
 5903|  15.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  15.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  15.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  15.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  15.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 375, False: 15.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    375|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    375|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    375|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    375|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    375|    }                                                  \
  |  |  |  | 3939|  15.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  15.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  15.6k|                        .transform_error(make_eof_scan_error));
 5905|  15.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  15.9k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5834|  94.9k|{
 5835|  94.9k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  94.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.86k, False: 93.0k]
  |  |  ------------------
  ------------------
 5836|  1.86k|        return unexpected(e);
 5837|  1.86k|    }
 5838|       |
 5839|  93.0k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 93.0k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|  93.0k|    return skip_classic_whitespace(range);
 5844|  93.0k|}
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3578|  15.6k|    {
 3579|  15.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  15.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  15.6k|        return read_default_with_base(range, value, 10);
 3581|  15.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3542|  15.6k|    {
 3543|  15.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  15.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  15.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  15.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 15.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  15.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  15.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  15.6k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|  15.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 15.6k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  30.1k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  15.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  15.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  15.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.11k, False: 14.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.11k|    }                                                  \
  |  |  |  | 3939|  15.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  30.1k|                parse_integer_digits_without_thsep(
 3562|  30.1k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  30.1k|                    prefix_result.parsed_base));
 3564|       |
 3565|  30.1k|        auto buf = make_contiguous_buffer(
 3566|  30.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  30.1k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 576, False: 13.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    576|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    576|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    576|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    576|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    576|    }                                                  \
  |  |  |  | 3939|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|  13.9k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|  13.9k|                                    prefix_result.parsed_base));
 3570|       |
 3571|  13.9k|        return ranges::next(prefix_result.iterator,
 3572|  13.9k|                            ranges::distance(buf.view().begin(), result_it));
 3573|  30.1k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIiEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5910|  17.9k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  17.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  17.9k|            auto rd = make_reader<T, char_type>();
 5920|  17.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 17.9k, False: 0]
  ------------------
 5921|  17.9k|                return impl(rd, range, value);
 5922|  17.9k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  17.9k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  17.9k|    {
 5903|  17.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  17.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 480, False: 17.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    480|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    480|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    480|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    480|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    480|    }                                                  \
  |  |  |  | 3939|  17.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  17.4k|                        .transform_error(make_eof_scan_error));
 5905|  17.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  17.9k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3578|  17.4k|    {
 3579|  17.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  17.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  17.4k|        return read_default_with_base(range, value, 10);
 3581|  17.4k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3542|  17.4k|    {
 3543|  17.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  17.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  17.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  17.4k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|  17.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 17.4k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  33.5k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  17.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.30k, False: 16.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.30k|    }                                                  \
  |  |  |  | 3939|  17.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  33.5k|                parse_integer_digits_without_thsep(
 3562|  33.5k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  33.5k|                    prefix_result.parsed_base));
 3564|       |
 3565|  33.5k|        auto buf = make_contiguous_buffer(
 3566|  33.5k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  33.5k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  16.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  16.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  16.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  16.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 288, False: 15.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    288|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    288|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    288|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    288|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    288|    }                                                  \
  |  |  |  | 3939|  16.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  15.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|  15.8k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|  15.8k|                                    prefix_result.parsed_base));
 3570|       |
 3571|  15.8k|        return ranges::next(prefix_result.iterator,
 3572|  15.8k|                            ranges::distance(buf.view().begin(), result_it));
 3573|  33.5k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIxEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5910|  18.2k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  18.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  18.2k|            auto rd = make_reader<T, char_type>();
 5920|  18.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 18.2k, False: 0]
  ------------------
 5921|  18.2k|                return impl(rd, range, value);
 5922|  18.2k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  18.2k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  18.2k|    {
 5903|  18.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  18.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 525, False: 17.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    525|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    525|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    525|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    525|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    525|    }                                                  \
  |  |  |  | 3939|  18.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  17.6k|                        .transform_error(make_eof_scan_error));
 5905|  17.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  18.2k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3578|  17.6k|    {
 3579|  17.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  17.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  17.6k|        return read_default_with_base(range, value, 10);
 3581|  17.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3542|  17.6k|    {
 3543|  17.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  17.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  17.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  17.6k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|  17.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 17.6k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  34.0k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  17.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.37k, False: 16.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.37k|    }                                                  \
  |  |  |  | 3939|  17.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  34.0k|                parse_integer_digits_without_thsep(
 3562|  34.0k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  34.0k|                    prefix_result.parsed_base));
 3564|       |
 3565|  34.0k|        auto buf = make_contiguous_buffer(
 3566|  34.0k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  34.0k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  16.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  16.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  16.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  16.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 171, False: 16.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    171|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    171|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    171|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    171|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    171|    }                                                  \
  |  |  |  | 3939|  16.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|  16.1k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|  16.1k|                                    prefix_result.parsed_base));
 3570|       |
 3571|  16.1k|        return ranges::next(prefix_result.iterator,
 3572|  16.1k|                            ranges::distance(buf.view().begin(), result_it));
 3573|  34.0k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIhEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5910|  13.3k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  13.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  13.3k|            auto rd = make_reader<T, char_type>();
 5920|  13.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 13.3k, False: 0]
  ------------------
 5921|  13.3k|                return impl(rd, range, value);
 5922|  13.3k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  13.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  13.3k|    {
 5903|  13.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  13.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 267, False: 13.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    267|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    267|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    267|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    267|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    267|    }                                                  \
  |  |  |  | 3939|  13.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  13.0k|                        .transform_error(make_eof_scan_error));
 5905|  13.0k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  13.3k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3578|  13.0k|    {
 3579|  13.0k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  13.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  13.0k|        return read_default_with_base(range, value, 10);
 3581|  13.0k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3542|  13.0k|    {
 3543|  13.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  13.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 13.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  13.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  13.0k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  13.0k|        if constexpr (!std::is_signed_v<T>) {
 3547|  13.0k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 762, False: 12.3k]
  ------------------
 3548|    762|                return detail::unexpected_scan_error(
 3549|    762|                    scan_error::invalid_scanned_value,
 3550|    762|                    "Unexpected '-' sign when parsing an "
 3551|    762|                    "unsigned value");
 3552|    762|            }
 3553|  13.0k|        }
 3554|       |
 3555|  13.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 13.0k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  25.3k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  13.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 759, False: 12.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    759|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    759|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    759|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    759|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    759|    }                                                  \
  |  |  |  | 3939|  13.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  25.3k|                parse_integer_digits_without_thsep(
 3562|  25.3k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  25.3k|                    prefix_result.parsed_base));
 3564|       |
 3565|  25.3k|        auto buf = make_contiguous_buffer(
 3566|  25.3k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  25.3k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  12.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 282, False: 12.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    282|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    282|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    282|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    282|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    282|    }                                                  \
  |  |  |  | 3939|  12.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|  12.0k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|  12.0k|                                    prefix_result.parsed_base));
 3570|       |
 3571|  12.0k|        return ranges::next(prefix_result.iterator,
 3572|  12.0k|                            ranges::distance(buf.view().begin(), result_it));
 3573|  25.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIjEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5910|  14.6k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  14.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  14.6k|            auto rd = make_reader<T, char_type>();
 5920|  14.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 14.6k, False: 0]
  ------------------
 5921|  14.6k|                return impl(rd, range, value);
 5922|  14.6k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  14.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  14.6k|    {
 5903|  14.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  14.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 324, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    324|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    324|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    324|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    324|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    324|    }                                                  \
  |  |  |  | 3939|  14.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  14.3k|                        .transform_error(make_eof_scan_error));
 5905|  14.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  14.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3578|  14.3k|    {
 3579|  14.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  14.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  14.3k|        return read_default_with_base(range, value, 10);
 3581|  14.3k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3542|  14.3k|    {
 3543|  14.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  14.3k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  14.3k|        if constexpr (!std::is_signed_v<T>) {
 3547|  14.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 780, False: 13.5k]
  ------------------
 3548|    780|                return detail::unexpected_scan_error(
 3549|    780|                    scan_error::invalid_scanned_value,
 3550|    780|                    "Unexpected '-' sign when parsing an "
 3551|    780|                    "unsigned value");
 3552|    780|            }
 3553|  14.3k|        }
 3554|       |
 3555|  14.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 14.3k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  27.7k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 813, False: 13.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    813|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    813|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    813|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    813|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    813|    }                                                  \
  |  |  |  | 3939|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  27.7k|                parse_integer_digits_without_thsep(
 3562|  27.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  27.7k|                    prefix_result.parsed_base));
 3564|       |
 3565|  27.7k|        auto buf = make_contiguous_buffer(
 3566|  27.7k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  27.7k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  13.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 153, False: 13.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    153|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    153|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    153|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    153|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    153|    }                                                  \
  |  |  |  | 3939|  13.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|  13.3k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|  13.3k|                                    prefix_result.parsed_base));
 3570|       |
 3571|  13.3k|        return ranges::next(prefix_result.iterator,
 3572|  13.3k|                            ranges::distance(buf.view().begin(), result_it));
 3573|  27.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIyEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5910|  14.8k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  14.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  14.8k|            auto rd = make_reader<T, char_type>();
 5920|  14.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 14.8k, False: 0]
  ------------------
 5921|  14.8k|                return impl(rd, range, value);
 5922|  14.8k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  14.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  14.8k|    {
 5903|  14.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  14.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 351, False: 14.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    351|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    351|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    351|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    351|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    351|    }                                                  \
  |  |  |  | 3939|  14.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  14.4k|                        .transform_error(make_eof_scan_error));
 5905|  14.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  14.8k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3578|  14.4k|    {
 3579|  14.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  14.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  14.4k|        return read_default_with_base(range, value, 10);
 3581|  14.4k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3542|  14.4k|    {
 3543|  14.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  14.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 14.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  14.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  14.4k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  14.4k|        if constexpr (!std::is_signed_v<T>) {
 3547|  14.4k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 804, False: 13.6k]
  ------------------
 3548|    804|                return detail::unexpected_scan_error(
 3549|    804|                    scan_error::invalid_scanned_value,
 3550|    804|                    "Unexpected '-' sign when parsing an "
 3551|    804|                    "unsigned value");
 3552|    804|            }
 3553|  14.4k|        }
 3554|       |
 3555|  14.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 14.4k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  28.0k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  14.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 828, False: 13.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    828|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    828|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    828|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    828|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    828|    }                                                  \
  |  |  |  | 3939|  14.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  28.0k|                parse_integer_digits_without_thsep(
 3562|  28.0k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  28.0k|                    prefix_result.parsed_base));
 3564|       |
 3565|  28.0k|        auto buf = make_contiguous_buffer(
 3566|  28.0k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  28.0k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  13.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 87, False: 13.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     87|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     87|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     87|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     87|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     87|    }                                                  \
  |  |  |  | 3939|  13.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|  13.5k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|  13.5k|                                    prefix_result.parsed_base));
 3570|       |
 3571|  13.5k|        return ranges::next(prefix_result.iterator,
 3572|  13.5k|                            ranges::distance(buf.view().begin(), result_it));
 3573|  28.0k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 2985|   357k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|   357k|    static_cast<    \
  |  |  935|   357k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|   357k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|   357k|          m_current(m_range.begin())
 2988|   357k|    {
 2989|   357k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 2997|   615k|    {
 2998|   615k|        return m_range.end();
 2999|   615k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3012|   283k|    {
 3013|   283k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|   283k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   283k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|   283k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|   283k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 283k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|   283k|        }
 3019|   283k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   283k|    static_cast<    \
  |  |  935|   283k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|   283k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3002|   332k|    {
 3003|   332k|        return ranges::subrange{begin(), end()};
 3004|   332k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIaEENS0_13scan_expectedIS9_EERT_:
 6225|  53.6k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  53.6k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  53.6k|            auto rd = make_reader<T, char_type>();
 6231|  53.6k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  53.6k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  53.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 53.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6232|  53.6k|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  53.6k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_aEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6160|  53.6k|    {
 6161|  53.6k|        const bool need_skipped_width =
 6162|  53.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 53.6k]
  |  Branch (6162:33): [True: 0, False: 53.6k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|  53.6k|        auto it = rng.begin();
 6166|  53.6k|        std::ptrdiff_t prefix_width = 0;
 6167|  53.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 53.6k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|  53.6k|        else {
 6175|  53.6k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  53.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  53.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  53.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  53.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.35k, False: 52.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.35k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.35k|    }                                                  \
  |  |  |  | 3939|  53.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  52.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|  52.2k|            std::tie(it, prefix_width) = prefix_result;
 6177|  52.2k|        }
 6178|  52.2k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|  52.2k|        std::ptrdiff_t value_width = 0;
 6182|  52.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 52.2k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|  52.2k|        else {
 6198|  52.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  52.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  52.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  52.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.92k, False: 45.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.92k|    }                                                  \
  |  | 3939|  52.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  52.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|  45.3k|                                             specs, value, loc));
 6200|       |
 6201|  45.3k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 45.3k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|  45.3k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|  45.3k|        std::ptrdiff_t postfix_width = 0;
 6210|  45.3k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 44.3k, False: 1.01k]
  ------------------
 6211|  44.3k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  44.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  44.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  44.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  44.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 44.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  44.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  44.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|  44.3k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|  44.3k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|  44.3k|                                 value_width));
 6215|  44.3k|            std::tie(it, postfix_width) = postfix_result;
 6216|  44.3k|        }
 6217|       |
 6218|  45.3k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  45.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  45.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 45.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|  45.3k|            specs, prefix_width, value_width, postfix_width));
 6220|  45.3k|        return it;
 6221|  45.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6073|   332k|    {
 6074|   332k|        const bool need_skipped_width =
 6075|   332k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6075:13): [True: 0, False: 332k]
  |  Branch (6075:33): [True: 0, False: 332k]
  ------------------
 6076|   332k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6077|       |
 6078|       |        // Read prefix
 6079|   332k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6079:13): [True: 0, False: 332k]
  ------------------
 6080|   332k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6080:13): [True: 0, False: 332k]
  ------------------
 6081|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6082|      0|                             need_skipped_width);
 6083|      0|        }
 6084|   332k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6084:13): [True: 332k, False: 0]
  |  Branch (6084:56): [True: 332k, False: 0]
  ------------------
 6085|       |            // Default alignment:
 6086|       |            // Skip preceding whitespace, if required by the reader
 6087|   332k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6087:17): [True: 0, False: 332k]
  ------------------
 6088|      0|                auto max_width_view = take_width(rng, specs.precision);
 6089|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6090|      0|                                  .transform_error(make_eof_scan_error));
 6091|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6092|      0|            }
 6093|   656k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   332k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   332k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   332k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   332k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 8.77k, False: 323k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  8.77k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  8.77k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  8.77k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  8.77k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  8.77k|    }                                                  \
  |  |  |  | 3939|   332k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   323k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6094|   656k|                            make_eof_scan_error));
 6095|       |
 6096|   656k|            if (need_skipped_width) {
  ------------------
  |  Branch (6096:17): [True: 0, False: 323k]
  ------------------
 6097|      0|                return result_type{
 6098|      0|                    it,
 6099|      0|                    calculate_text_width(make_contiguous_buffer(
 6100|      0|                                             ranges::subrange{rng.begin(), it})
 6101|      0|                                             .view())};
 6102|      0|            }
 6103|   323k|            return result_type{it, 0};
 6104|   656k|        }
 6105|       |
 6106|      0|        return result_type{rng.begin(), 0};
 6107|   332k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6115|   276k|    {
 6116|   276k|        const bool need_skipped_width =
 6117|   276k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6117:13): [True: 0, False: 276k]
  |  Branch (6117:33): [True: 0, False: 276k]
  ------------------
 6118|   276k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6119|       |
 6120|   276k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6120:13): [True: 0, False: 276k]
  ------------------
 6121|   276k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6121:13): [True: 0, False: 276k]
  ------------------
 6122|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6122:17): [True: 0, False: 0]
  ------------------
 6123|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                return result_type{rng.begin(), 0};
 6125|      0|            }
 6126|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6127|      0|                             specs.fill, need_skipped_width);
 6128|      0|        }
 6129|   276k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6129:13): [True: 276k, False: 0]
  ------------------
 6130|   276k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6130:13): [True: 0, False: 276k]
  ------------------
 6131|   276k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6131:15): [True: 0, False: 0]
  |  Branch (6131:35): [True: 0, False: 0]
  ------------------
 6132|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6132:15): [True: 0, False: 0]
  ------------------
 6133|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6133:15): [True: 0, False: 0]
  ------------------
 6134|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6134:17): [True: 0, False: 0]
  ------------------
 6135|      0|                const auto initial_width =
 6136|      0|                    specs.precision - prefix_width - value_width;
 6137|      0|                auto max_width_view = take_width(rng, initial_width);
 6138|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|      0|                                  .transform_error(make_eof_scan_error));
 6140|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6141|      0|            }
 6142|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|                            make_eof_scan_error));
 6144|       |
 6145|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6145:17): [True: 0, False: 0]
  ------------------
 6146|      0|                return result_type{
 6147|      0|                    it,
 6148|      0|                    calculate_text_width(make_contiguous_buffer(
 6149|      0|                                             ranges::subrange{rng.begin(), it})
 6150|      0|                                             .view())};
 6151|      0|            }
 6152|      0|            return result_type{it, 0};
 6153|      0|        }
 6154|   276k|        return result_type{rng.begin(), 0};
 6155|   276k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6225|  63.6k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  63.6k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  63.6k|            auto rd = make_reader<T, char_type>();
 6231|  63.6k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  63.6k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  63.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 63.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6232|  63.6k|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  63.6k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6160|  63.6k|    {
 6161|  63.6k|        const bool need_skipped_width =
 6162|  63.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 63.6k]
  |  Branch (6162:33): [True: 0, False: 63.6k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|  63.6k|        auto it = rng.begin();
 6166|  63.6k|        std::ptrdiff_t prefix_width = 0;
 6167|  63.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 63.6k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|  63.6k|        else {
 6175|  63.6k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  63.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  63.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  63.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  63.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.79k, False: 61.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.79k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.79k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.79k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.79k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.79k|    }                                                  \
  |  |  |  | 3939|  63.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  61.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|  61.8k|            std::tie(it, prefix_width) = prefix_result;
 6177|  61.8k|        }
 6178|  61.8k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|  61.8k|        std::ptrdiff_t value_width = 0;
 6182|  61.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 61.8k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|  61.8k|        else {
 6198|  61.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  61.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  61.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  61.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.48k, False: 55.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.48k|    }                                                  \
  |  | 3939|  61.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  61.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|  55.3k|                                             specs, value, loc));
 6200|       |
 6201|  55.3k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 55.3k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|  55.3k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|  55.3k|        std::ptrdiff_t postfix_width = 0;
 6210|  55.3k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 53.9k, False: 1.35k]
  ------------------
 6211|  53.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  53.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  53.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  53.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  53.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 53.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  53.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  53.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|  53.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|  53.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|  53.9k|                                 value_width));
 6215|  53.9k|            std::tie(it, postfix_width) = postfix_result;
 6216|  53.9k|        }
 6217|       |
 6218|  55.3k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  55.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  55.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 55.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|  55.3k|            specs, prefix_width, value_width, postfix_width));
 6220|  55.3k|        return it;
 6221|  55.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIxEENS0_13scan_expectedIS9_EERT_:
 6225|  64.7k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  64.7k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  64.7k|            auto rd = make_reader<T, char_type>();
 6231|  64.7k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  64.7k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  64.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 64.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6232|  64.7k|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  64.7k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_xEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6160|  64.7k|    {
 6161|  64.7k|        const bool need_skipped_width =
 6162|  64.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 64.7k]
  |  Branch (6162:33): [True: 0, False: 64.7k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|  64.7k|        auto it = rng.begin();
 6166|  64.7k|        std::ptrdiff_t prefix_width = 0;
 6167|  64.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 64.7k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|  64.7k|        else {
 6175|  64.7k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  64.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  64.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  64.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  64.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.99k, False: 62.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.99k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.99k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.99k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.99k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.99k|    }                                                  \
  |  |  |  | 3939|  64.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  62.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|  62.7k|            std::tie(it, prefix_width) = prefix_result;
 6177|  62.7k|        }
 6178|  62.7k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|  62.7k|        std::ptrdiff_t value_width = 0;
 6182|  62.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 62.7k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|  62.7k|        else {
 6198|  62.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  62.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  62.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  62.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.28k, False: 56.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.28k|    }                                                  \
  |  | 3939|  62.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  62.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|  56.4k|                                             specs, value, loc));
 6200|       |
 6201|  56.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 56.4k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|  56.4k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|  56.4k|        std::ptrdiff_t postfix_width = 0;
 6210|  56.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 54.9k, False: 1.51k]
  ------------------
 6211|  54.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  54.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  54.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  54.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  54.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 54.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  54.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  54.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|  54.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|  54.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|  54.9k|                                 value_width));
 6215|  54.9k|            std::tie(it, postfix_width) = postfix_result;
 6216|  54.9k|        }
 6217|       |
 6218|  56.4k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  56.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  56.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 56.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|  56.4k|            specs, prefix_width, value_width, postfix_width));
 6220|  56.4k|        return it;
 6221|  56.4k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIhEENS0_13scan_expectedIS9_EERT_:
 6225|  47.2k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  47.2k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  47.2k|            auto rd = make_reader<T, char_type>();
 6231|  47.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  47.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  47.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 47.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6232|  47.2k|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  47.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_hEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6160|  47.2k|    {
 6161|  47.2k|        const bool need_skipped_width =
 6162|  47.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 47.2k]
  |  Branch (6162:33): [True: 0, False: 47.2k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|  47.2k|        auto it = rng.begin();
 6166|  47.2k|        std::ptrdiff_t prefix_width = 0;
 6167|  47.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 47.2k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|  47.2k|        else {
 6175|  47.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  47.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  47.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  47.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  47.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.02k, False: 46.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.02k|    }                                                  \
  |  |  |  | 3939|  47.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  46.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|  46.2k|            std::tie(it, prefix_width) = prefix_result;
 6177|  46.2k|        }
 6178|  46.2k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|  46.2k|        std::ptrdiff_t value_width = 0;
 6182|  46.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 46.2k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|  46.2k|        else {
 6198|  46.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  46.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  46.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  46.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 7.25k, False: 38.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  7.25k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  7.25k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  7.25k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  7.25k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  7.25k|    }                                                  \
  |  | 3939|  46.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  46.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|  38.9k|                                             specs, value, loc));
 6200|       |
 6201|  38.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 38.9k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|  38.9k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|  38.9k|        std::ptrdiff_t postfix_width = 0;
 6210|  38.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 38.2k, False: 762]
  ------------------
 6211|  38.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  38.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  38.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  38.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  38.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 38.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  38.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  38.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|  38.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|  38.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|  38.2k|                                 value_width));
 6215|  38.2k|            std::tie(it, postfix_width) = postfix_result;
 6216|  38.2k|        }
 6217|       |
 6218|  38.9k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  38.9k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  38.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 38.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|  38.9k|            specs, prefix_width, value_width, postfix_width));
 6220|  38.9k|        return it;
 6221|  38.9k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6225|  51.4k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  51.4k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  51.4k|            auto rd = make_reader<T, char_type>();
 6231|  51.4k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  51.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  51.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 51.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6232|  51.4k|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  51.4k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6160|  51.4k|    {
 6161|  51.4k|        const bool need_skipped_width =
 6162|  51.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 51.4k]
  |  Branch (6162:33): [True: 0, False: 51.4k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|  51.4k|        auto it = rng.begin();
 6166|  51.4k|        std::ptrdiff_t prefix_width = 0;
 6167|  51.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 51.4k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|  51.4k|        else {
 6175|  51.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  51.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  51.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  51.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  51.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.24k, False: 50.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.24k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.24k|    }                                                  \
  |  |  |  | 3939|  51.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|  50.1k|            std::tie(it, prefix_width) = prefix_result;
 6177|  50.1k|        }
 6178|  50.1k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|  50.1k|        std::ptrdiff_t value_width = 0;
 6182|  50.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 50.1k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|  50.1k|        else {
 6198|  50.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  50.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  50.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 7.03k, False: 43.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  7.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  7.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  7.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  7.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  7.03k|    }                                                  \
  |  | 3939|  50.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|  43.1k|                                             specs, value, loc));
 6200|       |
 6201|  43.1k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 43.1k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|  43.1k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|  43.1k|        std::ptrdiff_t postfix_width = 0;
 6210|  43.1k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 42.2k, False: 928]
  ------------------
 6211|  42.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  42.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  42.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  42.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  42.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 42.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  42.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  42.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|  42.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|  42.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|  42.2k|                                 value_width));
 6215|  42.2k|            std::tie(it, postfix_width) = postfix_result;
 6216|  42.2k|        }
 6217|       |
 6218|  43.1k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  43.1k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  43.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 43.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|  43.1k|            specs, prefix_width, value_width, postfix_width));
 6220|  43.1k|        return it;
 6221|  43.1k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIyEENS0_13scan_expectedIS9_EERT_:
 6225|  52.0k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  52.0k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  52.0k|            auto rd = make_reader<T, char_type>();
 6231|  52.0k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  52.0k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  52.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 52.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6232|  52.0k|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  52.0k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_yEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6160|  52.0k|    {
 6161|  52.0k|        const bool need_skipped_width =
 6162|  52.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 52.0k]
  |  Branch (6162:33): [True: 0, False: 52.0k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|  52.0k|        auto it = rng.begin();
 6166|  52.0k|        std::ptrdiff_t prefix_width = 0;
 6167|  52.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 52.0k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|  52.0k|        else {
 6175|  52.0k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  52.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  52.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  52.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  52.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.35k, False: 50.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.35k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.35k|    }                                                  \
  |  |  |  | 3939|  52.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|  50.6k|            std::tie(it, prefix_width) = prefix_result;
 6177|  50.6k|        }
 6178|  50.6k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|  50.6k|        std::ptrdiff_t value_width = 0;
 6182|  50.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 50.6k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|  50.6k|        else {
 6198|  50.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  50.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  50.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  50.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.92k, False: 43.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.92k|    }                                                  \
  |  | 3939|  50.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  50.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|  43.7k|                                             specs, value, loc));
 6200|       |
 6201|  43.7k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 43.7k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|  43.7k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|  43.7k|        std::ptrdiff_t postfix_width = 0;
 6210|  43.7k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 42.6k, False: 1.03k]
  ------------------
 6211|  42.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  42.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  42.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  42.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  42.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 42.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  42.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  42.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|  42.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|  42.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|  42.6k|                                 value_width));
 6215|  42.6k|            std::tie(it, postfix_width) = postfix_result;
 6216|  42.6k|        }
 6217|       |
 6218|  43.7k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  43.7k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  43.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 43.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|  43.7k|            specs, prefix_width, value_width, postfix_width));
 6220|  43.7k|        return it;
 6221|  43.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIaEENS0_13scan_expectedIS9_EERT_:
 5910|  4.24k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  4.24k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  4.24k|            auto rd = make_reader<T, char_type>();
 5916|  4.24k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  4.24k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_aEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  4.24k|    {
 5903|  4.24k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.24k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.24k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.24k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 60, False: 4.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     60|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     60|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     60|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     60|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     60|    }                                                  \
  |  |  |  | 3939|  4.24k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  4.18k|                        .transform_error(make_eof_scan_error));
 5905|  4.18k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  4.24k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5834|  25.5k|{
 5835|  25.5k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  25.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 123, False: 25.4k]
  |  |  ------------------
  ------------------
 5836|    123|        return unexpected(e);
 5837|    123|    }
 5838|       |
 5839|  25.4k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 25.4k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|  25.4k|    return skip_classic_whitespace(range);
 5844|  25.4k|}
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  4.18k|    {
 3579|  4.18k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.18k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  4.18k|        return read_default_with_base(range, value, 10);
 3581|  4.18k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  4.18k|    {
 3543|  4.18k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  4.18k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|  4.18k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 4.18k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  8.35k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 9, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      9|    }                                                  \
  |  |  |  | 3939|  4.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  8.35k|                parse_integer_digits_without_thsep(
 3562|  8.35k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  8.35k|                    prefix_result.parsed_base));
 3564|       |
 3565|  8.35k|        auto buf = make_contiguous_buffer(
 3566|  8.35k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  8.35k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.07k, False: 102]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.07k|    }                                                  \
  |  |  |  | 3939|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    102|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|    102|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|    102|                                    prefix_result.parsed_base));
 3570|       |
 3571|    102|        return ranges::next(prefix_result.iterator,
 3572|    102|                            ranges::distance(buf.view().begin(), result_it));
 3573|  8.35k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIiEENS0_13scan_expectedIS9_EERT_:
 5910|  4.27k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  4.27k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  4.27k|            auto rd = make_reader<T, char_type>();
 5916|  4.27k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  4.27k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  4.27k|    {
 5903|  4.27k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.27k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.27k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.27k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 63, False: 4.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     63|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     63|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     63|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     63|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     63|    }                                                  \
  |  |  |  | 3939|  4.27k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  4.20k|                        .transform_error(make_eof_scan_error));
 5905|  4.20k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  4.27k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  4.20k|    {
 3579|  4.20k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.20k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  4.20k|        return read_default_with_base(range, value, 10);
 3581|  4.20k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  4.20k|    {
 3543|  4.20k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  4.20k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|  4.20k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 4.20k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  8.40k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 9, False: 4.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      9|    }                                                  \
  |  |  |  | 3939|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  8.40k|                parse_integer_digits_without_thsep(
 3562|  8.40k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  8.40k|                    prefix_result.parsed_base));
 3564|       |
 3565|  8.40k|        auto buf = make_contiguous_buffer(
 3566|  8.40k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  8.40k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.06k, False: 132]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.06k|    }                                                  \
  |  |  |  | 3939|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    132|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|    132|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|    132|                                    prefix_result.parsed_base));
 3570|       |
 3571|    132|        return ranges::next(prefix_result.iterator,
 3572|    132|                            ranges::distance(buf.view().begin(), result_it));
 3573|  8.40k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIxEENS0_13scan_expectedIS9_EERT_:
 5910|  4.30k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  4.30k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  4.30k|            auto rd = make_reader<T, char_type>();
 5916|  4.30k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  4.30k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_xEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  4.30k|    {
 5903|  4.30k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 63, False: 4.24k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     63|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     63|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     63|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     63|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     63|    }                                                  \
  |  |  |  | 3939|  4.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.24k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  4.24k|                        .transform_error(make_eof_scan_error));
 5905|  4.24k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  4.30k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  4.24k|    {
 3579|  4.24k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.24k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  4.24k|        return read_default_with_base(range, value, 10);
 3581|  4.24k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  4.24k|    {
 3543|  4.24k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.24k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.24k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.24k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.24k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.24k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.24k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  4.24k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|  4.24k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 4.24k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  8.47k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.24k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.24k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.24k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 9, False: 4.23k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      9|    }                                                  \
  |  |  |  | 3939|  4.24k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  8.47k|                parse_integer_digits_without_thsep(
 3562|  8.47k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  8.47k|                    prefix_result.parsed_base));
 3564|       |
 3565|  8.47k|        auto buf = make_contiguous_buffer(
 3566|  8.47k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  8.47k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  4.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.06k, False: 165]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.06k|    }                                                  \
  |  |  |  | 3939|  4.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    165|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|    165|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|    165|                                    prefix_result.parsed_base));
 3570|       |
 3571|    165|        return ranges::next(prefix_result.iterator,
 3572|    165|                            ranges::distance(buf.view().begin(), result_it));
 3573|  8.47k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIhEENS0_13scan_expectedIS9_EERT_:
 5910|  4.22k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  4.22k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  4.22k|            auto rd = make_reader<T, char_type>();
 5916|  4.22k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  4.22k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_hEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  4.22k|    {
 5903|  4.22k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 51, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     51|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     51|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     51|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     51|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     51|    }                                                  \
  |  |  |  | 3939|  4.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  4.17k|                        .transform_error(make_eof_scan_error));
 5905|  4.17k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  4.22k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  4.17k|    {
 3579|  4.17k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.17k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  4.17k|        return read_default_with_base(range, value, 10);
 3581|  4.17k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  4.17k|    {
 3543|  4.17k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  4.17k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  4.17k|        if constexpr (!std::is_signed_v<T>) {
 3547|  4.17k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 54, False: 4.11k]
  ------------------
 3548|     54|                return detail::unexpected_scan_error(
 3549|     54|                    scan_error::invalid_scanned_value,
 3550|     54|                    "Unexpected '-' sign when parsing an "
 3551|     54|                    "unsigned value");
 3552|     54|            }
 3553|  4.17k|        }
 3554|       |
 3555|  4.17k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 4.17k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  8.33k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3, False: 4.16k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      3|    }                                                  \
  |  |  |  | 3939|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  8.33k|                parse_integer_digits_without_thsep(
 3562|  8.33k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  8.33k|                    prefix_result.parsed_base));
 3564|       |
 3565|  8.33k|        auto buf = make_contiguous_buffer(
 3566|  8.33k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  8.33k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  4.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.03k, False: 135]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.03k|    }                                                  \
  |  |  |  | 3939|  4.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    135|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|    135|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|    135|                                    prefix_result.parsed_base));
 3570|       |
 3571|    135|        return ranges::next(prefix_result.iterator,
 3572|    135|                            ranges::distance(buf.view().begin(), result_it));
 3573|  8.33k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIjEENS0_13scan_expectedIS9_EERT_:
 5910|  4.23k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  4.23k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  4.23k|            auto rd = make_reader<T, char_type>();
 5916|  4.23k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  4.23k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  4.23k|    {
 5903|  4.23k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 51, False: 4.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     51|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     51|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     51|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     51|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     51|    }                                                  \
  |  |  |  | 3939|  4.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  4.18k|                        .transform_error(make_eof_scan_error));
 5905|  4.18k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  4.23k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  4.18k|    {
 3579|  4.18k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.18k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  4.18k|        return read_default_with_base(range, value, 10);
 3581|  4.18k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  4.18k|    {
 3543|  4.18k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  4.18k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  4.18k|        if constexpr (!std::is_signed_v<T>) {
 3547|  4.18k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 54, False: 4.13k]
  ------------------
 3548|     54|                return detail::unexpected_scan_error(
 3549|     54|                    scan_error::invalid_scanned_value,
 3550|     54|                    "Unexpected '-' sign when parsing an "
 3551|     54|                    "unsigned value");
 3552|     54|            }
 3553|  4.18k|        }
 3554|       |
 3555|  4.18k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 4.18k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  8.37k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3, False: 4.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      3|    }                                                  \
  |  |  |  | 3939|  4.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  8.37k|                parse_integer_digits_without_thsep(
 3562|  8.37k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  8.37k|                    prefix_result.parsed_base));
 3564|       |
 3565|  8.37k|        auto buf = make_contiguous_buffer(
 3566|  8.37k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  8.37k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  4.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.03k, False: 153]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.03k|    }                                                  \
  |  |  |  | 3939|  4.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    153|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|    153|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|    153|                                    prefix_result.parsed_base));
 3570|       |
 3571|    153|        return ranges::next(prefix_result.iterator,
 3572|    153|                            ranges::distance(buf.view().begin(), result_it));
 3573|  8.37k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIyEENS0_13scan_expectedIS9_EERT_:
 5910|  4.26k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  4.26k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  4.26k|            auto rd = make_reader<T, char_type>();
 5916|  4.26k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  4.26k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_yEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  4.26k|    {
 5903|  4.26k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.26k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.26k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.26k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 51, False: 4.21k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     51|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     51|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     51|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     51|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     51|    }                                                  \
  |  |  |  | 3939|  4.26k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  4.21k|                        .transform_error(make_eof_scan_error));
 5905|  4.21k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  4.26k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  4.21k|    {
 3579|  4.21k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.21k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  4.21k|        return read_default_with_base(range, value, 10);
 3581|  4.21k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  4.21k|    {
 3543|  4.21k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.21k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.21k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.21k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.21k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.21k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  4.21k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  4.21k|        if constexpr (!std::is_signed_v<T>) {
 3547|  4.21k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 60, False: 4.15k]
  ------------------
 3548|     60|                return detail::unexpected_scan_error(
 3549|     60|                    scan_error::invalid_scanned_value,
 3550|     60|                    "Unexpected '-' sign when parsing an "
 3551|     60|                    "unsigned value");
 3552|     60|            }
 3553|  4.21k|        }
 3554|       |
 3555|  4.21k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 4.21k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  8.42k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.21k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.21k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.21k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3, False: 4.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      3|    }                                                  \
  |  |  |  | 3939|  4.21k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  8.42k|                parse_integer_digits_without_thsep(
 3562|  8.42k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  8.42k|                    prefix_result.parsed_base));
 3564|       |
 3565|  8.42k|        auto buf = make_contiguous_buffer(
 3566|  8.42k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  8.42k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.02k, False: 183]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.02k|    }                                                  \
  |  |  |  | 3939|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    183|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|    183|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|    183|                                    prefix_result.parsed_base));
 3570|       |
 3571|    183|        return ranges::next(prefix_result.iterator,
 3572|    183|                            ranges::distance(buf.view().begin(), result_it));
 3573|  8.42k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 2985|   159k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|   159k|    static_cast<    \
  |  |  935|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|   159k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|   159k|          m_current(m_range.begin())
 2988|   159k|    {
 2989|   159k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 2997|   120k|    {
 2998|   120k|        return m_range.end();
 2999|   120k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3012|  10.7k|    {
 3013|  10.7k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|  10.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|  10.7k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|  10.7k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 10.7k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|  10.7k|        }
 3019|  10.7k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  10.7k|    static_cast<    \
  |  |  935|  10.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|  10.7k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3002|   110k|    {
 3003|   110k|        return ranges::subrange{begin(), end()};
 3004|   110k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIaEENS0_13scan_expectedIS9_EERT_:
 6225|  18.3k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  18.3k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  18.3k|            auto rd = make_reader<T, char_type>();
 6231|  18.3k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  18.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6232|  18.3k|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  18.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_aEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6160|  18.3k|    {
 6161|  18.3k|        const bool need_skipped_width =
 6162|  18.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 18.3k]
  |  Branch (6162:33): [True: 0, False: 18.3k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|  18.3k|        auto it = rng.begin();
 6166|  18.3k|        std::ptrdiff_t prefix_width = 0;
 6167|  18.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 18.3k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|  18.3k|        else {
 6175|  18.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  18.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 248, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    248|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    248|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    248|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    248|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    248|    }                                                  \
  |  |  |  | 3939|  18.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|  18.0k|            std::tie(it, prefix_width) = prefix_result;
 6177|  18.0k|        }
 6178|  18.0k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|  18.0k|        std::ptrdiff_t value_width = 0;
 6182|  18.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 18.0k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|  18.0k|        else {
 6198|  18.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.3k, False: 1.74k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.3k|    }                                                  \
  |  | 3939|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|  1.74k|                                             specs, value, loc));
 6200|       |
 6201|  1.74k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 1.74k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|  1.74k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|  1.74k|        std::ptrdiff_t postfix_width = 0;
 6210|  1.74k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 1.64k, False: 100]
  ------------------
 6211|  1.64k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  1.64k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.64k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.64k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.64k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.64k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|  1.64k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|  1.64k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|  1.64k|                                 value_width));
 6215|  1.64k|            std::tie(it, postfix_width) = postfix_result;
 6216|  1.64k|        }
 6217|       |
 6218|  1.74k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  1.74k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.74k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|  1.74k|            specs, prefix_width, value_width, postfix_width));
 6220|  1.74k|        return it;
 6221|  1.74k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6073|   110k|    {
 6074|   110k|        const bool need_skipped_width =
 6075|   110k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6075:13): [True: 0, False: 110k]
  |  Branch (6075:33): [True: 0, False: 110k]
  ------------------
 6076|   110k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6077|       |
 6078|       |        // Read prefix
 6079|   110k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6079:13): [True: 0, False: 110k]
  ------------------
 6080|   110k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6080:13): [True: 0, False: 110k]
  ------------------
 6081|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6082|      0|                             need_skipped_width);
 6083|      0|        }
 6084|   110k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6084:13): [True: 110k, False: 0]
  |  Branch (6084:56): [True: 110k, False: 0]
  ------------------
 6085|       |            // Default alignment:
 6086|       |            // Skip preceding whitespace, if required by the reader
 6087|   110k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6087:17): [True: 0, False: 110k]
  ------------------
 6088|      0|                auto max_width_view = take_width(rng, specs.precision);
 6089|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6090|      0|                                  .transform_error(make_eof_scan_error));
 6091|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6092|      0|            }
 6093|   218k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   110k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   110k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   110k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.43k, False: 108k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.43k|    }                                                  \
  |  |  |  | 3939|   110k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6094|   218k|                            make_eof_scan_error));
 6095|       |
 6096|   218k|            if (need_skipped_width) {
  ------------------
  |  Branch (6096:17): [True: 0, False: 108k]
  ------------------
 6097|      0|                return result_type{
 6098|      0|                    it,
 6099|      0|                    calculate_text_width(make_contiguous_buffer(
 6100|      0|                                             ranges::subrange{rng.begin(), it})
 6101|      0|                                             .view())};
 6102|      0|            }
 6103|   108k|            return result_type{it, 0};
 6104|   218k|        }
 6105|       |
 6106|      0|        return result_type{rng.begin(), 0};
 6107|   110k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6115|  10.1k|    {
 6116|  10.1k|        const bool need_skipped_width =
 6117|  10.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6117:13): [True: 0, False: 10.1k]
  |  Branch (6117:33): [True: 0, False: 10.1k]
  ------------------
 6118|  10.1k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6119|       |
 6120|  10.1k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6120:13): [True: 0, False: 10.1k]
  ------------------
 6121|  10.1k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6121:13): [True: 0, False: 10.1k]
  ------------------
 6122|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6122:17): [True: 0, False: 0]
  ------------------
 6123|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                return result_type{rng.begin(), 0};
 6125|      0|            }
 6126|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6127|      0|                             specs.fill, need_skipped_width);
 6128|      0|        }
 6129|  10.1k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6129:13): [True: 10.1k, False: 0]
  ------------------
 6130|  10.1k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6130:13): [True: 0, False: 10.1k]
  ------------------
 6131|  10.1k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6131:15): [True: 0, False: 0]
  |  Branch (6131:35): [True: 0, False: 0]
  ------------------
 6132|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6132:15): [True: 0, False: 0]
  ------------------
 6133|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6133:15): [True: 0, False: 0]
  ------------------
 6134|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6134:17): [True: 0, False: 0]
  ------------------
 6135|      0|                const auto initial_width =
 6136|      0|                    specs.precision - prefix_width - value_width;
 6137|      0|                auto max_width_view = take_width(rng, initial_width);
 6138|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|      0|                                  .transform_error(make_eof_scan_error));
 6140|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6141|      0|            }
 6142|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|                            make_eof_scan_error));
 6144|       |
 6145|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6145:17): [True: 0, False: 0]
  ------------------
 6146|      0|                return result_type{
 6147|      0|                    it,
 6148|      0|                    calculate_text_width(make_contiguous_buffer(
 6149|      0|                                             ranges::subrange{rng.begin(), it})
 6150|      0|                                             .view())};
 6151|      0|            }
 6152|      0|            return result_type{it, 0};
 6153|      0|        }
 6154|  10.1k|        return result_type{rng.begin(), 0};
 6155|  10.1k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6225|  18.3k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  18.3k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  18.3k|            auto rd = make_reader<T, char_type>();
 6231|  18.3k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  18.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6232|  18.3k|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  18.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6160|  18.3k|    {
 6161|  18.3k|        const bool need_skipped_width =
 6162|  18.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 18.3k]
  |  Branch (6162:33): [True: 0, False: 18.3k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|  18.3k|        auto it = rng.begin();
 6166|  18.3k|        std::ptrdiff_t prefix_width = 0;
 6167|  18.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 18.3k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|  18.3k|        else {
 6175|  18.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  18.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 260, False: 18.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    260|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    260|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    260|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    260|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    260|    }                                                  \
  |  |  |  | 3939|  18.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|  18.1k|            std::tie(it, prefix_width) = prefix_result;
 6177|  18.1k|        }
 6178|  18.1k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|  18.1k|        std::ptrdiff_t value_width = 0;
 6182|  18.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 18.1k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|  18.1k|        else {
 6198|  18.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.3k, False: 1.83k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.3k|    }                                                  \
  |  | 3939|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|  1.83k|                                             specs, value, loc));
 6200|       |
 6201|  1.83k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 1.83k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|  1.83k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|  1.83k|        std::ptrdiff_t postfix_width = 0;
 6210|  1.83k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 1.71k, False: 112]
  ------------------
 6211|  1.71k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  1.71k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.71k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.71k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.71k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.71k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|  1.71k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|  1.71k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|  1.71k|                                 value_width));
 6215|  1.71k|            std::tie(it, postfix_width) = postfix_result;
 6216|  1.71k|        }
 6217|       |
 6218|  1.83k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  1.83k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.83k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|  1.83k|            specs, prefix_width, value_width, postfix_width));
 6220|  1.83k|        return it;
 6221|  1.83k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIxEENS0_13scan_expectedIS9_EERT_:
 6225|  18.4k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  18.4k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  18.4k|            auto rd = make_reader<T, char_type>();
 6231|  18.4k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  18.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  18.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6232|  18.4k|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  18.4k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_xEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6160|  18.4k|    {
 6161|  18.4k|        const bool need_skipped_width =
 6162|  18.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 18.4k]
  |  Branch (6162:33): [True: 0, False: 18.4k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|  18.4k|        auto it = rng.begin();
 6166|  18.4k|        std::ptrdiff_t prefix_width = 0;
 6167|  18.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 18.4k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|  18.4k|        else {
 6175|  18.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  18.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 260, False: 18.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    260|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    260|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    260|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    260|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    260|    }                                                  \
  |  |  |  | 3939|  18.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|  18.2k|            std::tie(it, prefix_width) = prefix_result;
 6177|  18.2k|        }
 6178|  18.2k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|  18.2k|        std::ptrdiff_t value_width = 0;
 6182|  18.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 18.2k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|  18.2k|        else {
 6198|  18.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  18.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  18.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.3k, False: 1.91k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.3k|    }                                                  \
  |  | 3939|  18.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  18.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|  1.91k|                                             specs, value, loc));
 6200|       |
 6201|  1.91k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 1.91k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|  1.91k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|  1.91k|        std::ptrdiff_t postfix_width = 0;
 6210|  1.91k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 1.80k, False: 112]
  ------------------
 6211|  1.80k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  1.80k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.80k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.80k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.80k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.80k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|  1.80k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|  1.80k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|  1.80k|                                 value_width));
 6215|  1.80k|            std::tie(it, postfix_width) = postfix_result;
 6216|  1.80k|        }
 6217|       |
 6218|  1.91k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  1.91k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.91k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|  1.91k|            specs, prefix_width, value_width, postfix_width));
 6220|  1.91k|        return it;
 6221|  1.91k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIhEENS0_13scan_expectedIS9_EERT_:
 6225|  18.2k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  18.2k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  18.2k|            auto rd = make_reader<T, char_type>();
 6231|  18.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  18.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6232|  18.2k|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  18.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_hEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6160|  18.2k|    {
 6161|  18.2k|        const bool need_skipped_width =
 6162|  18.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 18.2k]
  |  Branch (6162:33): [True: 0, False: 18.2k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|  18.2k|        auto it = rng.begin();
 6166|  18.2k|        std::ptrdiff_t prefix_width = 0;
 6167|  18.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 18.2k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|  18.2k|        else {
 6175|  18.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  18.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 222, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    222|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    222|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    222|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    222|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    222|    }                                                  \
  |  |  |  | 3939|  18.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|  18.0k|            std::tie(it, prefix_width) = prefix_result;
 6177|  18.0k|        }
 6178|  18.0k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|  18.0k|        std::ptrdiff_t value_width = 0;
 6182|  18.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 18.0k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|  18.0k|        else {
 6198|  18.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.3k, False: 1.69k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.3k|    }                                                  \
  |  | 3939|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|  1.69k|                                             specs, value, loc));
 6200|       |
 6201|  1.69k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 1.69k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|  1.69k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|  1.69k|        std::ptrdiff_t postfix_width = 0;
 6210|  1.69k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 1.61k, False: 74]
  ------------------
 6211|  1.61k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  1.61k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.61k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.61k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.61k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.61k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|  1.61k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|  1.61k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|  1.61k|                                 value_width));
 6215|  1.61k|            std::tie(it, postfix_width) = postfix_result;
 6216|  1.61k|        }
 6217|       |
 6218|  1.69k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  1.69k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.69k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|  1.69k|            specs, prefix_width, value_width, postfix_width));
 6220|  1.69k|        return it;
 6221|  1.69k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6225|  18.2k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  18.2k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  18.2k|            auto rd = make_reader<T, char_type>();
 6231|  18.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  18.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6232|  18.2k|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  18.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6160|  18.2k|    {
 6161|  18.2k|        const bool need_skipped_width =
 6162|  18.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 18.2k]
  |  Branch (6162:33): [True: 0, False: 18.2k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|  18.2k|        auto it = rng.begin();
 6166|  18.2k|        std::ptrdiff_t prefix_width = 0;
 6167|  18.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 18.2k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|  18.2k|        else {
 6175|  18.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  18.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 222, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    222|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    222|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    222|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    222|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    222|    }                                                  \
  |  |  |  | 3939|  18.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|  18.0k|            std::tie(it, prefix_width) = prefix_result;
 6177|  18.0k|        }
 6178|  18.0k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|  18.0k|        std::ptrdiff_t value_width = 0;
 6182|  18.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 18.0k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|  18.0k|        else {
 6198|  18.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.3k, False: 1.73k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.3k|    }                                                  \
  |  | 3939|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|  1.73k|                                             specs, value, loc));
 6200|       |
 6201|  1.73k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 1.73k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|  1.73k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|  1.73k|        std::ptrdiff_t postfix_width = 0;
 6210|  1.73k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 1.66k, False: 74]
  ------------------
 6211|  1.66k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  1.66k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.66k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.66k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.66k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.66k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|  1.66k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|  1.66k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|  1.66k|                                 value_width));
 6215|  1.66k|            std::tie(it, postfix_width) = postfix_result;
 6216|  1.66k|        }
 6217|       |
 6218|  1.73k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  1.73k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.73k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|  1.73k|            specs, prefix_width, value_width, postfix_width));
 6220|  1.73k|        return it;
 6221|  1.73k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIyEENS0_13scan_expectedIS9_EERT_:
 6225|  18.3k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  18.3k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  18.3k|            auto rd = make_reader<T, char_type>();
 6231|  18.3k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  18.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6232|  18.3k|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  18.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_yEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6160|  18.3k|    {
 6161|  18.3k|        const bool need_skipped_width =
 6162|  18.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 18.3k]
  |  Branch (6162:33): [True: 0, False: 18.3k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|  18.3k|        auto it = rng.begin();
 6166|  18.3k|        std::ptrdiff_t prefix_width = 0;
 6167|  18.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 18.3k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|  18.3k|        else {
 6175|  18.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  18.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 222, False: 18.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    222|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    222|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    222|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    222|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    222|    }                                                  \
  |  |  |  | 3939|  18.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|  18.1k|            std::tie(it, prefix_width) = prefix_result;
 6177|  18.1k|        }
 6178|  18.1k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|  18.1k|        std::ptrdiff_t value_width = 0;
 6182|  18.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 18.1k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|  18.1k|        else {
 6198|  18.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.3k, False: 1.80k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.3k|    }                                                  \
  |  | 3939|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|  1.80k|                                             specs, value, loc));
 6200|       |
 6201|  1.80k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 1.80k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|  1.80k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|  1.80k|        std::ptrdiff_t postfix_width = 0;
 6210|  1.80k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 1.72k, False: 74]
  ------------------
 6211|  1.72k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  1.72k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.72k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.72k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.72k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.72k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.72k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|  1.72k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|  1.72k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|  1.72k|                                 value_width));
 6215|  1.72k|            std::tie(it, postfix_width) = postfix_result;
 6216|  1.72k|        }
 6217|       |
 6218|  1.80k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  1.80k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.80k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|  1.80k|            specs, prefix_width, value_width, postfix_width));
 6220|  1.80k|        return it;
 6221|  1.80k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIaEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5910|  4.24k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  4.24k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  4.24k|            auto rd = make_reader<T, char_type>();
 5920|  4.24k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 4.24k, False: 0]
  ------------------
 5921|  4.24k|                return impl(rd, range, value);
 5922|  4.24k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  4.24k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  4.24k|    {
 5903|  4.24k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.24k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.24k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.24k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 60, False: 4.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     60|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     60|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     60|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     60|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     60|    }                                                  \
  |  |  |  | 3939|  4.24k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  4.18k|                        .transform_error(make_eof_scan_error));
 5905|  4.18k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  4.24k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5834|  25.5k|{
 5835|  25.5k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  25.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 123, False: 25.4k]
  |  |  ------------------
  ------------------
 5836|    123|        return unexpected(e);
 5837|    123|    }
 5838|       |
 5839|  25.4k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 25.4k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|  25.4k|    return skip_classic_whitespace(range);
 5844|  25.4k|}
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3578|  4.18k|    {
 3579|  4.18k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.18k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  4.18k|        return read_default_with_base(range, value, 10);
 3581|  4.18k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3542|  4.18k|    {
 3543|  4.18k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  4.18k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|  4.18k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 4.18k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  4.32k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.03k, False: 144]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.03k|    }                                                  \
  |  |  |  | 3939|  4.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    144|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  4.32k|                parse_integer_digits_without_thsep(
 3562|  4.32k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  4.32k|                    prefix_result.parsed_base));
 3564|       |
 3565|  4.32k|        auto buf = make_contiguous_buffer(
 3566|  4.32k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  4.32k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    144|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    144|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    144|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    144|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 42, False: 102]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     42|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     42|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     42|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     42|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     42|    }                                                  \
  |  |  |  | 3939|    144|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    102|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|    102|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|    102|                                    prefix_result.parsed_base));
 3570|       |
 3571|    102|        return ranges::next(prefix_result.iterator,
 3572|    102|                            ranges::distance(buf.view().begin(), result_it));
 3573|  4.32k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIiEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5910|  4.27k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  4.27k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  4.27k|            auto rd = make_reader<T, char_type>();
 5920|  4.27k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 4.27k, False: 0]
  ------------------
 5921|  4.27k|                return impl(rd, range, value);
 5922|  4.27k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  4.27k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  4.27k|    {
 5903|  4.27k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.27k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.27k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.27k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 63, False: 4.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     63|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     63|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     63|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     63|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     63|    }                                                  \
  |  |  |  | 3939|  4.27k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  4.20k|                        .transform_error(make_eof_scan_error));
 5905|  4.20k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  4.27k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3578|  4.20k|    {
 3579|  4.20k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.20k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  4.20k|        return read_default_with_base(range, value, 10);
 3581|  4.20k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3542|  4.20k|    {
 3543|  4.20k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  4.20k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|  4.20k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 4.20k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  4.35k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.05k, False: 150]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.05k|    }                                                  \
  |  |  |  | 3939|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    150|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  4.35k|                parse_integer_digits_without_thsep(
 3562|  4.35k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  4.35k|                    prefix_result.parsed_base));
 3564|       |
 3565|  4.35k|        auto buf = make_contiguous_buffer(
 3566|  4.35k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  4.35k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    150|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    150|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    150|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    150|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 18, False: 132]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     18|    }                                                  \
  |  |  |  | 3939|    150|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    132|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|    132|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|    132|                                    prefix_result.parsed_base));
 3570|       |
 3571|    132|        return ranges::next(prefix_result.iterator,
 3572|    132|                            ranges::distance(buf.view().begin(), result_it));
 3573|  4.35k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIxEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5910|  4.30k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  4.30k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  4.30k|            auto rd = make_reader<T, char_type>();
 5920|  4.30k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 4.30k, False: 0]
  ------------------
 5921|  4.30k|                return impl(rd, range, value);
 5922|  4.30k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  4.30k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  4.30k|    {
 5903|  4.30k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 63, False: 4.24k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     63|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     63|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     63|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     63|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     63|    }                                                  \
  |  |  |  | 3939|  4.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.24k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  4.24k|                        .transform_error(make_eof_scan_error));
 5905|  4.24k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  4.30k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3578|  4.24k|    {
 3579|  4.24k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.24k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  4.24k|        return read_default_with_base(range, value, 10);
 3581|  4.24k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3542|  4.24k|    {
 3543|  4.24k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.24k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.24k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.24k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.24k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.24k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.24k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  4.24k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|  4.24k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 4.24k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  4.40k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.24k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.24k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.24k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.07k, False: 165]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.07k|    }                                                  \
  |  |  |  | 3939|  4.24k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    165|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  4.40k|                parse_integer_digits_without_thsep(
 3562|  4.40k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  4.40k|                    prefix_result.parsed_base));
 3564|       |
 3565|  4.40k|        auto buf = make_contiguous_buffer(
 3566|  4.40k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  4.40k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    165|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    165|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    165|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    165|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 165]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    165|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    165|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|    165|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|    165|                                    prefix_result.parsed_base));
 3570|       |
 3571|    165|        return ranges::next(prefix_result.iterator,
 3572|    165|                            ranges::distance(buf.view().begin(), result_it));
 3573|  4.40k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIhEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5910|  4.22k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  4.22k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  4.22k|            auto rd = make_reader<T, char_type>();
 5920|  4.22k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 4.22k, False: 0]
  ------------------
 5921|  4.22k|                return impl(rd, range, value);
 5922|  4.22k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  4.22k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  4.22k|    {
 5903|  4.22k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 51, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     51|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     51|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     51|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     51|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     51|    }                                                  \
  |  |  |  | 3939|  4.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  4.17k|                        .transform_error(make_eof_scan_error));
 5905|  4.17k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  4.22k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3578|  4.17k|    {
 3579|  4.17k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.17k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  4.17k|        return read_default_with_base(range, value, 10);
 3581|  4.17k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3542|  4.17k|    {
 3543|  4.17k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  4.17k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  4.17k|        if constexpr (!std::is_signed_v<T>) {
 3547|  4.17k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 54, False: 4.11k]
  ------------------
 3548|     54|                return detail::unexpected_scan_error(
 3549|     54|                    scan_error::invalid_scanned_value,
 3550|     54|                    "Unexpected '-' sign when parsing an "
 3551|     54|                    "unsigned value");
 3552|     54|            }
 3553|  4.17k|        }
 3554|       |
 3555|  4.17k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 4.17k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  4.33k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.00k, False: 168]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.00k|    }                                                  \
  |  |  |  | 3939|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    168|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  4.33k|                parse_integer_digits_without_thsep(
 3562|  4.33k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  4.33k|                    prefix_result.parsed_base));
 3564|       |
 3565|  4.33k|        auto buf = make_contiguous_buffer(
 3566|  4.33k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  4.33k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    168|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    168|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    168|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    168|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 33, False: 135]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     33|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     33|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     33|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     33|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     33|    }                                                  \
  |  |  |  | 3939|    168|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    135|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|    135|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|    135|                                    prefix_result.parsed_base));
 3570|       |
 3571|    135|        return ranges::next(prefix_result.iterator,
 3572|    135|                            ranges::distance(buf.view().begin(), result_it));
 3573|  4.33k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIjEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5910|  4.23k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  4.23k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  4.23k|            auto rd = make_reader<T, char_type>();
 5920|  4.23k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 4.23k, False: 0]
  ------------------
 5921|  4.23k|                return impl(rd, range, value);
 5922|  4.23k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  4.23k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  4.23k|    {
 5903|  4.23k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 51, False: 4.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     51|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     51|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     51|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     51|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     51|    }                                                  \
  |  |  |  | 3939|  4.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  4.18k|                        .transform_error(make_eof_scan_error));
 5905|  4.18k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  4.23k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3578|  4.18k|    {
 3579|  4.18k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.18k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  4.18k|        return read_default_with_base(range, value, 10);
 3581|  4.18k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3542|  4.18k|    {
 3543|  4.18k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  4.18k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  4.18k|        if constexpr (!std::is_signed_v<T>) {
 3547|  4.18k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 54, False: 4.13k]
  ------------------
 3548|     54|                return detail::unexpected_scan_error(
 3549|     54|                    scan_error::invalid_scanned_value,
 3550|     54|                    "Unexpected '-' sign when parsing an "
 3551|     54|                    "unsigned value");
 3552|     54|            }
 3553|  4.18k|        }
 3554|       |
 3555|  4.18k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 4.18k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  4.35k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.01k, False: 171]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.01k|    }                                                  \
  |  |  |  | 3939|  4.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    171|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  4.35k|                parse_integer_digits_without_thsep(
 3562|  4.35k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  4.35k|                    prefix_result.parsed_base));
 3564|       |
 3565|  4.35k|        auto buf = make_contiguous_buffer(
 3566|  4.35k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  4.35k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    171|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    171|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    171|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    171|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 18, False: 153]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     18|    }                                                  \
  |  |  |  | 3939|    171|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    153|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|    153|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|    153|                                    prefix_result.parsed_base));
 3570|       |
 3571|    153|        return ranges::next(prefix_result.iterator,
 3572|    153|                            ranges::distance(buf.view().begin(), result_it));
 3573|  4.35k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIyEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5910|  4.26k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  4.26k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  4.26k|            auto rd = make_reader<T, char_type>();
 5920|  4.26k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 4.26k, False: 0]
  ------------------
 5921|  4.26k|                return impl(rd, range, value);
 5922|  4.26k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  4.26k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  4.26k|    {
 5903|  4.26k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.26k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.26k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.26k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 51, False: 4.21k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     51|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     51|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     51|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     51|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     51|    }                                                  \
  |  |  |  | 3939|  4.26k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  4.21k|                        .transform_error(make_eof_scan_error));
 5905|  4.21k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  4.26k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3578|  4.21k|    {
 3579|  4.21k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.21k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  4.21k|        return read_default_with_base(range, value, 10);
 3581|  4.21k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3542|  4.21k|    {
 3543|  4.21k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.21k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.21k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.21k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.21k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.21k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  4.21k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  4.21k|        if constexpr (!std::is_signed_v<T>) {
 3547|  4.21k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 60, False: 4.15k]
  ------------------
 3548|     60|                return detail::unexpected_scan_error(
 3549|     60|                    scan_error::invalid_scanned_value,
 3550|     60|                    "Unexpected '-' sign when parsing an "
 3551|     60|                    "unsigned value");
 3552|     60|            }
 3553|  4.21k|        }
 3554|       |
 3555|  4.21k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 4.21k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  4.39k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.21k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.21k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.21k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.02k, False: 183]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.02k|    }                                                  \
  |  |  |  | 3939|  4.21k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    183|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  4.39k|                parse_integer_digits_without_thsep(
 3562|  4.39k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  4.39k|                    prefix_result.parsed_base));
 3564|       |
 3565|  4.39k|        auto buf = make_contiguous_buffer(
 3566|  4.39k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  4.39k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    183|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    183|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    183|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    183|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 183]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    183|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    183|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|    183|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|    183|                                    prefix_result.parsed_base));
 3570|       |
 3571|    183|        return ranges::next(prefix_result.iterator,
 3572|    183|                            ranges::distance(buf.view().begin(), result_it));
 3573|  4.39k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  15.6k|    {
 3543|  15.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  15.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  15.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  15.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 15.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  15.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  15.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  15.6k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|  15.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 15.6k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  31.1k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  15.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  15.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  15.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 45, False: 15.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     45|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     45|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     45|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     45|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     45|    }                                                  \
  |  |  |  | 3939|  15.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  31.1k|                parse_integer_digits_without_thsep(
 3562|  31.1k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  31.1k|                    prefix_result.parsed_base));
 3564|       |
 3565|  31.1k|        auto buf = make_contiguous_buffer(
 3566|  31.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  31.1k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  15.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  15.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  15.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.63k, False: 13.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.63k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.63k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.63k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.63k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.63k|    }                                                  \
  |  |  |  | 3939|  15.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|  13.9k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|  13.9k|                                    prefix_result.parsed_base));
 3570|       |
 3571|  13.9k|        return ranges::next(prefix_result.iterator,
 3572|  13.9k|                            ranges::distance(buf.view().begin(), result_it));
 3573|  31.1k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  17.9k|    {
 3543|  17.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  17.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  17.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  17.9k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|  17.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 17.9k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  35.8k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  17.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 69, False: 17.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     69|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     69|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     69|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     69|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     69|    }                                                  \
  |  |  |  | 3939|  17.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  35.8k|                parse_integer_digits_without_thsep(
 3562|  35.8k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  35.8k|                    prefix_result.parsed_base));
 3564|       |
 3565|  35.8k|        auto buf = make_contiguous_buffer(
 3566|  35.8k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  35.8k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  17.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.49k, False: 16.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.49k|    }                                                  \
  |  |  |  | 3939|  17.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|  16.4k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|  16.4k|                                    prefix_result.parsed_base));
 3570|       |
 3571|  16.4k|        return ranges::next(prefix_result.iterator,
 3572|  16.4k|                            ranges::distance(buf.view().begin(), result_it));
 3573|  35.8k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  18.2k|    {
 3543|  18.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  18.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  18.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  18.2k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|  18.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 18.2k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  36.4k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  18.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 81, False: 18.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     81|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     81|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     81|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     81|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     81|    }                                                  \
  |  |  |  | 3939|  18.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  36.4k|                parse_integer_digits_without_thsep(
 3562|  36.4k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  36.4k|                    prefix_result.parsed_base));
 3564|       |
 3565|  36.4k|        auto buf = make_contiguous_buffer(
 3566|  36.4k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  36.4k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  18.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.43k, False: 16.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.43k|    }                                                  \
  |  |  |  | 3939|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|  16.7k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|  16.7k|                                    prefix_result.parsed_base));
 3570|       |
 3571|  16.7k|        return ranges::next(prefix_result.iterator,
 3572|  16.7k|                            ranges::distance(buf.view().begin(), result_it));
 3573|  36.4k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  13.0k|    {
 3543|  13.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  13.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 13.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  13.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  13.0k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  13.0k|        if constexpr (!std::is_signed_v<T>) {
 3547|  13.0k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 765, False: 12.3k]
  ------------------
 3548|    765|                return detail::unexpected_scan_error(
 3549|    765|                    scan_error::invalid_scanned_value,
 3550|    765|                    "Unexpected '-' sign when parsing an "
 3551|    765|                    "unsigned value");
 3552|    765|            }
 3553|  13.0k|        }
 3554|       |
 3555|  13.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 13.0k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  26.1k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  13.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 13.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|  13.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  26.1k|                parse_integer_digits_without_thsep(
 3562|  26.1k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  26.1k|                    prefix_result.parsed_base));
 3564|       |
 3565|  26.1k|        auto buf = make_contiguous_buffer(
 3566|  26.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  26.1k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  13.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.01k, False: 12.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.01k|    }                                                  \
  |  |  |  | 3939|  13.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|  12.0k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|  12.0k|                                    prefix_result.parsed_base));
 3570|       |
 3571|  12.0k|        return ranges::next(prefix_result.iterator,
 3572|  12.0k|                            ranges::distance(buf.view().begin(), result_it));
 3573|  26.1k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  14.3k|    {
 3543|  14.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  14.3k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  14.3k|        if constexpr (!std::is_signed_v<T>) {
 3547|  14.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 792, False: 13.5k]
  ------------------
 3548|    792|                return detail::unexpected_scan_error(
 3549|    792|                    scan_error::invalid_scanned_value,
 3550|    792|                    "Unexpected '-' sign when parsing an "
 3551|    792|                    "unsigned value");
 3552|    792|            }
 3553|  14.3k|        }
 3554|       |
 3555|  14.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 14.3k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  28.6k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  28.6k|                parse_integer_digits_without_thsep(
 3562|  28.6k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  28.6k|                    prefix_result.parsed_base));
 3564|       |
 3565|  28.6k|        auto buf = make_contiguous_buffer(
 3566|  28.6k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  28.6k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 924, False: 13.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    924|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    924|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    924|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    924|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    924|    }                                                  \
  |  |  |  | 3939|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|  13.4k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|  13.4k|                                    prefix_result.parsed_base));
 3570|       |
 3571|  13.4k|        return ranges::next(prefix_result.iterator,
 3572|  13.4k|                            ranges::distance(buf.view().begin(), result_it));
 3573|  28.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  14.4k|    {
 3543|  14.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  14.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 14.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  14.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  14.4k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  14.4k|        if constexpr (!std::is_signed_v<T>) {
 3547|  14.4k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 822, False: 13.6k]
  ------------------
 3548|    822|                return detail::unexpected_scan_error(
 3549|    822|                    scan_error::invalid_scanned_value,
 3550|    822|                    "Unexpected '-' sign when parsing an "
 3551|    822|                    "unsigned value");
 3552|    822|            }
 3553|  14.4k|        }
 3554|       |
 3555|  14.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 14.4k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  28.9k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  14.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 14.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|  14.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  28.9k|                parse_integer_digits_without_thsep(
 3562|  28.9k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  28.9k|                    prefix_result.parsed_base));
 3564|       |
 3565|  28.9k|        auto buf = make_contiguous_buffer(
 3566|  28.9k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  28.9k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  14.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 867, False: 13.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    867|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    867|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    867|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    867|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    867|    }                                                  \
  |  |  |  | 3939|  14.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|  13.6k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|  13.6k|                                    prefix_result.parsed_base));
 3570|       |
 3571|  13.6k|        return ranges::next(prefix_result.iterator,
 3572|  13.6k|                            ranges::distance(buf.view().begin(), result_it));
 3573|  28.9k|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|    690|{
   53|    690|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  930|    690|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    690|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|    690|    string_buffer.resize(size);
   57|    690|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|    690|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|    690|    const auto wsv_reinterpret_size =
   62|    690|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 103, False: 587]
  ------------------
   63|    690|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|    690|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|    690|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|    690|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|    690|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|    690|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|    690|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    690|{
  123|    690|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    690|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    690|    buf.resize(sizeof...(Args));
  126|    690|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    690|    return buf;
  128|    690|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  108|    690|{
  109|    690|    if constexpr (std::is_same_v<CharT, char>) {
  110|    690|        return format_string_view_buffer;
  111|       |    }
  112|       |    else {
  113|       |        return wformat_string_view_buffer;
  114|       |    }
  115|    690|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|    690|{
  186|    690|    do_basic_run_for_source<CharT>(data, format_strings);
  187|    690|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|    690|                                   format_strings);
  189|    690|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|    690|{
  134|       |    // Regular scan
  135|  6.90k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.90k, False: 690]
  ------------------
  136|  6.90k|        auto it = scn::ranges::begin(source);
  137|  34.2k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  34.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  34.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  34.2k|            auto result = scn::scan<T>(
  140|  34.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  34.2k|                scn::runtime_format(f));
  142|  34.2k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.90k, False: 27.3k]
  ------------------
  143|  6.90k|                break;
  144|  6.90k|            }
  145|  27.3k|            it = result->begin();
  146|  27.3k|        }
  147|  6.90k|    }
  148|       |
  149|       |    // scan localized
  150|  6.90k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.90k, False: 690]
  ------------------
  151|  6.90k|        auto it = scn::ranges::begin(source);
  152|  34.2k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  34.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  34.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  34.2k|            auto result = scn::scan<T>(
  155|  34.2k|                global_locale,
  156|  34.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  34.2k|                scn::runtime_format(f));
  158|  34.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.90k, False: 27.3k]
  ------------------
  159|  6.90k|                break;
  160|  6.90k|            }
  161|  27.3k|            it = result->begin();
  162|  27.3k|        }
  163|  6.90k|    }
  164|       |
  165|       |    // scan_value
  166|    690|    {
  167|    690|        auto it = scn::ranges::begin(source);
  168|  5.33k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  5.33k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  5.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  5.33k|            auto result = scn::scan_value<T>(
  171|  5.33k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  5.33k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 690, False: 4.64k]
  ------------------
  173|    690|                break;
  174|    690|            }
  175|  4.64k|            it = result->begin();
  176|  4.64k|        }
  177|    690|    }
  178|    690|}
_ZN3scn4fuzz21do_basic_run_for_typeIchNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|    690|{
  134|       |    // Regular scan
  135|  6.90k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.90k, False: 690]
  ------------------
  136|  6.90k|        auto it = scn::ranges::begin(source);
  137|  30.1k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  30.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  30.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  30.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  30.1k|            auto result = scn::scan<T>(
  140|  30.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  30.1k|                scn::runtime_format(f));
  142|  30.1k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.90k, False: 23.2k]
  ------------------
  143|  6.90k|                break;
  144|  6.90k|            }
  145|  23.2k|            it = result->begin();
  146|  23.2k|        }
  147|  6.90k|    }
  148|       |
  149|       |    // scan localized
  150|  6.90k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.90k, False: 690]
  ------------------
  151|  6.90k|        auto it = scn::ranges::begin(source);
  152|  30.1k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  30.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  30.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  30.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  30.1k|            auto result = scn::scan<T>(
  155|  30.1k|                global_locale,
  156|  30.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  30.1k|                scn::runtime_format(f));
  158|  30.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.90k, False: 23.2k]
  ------------------
  159|  6.90k|                break;
  160|  6.90k|            }
  161|  23.2k|            it = result->begin();
  162|  23.2k|        }
  163|  6.90k|    }
  164|       |
  165|       |    // scan_value
  166|    690|    {
  167|    690|        auto it = scn::ranges::begin(source);
  168|  4.45k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  4.45k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  4.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  4.45k|            auto result = scn::scan_value<T>(
  171|  4.45k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  4.45k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 690, False: 3.76k]
  ------------------
  173|    690|                break;
  174|    690|            }
  175|  3.76k|            it = result->begin();
  176|  3.76k|        }
  177|    690|    }
  178|    690|}
_ZN3scn4fuzz21do_basic_run_for_typeIciNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|    690|{
  134|       |    // Regular scan
  135|  6.90k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.90k, False: 690]
  ------------------
  136|  6.90k|        auto it = scn::ranges::begin(source);
  137|  40.0k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  40.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  40.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  40.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  40.0k|            auto result = scn::scan<T>(
  140|  40.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  40.0k|                scn::runtime_format(f));
  142|  40.0k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.90k, False: 33.1k]
  ------------------
  143|  6.90k|                break;
  144|  6.90k|            }
  145|  33.1k|            it = result->begin();
  146|  33.1k|        }
  147|  6.90k|    }
  148|       |
  149|       |    // scan localized
  150|  6.90k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.90k, False: 690]
  ------------------
  151|  6.90k|        auto it = scn::ranges::begin(source);
  152|  40.0k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  40.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  40.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  40.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  40.0k|            auto result = scn::scan<T>(
  155|  40.0k|                global_locale,
  156|  40.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  40.0k|                scn::runtime_format(f));
  158|  40.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.90k, False: 33.1k]
  ------------------
  159|  6.90k|                break;
  160|  6.90k|            }
  161|  33.1k|            it = result->begin();
  162|  33.1k|        }
  163|  6.90k|    }
  164|       |
  165|       |    // scan_value
  166|    690|    {
  167|    690|        auto it = scn::ranges::begin(source);
  168|  6.16k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  6.16k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  6.16k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.16k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  6.16k|            auto result = scn::scan_value<T>(
  171|  6.16k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  6.16k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 690, False: 5.47k]
  ------------------
  173|    690|                break;
  174|    690|            }
  175|  5.47k|            it = result->begin();
  176|  5.47k|        }
  177|    690|    }
  178|    690|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|    690|{
  134|       |    // Regular scan
  135|  6.90k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.90k, False: 690]
  ------------------
  136|  6.90k|        auto it = scn::ranges::begin(source);
  137|  32.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  32.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  32.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  32.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  32.6k|            auto result = scn::scan<T>(
  140|  32.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  32.6k|                scn::runtime_format(f));
  142|  32.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.90k, False: 25.7k]
  ------------------
  143|  6.90k|                break;
  144|  6.90k|            }
  145|  25.7k|            it = result->begin();
  146|  25.7k|        }
  147|  6.90k|    }
  148|       |
  149|       |    // scan localized
  150|  6.90k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.90k, False: 690]
  ------------------
  151|  6.90k|        auto it = scn::ranges::begin(source);
  152|  32.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  32.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  32.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  32.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  32.6k|            auto result = scn::scan<T>(
  155|  32.6k|                global_locale,
  156|  32.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  32.6k|                scn::runtime_format(f));
  158|  32.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.90k, False: 25.7k]
  ------------------
  159|  6.90k|                break;
  160|  6.90k|            }
  161|  25.7k|            it = result->begin();
  162|  25.7k|        }
  163|  6.90k|    }
  164|       |
  165|       |    // scan_value
  166|    690|    {
  167|    690|        auto it = scn::ranges::begin(source);
  168|  4.89k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  4.89k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  4.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  4.89k|            auto result = scn::scan_value<T>(
  171|  4.89k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  4.89k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 690, False: 4.20k]
  ------------------
  173|    690|                break;
  174|    690|            }
  175|  4.20k|            it = result->begin();
  176|  4.20k|        }
  177|    690|    }
  178|    690|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|    690|{
  134|       |    // Regular scan
  135|  6.90k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.90k, False: 690]
  ------------------
  136|  6.90k|        auto it = scn::ranges::begin(source);
  137|  40.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  40.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  40.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  40.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  40.7k|            auto result = scn::scan<T>(
  140|  40.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  40.7k|                scn::runtime_format(f));
  142|  40.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.90k, False: 33.8k]
  ------------------
  143|  6.90k|                break;
  144|  6.90k|            }
  145|  33.8k|            it = result->begin();
  146|  33.8k|        }
  147|  6.90k|    }
  148|       |
  149|       |    // scan localized
  150|  6.90k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.90k, False: 690]
  ------------------
  151|  6.90k|        auto it = scn::ranges::begin(source);
  152|  40.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  40.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  40.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  40.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  40.7k|            auto result = scn::scan<T>(
  155|  40.7k|                global_locale,
  156|  40.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  40.7k|                scn::runtime_format(f));
  158|  40.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.90k, False: 33.8k]
  ------------------
  159|  6.90k|                break;
  160|  6.90k|            }
  161|  33.8k|            it = result->begin();
  162|  33.8k|        }
  163|  6.90k|    }
  164|       |
  165|       |    // scan_value
  166|    690|    {
  167|    690|        auto it = scn::ranges::begin(source);
  168|  6.27k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  6.27k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  6.27k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.27k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  6.27k|            auto result = scn::scan_value<T>(
  171|  6.27k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  6.27k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 690, False: 5.58k]
  ------------------
  173|    690|                break;
  174|    690|            }
  175|  5.58k|            it = result->begin();
  176|  5.58k|        }
  177|    690|    }
  178|    690|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|    690|{
  134|       |    // Regular scan
  135|  6.90k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.90k, False: 690]
  ------------------
  136|  6.90k|        auto it = scn::ranges::begin(source);
  137|  33.0k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  33.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  33.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  33.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  33.0k|            auto result = scn::scan<T>(
  140|  33.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  33.0k|                scn::runtime_format(f));
  142|  33.0k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.90k, False: 26.1k]
  ------------------
  143|  6.90k|                break;
  144|  6.90k|            }
  145|  26.1k|            it = result->begin();
  146|  26.1k|        }
  147|  6.90k|    }
  148|       |
  149|       |    // scan localized
  150|  6.90k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.90k, False: 690]
  ------------------
  151|  6.90k|        auto it = scn::ranges::begin(source);
  152|  33.0k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  33.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  33.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  33.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  33.0k|            auto result = scn::scan<T>(
  155|  33.0k|                global_locale,
  156|  33.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  33.0k|                scn::runtime_format(f));
  158|  33.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.90k, False: 26.1k]
  ------------------
  159|  6.90k|                break;
  160|  6.90k|            }
  161|  26.1k|            it = result->begin();
  162|  26.1k|        }
  163|  6.90k|    }
  164|       |
  165|       |    // scan_value
  166|    690|    {
  167|    690|        auto it = scn::ranges::begin(source);
  168|  4.95k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  4.95k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  4.95k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.95k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  4.95k|            auto result = scn::scan_value<T>(
  171|  4.95k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  4.95k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 690, False: 4.26k]
  ------------------
  173|    690|                break;
  174|    690|            }
  175|  4.26k|            it = result->begin();
  176|  4.26k|        }
  177|    690|    }
  178|    690|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|    690|{
  134|       |    // Regular scan
  135|  6.90k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.90k, False: 690]
  ------------------
  136|  6.90k|        auto it = scn::ranges::begin(source);
  137|  34.2k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  34.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  34.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  34.2k|            auto result = scn::scan<T>(
  140|  34.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  34.2k|                scn::runtime_format(f));
  142|  34.2k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.90k, False: 27.3k]
  ------------------
  143|  6.90k|                break;
  144|  6.90k|            }
  145|  27.3k|            it = result->begin();
  146|  27.3k|        }
  147|  6.90k|    }
  148|       |
  149|       |    // scan localized
  150|  6.90k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.90k, False: 690]
  ------------------
  151|  6.90k|        auto it = scn::ranges::begin(source);
  152|  34.2k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  34.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  34.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  34.2k|            auto result = scn::scan<T>(
  155|  34.2k|                global_locale,
  156|  34.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  34.2k|                scn::runtime_format(f));
  158|  34.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.90k, False: 27.3k]
  ------------------
  159|  6.90k|                break;
  160|  6.90k|            }
  161|  27.3k|            it = result->begin();
  162|  27.3k|        }
  163|  6.90k|    }
  164|       |
  165|       |    // scan_value
  166|    690|    {
  167|    690|        auto it = scn::ranges::begin(source);
  168|  5.33k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  5.33k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  5.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  5.33k|            auto result = scn::scan_value<T>(
  171|  5.33k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  5.33k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 690, False: 4.64k]
  ------------------
  173|    690|                break;
  174|    690|            }
  175|  4.64k|            it = result->begin();
  176|  4.64k|        }
  177|    690|    }
  178|    690|}
_ZN3scn4fuzz21do_basic_run_for_typeIchKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|    690|{
  134|       |    // Regular scan
  135|  6.90k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.90k, False: 690]
  ------------------
  136|  6.90k|        auto it = scn::ranges::begin(source);
  137|  30.1k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  30.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  30.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  30.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  30.1k|            auto result = scn::scan<T>(
  140|  30.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  30.1k|                scn::runtime_format(f));
  142|  30.1k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.90k, False: 23.2k]
  ------------------
  143|  6.90k|                break;
  144|  6.90k|            }
  145|  23.2k|            it = result->begin();
  146|  23.2k|        }
  147|  6.90k|    }
  148|       |
  149|       |    // scan localized
  150|  6.90k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.90k, False: 690]
  ------------------
  151|  6.90k|        auto it = scn::ranges::begin(source);
  152|  30.1k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  30.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  30.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  30.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  30.1k|            auto result = scn::scan<T>(
  155|  30.1k|                global_locale,
  156|  30.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  30.1k|                scn::runtime_format(f));
  158|  30.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.90k, False: 23.2k]
  ------------------
  159|  6.90k|                break;
  160|  6.90k|            }
  161|  23.2k|            it = result->begin();
  162|  23.2k|        }
  163|  6.90k|    }
  164|       |
  165|       |    // scan_value
  166|    690|    {
  167|    690|        auto it = scn::ranges::begin(source);
  168|  4.44k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  4.44k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  4.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  4.44k|            auto result = scn::scan_value<T>(
  171|  4.44k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  4.44k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 690, False: 3.75k]
  ------------------
  173|    690|                break;
  174|    690|            }
  175|  3.75k|            it = result->begin();
  176|  3.75k|        }
  177|    690|    }
  178|    690|}
_ZN3scn4fuzz21do_basic_run_for_typeIciKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|    690|{
  134|       |    // Regular scan
  135|  6.90k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.90k, False: 690]
  ------------------
  136|  6.90k|        auto it = scn::ranges::begin(source);
  137|  39.8k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  39.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  39.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  39.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  39.8k|            auto result = scn::scan<T>(
  140|  39.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  39.8k|                scn::runtime_format(f));
  142|  39.8k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.90k, False: 32.9k]
  ------------------
  143|  6.90k|                break;
  144|  6.90k|            }
  145|  32.9k|            it = result->begin();
  146|  32.9k|        }
  147|  6.90k|    }
  148|       |
  149|       |    // scan localized
  150|  6.90k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.90k, False: 690]
  ------------------
  151|  6.90k|        auto it = scn::ranges::begin(source);
  152|  39.8k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  39.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  39.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  39.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  39.8k|            auto result = scn::scan<T>(
  155|  39.8k|                global_locale,
  156|  39.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  39.8k|                scn::runtime_format(f));
  158|  39.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.90k, False: 32.9k]
  ------------------
  159|  6.90k|                break;
  160|  6.90k|            }
  161|  32.9k|            it = result->begin();
  162|  32.9k|        }
  163|  6.90k|    }
  164|       |
  165|       |    // scan_value
  166|    690|    {
  167|    690|        auto it = scn::ranges::begin(source);
  168|  5.97k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  5.97k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  5.97k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.97k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  5.97k|            auto result = scn::scan_value<T>(
  171|  5.97k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  5.97k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 690, False: 5.28k]
  ------------------
  173|    690|                break;
  174|    690|            }
  175|  5.28k|            it = result->begin();
  176|  5.28k|        }
  177|    690|    }
  178|    690|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|    690|{
  134|       |    // Regular scan
  135|  6.90k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.90k, False: 690]
  ------------------
  136|  6.90k|        auto it = scn::ranges::begin(source);
  137|  32.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  32.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  32.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  32.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  32.7k|            auto result = scn::scan<T>(
  140|  32.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  32.7k|                scn::runtime_format(f));
  142|  32.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.90k, False: 25.8k]
  ------------------
  143|  6.90k|                break;
  144|  6.90k|            }
  145|  25.8k|            it = result->begin();
  146|  25.8k|        }
  147|  6.90k|    }
  148|       |
  149|       |    // scan localized
  150|  6.90k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.90k, False: 690]
  ------------------
  151|  6.90k|        auto it = scn::ranges::begin(source);
  152|  32.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  32.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  32.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  32.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  32.7k|            auto result = scn::scan<T>(
  155|  32.7k|                global_locale,
  156|  32.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  32.7k|                scn::runtime_format(f));
  158|  32.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.90k, False: 25.8k]
  ------------------
  159|  6.90k|                break;
  160|  6.90k|            }
  161|  25.8k|            it = result->begin();
  162|  25.8k|        }
  163|  6.90k|    }
  164|       |
  165|       |    // scan_value
  166|    690|    {
  167|    690|        auto it = scn::ranges::begin(source);
  168|  4.87k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  4.87k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  4.87k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.87k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  4.87k|            auto result = scn::scan_value<T>(
  171|  4.87k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  4.87k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 690, False: 4.18k]
  ------------------
  173|    690|                break;
  174|    690|            }
  175|  4.18k|            it = result->begin();
  176|  4.18k|        }
  177|    690|    }
  178|    690|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|    690|{
  134|       |    // Regular scan
  135|  6.90k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.90k, False: 690]
  ------------------
  136|  6.90k|        auto it = scn::ranges::begin(source);
  137|  40.5k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  40.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  40.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  40.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  40.5k|            auto result = scn::scan<T>(
  140|  40.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  40.5k|                scn::runtime_format(f));
  142|  40.5k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.90k, False: 33.6k]
  ------------------
  143|  6.90k|                break;
  144|  6.90k|            }
  145|  33.6k|            it = result->begin();
  146|  33.6k|        }
  147|  6.90k|    }
  148|       |
  149|       |    // scan localized
  150|  6.90k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.90k, False: 690]
  ------------------
  151|  6.90k|        auto it = scn::ranges::begin(source);
  152|  40.5k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  40.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  40.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  40.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  40.5k|            auto result = scn::scan<T>(
  155|  40.5k|                global_locale,
  156|  40.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  40.5k|                scn::runtime_format(f));
  158|  40.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.90k, False: 33.6k]
  ------------------
  159|  6.90k|                break;
  160|  6.90k|            }
  161|  33.6k|            it = result->begin();
  162|  33.6k|        }
  163|  6.90k|    }
  164|       |
  165|       |    // scan_value
  166|    690|    {
  167|    690|        auto it = scn::ranges::begin(source);
  168|  6.07k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  6.07k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  6.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  6.07k|            auto result = scn::scan_value<T>(
  171|  6.07k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  6.07k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 690, False: 5.38k]
  ------------------
  173|    690|                break;
  174|    690|            }
  175|  5.38k|            it = result->begin();
  176|  5.38k|        }
  177|    690|    }
  178|    690|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|    690|{
  134|       |    // Regular scan
  135|  6.90k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.90k, False: 690]
  ------------------
  136|  6.90k|        auto it = scn::ranges::begin(source);
  137|  33.0k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  33.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  33.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  33.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  33.0k|            auto result = scn::scan<T>(
  140|  33.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  33.0k|                scn::runtime_format(f));
  142|  33.0k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.90k, False: 26.1k]
  ------------------
  143|  6.90k|                break;
  144|  6.90k|            }
  145|  26.1k|            it = result->begin();
  146|  26.1k|        }
  147|  6.90k|    }
  148|       |
  149|       |    // scan localized
  150|  6.90k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.90k, False: 690]
  ------------------
  151|  6.90k|        auto it = scn::ranges::begin(source);
  152|  33.0k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  33.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  33.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  33.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  33.0k|            auto result = scn::scan<T>(
  155|  33.0k|                global_locale,
  156|  33.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  33.0k|                scn::runtime_format(f));
  158|  33.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.90k, False: 26.1k]
  ------------------
  159|  6.90k|                break;
  160|  6.90k|            }
  161|  26.1k|            it = result->begin();
  162|  26.1k|        }
  163|  6.90k|    }
  164|       |
  165|       |    // scan_value
  166|    690|    {
  167|    690|        auto it = scn::ranges::begin(source);
  168|  4.93k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  4.93k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  4.93k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  4.93k|            auto result = scn::scan_value<T>(
  171|  4.93k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  4.93k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 690, False: 4.24k]
  ------------------
  173|    690|                break;
  174|    690|            }
  175|  4.24k|            it = result->begin();
  176|  4.24k|        }
  177|    690|    }
  178|    690|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   90|    690|{
   91|    690|    using char_type = ranges::range_value_t<Source>;
   92|    690|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|    690|    deque.clear();
   94|    690|    std::copy(ranges::begin(source), ranges::end(source),
   95|    690|              std::back_inserter(deque));
   96|    690|    return deque;
   97|    690|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   79|    690|{
   80|    690|    if constexpr (std::is_same_v<CharT, char>) {
   81|    690|        return noncontiguous_buffer;
   82|       |    }
   83|       |    else {
   84|       |        return wnoncontiguous_buffer;
   85|       |    }
   86|    690|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    690|{
  123|    690|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    690|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    690|    buf.resize(sizeof...(Args));
  126|    690|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    690|    return buf;
  128|    690|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  108|    690|{
  109|       |    if constexpr (std::is_same_v<CharT, char>) {
  110|       |        return format_string_view_buffer;
  111|       |    }
  112|    690|    else {
  113|    690|        return wformat_string_view_buffer;
  114|    690|    }
  115|    690|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  1.38k|{
  186|  1.38k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  1.38k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  1.38k|                                   format_strings);
  189|  1.38k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.38k|{
  134|       |    // Regular scan
  135|  13.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.8k, False: 1.38k]
  ------------------
  136|  13.8k|        auto it = scn::ranges::begin(source);
  137|  14.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.7k|            auto result = scn::scan<T>(
  140|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.7k|                scn::runtime_format(f));
  142|  14.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.8k, False: 906]
  ------------------
  143|  13.8k|                break;
  144|  13.8k|            }
  145|    906|            it = result->begin();
  146|    906|        }
  147|  13.8k|    }
  148|       |
  149|       |    // scan localized
  150|  13.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.8k, False: 1.38k]
  ------------------
  151|  13.8k|        auto it = scn::ranges::begin(source);
  152|  14.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.7k|            auto result = scn::scan<T>(
  155|  14.7k|                global_locale,
  156|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.7k|                scn::runtime_format(f));
  158|  14.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.8k, False: 906]
  ------------------
  159|  13.8k|                break;
  160|  13.8k|            }
  161|    906|            it = result->begin();
  162|    906|        }
  163|  13.8k|    }
  164|       |
  165|       |    // scan_value
  166|  1.38k|    {
  167|  1.38k|        auto it = scn::ranges::begin(source);
  168|  1.41k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.41k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.41k|            auto result = scn::scan_value<T>(
  171|  1.41k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.41k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.38k, False: 34]
  ------------------
  173|  1.38k|                break;
  174|  1.38k|            }
  175|     34|            it = result->begin();
  176|     34|        }
  177|  1.38k|    }
  178|  1.38k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.38k|{
  134|       |    // Regular scan
  135|  13.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.8k, False: 1.38k]
  ------------------
  136|  13.8k|        auto it = scn::ranges::begin(source);
  137|  14.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.6k|            auto result = scn::scan<T>(
  140|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.6k|                scn::runtime_format(f));
  142|  14.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.8k, False: 872]
  ------------------
  143|  13.8k|                break;
  144|  13.8k|            }
  145|    872|            it = result->begin();
  146|    872|        }
  147|  13.8k|    }
  148|       |
  149|       |    // scan localized
  150|  13.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.8k, False: 1.38k]
  ------------------
  151|  13.8k|        auto it = scn::ranges::begin(source);
  152|  14.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.6k|            auto result = scn::scan<T>(
  155|  14.6k|                global_locale,
  156|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.6k|                scn::runtime_format(f));
  158|  14.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.8k, False: 872]
  ------------------
  159|  13.8k|                break;
  160|  13.8k|            }
  161|    872|            it = result->begin();
  162|    872|        }
  163|  13.8k|    }
  164|       |
  165|       |    // scan_value
  166|  1.38k|    {
  167|  1.38k|        auto it = scn::ranges::begin(source);
  168|  1.40k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.40k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.40k|            auto result = scn::scan_value<T>(
  171|  1.40k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.40k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.38k, False: 27]
  ------------------
  173|  1.38k|                break;
  174|  1.38k|            }
  175|     27|            it = result->begin();
  176|     27|        }
  177|  1.38k|    }
  178|  1.38k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.38k|{
  134|       |    // Regular scan
  135|  13.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.8k, False: 1.38k]
  ------------------
  136|  13.8k|        auto it = scn::ranges::begin(source);
  137|  14.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.7k|            auto result = scn::scan<T>(
  140|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.7k|                scn::runtime_format(f));
  142|  14.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.8k, False: 959]
  ------------------
  143|  13.8k|                break;
  144|  13.8k|            }
  145|    959|            it = result->begin();
  146|    959|        }
  147|  13.8k|    }
  148|       |
  149|       |    // scan localized
  150|  13.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.8k, False: 1.38k]
  ------------------
  151|  13.8k|        auto it = scn::ranges::begin(source);
  152|  14.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.7k|            auto result = scn::scan<T>(
  155|  14.7k|                global_locale,
  156|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.7k|                scn::runtime_format(f));
  158|  14.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.8k, False: 959]
  ------------------
  159|  13.8k|                break;
  160|  13.8k|            }
  161|    959|            it = result->begin();
  162|    959|        }
  163|  13.8k|    }
  164|       |
  165|       |    // scan_value
  166|  1.38k|    {
  167|  1.38k|        auto it = scn::ranges::begin(source);
  168|  1.42k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.42k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.42k|            auto result = scn::scan_value<T>(
  171|  1.42k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.42k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.38k, False: 44]
  ------------------
  173|  1.38k|                break;
  174|  1.38k|            }
  175|     44|            it = result->begin();
  176|     44|        }
  177|  1.38k|    }
  178|  1.38k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.38k|{
  134|       |    // Regular scan
  135|  13.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.8k, False: 1.38k]
  ------------------
  136|  13.8k|        auto it = scn::ranges::begin(source);
  137|  14.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.7k|            auto result = scn::scan<T>(
  140|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.7k|                scn::runtime_format(f));
  142|  14.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.8k, False: 901]
  ------------------
  143|  13.8k|                break;
  144|  13.8k|            }
  145|    901|            it = result->begin();
  146|    901|        }
  147|  13.8k|    }
  148|       |
  149|       |    // scan localized
  150|  13.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.8k, False: 1.38k]
  ------------------
  151|  13.8k|        auto it = scn::ranges::begin(source);
  152|  14.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.7k|            auto result = scn::scan<T>(
  155|  14.7k|                global_locale,
  156|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.7k|                scn::runtime_format(f));
  158|  14.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.8k, False: 901]
  ------------------
  159|  13.8k|                break;
  160|  13.8k|            }
  161|    901|            it = result->begin();
  162|    901|        }
  163|  13.8k|    }
  164|       |
  165|       |    // scan_value
  166|  1.38k|    {
  167|  1.38k|        auto it = scn::ranges::begin(source);
  168|  1.41k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.41k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.41k|            auto result = scn::scan_value<T>(
  171|  1.41k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.41k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.38k, False: 33]
  ------------------
  173|  1.38k|                break;
  174|  1.38k|            }
  175|     33|            it = result->begin();
  176|     33|        }
  177|  1.38k|    }
  178|  1.38k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.38k|{
  134|       |    // Regular scan
  135|  13.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.8k, False: 1.38k]
  ------------------
  136|  13.8k|        auto it = scn::ranges::begin(source);
  137|  14.8k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.8k|            auto result = scn::scan<T>(
  140|  14.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.8k|                scn::runtime_format(f));
  142|  14.8k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.8k, False: 1.01k]
  ------------------
  143|  13.8k|                break;
  144|  13.8k|            }
  145|  1.01k|            it = result->begin();
  146|  1.01k|        }
  147|  13.8k|    }
  148|       |
  149|       |    // scan localized
  150|  13.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.8k, False: 1.38k]
  ------------------
  151|  13.8k|        auto it = scn::ranges::begin(source);
  152|  14.8k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.8k|            auto result = scn::scan<T>(
  155|  14.8k|                global_locale,
  156|  14.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.8k|                scn::runtime_format(f));
  158|  14.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.8k, False: 1.01k]
  ------------------
  159|  13.8k|                break;
  160|  13.8k|            }
  161|  1.01k|            it = result->begin();
  162|  1.01k|        }
  163|  13.8k|    }
  164|       |
  165|       |    // scan_value
  166|  1.38k|    {
  167|  1.38k|        auto it = scn::ranges::begin(source);
  168|  1.43k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.43k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.43k|            auto result = scn::scan_value<T>(
  171|  1.43k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.43k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.38k, False: 55]
  ------------------
  173|  1.38k|                break;
  174|  1.38k|            }
  175|     55|            it = result->begin();
  176|     55|        }
  177|  1.38k|    }
  178|  1.38k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.38k|{
  134|       |    // Regular scan
  135|  13.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.8k, False: 1.38k]
  ------------------
  136|  13.8k|        auto it = scn::ranges::begin(source);
  137|  14.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.7k|            auto result = scn::scan<T>(
  140|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.7k|                scn::runtime_format(f));
  142|  14.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.8k, False: 942]
  ------------------
  143|  13.8k|                break;
  144|  13.8k|            }
  145|    942|            it = result->begin();
  146|    942|        }
  147|  13.8k|    }
  148|       |
  149|       |    // scan localized
  150|  13.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.8k, False: 1.38k]
  ------------------
  151|  13.8k|        auto it = scn::ranges::begin(source);
  152|  14.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.7k|            auto result = scn::scan<T>(
  155|  14.7k|                global_locale,
  156|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.7k|                scn::runtime_format(f));
  158|  14.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.8k, False: 942]
  ------------------
  159|  13.8k|                break;
  160|  13.8k|            }
  161|    942|            it = result->begin();
  162|    942|        }
  163|  13.8k|    }
  164|       |
  165|       |    // scan_value
  166|  1.38k|    {
  167|  1.38k|        auto it = scn::ranges::begin(source);
  168|  1.42k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.42k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.42k|            auto result = scn::scan_value<T>(
  171|  1.42k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.42k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.38k, False: 41]
  ------------------
  173|  1.38k|                break;
  174|  1.38k|            }
  175|     41|            it = result->begin();
  176|     41|        }
  177|  1.38k|    }
  178|  1.38k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.38k|{
  134|       |    // Regular scan
  135|  13.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.8k, False: 1.38k]
  ------------------
  136|  13.8k|        auto it = scn::ranges::begin(source);
  137|  14.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.7k|            auto result = scn::scan<T>(
  140|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.7k|                scn::runtime_format(f));
  142|  14.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.8k, False: 906]
  ------------------
  143|  13.8k|                break;
  144|  13.8k|            }
  145|    906|            it = result->begin();
  146|    906|        }
  147|  13.8k|    }
  148|       |
  149|       |    // scan localized
  150|  13.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.8k, False: 1.38k]
  ------------------
  151|  13.8k|        auto it = scn::ranges::begin(source);
  152|  14.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.7k|            auto result = scn::scan<T>(
  155|  14.7k|                global_locale,
  156|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.7k|                scn::runtime_format(f));
  158|  14.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.8k, False: 906]
  ------------------
  159|  13.8k|                break;
  160|  13.8k|            }
  161|    906|            it = result->begin();
  162|    906|        }
  163|  13.8k|    }
  164|       |
  165|       |    // scan_value
  166|  1.38k|    {
  167|  1.38k|        auto it = scn::ranges::begin(source);
  168|  1.41k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.41k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.41k|            auto result = scn::scan_value<T>(
  171|  1.41k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.41k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.38k, False: 34]
  ------------------
  173|  1.38k|                break;
  174|  1.38k|            }
  175|     34|            it = result->begin();
  176|     34|        }
  177|  1.38k|    }
  178|  1.38k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.38k|{
  134|       |    // Regular scan
  135|  13.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.8k, False: 1.38k]
  ------------------
  136|  13.8k|        auto it = scn::ranges::begin(source);
  137|  14.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.6k|            auto result = scn::scan<T>(
  140|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.6k|                scn::runtime_format(f));
  142|  14.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.8k, False: 872]
  ------------------
  143|  13.8k|                break;
  144|  13.8k|            }
  145|    872|            it = result->begin();
  146|    872|        }
  147|  13.8k|    }
  148|       |
  149|       |    // scan localized
  150|  13.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.8k, False: 1.38k]
  ------------------
  151|  13.8k|        auto it = scn::ranges::begin(source);
  152|  14.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.6k|            auto result = scn::scan<T>(
  155|  14.6k|                global_locale,
  156|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.6k|                scn::runtime_format(f));
  158|  14.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.8k, False: 872]
  ------------------
  159|  13.8k|                break;
  160|  13.8k|            }
  161|    872|            it = result->begin();
  162|    872|        }
  163|  13.8k|    }
  164|       |
  165|       |    // scan_value
  166|  1.38k|    {
  167|  1.38k|        auto it = scn::ranges::begin(source);
  168|  1.40k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.40k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.40k|            auto result = scn::scan_value<T>(
  171|  1.40k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.40k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.38k, False: 27]
  ------------------
  173|  1.38k|                break;
  174|  1.38k|            }
  175|     27|            it = result->begin();
  176|     27|        }
  177|  1.38k|    }
  178|  1.38k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.38k|{
  134|       |    // Regular scan
  135|  13.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.8k, False: 1.38k]
  ------------------
  136|  13.8k|        auto it = scn::ranges::begin(source);
  137|  14.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.7k|            auto result = scn::scan<T>(
  140|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.7k|                scn::runtime_format(f));
  142|  14.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.8k, False: 959]
  ------------------
  143|  13.8k|                break;
  144|  13.8k|            }
  145|    959|            it = result->begin();
  146|    959|        }
  147|  13.8k|    }
  148|       |
  149|       |    // scan localized
  150|  13.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.8k, False: 1.38k]
  ------------------
  151|  13.8k|        auto it = scn::ranges::begin(source);
  152|  14.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.7k|            auto result = scn::scan<T>(
  155|  14.7k|                global_locale,
  156|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.7k|                scn::runtime_format(f));
  158|  14.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.8k, False: 959]
  ------------------
  159|  13.8k|                break;
  160|  13.8k|            }
  161|    959|            it = result->begin();
  162|    959|        }
  163|  13.8k|    }
  164|       |
  165|       |    // scan_value
  166|  1.38k|    {
  167|  1.38k|        auto it = scn::ranges::begin(source);
  168|  1.42k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.42k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.42k|            auto result = scn::scan_value<T>(
  171|  1.42k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.42k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.38k, False: 44]
  ------------------
  173|  1.38k|                break;
  174|  1.38k|            }
  175|     44|            it = result->begin();
  176|     44|        }
  177|  1.38k|    }
  178|  1.38k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.38k|{
  134|       |    // Regular scan
  135|  13.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.8k, False: 1.38k]
  ------------------
  136|  13.8k|        auto it = scn::ranges::begin(source);
  137|  14.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.7k|            auto result = scn::scan<T>(
  140|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.7k|                scn::runtime_format(f));
  142|  14.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.8k, False: 901]
  ------------------
  143|  13.8k|                break;
  144|  13.8k|            }
  145|    901|            it = result->begin();
  146|    901|        }
  147|  13.8k|    }
  148|       |
  149|       |    // scan localized
  150|  13.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.8k, False: 1.38k]
  ------------------
  151|  13.8k|        auto it = scn::ranges::begin(source);
  152|  14.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.7k|            auto result = scn::scan<T>(
  155|  14.7k|                global_locale,
  156|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.7k|                scn::runtime_format(f));
  158|  14.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.8k, False: 901]
  ------------------
  159|  13.8k|                break;
  160|  13.8k|            }
  161|    901|            it = result->begin();
  162|    901|        }
  163|  13.8k|    }
  164|       |
  165|       |    // scan_value
  166|  1.38k|    {
  167|  1.38k|        auto it = scn::ranges::begin(source);
  168|  1.41k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.41k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.41k|            auto result = scn::scan_value<T>(
  171|  1.41k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.41k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.38k, False: 33]
  ------------------
  173|  1.38k|                break;
  174|  1.38k|            }
  175|     33|            it = result->begin();
  176|     33|        }
  177|  1.38k|    }
  178|  1.38k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.38k|{
  134|       |    // Regular scan
  135|  13.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.8k, False: 1.38k]
  ------------------
  136|  13.8k|        auto it = scn::ranges::begin(source);
  137|  14.8k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.8k|            auto result = scn::scan<T>(
  140|  14.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.8k|                scn::runtime_format(f));
  142|  14.8k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.8k, False: 1.01k]
  ------------------
  143|  13.8k|                break;
  144|  13.8k|            }
  145|  1.01k|            it = result->begin();
  146|  1.01k|        }
  147|  13.8k|    }
  148|       |
  149|       |    // scan localized
  150|  13.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.8k, False: 1.38k]
  ------------------
  151|  13.8k|        auto it = scn::ranges::begin(source);
  152|  14.8k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.8k|            auto result = scn::scan<T>(
  155|  14.8k|                global_locale,
  156|  14.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.8k|                scn::runtime_format(f));
  158|  14.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.8k, False: 1.01k]
  ------------------
  159|  13.8k|                break;
  160|  13.8k|            }
  161|  1.01k|            it = result->begin();
  162|  1.01k|        }
  163|  13.8k|    }
  164|       |
  165|       |    // scan_value
  166|  1.38k|    {
  167|  1.38k|        auto it = scn::ranges::begin(source);
  168|  1.43k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.43k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.43k|            auto result = scn::scan_value<T>(
  171|  1.43k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.43k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.38k, False: 55]
  ------------------
  173|  1.38k|                break;
  174|  1.38k|            }
  175|     55|            it = result->begin();
  176|     55|        }
  177|  1.38k|    }
  178|  1.38k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.38k|{
  134|       |    // Regular scan
  135|  13.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.8k, False: 1.38k]
  ------------------
  136|  13.8k|        auto it = scn::ranges::begin(source);
  137|  14.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.7k|            auto result = scn::scan<T>(
  140|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.7k|                scn::runtime_format(f));
  142|  14.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.8k, False: 942]
  ------------------
  143|  13.8k|                break;
  144|  13.8k|            }
  145|    942|            it = result->begin();
  146|    942|        }
  147|  13.8k|    }
  148|       |
  149|       |    // scan localized
  150|  13.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.8k, False: 1.38k]
  ------------------
  151|  13.8k|        auto it = scn::ranges::begin(source);
  152|  14.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.7k|            auto result = scn::scan<T>(
  155|  14.7k|                global_locale,
  156|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.7k|                scn::runtime_format(f));
  158|  14.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.8k, False: 942]
  ------------------
  159|  13.8k|                break;
  160|  13.8k|            }
  161|    942|            it = result->begin();
  162|    942|        }
  163|  13.8k|    }
  164|       |
  165|       |    // scan_value
  166|  1.38k|    {
  167|  1.38k|        auto it = scn::ranges::begin(source);
  168|  1.42k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.42k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.42k|            auto result = scn::scan_value<T>(
  171|  1.42k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.42k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.38k, False: 41]
  ------------------
  173|  1.38k|                break;
  174|  1.38k|            }
  175|     41|            it = result->begin();
  176|     41|        }
  177|  1.38k|    }
  178|  1.38k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   90|  1.38k|{
   91|  1.38k|    using char_type = ranges::range_value_t<Source>;
   92|  1.38k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  1.38k|    deque.clear();
   94|  1.38k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  1.38k|              std::back_inserter(deque));
   96|  1.38k|    return deque;
   97|  1.38k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   79|  1.38k|{
   80|       |    if constexpr (std::is_same_v<CharT, char>) {
   81|       |        return noncontiguous_buffer;
   82|       |    }
   83|  1.38k|    else {
   84|  1.38k|        return wnoncontiguous_buffer;
   85|  1.38k|    }
   86|  1.38k|}

LLVMFuzzerTestOneInput:
   59|    690|{
   60|    690|    scn::fuzz::run(data, size);
   61|    690|    return 0;
   62|    690|}
int_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|    690|{
   36|    690|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 0, False: 690]
  |  Branch (36:35): [True: 0, False: 690]
  ------------------
   37|      0|        return;
   38|      0|    }
   39|       |
   40|    690|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|    690|    const auto& f =
   43|    690|        get_format_strings<char>("{}", "{:i}", "{:d}", "{:L}", "{:x}", "{:b}",
   44|    690|                                 "{:o}", "{:B36}", "{:'}", "{:'L}");
   45|    690|    do_basic_run(sv, f);
   46|       |
   47|    690|    const auto& wf = get_format_strings<wchar_t>(
   48|    690|        L"{}", L"{:i}", L"{:d}", L"{:L}", L"{:x}", L"{:b}", L"{:o}", L"{:B36}",
   49|    690|        L"{:'}", L"{:'L}");
   50|    690|    do_basic_run(wsv_reinterpret, wf);
   51|    690|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (51:9): [True: 690, False: 0]
  ------------------
   52|    690|        do_basic_run(wsv_transcode, wf);
   53|    690|    }
   54|    690|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|    690|{
   25|    690|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|    690|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|    690|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|    690|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|    690|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|    690|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|    690|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|    690|{
   25|    690|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|    690|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|    690|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|    690|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|    690|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|    690|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|    690|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.38k|{
   25|  1.38k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  1.38k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  1.38k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  1.38k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  1.38k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  1.38k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  1.38k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.38k|{
   25|  1.38k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  1.38k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  1.38k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  1.38k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  1.38k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  1.38k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  1.38k|}

